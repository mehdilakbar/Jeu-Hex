
miniProjet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00080d18  0800eac0  0800eac0  0001eac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0808f7d8  0808f7d8  000a00b8  2**0
                  CONTENTS
  4 .ARM          00000008  0808f7d8  0808f7d8  0009f7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0808f7e0  0808f7e0  000a00b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0808f7e0  0808f7e0  0009f7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0808f7e4  0808f7e4  0009f7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0808f7e8  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004830  200000b8  0808f8a0  000a00b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200048e8  0808f8a0  000a48e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000a00b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000316cc  00000000  00000000  000a00e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c44  00000000  00000000  000d17b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025f8  00000000  00000000  000d73f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023a0  00000000  00000000  000d99f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000088fa  00000000  00000000  000dbd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c222  00000000  00000000  000e468a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118676  00000000  00000000  001108ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00228f22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa64  00000000  00000000  00228f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800eaa4 	.word	0x0800eaa4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	0800eaa4 	.word	0x0800eaa4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96e 	b.w	8000e7c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 8083 	bne.w	8000cce <__udivmoddi4+0x116>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d947      	bls.n	8000c5e <__udivmoddi4+0xa6>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b142      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd4:	f1c2 0020 	rsb	r0, r2, #32
 8000bd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4097      	lsls	r7, r2
 8000be0:	ea40 0c01 	orr.w	ip, r0, r1
 8000be4:	4094      	lsls	r4, r2
 8000be6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf0:	fa1f fe87 	uxth.w	lr, r7
 8000bf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x60>
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0a:	f080 8119 	bcs.w	8000e40 <__udivmoddi4+0x288>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 8116 	bls.w	8000e40 <__udivmoddi4+0x288>
 8000c14:	3e02      	subs	r6, #2
 8000c16:	443b      	add	r3, r7
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c20:	fb08 3310 	mls	r3, r8, r0, r3
 8000c24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x8c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	f080 8105 	bcs.w	8000e44 <__udivmoddi4+0x28c>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f240 8102 	bls.w	8000e44 <__udivmoddi4+0x28c>
 8000c40:	3802      	subs	r0, #2
 8000c42:	443c      	add	r4, r7
 8000c44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c48:	eba4 040e 	sub.w	r4, r4, lr
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	b11d      	cbz	r5, 8000c58 <__udivmoddi4+0xa0>
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	2300      	movs	r3, #0
 8000c54:	e9c5 4300 	strd	r4, r3, [r5]
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xaa>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d150      	bne.n	8000d0c <__udivmoddi4+0x154>
 8000c6a:	1bcb      	subs	r3, r1, r7
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f f887 	uxth.w	r8, r7
 8000c74:	2601      	movs	r6, #1
 8000c76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7a:	0c21      	lsrs	r1, r4, #16
 8000c7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb08 f30c 	mul.w	r3, r8, ip
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0xe4>
 8000c8c:	1879      	adds	r1, r7, r1
 8000c8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0xe2>
 8000c94:	428b      	cmp	r3, r1
 8000c96:	f200 80e9 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	1ac9      	subs	r1, r1, r3
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cac:	fb08 f800 	mul.w	r8, r8, r0
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x10c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x10a>
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	f200 80d9 	bhi.w	8000e74 <__udivmoddi4+0x2bc>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	eba4 0408 	sub.w	r4, r4, r8
 8000cc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ccc:	e7bf      	b.n	8000c4e <__udivmoddi4+0x96>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x12e>
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	f000 80b1 	beq.w	8000e3a <__udivmoddi4+0x282>
 8000cd8:	2600      	movs	r6, #0
 8000cda:	e9c5 0100 	strd	r0, r1, [r5]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f683 	clz	r6, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d14a      	bne.n	8000d84 <__udivmoddi4+0x1cc>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x140>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80b8 	bhi.w	8000e68 <__udivmoddi4+0x2b0>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	468c      	mov	ip, r1
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d0a8      	beq.n	8000c58 <__udivmoddi4+0xa0>
 8000d06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f603 	lsr.w	r6, r0, r3
 8000d14:	4097      	lsls	r7, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1e:	40d9      	lsrs	r1, r3
 8000d20:	4330      	orrs	r0, r6
 8000d22:	0c03      	lsrs	r3, r0, #16
 8000d24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d28:	fa1f f887 	uxth.w	r8, r7
 8000d2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb06 f108 	mul.w	r1, r6, r8
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x19c>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d46:	f080 808d 	bcs.w	8000e64 <__udivmoddi4+0x2ac>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 808a 	bls.w	8000e64 <__udivmoddi4+0x2ac>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	443b      	add	r3, r7
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	b281      	uxth	r1, r0
 8000d58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb00 f308 	mul.w	r3, r0, r8
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x1c4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d72:	d273      	bcs.n	8000e5c <__udivmoddi4+0x2a4>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d971      	bls.n	8000e5c <__udivmoddi4+0x2a4>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4439      	add	r1, r7
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d82:	e778      	b.n	8000c76 <__udivmoddi4+0xbe>
 8000d84:	f1c6 0c20 	rsb	ip, r6, #32
 8000d88:	fa03 f406 	lsl.w	r4, r3, r6
 8000d8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d90:	431c      	orrs	r4, r3
 8000d92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d96:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da2:	431f      	orrs	r7, r3
 8000da4:	0c3b      	lsrs	r3, r7, #16
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fa1f f884 	uxth.w	r8, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000db6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dba:	458a      	cmp	sl, r1
 8000dbc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x220>
 8000dc6:	1861      	adds	r1, r4, r1
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	d248      	bcs.n	8000e60 <__udivmoddi4+0x2a8>
 8000dce:	458a      	cmp	sl, r1
 8000dd0:	d946      	bls.n	8000e60 <__udivmoddi4+0x2a8>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4421      	add	r1, r4
 8000dd8:	eba1 010a 	sub.w	r1, r1, sl
 8000ddc:	b2bf      	uxth	r7, r7
 8000dde:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dea:	fb00 f808 	mul.w	r8, r0, r8
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x24a>
 8000df2:	19e7      	adds	r7, r4, r7
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d22e      	bcs.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d92c      	bls.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4427      	add	r7, r4
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	eba7 0708 	sub.w	r7, r7, r8
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	454f      	cmp	r7, r9
 8000e10:	46c6      	mov	lr, r8
 8000e12:	4649      	mov	r1, r9
 8000e14:	d31a      	bcc.n	8000e4c <__udivmoddi4+0x294>
 8000e16:	d017      	beq.n	8000e48 <__udivmoddi4+0x290>
 8000e18:	b15d      	cbz	r5, 8000e32 <__udivmoddi4+0x27a>
 8000e1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e26:	40f2      	lsrs	r2, r6
 8000e28:	ea4c 0202 	orr.w	r2, ip, r2
 8000e2c:	40f7      	lsrs	r7, r6
 8000e2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e32:	2600      	movs	r6, #0
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e70b      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e9      	b.n	8000c18 <__udivmoddi4+0x60>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6fd      	b.n	8000c44 <__udivmoddi4+0x8c>
 8000e48:	4543      	cmp	r3, r8
 8000e4a:	d2e5      	bcs.n	8000e18 <__udivmoddi4+0x260>
 8000e4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e50:	eb69 0104 	sbc.w	r1, r9, r4
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7df      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e7d2      	b.n	8000e02 <__udivmoddi4+0x24a>
 8000e5c:	4660      	mov	r0, ip
 8000e5e:	e78d      	b.n	8000d7c <__udivmoddi4+0x1c4>
 8000e60:	4681      	mov	r9, r0
 8000e62:	e7b9      	b.n	8000dd8 <__udivmoddi4+0x220>
 8000e64:	4666      	mov	r6, ip
 8000e66:	e775      	b.n	8000d54 <__udivmoddi4+0x19c>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e74a      	b.n	8000d02 <__udivmoddi4+0x14a>
 8000e6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e70:	4439      	add	r1, r7
 8000e72:	e713      	b.n	8000c9c <__udivmoddi4+0xe4>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	e724      	b.n	8000cc4 <__udivmoddi4+0x10c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000e8a:	20c8      	movs	r0, #200	; 0xc8
 8000e8c:	f002 f976 	bl	800317c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000e90:	f000 fa7a 	bl	8001388 <ft5336_I2C_InitializeIfRequired>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000ec8:	f000 fa5e 	bl	8001388 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e010      	b.n	8000ef4 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	21a8      	movs	r1, #168	; 0xa8
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 f931 	bl	8003140 <TS_IO_Read>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000ee2:	7b7b      	ldrb	r3, [r7, #13]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b51      	cmp	r3, #81	; 0x51
 8000ee8:	d101      	bne.n	8000eee <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d802      	bhi.n	8000f00 <ft5336_ReadID+0x4e>
 8000efa:	7bbb      	ldrb	r3, [r7, #14]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0e8      	beq.n	8000ed2 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000f00:	7b7b      	ldrb	r3, [r7, #13]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	b29b      	uxth	r3, r3
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fa44 	bl	80013a8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f932 	bl	800118c <ft5336_TS_DisableIT>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2102      	movs	r1, #2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 f8fb 	bl	8003140 <TS_IO_Read>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b05      	cmp	r3, #5
 8000f60:	d901      	bls.n	8000f66 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <ft5336_TS_DetectTouch+0x50>)
 8000f6c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <ft5336_TS_DetectTouch+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	b2db      	uxtb	r3, r3
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000d4 	.word	0x200000d4

08000f84 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000fa6:	4b6d      	ldr	r3, [pc, #436]	; (800115c <ft5336_TS_GetXY+0x1d8>)
 8000fa8:	789a      	ldrb	r2, [r3, #2]
 8000faa:	4b6c      	ldr	r3, [pc, #432]	; (800115c <ft5336_TS_GetXY+0x1d8>)
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	f080 80cf 	bcs.w	8001152 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000fb4:	4b69      	ldr	r3, [pc, #420]	; (800115c <ft5336_TS_GetXY+0x1d8>)
 8000fb6:	789b      	ldrb	r3, [r3, #2]
 8000fb8:	2b09      	cmp	r3, #9
 8000fba:	d871      	bhi.n	80010a0 <ft5336_TS_GetXY+0x11c>
 8000fbc:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <ft5336_TS_GetXY+0x40>)
 8000fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc2:	bf00      	nop
 8000fc4:	08000fed 	.word	0x08000fed
 8000fc8:	08000fff 	.word	0x08000fff
 8000fcc:	08001011 	.word	0x08001011
 8000fd0:	08001023 	.word	0x08001023
 8000fd4:	08001035 	.word	0x08001035
 8000fd8:	08001047 	.word	0x08001047
 8000fdc:	08001059 	.word	0x08001059
 8000fe0:	0800106b 	.word	0x0800106b
 8000fe4:	0800107d 	.word	0x0800107d
 8000fe8:	0800108f 	.word	0x0800108f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000fec:	2304      	movs	r3, #4
 8000fee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	753b      	strb	r3, [r7, #20]
      break;
 8000ffc:	e051      	b.n	80010a2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000ffe:	230a      	movs	r3, #10
 8001000:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001002:	2309      	movs	r3, #9
 8001004:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001006:	230c      	movs	r3, #12
 8001008:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800100a:	230b      	movs	r3, #11
 800100c:	753b      	strb	r3, [r7, #20]
      break;
 800100e:	e048      	b.n	80010a2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001010:	2310      	movs	r3, #16
 8001012:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001014:	230f      	movs	r3, #15
 8001016:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001018:	2312      	movs	r3, #18
 800101a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800101c:	2311      	movs	r3, #17
 800101e:	753b      	strb	r3, [r7, #20]
      break;
 8001020:	e03f      	b.n	80010a2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001022:	2316      	movs	r3, #22
 8001024:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001026:	2315      	movs	r3, #21
 8001028:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800102a:	2318      	movs	r3, #24
 800102c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800102e:	2317      	movs	r3, #23
 8001030:	753b      	strb	r3, [r7, #20]
      break;
 8001032:	e036      	b.n	80010a2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001034:	231c      	movs	r3, #28
 8001036:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001038:	231b      	movs	r3, #27
 800103a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800103c:	231e      	movs	r3, #30
 800103e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001040:	231d      	movs	r3, #29
 8001042:	753b      	strb	r3, [r7, #20]
      break;
 8001044:	e02d      	b.n	80010a2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001046:	2322      	movs	r3, #34	; 0x22
 8001048:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800104a:	2321      	movs	r3, #33	; 0x21
 800104c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800104e:	2324      	movs	r3, #36	; 0x24
 8001050:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001052:	2323      	movs	r3, #35	; 0x23
 8001054:	753b      	strb	r3, [r7, #20]
      break;
 8001056:	e024      	b.n	80010a2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001058:	2328      	movs	r3, #40	; 0x28
 800105a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800105c:	2327      	movs	r3, #39	; 0x27
 800105e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001060:	232a      	movs	r3, #42	; 0x2a
 8001062:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001064:	2329      	movs	r3, #41	; 0x29
 8001066:	753b      	strb	r3, [r7, #20]
      break;
 8001068:	e01b      	b.n	80010a2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800106a:	232e      	movs	r3, #46	; 0x2e
 800106c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800106e:	232d      	movs	r3, #45	; 0x2d
 8001070:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001072:	2330      	movs	r3, #48	; 0x30
 8001074:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001076:	232f      	movs	r3, #47	; 0x2f
 8001078:	753b      	strb	r3, [r7, #20]
      break;
 800107a:	e012      	b.n	80010a2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800107c:	2334      	movs	r3, #52	; 0x34
 800107e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001080:	2333      	movs	r3, #51	; 0x33
 8001082:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001084:	2336      	movs	r3, #54	; 0x36
 8001086:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001088:	2335      	movs	r3, #53	; 0x35
 800108a:	753b      	strb	r3, [r7, #20]
      break;
 800108c:	e009      	b.n	80010a2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800108e:	233a      	movs	r3, #58	; 0x3a
 8001090:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001092:	2339      	movs	r3, #57	; 0x39
 8001094:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001096:	233c      	movs	r3, #60	; 0x3c
 8001098:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800109a:	233b      	movs	r3, #59	; 0x3b
 800109c:	753b      	strb	r3, [r7, #20]
      break;
 800109e:	e000      	b.n	80010a2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80010a0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	7dfa      	ldrb	r2, [r7, #23]
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 f848 	bl	8003140 <TS_IO_Read>
 80010b0:	4603      	mov	r3, r0
 80010b2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80010b4:	7cfb      	ldrb	r3, [r7, #19]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b29      	ldr	r3, [pc, #164]	; (8001160 <ft5336_TS_GetXY+0x1dc>)
 80010bc:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	7dba      	ldrb	r2, [r7, #22]
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 f83a 	bl	8003140 <TS_IO_Read>
 80010cc:	4603      	mov	r3, r0
 80010ce:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80010d0:	7cfb      	ldrb	r3, [r7, #19]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80010da:	b21a      	sxth	r2, r3
 80010dc:	4b20      	ldr	r3, [pc, #128]	; (8001160 <ft5336_TS_GetXY+0x1dc>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <ft5336_TS_GetXY+0x1dc>)
 80010ea:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <ft5336_TS_GetXY+0x1dc>)
 80010ee:	881a      	ldrh	r2, [r3, #0]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80010f4:	89fb      	ldrh	r3, [r7, #14]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	7d7a      	ldrb	r2, [r7, #21]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 f81f 	bl	8003140 <TS_IO_Read>
 8001102:	4603      	mov	r3, r0
 8001104:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001106:	7cfb      	ldrb	r3, [r7, #19]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <ft5336_TS_GetXY+0x1dc>)
 800110e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001110:	89fb      	ldrh	r3, [r7, #14]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	7d3a      	ldrb	r2, [r7, #20]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f002 f811 	bl	8003140 <TS_IO_Read>
 800111e:	4603      	mov	r3, r0
 8001120:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001122:	7cfb      	ldrb	r3, [r7, #19]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800112c:	b21a      	sxth	r2, r3
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <ft5336_TS_GetXY+0x1dc>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21b      	sxth	r3, r3
 8001138:	b29a      	uxth	r2, r3
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <ft5336_TS_GetXY+0x1dc>)
 800113c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <ft5336_TS_GetXY+0x1dc>)
 8001140:	881a      	ldrh	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <ft5336_TS_GetXY+0x1d8>)
 8001148:	789b      	ldrb	r3, [r3, #2]
 800114a:	3301      	adds	r3, #1
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b03      	ldr	r3, [pc, #12]	; (800115c <ft5336_TS_GetXY+0x1d8>)
 8001150:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000d4 	.word	0x200000d4
 8001160:	200000d8 	.word	0x200000d8

08001164 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	21a4      	movs	r1, #164	; 0xa4
 800117e:	4618      	mov	r0, r3
 8001180:	f001 ffc4 	bl	800310c <TS_IO_Write>
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	21a4      	movs	r1, #164	; 0xa4
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 ffb0 	bl	800310c <TS_IO_Write>
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	6039      	str	r1, [r7, #0]
 80011ec:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 ffa1 	bl	8003140 <TS_IO_Read>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	601a      	str	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	4603      	mov	r3, r0
 8001222:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001234:	4b4d      	ldr	r3, [pc, #308]	; (800136c <ft5336_TS_GetTouchInfo+0x158>)
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	461a      	mov	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	4293      	cmp	r3, r2
 800123e:	f080 8090 	bcs.w	8001362 <ft5336_TS_GetTouchInfo+0x14e>
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	2b09      	cmp	r3, #9
 8001246:	d85d      	bhi.n	8001304 <ft5336_TS_GetTouchInfo+0xf0>
 8001248:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <ft5336_TS_GetTouchInfo+0x3c>)
 800124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124e:	bf00      	nop
 8001250:	08001279 	.word	0x08001279
 8001254:	08001287 	.word	0x08001287
 8001258:	08001295 	.word	0x08001295
 800125c:	080012a3 	.word	0x080012a3
 8001260:	080012b1 	.word	0x080012b1
 8001264:	080012bf 	.word	0x080012bf
 8001268:	080012cd 	.word	0x080012cd
 800126c:	080012db 	.word	0x080012db
 8001270:	080012e9 	.word	0x080012e9
 8001274:	080012f7 	.word	0x080012f7
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001278:	2303      	movs	r3, #3
 800127a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 800127c:	2307      	movs	r3, #7
 800127e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8001280:	2308      	movs	r3, #8
 8001282:	757b      	strb	r3, [r7, #21]
      break;
 8001284:	e03f      	b.n	8001306 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001286:	2309      	movs	r3, #9
 8001288:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 800128a:	230d      	movs	r3, #13
 800128c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800128e:	230e      	movs	r3, #14
 8001290:	757b      	strb	r3, [r7, #21]
      break;
 8001292:	e038      	b.n	8001306 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001294:	230f      	movs	r3, #15
 8001296:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001298:	2313      	movs	r3, #19
 800129a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800129c:	2314      	movs	r3, #20
 800129e:	757b      	strb	r3, [r7, #21]
      break;
 80012a0:	e031      	b.n	8001306 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80012a2:	2315      	movs	r3, #21
 80012a4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80012a6:	2319      	movs	r3, #25
 80012a8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80012aa:	231a      	movs	r3, #26
 80012ac:	757b      	strb	r3, [r7, #21]
      break;
 80012ae:	e02a      	b.n	8001306 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80012b0:	231b      	movs	r3, #27
 80012b2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80012b4:	231f      	movs	r3, #31
 80012b6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80012b8:	2320      	movs	r3, #32
 80012ba:	757b      	strb	r3, [r7, #21]
      break;
 80012bc:	e023      	b.n	8001306 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80012be:	2321      	movs	r3, #33	; 0x21
 80012c0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80012c2:	2325      	movs	r3, #37	; 0x25
 80012c4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80012c6:	2326      	movs	r3, #38	; 0x26
 80012c8:	757b      	strb	r3, [r7, #21]
      break;
 80012ca:	e01c      	b.n	8001306 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80012cc:	2327      	movs	r3, #39	; 0x27
 80012ce:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80012d0:	232b      	movs	r3, #43	; 0x2b
 80012d2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80012d4:	232c      	movs	r3, #44	; 0x2c
 80012d6:	757b      	strb	r3, [r7, #21]
      break;
 80012d8:	e015      	b.n	8001306 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80012da:	232d      	movs	r3, #45	; 0x2d
 80012dc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80012de:	2331      	movs	r3, #49	; 0x31
 80012e0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80012e2:	2332      	movs	r3, #50	; 0x32
 80012e4:	757b      	strb	r3, [r7, #21]
      break;
 80012e6:	e00e      	b.n	8001306 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80012e8:	2333      	movs	r3, #51	; 0x33
 80012ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80012ec:	2337      	movs	r3, #55	; 0x37
 80012ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80012f0:	2338      	movs	r3, #56	; 0x38
 80012f2:	757b      	strb	r3, [r7, #21]
      break;
 80012f4:	e007      	b.n	8001306 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80012f6:	2339      	movs	r3, #57	; 0x39
 80012f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80012fa:	233d      	movs	r3, #61	; 0x3d
 80012fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80012fe:	233e      	movs	r3, #62	; 0x3e
 8001300:	757b      	strb	r3, [r7, #21]
      break;
 8001302:	e000      	b.n	8001306 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001304:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001306:	89fb      	ldrh	r3, [r7, #14]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	7dfa      	ldrb	r2, [r7, #23]
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f001 ff16 	bl	8003140 <TS_IO_Read>
 8001314:	4603      	mov	r3, r0
 8001316:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001318:	7d3b      	ldrb	r3, [r7, #20]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	119b      	asrs	r3, r3, #6
 800131e:	f003 0203 	and.w	r2, r3, #3
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	7dba      	ldrb	r2, [r7, #22]
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f001 ff06 	bl	8003140 <TS_IO_Read>
 8001334:	4603      	mov	r3, r0
 8001336:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001338:	7d3b      	ldrb	r3, [r7, #20]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	7d7a      	ldrb	r2, [r7, #21]
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f001 fef8 	bl	8003140 <TS_IO_Read>
 8001350:	4603      	mov	r3, r0
 8001352:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001354:	7d3b      	ldrb	r3, [r7, #20]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	111b      	asrs	r3, r3, #4
 800135a:	f003 0204 	and.w	r2, r3, #4
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200000d4 	.word	0x200000d4

08001370 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001376:	781b      	ldrb	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200000d4 	.word	0x200000d4

08001388 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800138c:	f7ff fff0 	bl	8001370 <ft5336_Get_I2C_InitializedStatus>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d104      	bne.n	80013a0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001396:	f001 feaf 	bl	80030f8 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800139a:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
  }
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200000d4 	.word	0x200000d4

080013a8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <main>:
int compteurJoueurs=0;
Point fillPoly[6];
pPoint pfill=&fillPoly;
int pause=0;
int TSold=0;
int main(void) {
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
 80013ca:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	char text[50] = { };
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 80013d2:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80013d6:	222e      	movs	r2, #46	; 0x2e
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f00b ff82 	bl	800d2e4 <memset>
	static TS_StateTypeDef TS_State;
	uint32_t potl, potr, joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80013e0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013fa:	f004 fb26 	bl	8005a4a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013fe:	f000 fc0b 	bl	8001c18 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001402:	f001 fa33 	bl	800286c <MX_GPIO_Init>
	MX_ADC3_Init();
 8001406:	f000 fccb 	bl	8001da0 <MX_ADC3_Init>
	MX_DMA2D_Init();
 800140a:	f000 fd4f 	bl	8001eac <MX_DMA2D_Init>
	MX_FMC_Init();
 800140e:	f001 f9dd 	bl	80027cc <MX_FMC_Init>
	MX_I2C1_Init();
 8001412:	f000 fd7d 	bl	8001f10 <MX_I2C1_Init>
	MX_I2C3_Init();
 8001416:	f000 fdbb 	bl	8001f90 <MX_I2C3_Init>
	MX_LTDC_Init();
 800141a:	f000 fdf9 	bl	8002010 <MX_LTDC_Init>
	MX_RTC_Init();
 800141e:	f000 fe79 	bl	8002114 <MX_RTC_Init>
	MX_SPI2_Init();
 8001422:	f000 ff1d 	bl	8002260 <MX_SPI2_Init>
	MX_TIM1_Init();
 8001426:	f000 ff59 	bl	80022dc <MX_TIM1_Init>
	MX_TIM2_Init();
 800142a:	f000 ffab 	bl	8002384 <MX_TIM2_Init>
	MX_TIM3_Init();
 800142e:	f000 fff7 	bl	8002420 <MX_TIM3_Init>
	MX_TIM5_Init();
 8001432:	f001 f843 	bl	80024bc <MX_TIM5_Init>
	MX_TIM8_Init();
 8001436:	f001 f8c7 	bl	80025c8 <MX_TIM8_Init>
	MX_USART1_UART_Init();
 800143a:	f001 f949 	bl	80026d0 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 800143e:	f001 f977 	bl	8002730 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001442:	f000 fc5b 	bl	8001cfc <MX_ADC1_Init>
	MX_DAC_Init();
 8001446:	f000 fcfd 	bl	8001e44 <MX_DAC_Init>
	MX_DMA_Init();
 800144a:	f001 f9a1 	bl	8002790 <MX_DMA_Init>
	MX_UART7_Init();
 800144e:	f001 f90f 	bl	8002670 <MX_UART7_Init>
	MX_TIM7_Init();
 8001452:	f001 f881 	bl	8002558 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8001456:	f001 fe9d 	bl	8003194 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800145a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800145e:	2000      	movs	r0, #0
 8001460:	f001 ff30 	bl	80032c4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
	LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8001464:	f001 ff06 	bl	8003274 <BSP_LCD_GetXSize>
 8001468:	4604      	mov	r4, r0
 800146a:	f001 ff17 	bl	800329c <BSP_LCD_GetYSize>
 800146e:	4603      	mov	r3, r0
 8001470:	fb03 f304 	mul.w	r3, r3, r4
 8001474:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4619      	mov	r1, r3
 800147c:	2001      	movs	r0, #1
 800147e:	f001 ff21 	bl	80032c4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8001482:	f002 fc37 	bl	8003cf4 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(0);
 8001486:	2000      	movs	r0, #0
 8001488:	f001 ff7c 	bl	8003384 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_RED);
 800148c:	4872      	ldr	r0, [pc, #456]	; (8001658 <main+0x294>)
 800148e:	f002 f83b 	bl	8003508 <BSP_LCD_Clear>
    BSP_LCD_DrawBitmap(0,0,(uint8_t*)fondHexbmp_bmp);
 8001492:	4a72      	ldr	r2, [pc, #456]	; (800165c <main+0x298>)
 8001494:	2100      	movs	r1, #0
 8001496:	2000      	movs	r0, #0
 8001498:	f002 fa96 	bl	80039c8 <BSP_LCD_DrawBitmap>
    BSP_LCD_SelectLayer(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f001 ff71 	bl	8003384 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(00);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f002 f830 	bl	8003508 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 80014a8:	486d      	ldr	r0, [pc, #436]	; (8001660 <main+0x29c>)
 80014aa:	f001 fffd 	bl	80034a8 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80014ae:	486a      	ldr	r0, [pc, #424]	; (8001658 <main+0x294>)
 80014b0:	f001 ffc8 	bl	8003444 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(00);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f001 ffdd 	bl	8003474 <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80014ba:	f001 fedb 	bl	8003274 <BSP_LCD_GetXSize>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29c      	uxth	r4, r3
 80014c2:	f001 feeb 	bl	800329c <BSP_LCD_GetYSize>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4619      	mov	r1, r3
 80014cc:	4620      	mov	r0, r4
 80014ce:	f003 f8e3 	bl	8004698 <BSP_TS_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80014d2:	4b64      	ldr	r3, [pc, #400]	; (8001664 <main+0x2a0>)
 80014d4:	f507 7443 	add.w	r4, r7, #780	; 0x30c
 80014d8:	461d      	mov	r5, r3
 80014da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014e6:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00a fe07 	bl	800c100 <osThreadCreate>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a5c      	ldr	r2, [pc, #368]	; (8001668 <main+0x2a4>)
 80014f6:	6013      	str	r3, [r2, #0]

	/* definition and creation of tacheJeu */
	osThreadDef(tacheJeu, codeTacheJeu, osPriorityNormal, 0, 1028);
 80014f8:	4b5c      	ldr	r3, [pc, #368]	; (800166c <main+0x2a8>)
 80014fa:	f507 743c 	add.w	r4, r7, #752	; 0x2f0
 80014fe:	461d      	mov	r5, r3
 8001500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001504:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	tacheJeuHandle = osThreadCreate(osThread(tacheJeu), NULL);
 800150c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f00a fdf4 	bl	800c100 <osThreadCreate>
 8001518:	4603      	mov	r3, r0
 800151a:	4a55      	ldr	r2, [pc, #340]	; (8001670 <main+0x2ac>)
 800151c:	6013      	str	r3, [r2, #0]

	/* definition and creation of tacheSon */
	osThreadDef(tacheSon, codeTacheSon, osPriorityNormal, 0, 2056);
 800151e:	4b55      	ldr	r3, [pc, #340]	; (8001674 <main+0x2b0>)
 8001520:	f507 7435 	add.w	r4, r7, #724	; 0x2d4
 8001524:	461d      	mov	r5, r3
 8001526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800152e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	tacheSonHandle = osThreadCreate(osThread(tacheSon), NULL);
 8001532:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f00a fde1 	bl	800c100 <osThreadCreate>
 800153e:	4603      	mov	r3, r0
 8001540:	4a4d      	ldr	r2, [pc, #308]	; (8001678 <main+0x2b4>)
 8001542:	6013      	str	r3, [r2, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int bp1, bp2, bp1_old, bp2_old,i;


	const uint16_t sinus12bit[360] = { 512, 521, 530, 539, 548, 557, 566, 574,
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4a4d      	ldr	r2, [pc, #308]	; (800167c <main+0x2b8>)
 8001548:	4618      	mov	r0, r3
 800154a:	4611      	mov	r1, r2
 800154c:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8001550:	461a      	mov	r2, r3
 8001552:	f00b feb9 	bl	800d2c8 <memcpy>
			204, 211, 218, 226, 233, 241, 248, 256, 264, 272, 279, 287, 295,
			304, 312, 320, 328, 337, 345, 354, 362, 371, 379, 388, 397, 405,
			414, 423, 432, 441, 449, 458, 467, 476, 485, 494, 503 };


	fillTabPositions(238,37,compteurTab);
 8001556:	4b4a      	ldr	r3, [pc, #296]	; (8001680 <main+0x2bc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	2125      	movs	r1, #37	; 0x25
 800155e:	20ee      	movs	r0, #238	; 0xee
 8001560:	f000 f9be 	bl	80018e0 <fillTabPositions>
	compteurTab++;
 8001564:	4b46      	ldr	r3, [pc, #280]	; (8001680 <main+0x2bc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	4a45      	ldr	r2, [pc, #276]	; (8001680 <main+0x2bc>)
 800156c:	6013      	str	r3, [r2, #0]
	fillTabPositions(238,70,compteurTab);
 800156e:	4b44      	ldr	r3, [pc, #272]	; (8001680 <main+0x2bc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	2146      	movs	r1, #70	; 0x46
 8001576:	20ee      	movs	r0, #238	; 0xee
 8001578:	f000 f9b2 	bl	80018e0 <fillTabPositions>
	compteurTab++;
 800157c:	4b40      	ldr	r3, [pc, #256]	; (8001680 <main+0x2bc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	4a3f      	ldr	r2, [pc, #252]	; (8001680 <main+0x2bc>)
 8001584:	6013      	str	r3, [r2, #0]

			fillTabPositions(238,103,compteurTab);
 8001586:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <main+0x2bc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	2167      	movs	r1, #103	; 0x67
 800158e:	20ee      	movs	r0, #238	; 0xee
 8001590:	f000 f9a6 	bl	80018e0 <fillTabPositions>
			compteurTab++;
 8001594:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <main+0x2bc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	4a39      	ldr	r2, [pc, #228]	; (8001680 <main+0x2bc>)
 800159c:	6013      	str	r3, [r2, #0]
			fillTabPositions(238,136,compteurTab);
 800159e:	4b38      	ldr	r3, [pc, #224]	; (8001680 <main+0x2bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	2188      	movs	r1, #136	; 0x88
 80015a6:	20ee      	movs	r0, #238	; 0xee
 80015a8:	f000 f99a 	bl	80018e0 <fillTabPositions>
			compteurTab++;
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <main+0x2bc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	4a33      	ldr	r2, [pc, #204]	; (8001680 <main+0x2bc>)
 80015b4:	6013      	str	r3, [r2, #0]
			fillTabPositions(238,169,compteurTab);
 80015b6:	4b32      	ldr	r3, [pc, #200]	; (8001680 <main+0x2bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	21a9      	movs	r1, #169	; 0xa9
 80015be:	20ee      	movs	r0, #238	; 0xee
 80015c0:	f000 f98e 	bl	80018e0 <fillTabPositions>
			compteurTab++;
 80015c4:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <main+0x2bc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	4a2d      	ldr	r2, [pc, #180]	; (8001680 <main+0x2bc>)
 80015cc:	6013      	str	r3, [r2, #0]
			fillTabPositions(238,202,compteurTab);
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <main+0x2bc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	21ca      	movs	r1, #202	; 0xca
 80015d6:	20ee      	movs	r0, #238	; 0xee
 80015d8:	f000 f982 	bl	80018e0 <fillTabPositions>
			compteurTab++;
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <main+0x2bc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	4a27      	ldr	r2, [pc, #156]	; (8001680 <main+0x2bc>)
 80015e4:	6013      	str	r3, [r2, #0]
			fillTabPositions(238,235,compteurTab);
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <main+0x2bc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	21eb      	movs	r1, #235	; 0xeb
 80015ee:	20ee      	movs	r0, #238	; 0xee
 80015f0:	f000 f976 	bl	80018e0 <fillTabPositions>
			compteurTab++;
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <main+0x2bc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	4a21      	ldr	r2, [pc, #132]	; (8001680 <main+0x2bc>)
 80015fc:	6013      	str	r3, [r2, #0]


			fillTabPositions(210,218,2);
 80015fe:	2202      	movs	r2, #2
 8001600:	21da      	movs	r1, #218	; 0xda
 8001602:	20d2      	movs	r0, #210	; 0xd2
 8001604:	f000 f96c 	bl	80018e0 <fillTabPositions>
			for (i=0;i<6;i++) {
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800160e:	e01b      	b.n	8001648 <main+0x284>
				fillTabPositions(295,37+33*i,2);
 8001610:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8001614:	4613      	mov	r3, r2
 8001616:	015b      	lsls	r3, r3, #5
 8001618:	4413      	add	r3, r2
 800161a:	3325      	adds	r3, #37	; 0x25
 800161c:	2202      	movs	r2, #2
 800161e:	4619      	mov	r1, r3
 8001620:	f240 1027 	movw	r0, #295	; 0x127
 8001624:	f000 f95c 	bl	80018e0 <fillTabPositions>
				fillTabPositions(181,37+33*i,2);
 8001628:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 800162c:	4613      	mov	r3, r2
 800162e:	015b      	lsls	r3, r3, #5
 8001630:	4413      	add	r3, r2
 8001632:	3325      	adds	r3, #37	; 0x25
 8001634:	2202      	movs	r2, #2
 8001636:	4619      	mov	r1, r3
 8001638:	20b5      	movs	r0, #181	; 0xb5
 800163a:	f000 f951 	bl	80018e0 <fillTabPositions>
			for (i=0;i<6;i++) {
 800163e:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8001642:	3301      	adds	r3, #1
 8001644:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8001648:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800164c:	2b05      	cmp	r3, #5
 800164e:	dddf      	ble.n	8001610 <main+0x24c>
			}
			for (i=0;i<4;i++) {
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8001656:	e03d      	b.n	80016d4 <main+0x310>
 8001658:	ffff0000 	.word	0xffff0000
 800165c:	0800ee24 	.word	0x0800ee24
 8001660:	20000034 	.word	0x20000034
 8001664:	0800eaf0 	.word	0x0800eaf0
 8001668:	20004054 	.word	0x20004054
 800166c:	0800eb0c 	.word	0x0800eb0c
 8001670:	20004108 	.word	0x20004108
 8001674:	0800eb28 	.word	0x0800eb28
 8001678:	2000446c 	.word	0x2000446c
 800167c:	0800eb44 	.word	0x0800eb44
 8001680:	200000dc 	.word	0x200000dc
						fillTabPositions(352,70+33*i,compteurTab);
 8001684:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8001688:	4613      	mov	r3, r2
 800168a:	015b      	lsls	r3, r3, #5
 800168c:	4413      	add	r3, r2
 800168e:	3346      	adds	r3, #70	; 0x46
 8001690:	4a86      	ldr	r2, [pc, #536]	; (80018ac <main+0x4e8>)
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 70b0 	mov.w	r0, #352	; 0x160
 800169a:	f000 f921 	bl	80018e0 <fillTabPositions>
						compteurTab++;
 800169e:	4b83      	ldr	r3, [pc, #524]	; (80018ac <main+0x4e8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	4a81      	ldr	r2, [pc, #516]	; (80018ac <main+0x4e8>)
 80016a6:	6013      	str	r3, [r2, #0]
						fillTabPositions(124,70+33*i,compteurTab);
 80016a8:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 80016ac:	4613      	mov	r3, r2
 80016ae:	015b      	lsls	r3, r3, #5
 80016b0:	4413      	add	r3, r2
 80016b2:	3346      	adds	r3, #70	; 0x46
 80016b4:	4a7d      	ldr	r2, [pc, #500]	; (80018ac <main+0x4e8>)
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	207c      	movs	r0, #124	; 0x7c
 80016bc:	f000 f910 	bl	80018e0 <fillTabPositions>
						compteurTab++;
 80016c0:	4b7a      	ldr	r3, [pc, #488]	; (80018ac <main+0x4e8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a79      	ldr	r2, [pc, #484]	; (80018ac <main+0x4e8>)
 80016c8:	6013      	str	r3, [r2, #0]
			for (i=0;i<4;i++) {
 80016ca:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80016ce:	3301      	adds	r3, #1
 80016d0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 80016d4:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80016d8:	2b03      	cmp	r3, #3
 80016da:	ddd3      	ble.n	8001684 <main+0x2c0>
					}
			fillTabPositions(409,136,compteurTab);
 80016dc:	4b73      	ldr	r3, [pc, #460]	; (80018ac <main+0x4e8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	2188      	movs	r1, #136	; 0x88
 80016e4:	f240 1099 	movw	r0, #409	; 0x199
 80016e8:	f000 f8fa 	bl	80018e0 <fillTabPositions>
			compteurTab++;
 80016ec:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <main+0x4e8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	3301      	adds	r3, #1
 80016f2:	4a6e      	ldr	r2, [pc, #440]	; (80018ac <main+0x4e8>)
 80016f4:	6013      	str	r3, [r2, #0]
			fillTabPositions(67,136,compteurTab);
 80016f6:	4b6d      	ldr	r3, [pc, #436]	; (80018ac <main+0x4e8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	2188      	movs	r1, #136	; 0x88
 80016fe:	2043      	movs	r0, #67	; 0x43
 8001700:	f000 f8ee 	bl	80018e0 <fillTabPositions>
			compteurTab++;
 8001704:	4b69      	ldr	r3, [pc, #420]	; (80018ac <main+0x4e8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	4a68      	ldr	r2, [pc, #416]	; (80018ac <main+0x4e8>)
 800170c:	6013      	str	r3, [r2, #0]
			sprintf(text,"valeur : %d", listePoints[9].X);
 800170e:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <main+0x4ec>)
 8001710:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001714:	461a      	mov	r2, r3
 8001716:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800171a:	4966      	ldr	r1, [pc, #408]	; (80018b4 <main+0x4f0>)
 800171c:	4618      	mov	r0, r3
 800171e:	f00b fe53 	bl	800d3c8 <siprintf>
			BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8001722:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001726:	4619      	mov	r1, r3
 8001728:	2005      	movs	r0, #5
 800172a:	f002 f821 	bl	8003770 <BSP_LCD_DisplayStringAtLine>


	while (1) {
		/*sprintf(text,"valeur : %d", j);
		BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);*/
		bp1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 800172e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001732:	4861      	ldr	r0, [pc, #388]	; (80018b8 <main+0x4f4>)
 8001734:	f006 fa1e 	bl	8007b74 <HAL_GPIO_ReadPin>
 8001738:	4603      	mov	r3, r0
 800173a:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		bp2 = HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin);
 800173e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001742:	485d      	ldr	r0, [pc, #372]	; (80018b8 <main+0x4f4>)
 8001744:	f006 fa16 	bl	8007b74 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
		if (!bp1 && bp1_old) {
 800174e:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8001752:	2b00      	cmp	r3, #0
 8001754:	d11c      	bne.n	8001790 <main+0x3cc>
 8001756:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 800175a:	2b00      	cmp	r3, #0
 800175c:	d018      	beq.n	8001790 <main+0x3cc>
			/*##-2- Enable DAC selected channel and associated DMA */
			if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sinus12bit,
 800175e:	1d3a      	adds	r2, r7, #4
 8001760:	2300      	movs	r3, #0
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001768:	2100      	movs	r1, #0
 800176a:	4854      	ldr	r0, [pc, #336]	; (80018bc <main+0x4f8>)
 800176c:	f004 fda6 	bl	80062bc <HAL_DAC_Start_DMA>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <main+0x3b6>
					360, DAC_ALIGN_12B_R) != HAL_OK) {
				/* Start DMA Error */
				Error_Handler();
 8001776:	f001 fb63 	bl	8002e40 <Error_Handler>
			}
			htim7.Init.Period = 100;
 800177a:	4b51      	ldr	r3, [pc, #324]	; (80018c0 <main+0x4fc>)
 800177c:	2264      	movs	r2, #100	; 0x64
 800177e:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8001780:	484f      	ldr	r0, [pc, #316]	; (80018c0 <main+0x4fc>)
 8001782:	f009 fa21 	bl	800abc8 <HAL_TIM_Base_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <main+0x3cc>
				Error_Handler();
 800178c:	f001 fb58 	bl	8002e40 <Error_Handler>
			}
		}
		if (!bp2 && bp2_old) {
 8001790:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d11c      	bne.n	80017d2 <main+0x40e>
 8001798:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800179c:	2b00      	cmp	r3, #0
 800179e:	d018      	beq.n	80017d2 <main+0x40e>
			/*##-2- Enable DAC selected channel and associated DMA */
			if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sinus12bit,
 80017a0:	1d3a      	adds	r2, r7, #4
 80017a2:	2300      	movs	r3, #0
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80017aa:	2100      	movs	r1, #0
 80017ac:	4843      	ldr	r0, [pc, #268]	; (80018bc <main+0x4f8>)
 80017ae:	f004 fd85 	bl	80062bc <HAL_DAC_Start_DMA>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <main+0x3f8>
					360, DAC_ALIGN_12B_R) != HAL_OK) {
				/* Start DMA Error */
				Error_Handler();
 80017b8:	f001 fb42 	bl	8002e40 <Error_Handler>
			}
			htim7.Init.Period = 200;
 80017bc:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <main+0x4fc>)
 80017be:	22c8      	movs	r2, #200	; 0xc8
 80017c0:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80017c2:	483f      	ldr	r0, [pc, #252]	; (80018c0 <main+0x4fc>)
 80017c4:	f009 fa00 	bl	800abc8 <HAL_TIM_Base_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <main+0x40e>
				Error_Handler();
 80017ce:	f001 fb37 	bl	8002e40 <Error_Handler>
			}
		}
		bp1_old = bp1;
 80017d2:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80017d6:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
		bp2_old = bp2;
 80017da:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80017de:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378



		BSP_TS_GetState(&TS_State);
 80017e2:	4838      	ldr	r0, [pc, #224]	; (80018c4 <main+0x500>)
 80017e4:	f002 ff98 	bl	8004718 <BSP_TS_GetState>

			if(TS_State.touchDetected && TSold!=TS_State.touchDetected){
 80017e8:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <main+0x500>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d056      	beq.n	800189e <main+0x4da>
 80017f0:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <main+0x500>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <main+0x504>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d04f      	beq.n	800189e <main+0x4da>
							drawHexagon(TS_State.touchX[0],TS_State.touchY[0]);
 80017fe:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <main+0x500>)
 8001800:	885b      	ldrh	r3, [r3, #2]
 8001802:	461a      	mov	r2, r3
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <main+0x500>)
 8001806:	899b      	ldrh	r3, [r3, #12]
 8001808:	4619      	mov	r1, r3
 800180a:	4610      	mov	r0, r2
 800180c:	f000 f884 	bl	8001918 <drawHexagon>
							//boutonPause(TS_State.touchX[0],TS_State.touchY[0]);
							if (TS_State.touchX[0]> 460 && TS_State.touchY[0]<20 && pause==0 ) {
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <main+0x500>)
 8001812:	885b      	ldrh	r3, [r3, #2]
 8001814:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001818:	d91a      	bls.n	8001850 <main+0x48c>
 800181a:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <main+0x500>)
 800181c:	899b      	ldrh	r3, [r3, #12]
 800181e:	2b13      	cmp	r3, #19
 8001820:	d816      	bhi.n	8001850 <main+0x48c>
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <main+0x508>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d112      	bne.n	8001850 <main+0x48c>
								    BSP_LCD_SetLayerVisible(1,ENABLE);
 800182a:	2101      	movs	r1, #1
 800182c:	2001      	movs	r0, #1
 800182e:	f001 fdb9 	bl	80033a4 <BSP_LCD_SetLayerVisible>
									BSP_LCD_DrawBitmap(0, 0, (uint8_t*) paused_bmp);
 8001832:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <main+0x50c>)
 8001834:	2100      	movs	r1, #0
 8001836:	2000      	movs	r0, #0
 8001838:	f002 f8c6 	bl	80039c8 <BSP_LCD_DrawBitmap>
									BSP_LCD_SetTransparency(1, 0x6F);
 800183c:	216f      	movs	r1, #111	; 0x6f
 800183e:	2001      	movs	r0, #1
 8001840:	f001 fdee 	bl	8003420 <BSP_LCD_SetTransparency>

									pause=1;
 8001844:	4b21      	ldr	r3, [pc, #132]	; (80018cc <main+0x508>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]
									myDelay(1);
 800184a:	2001      	movs	r0, #1
 800184c:	f000 f9ca 	bl	8001be4 <myDelay>





							if (compteurJoueurs%2==0 ){
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <main+0x510>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <main+0x49e>
								BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800185c:	481e      	ldr	r0, [pc, #120]	; (80018d8 <main+0x514>)
 800185e:	f001 fdf1 	bl	8003444 <BSP_LCD_SetTextColor>

							}
							if (compteurJoueurs%2==1){
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <main+0x510>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	bfb8      	it	lt
 800186e:	425b      	neglt	r3, r3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d102      	bne.n	800187a <main+0x4b6>
								BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001874:	4819      	ldr	r0, [pc, #100]	; (80018dc <main+0x518>)
 8001876:	f001 fde5 	bl	8003444 <BSP_LCD_SetTextColor>
							}
							compteurJoueurs++;
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <main+0x510>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <main+0x510>)
 8001882:	6013      	str	r3, [r2, #0]
							//sprintf(text,"valeur : %d", compteurRemplissage);
							//BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);


					 	 	 for (i=0;i<8;i++){
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800188a:	e004      	b.n	8001896 <main+0x4d2>
 800188c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8001890:	3301      	adds	r3, #1
 8001892:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8001896:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800189a:	2b07      	cmp	r3, #7
 800189c:	ddf6      	ble.n	800188c <main+0x4c8>
								listePoints[5]->Y= ydraw-14	; */
					 	 	 	 }

				 	  	  }

			TSold=TS_State.touchDetected;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <main+0x500>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <main+0x504>)
 80018a6:	601a      	str	r2, [r3, #0]
		bp1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 80018a8:	e741      	b.n	800172e <main+0x36a>
 80018aa:	bf00      	nop
 80018ac:	200000dc 	.word	0x200000dc
 80018b0:	2000422c 	.word	0x2000422c
 80018b4:	0800eae4 	.word	0x0800eae4
 80018b8:	40020000 	.word	0x40020000
 80018bc:	20004584 	.word	0x20004584
 80018c0:	20004748 	.word	0x20004748
 80018c4:	200000f0 	.word	0x200000f0
 80018c8:	200000ec 	.word	0x200000ec
 80018cc:	200000e8 	.word	0x200000e8
 80018d0:	0804e2ec 	.word	0x0804e2ec
 80018d4:	200000e4 	.word	0x200000e4
 80018d8:	ff0000ff 	.word	0xff0000ff
 80018dc:	ffff0000 	.word	0xffff0000

080018e0 <fillTabPositions>:
	}


}

void fillTabPositions(int x, int y, int j) {
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	(listePoints[j]).X=x;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	b219      	sxth	r1, r3
 80018f0:	4a08      	ldr	r2, [pc, #32]	; (8001914 <fillTabPositions+0x34>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	(listePoints[j]).Y=y;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	b219      	sxth	r1, r3
 80018fc:	4a05      	ldr	r2, [pc, #20]	; (8001914 <fillTabPositions+0x34>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	460a      	mov	r2, r1
 8001906:	805a      	strh	r2, [r3, #2]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	2000422c 	.word	0x2000422c

08001918 <drawHexagon>:

void drawHexagon(int x, int y){
 8001918:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800191c:	b092      	sub	sp, #72	; 0x48
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
	int xdraw=1000;
 8001924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001928:	647b      	str	r3, [r7, #68]	; 0x44
	int ydraw=1000;
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	643b      	str	r3, [r7, #64]	; 0x40
	char txt[50];
	while(compteurRemplissage<16){
 8001930:	e080      	b.n	8001a34 <drawHexagon+0x11c>



		if (pow((x-listePoints[compteurRemplissage].X),2)+pow((y-listePoints[compteurRemplissage].Y),2) < (pow((x-xdraw),2)+pow((y-ydraw),2))){
 8001932:	4ba7      	ldr	r3, [pc, #668]	; (8001bd0 <drawHexagon+0x2b8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4aa7      	ldr	r2, [pc, #668]	; (8001bd4 <drawHexagon+0x2bc>)
 8001938:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 800193c:	461a      	mov	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe06 	bl	8000554 <__aeabi_i2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8001bc8 <drawHexagon+0x2b0>
 8001950:	ec43 2b10 	vmov	d0, r2, r3
 8001954:	f00c f8f0 	bl	800db38 <pow>
 8001958:	ec55 4b10 	vmov	r4, r5, d0
 800195c:	4b9c      	ldr	r3, [pc, #624]	; (8001bd0 <drawHexagon+0x2b8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a9c      	ldr	r2, [pc, #624]	; (8001bd4 <drawHexagon+0x2bc>)
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800196a:	461a      	mov	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fdef 	bl	8000554 <__aeabi_i2d>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	ed9f 1b93 	vldr	d1, [pc, #588]	; 8001bc8 <drawHexagon+0x2b0>
 800197e:	ec43 2b10 	vmov	d0, r2, r3
 8001982:	f00c f8d9 	bl	800db38 <pow>
 8001986:	ec53 2b10 	vmov	r2, r3, d0
 800198a:	4620      	mov	r0, r4
 800198c:	4629      	mov	r1, r5
 800198e:	f7fe fc95 	bl	80002bc <__adddf3>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4614      	mov	r4, r2
 8001998:	461d      	mov	r5, r3
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fdd7 	bl	8000554 <__aeabi_i2d>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8001bc8 <drawHexagon+0x2b0>
 80019ae:	ec43 2b10 	vmov	d0, r2, r3
 80019b2:	f00c f8c1 	bl	800db38 <pow>
 80019b6:	ec59 8b10 	vmov	r8, r9, d0
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdc7 	bl	8000554 <__aeabi_i2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8001bc8 <drawHexagon+0x2b0>
 80019ce:	ec43 2b10 	vmov	d0, r2, r3
 80019d2:	f00c f8b1 	bl	800db38 <pow>
 80019d6:	ec53 2b10 	vmov	r2, r3, d0
 80019da:	4640      	mov	r0, r8
 80019dc:	4649      	mov	r1, r9
 80019de:	f7fe fc6d 	bl	80002bc <__adddf3>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4620      	mov	r0, r4
 80019e8:	4629      	mov	r1, r5
 80019ea:	f7ff f88f 	bl	8000b0c <__aeabi_dcmplt>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d01a      	beq.n	8001a2a <drawHexagon+0x112>

		xdraw=listePoints[compteurRemplissage].X;
 80019f4:	4b76      	ldr	r3, [pc, #472]	; (8001bd0 <drawHexagon+0x2b8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a76      	ldr	r2, [pc, #472]	; (8001bd4 <drawHexagon+0x2bc>)
 80019fa:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 80019fe:	647b      	str	r3, [r7, #68]	; 0x44
		ydraw=listePoints[compteurRemplissage].Y;
 8001a00:	4b73      	ldr	r3, [pc, #460]	; (8001bd0 <drawHexagon+0x2b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a73      	ldr	r2, [pc, #460]	; (8001bd4 <drawHexagon+0x2bc>)
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a0e:	643b      	str	r3, [r7, #64]	; 0x40
		sprintf(txt,"valeur : %d %d", xdraw,ydraw);
 8001a10:	f107 000c 	add.w	r0, r7, #12
 8001a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a18:	496f      	ldr	r1, [pc, #444]	; (8001bd8 <drawHexagon+0x2c0>)
 8001a1a:	f00b fcd5 	bl	800d3c8 <siprintf>
		BSP_LCD_DisplayStringAtLine(5,(uint8_t*) txt);
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	4619      	mov	r1, r3
 8001a24:	2005      	movs	r0, #5
 8001a26:	f001 fea3 	bl	8003770 <BSP_LCD_DisplayStringAtLine>

		}
	compteurRemplissage++;
 8001a2a:	4b69      	ldr	r3, [pc, #420]	; (8001bd0 <drawHexagon+0x2b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	4a67      	ldr	r2, [pc, #412]	; (8001bd0 <drawHexagon+0x2b8>)
 8001a32:	6013      	str	r3, [r2, #0]
	while(compteurRemplissage<16){
 8001a34:	4b66      	ldr	r3, [pc, #408]	; (8001bd0 <drawHexagon+0x2b8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	f77f af7a 	ble.w	8001932 <drawHexagon+0x1a>

	}
	BSP_LCD_DrawLine(xdraw+16, ydraw, xdraw+9,ydraw+14);
 8001a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3310      	adds	r3, #16
 8001a44:	b298      	uxth	r0, r3
 8001a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3309      	adds	r3, #9
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	330e      	adds	r3, #14
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	f001 fea1 	bl	80037a0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(xdraw+9, ydraw+14,xdraw-9,ydraw+14);
 8001a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3309      	adds	r3, #9
 8001a64:	b298      	uxth	r0, r3
 8001a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	330e      	adds	r3, #14
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	3b09      	subs	r3, #9
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	330e      	adds	r3, #14
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	f001 fe8f 	bl	80037a0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(xdraw-9, ydraw+14,xdraw-16,ydraw);
 8001a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3b09      	subs	r3, #9
 8001a88:	b298      	uxth	r0, r3
 8001a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	330e      	adds	r3, #14
 8001a90:	b299      	uxth	r1, r3
 8001a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	3b10      	subs	r3, #16
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f001 fe7f 	bl	80037a0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(xdraw-16, ydraw,xdraw-9,ydraw-14);
 8001aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	3b10      	subs	r3, #16
 8001aa8:	b298      	uxth	r0, r3
 8001aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aac:	b299      	uxth	r1, r3
 8001aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	3b09      	subs	r3, #9
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	3b0e      	subs	r3, #14
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f001 fe6f 	bl	80037a0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(xdraw-9, ydraw-14,xdraw+9,ydraw-14);
 8001ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3b09      	subs	r3, #9
 8001ac8:	b298      	uxth	r0, r3
 8001aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	3b0e      	subs	r3, #14
 8001ad0:	b299      	uxth	r1, r3
 8001ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3309      	adds	r3, #9
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b0e      	subs	r3, #14
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	f001 fe5d 	bl	80037a0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(xdraw+9, ydraw-14,xdraw+16,ydraw);
 8001ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3309      	adds	r3, #9
 8001aec:	b298      	uxth	r0, r3
 8001aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3b0e      	subs	r3, #14
 8001af4:	b299      	uxth	r1, r3
 8001af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3310      	adds	r3, #16
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	f001 fe4d 	bl	80037a0 <BSP_LCD_DrawLine>
	(fillPoly[0]).X=xdraw+16;
 8001b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	3310      	adds	r3, #16
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <drawHexagon+0x2c4>)
 8001b12:	801a      	strh	r2, [r3, #0]
	(fillPoly[0]).Y=ydraw;
 8001b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <drawHexagon+0x2c4>)
 8001b1a:	805a      	strh	r2, [r3, #2]
	(fillPoly[1]).X=xdraw+9;
 8001b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3309      	adds	r3, #9
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <drawHexagon+0x2c4>)
 8001b28:	809a      	strh	r2, [r3, #4]
	(fillPoly[1]).Y=ydraw+14;
 8001b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	330e      	adds	r3, #14
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <drawHexagon+0x2c4>)
 8001b36:	80da      	strh	r2, [r3, #6]
	(fillPoly[2]).X=xdraw-9;
 8001b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b09      	subs	r3, #9
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <drawHexagon+0x2c4>)
 8001b44:	811a      	strh	r2, [r3, #8]
	(fillPoly[2]).Y=ydraw+14;
 8001b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	330e      	adds	r3, #14
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	b21a      	sxth	r2, r3
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <drawHexagon+0x2c4>)
 8001b52:	815a      	strh	r2, [r3, #10]
	(fillPoly[3]).X=xdraw-16;
 8001b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3b10      	subs	r3, #16
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <drawHexagon+0x2c4>)
 8001b60:	819a      	strh	r2, [r3, #12]
	(fillPoly[3]).Y=ydraw;
 8001b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b64:	b21a      	sxth	r2, r3
 8001b66:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <drawHexagon+0x2c4>)
 8001b68:	81da      	strh	r2, [r3, #14]
	(fillPoly[4]).X=xdraw-9;
 8001b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	3b09      	subs	r3, #9
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	b21a      	sxth	r2, r3
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <drawHexagon+0x2c4>)
 8001b76:	821a      	strh	r2, [r3, #16]
	(fillPoly[4]).Y=ydraw-14;
 8001b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b0e      	subs	r3, #14
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <drawHexagon+0x2c4>)
 8001b84:	825a      	strh	r2, [r3, #18]
	(fillPoly[5]).X=xdraw+9;
 8001b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3309      	adds	r3, #9
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <drawHexagon+0x2c4>)
 8001b92:	829a      	strh	r2, [r3, #20]
	(fillPoly[5]).Y=ydraw-14;
 8001b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b0e      	subs	r3, #14
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	b21a      	sxth	r2, r3
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <drawHexagon+0x2c4>)
 8001ba0:	82da      	strh	r2, [r3, #22]
	pfill=&fillPoly;
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <drawHexagon+0x2c8>)
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <drawHexagon+0x2c4>)
 8001ba6:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillPolygon(pfill, 6);
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <drawHexagon+0x2c8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2106      	movs	r1, #6
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 ffbc 	bl	8003b2c <BSP_LCD_FillPolygon>
	compteurRemplissage=0;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <drawHexagon+0x2b8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]

}
 8001bba:	bf00      	nop
 8001bbc:	3748      	adds	r7, #72	; 0x48
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40000000 	.word	0x40000000
 8001bd0:	200000e0 	.word	0x200000e0
 8001bd4:	2000422c 	.word	0x2000422c
 8001bd8:	0800ee14 	.word	0x0800ee14
 8001bdc:	20004794 	.word	0x20004794
 8001be0:	20000028 	.word	0x20000028

08001be4 <myDelay>:

void myDelay(int i)    /*Pause l'application pour i seconds*/
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
    clock_t start,end;
    start=clock();
 8001bec:	f00b fb2c 	bl	800d248 <clock>
 8001bf0:	60f8      	str	r0, [r7, #12]
    while(((end=clock())-start)<=i*CLOCKS_PER_SEC);
 8001bf2:	bf00      	nop
 8001bf4:	f00b fb28 	bl	800d248 <clock>
 8001bf8:	60b8      	str	r0, [r7, #8]
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	2164      	movs	r1, #100	; 0x64
 8001c04:	fb01 f202 	mul.w	r2, r1, r2
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d9f3      	bls.n	8001bf4 <myDelay+0x10>
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b094      	sub	sp, #80	; 0x50
 8001c1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001c1e:	f107 0320 	add.w	r3, r7, #32
 8001c22:	2230      	movs	r2, #48	; 0x30
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f00b fb5c 	bl	800d2e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001c3c:	f007 f9b4 	bl	8008fa8 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <SystemClock_Config+0xdc>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a2b      	ldr	r2, [pc, #172]	; (8001cf4 <SystemClock_Config+0xdc>)
 8001c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4c:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <SystemClock_Config+0xdc>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c58:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <SystemClock_Config+0xe0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a26      	ldr	r2, [pc, #152]	; (8001cf8 <SystemClock_Config+0xe0>)
 8001c5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <SystemClock_Config+0xe0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001c70:	2309      	movs	r3, #9
 8001c72:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c86:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001c88:	2319      	movs	r3, #25
 8001c8a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001c8c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001c90:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c92:	2302      	movs	r3, #2
 8001c94:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001c96:	2309      	movs	r3, #9
 8001c98:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c9a:	f107 0320 	add.w	r3, r7, #32
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f007 f9e2 	bl	8009068 <HAL_RCC_OscConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <SystemClock_Config+0x96>
		Error_Handler();
 8001caa:	f001 f8c9 	bl	8002e40 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001cae:	f007 f98b 	bl	8008fc8 <HAL_PWREx_EnableOverDrive>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <SystemClock_Config+0xa4>
		Error_Handler();
 8001cb8:	f001 f8c2 	bl	8002e40 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ccc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	2106      	movs	r1, #6
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f007 fc68 	bl	80095b0 <HAL_RCC_ClockConfig>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SystemClock_Config+0xd2>
		Error_Handler();
 8001ce6:	f001 f8ab 	bl	8002e40 <Error_Handler>
	}
}
 8001cea:	bf00      	nop
 8001cec:	3750      	adds	r7, #80	; 0x50
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40007000 	.word	0x40007000

08001cfc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001d02:	463b      	mov	r3, r7
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d10:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <MX_ADC1_Init+0x9c>)
 8001d12:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d1a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d3c:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d3e:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <MX_ADC1_Init+0xa0>)
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001d5c:	480d      	ldr	r0, [pc, #52]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d5e:	f003 fec5 	bl	8005aec <HAL_ADC_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_ADC1_Init+0x70>
		Error_Handler();
 8001d68:	f001 f86a 	bl	8002e40 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d7e:	f003 fef9 	bl	8005b74 <HAL_ADC_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0x90>
		Error_Handler();
 8001d88:	f001 f85a 	bl	8002e40 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20004470 	.word	0x20004470
 8001d98:	40012000 	.word	0x40012000
 8001d9c:	0f000001 	.word	0x0f000001

08001da0 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001da6:	463b      	mov	r3, r7
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001db4:	4a21      	ldr	r2, [pc, #132]	; (8001e3c <MX_ADC3_Init+0x9c>)
 8001db6:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001dba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dbe:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001dd2:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001de2:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <MX_ADC3_Init+0xa0>)
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001e02:	f003 fe73 	bl	8005aec <HAL_ADC_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_ADC3_Init+0x70>
		Error_Handler();
 8001e0c:	f001 f818 	bl	8002e40 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8001e10:	2306      	movs	r3, #6
 8001e12:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e14:	2301      	movs	r3, #1
 8001e16:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_ADC3_Init+0x98>)
 8001e22:	f003 fea7 	bl	8005b74 <HAL_ADC_ConfigChannel>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_ADC3_Init+0x90>
		Error_Handler();
 8001e2c:	f001 f808 	bl	8002e40 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200044b8 	.word	0x200044b8
 8001e3c:	40012200 	.word	0x40012200
 8001e40:	0f000001 	.word	0x0f000001

08001e44 <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */
	{
		/* USER CODE BEGIN DAC_Init 0 */
		hdac.Instance = DAC;
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <MX_DAC_Init+0x60>)
 8001e4c:	4a16      	ldr	r2, [pc, #88]	; (8001ea8 <MX_DAC_Init+0x64>)
 8001e4e:	601a      	str	r2, [r3, #0]
		if (HAL_DAC_DeInit(&hdac) != HAL_OK) {
 8001e50:	4814      	ldr	r0, [pc, #80]	; (8001ea4 <MX_DAC_Init+0x60>)
 8001e52:	f004 fa15 	bl	8006280 <HAL_DAC_DeInit>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_DAC_Init+0x1c>
			Error_Handler();
 8001e5c:	f000 fff0 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE END DAC_Init 0 */

		DAC_ChannelConfTypeDef sConfig = { 0 };
 8001e60:	463b      	mov	r3, r7
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
		/* USER CODE BEGIN DAC_Init 1 */

		/* USER CODE END DAC_Init 1 */
		/** DAC Initialization
		 */
		hdac.Instance = DAC;
 8001e68:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <MX_DAC_Init+0x60>)
 8001e6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ea8 <MX_DAC_Init+0x64>)
 8001e6c:	601a      	str	r2, [r3, #0]
		if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8001e6e:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <MX_DAC_Init+0x60>)
 8001e70:	f004 f9e4 	bl	800623c <HAL_DAC_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_DAC_Init+0x3a>
			Error_Handler();
 8001e7a:	f000 ffe1 	bl	8002e40 <Error_Handler>
		}
		/** DAC channel OUT1 config
		 */
		sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001e7e:	2314      	movs	r3, #20
 8001e80:	603b      	str	r3, [r7, #0]
		sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
		if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001e86:	463b      	mov	r3, r7
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_DAC_Init+0x60>)
 8001e8e:	f004 fb63 	bl	8006558 <HAL_DAC_ConfigChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_DAC_Init+0x58>
			Error_Handler();
 8001e98:	f000 ffd2 	bl	8002e40 <Error_Handler>
		/* USER CODE BEGIN DAC_Init 2 */

		/* USER CODE END DAC_Init 2 */

	}
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20004584 	.word	0x20004584
 8001ea8:	40007400 	.word	0x40007400

08001eac <MX_DMA2D_Init>:
	/**
	 * @brief DMA2D Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_DMA2D_Init(void) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
		/* USER CODE END DMA2D_Init 0 */

		/* USER CODE BEGIN DMA2D_Init 1 */

		/* USER CODE END DMA2D_Init 1 */
		hdma2d.Instance = DMA2D;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <MX_DMA2D_Init+0x5c>)
 8001eb2:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <MX_DMA2D_Init+0x60>)
 8001eb4:	601a      	str	r2, [r3, #0]
		hdma2d.Init.Mode = DMA2D_M2M;
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <MX_DMA2D_Init+0x5c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	605a      	str	r2, [r3, #4]
		hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <MX_DMA2D_Init+0x5c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
		hdma2d.Init.OutputOffset = 0;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_DMA2D_Init+0x5c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
		hdma2d.LayerCfg[1].InputOffset = 0;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <MX_DMA2D_Init+0x5c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
		hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_DMA2D_Init+0x5c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_DMA2D_Init+0x5c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
		hdma2d.LayerCfg[1].InputAlpha = 0;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_DMA2D_Init+0x5c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	635a      	str	r2, [r3, #52]	; 0x34
		if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8001ee0:	4809      	ldr	r0, [pc, #36]	; (8001f08 <MX_DMA2D_Init+0x5c>)
 8001ee2:	f004 fff3 	bl	8006ecc <HAL_DMA2D_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_DMA2D_Init+0x44>
			Error_Handler();
 8001eec:	f000 ffa8 	bl	8002e40 <Error_Handler>
		}
		if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_DMA2D_Init+0x5c>)
 8001ef4:	f005 fa58 	bl	80073a8 <HAL_DMA2D_ConfigLayer>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_DMA2D_Init+0x56>
			Error_Handler();
 8001efe:	f000 ff9f 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN DMA2D_Init 2 */

		/* USER CODE END DMA2D_Init 2 */

	}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20004688 	.word	0x20004688
 8001f0c:	4002b000 	.word	0x4002b000

08001f10 <MX_I2C1_Init>:
	/**
	 * @brief I2C1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C1_Init(void) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
		/* USER CODE END I2C1_Init 0 */

		/* USER CODE BEGIN I2C1_Init 1 */

		/* USER CODE END I2C1_Init 1 */
		hi2c1.Instance = I2C1;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <MX_I2C1_Init+0x78>)
 8001f18:	601a      	str	r2, [r3, #0]
		hi2c1.Init.Timing = 0x00C0EAFF;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f1c:	4a1b      	ldr	r2, [pc, #108]	; (8001f8c <MX_I2C1_Init+0x7c>)
 8001f1e:	605a      	str	r2, [r3, #4]
		hi2c1.Init.OwnAddress1 = 0;
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
		hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	60da      	str	r2, [r3, #12]
		hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
		hi2c1.Init.OwnAddress2 = 0;
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
		hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
		hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	61da      	str	r2, [r3, #28]
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001f4a:	480e      	ldr	r0, [pc, #56]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f4c:	f005 fe44 	bl	8007bd8 <HAL_I2C_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_I2C1_Init+0x4a>
			Error_Handler();
 8001f56:	f000 ff73 	bl	8002e40 <Error_Handler>
		}
		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4809      	ldr	r0, [pc, #36]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f5e:	f006 fbdd 	bl	800871c <HAL_I2CEx_ConfigAnalogFilter>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_I2C1_Init+0x5c>
				!= HAL_OK) {
			Error_Handler();
 8001f68:	f000 ff6a 	bl	8002e40 <Error_Handler>
		}
		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_I2C1_Init+0x74>)
 8001f70:	f006 fc1f 	bl	80087b2 <HAL_I2CEx_ConfigDigitalFilter>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_I2C1_Init+0x6e>
			Error_Handler();
 8001f7a:	f000 ff61 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN I2C1_Init 2 */

		/* USER CODE END I2C1_Init 2 */

	}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200041e0 	.word	0x200041e0
 8001f88:	40005400 	.word	0x40005400
 8001f8c:	00c0eaff 	.word	0x00c0eaff

08001f90 <MX_I2C3_Init>:
	/**
	 * @brief I2C3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C3_Init(void) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
		/* USER CODE END I2C3_Init 0 */

		/* USER CODE BEGIN I2C3_Init 1 */

		/* USER CODE END I2C3_Init 1 */
		hi2c3.Instance = I2C3;
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <MX_I2C3_Init+0x74>)
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <MX_I2C3_Init+0x78>)
 8001f98:	601a      	str	r2, [r3, #0]
		hi2c3.Init.Timing = 0x00C0EAFF;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <MX_I2C3_Init+0x74>)
 8001f9c:	4a1b      	ldr	r2, [pc, #108]	; (800200c <MX_I2C3_Init+0x7c>)
 8001f9e:	605a      	str	r2, [r3, #4]
		hi2c3.Init.OwnAddress1 = 0;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <MX_I2C3_Init+0x74>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
		hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <MX_I2C3_Init+0x74>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	60da      	str	r2, [r3, #12]
		hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fac:	4b15      	ldr	r3, [pc, #84]	; (8002004 <MX_I2C3_Init+0x74>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
		hi2c3.Init.OwnAddress2 = 0;
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <MX_I2C3_Init+0x74>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	615a      	str	r2, [r3, #20]
		hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <MX_I2C3_Init+0x74>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]
		hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_I2C3_Init+0x74>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	61da      	str	r2, [r3, #28]
		hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <MX_I2C3_Init+0x74>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8001fca:	480e      	ldr	r0, [pc, #56]	; (8002004 <MX_I2C3_Init+0x74>)
 8001fcc:	f005 fe04 	bl	8007bd8 <HAL_I2C_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_I2C3_Init+0x4a>
			Error_Handler();
 8001fd6:	f000 ff33 	bl	8002e40 <Error_Handler>
		}
		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4809      	ldr	r0, [pc, #36]	; (8002004 <MX_I2C3_Init+0x74>)
 8001fde:	f006 fb9d 	bl	800871c <HAL_I2CEx_ConfigAnalogFilter>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_I2C3_Init+0x5c>
				!= HAL_OK) {
			Error_Handler();
 8001fe8:	f000 ff2a 	bl	8002e40 <Error_Handler>
		}
		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8001fec:	2100      	movs	r1, #0
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_I2C3_Init+0x74>)
 8001ff0:	f006 fbdf 	bl	80087b2 <HAL_I2CEx_ConfigDigitalFilter>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_I2C3_Init+0x6e>
			Error_Handler();
 8001ffa:	f000 ff21 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN I2C3_Init 2 */

		/* USER CODE END I2C3_Init 2 */

	}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20004058 	.word	0x20004058
 8002008:	40005c00 	.word	0x40005c00
 800200c:	00c0eaff 	.word	0x00c0eaff

08002010 <MX_LTDC_Init>:
	/**
	 * @brief LTDC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_LTDC_Init(void) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b08e      	sub	sp, #56	; 0x38
 8002014:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN LTDC_Init 0 */

		/* USER CODE END LTDC_Init 0 */

		LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	2234      	movs	r2, #52	; 0x34
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f00b f961 	bl	800d2e4 <memset>

		/* USER CODE BEGIN LTDC_Init 1 */

		/* USER CODE END LTDC_Init 1 */
		hltdc.Instance = LTDC;
 8002022:	4b3a      	ldr	r3, [pc, #232]	; (800210c <MX_LTDC_Init+0xfc>)
 8002024:	4a3a      	ldr	r2, [pc, #232]	; (8002110 <MX_LTDC_Init+0x100>)
 8002026:	601a      	str	r2, [r3, #0]
		hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002028:	4b38      	ldr	r3, [pc, #224]	; (800210c <MX_LTDC_Init+0xfc>)
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
		hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800202e:	4b37      	ldr	r3, [pc, #220]	; (800210c <MX_LTDC_Init+0xfc>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
		hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002034:	4b35      	ldr	r3, [pc, #212]	; (800210c <MX_LTDC_Init+0xfc>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
		hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800203a:	4b34      	ldr	r3, [pc, #208]	; (800210c <MX_LTDC_Init+0xfc>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
		hltdc.Init.HorizontalSync = 40;
 8002040:	4b32      	ldr	r3, [pc, #200]	; (800210c <MX_LTDC_Init+0xfc>)
 8002042:	2228      	movs	r2, #40	; 0x28
 8002044:	615a      	str	r2, [r3, #20]
		hltdc.Init.VerticalSync = 9;
 8002046:	4b31      	ldr	r3, [pc, #196]	; (800210c <MX_LTDC_Init+0xfc>)
 8002048:	2209      	movs	r2, #9
 800204a:	619a      	str	r2, [r3, #24]
		hltdc.Init.AccumulatedHBP = 53;
 800204c:	4b2f      	ldr	r3, [pc, #188]	; (800210c <MX_LTDC_Init+0xfc>)
 800204e:	2235      	movs	r2, #53	; 0x35
 8002050:	61da      	str	r2, [r3, #28]
		hltdc.Init.AccumulatedVBP = 11;
 8002052:	4b2e      	ldr	r3, [pc, #184]	; (800210c <MX_LTDC_Init+0xfc>)
 8002054:	220b      	movs	r2, #11
 8002056:	621a      	str	r2, [r3, #32]
		hltdc.Init.AccumulatedActiveW = 533;
 8002058:	4b2c      	ldr	r3, [pc, #176]	; (800210c <MX_LTDC_Init+0xfc>)
 800205a:	f240 2215 	movw	r2, #533	; 0x215
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
		hltdc.Init.AccumulatedActiveH = 283;
 8002060:	4b2a      	ldr	r3, [pc, #168]	; (800210c <MX_LTDC_Init+0xfc>)
 8002062:	f240 121b 	movw	r2, #283	; 0x11b
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
		hltdc.Init.TotalWidth = 565;
 8002068:	4b28      	ldr	r3, [pc, #160]	; (800210c <MX_LTDC_Init+0xfc>)
 800206a:	f240 2235 	movw	r2, #565	; 0x235
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c
		hltdc.Init.TotalHeigh = 285;
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <MX_LTDC_Init+0xfc>)
 8002072:	f240 121d 	movw	r2, #285	; 0x11d
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
		hltdc.Init.Backcolor.Blue = 0;
 8002078:	4b24      	ldr	r3, [pc, #144]	; (800210c <MX_LTDC_Init+0xfc>)
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		hltdc.Init.Backcolor.Green = 0;
 8002080:	4b22      	ldr	r3, [pc, #136]	; (800210c <MX_LTDC_Init+0xfc>)
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		hltdc.Init.Backcolor.Red = 0;
 8002088:	4b20      	ldr	r3, [pc, #128]	; (800210c <MX_LTDC_Init+0xfc>)
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8002090:	481e      	ldr	r0, [pc, #120]	; (800210c <MX_LTDC_Init+0xfc>)
 8002092:	f006 fbdb 	bl	800884c <HAL_LTDC_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_LTDC_Init+0x90>
			Error_Handler();
 800209c:	f000 fed0 	bl	8002e40 <Error_Handler>
		}
		pLayerCfg.WindowX0 = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
		pLayerCfg.WindowX1 = 480;
 80020a4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80020a8:	60bb      	str	r3, [r7, #8]
		pLayerCfg.WindowY0 = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
		pLayerCfg.WindowY1 = 272;
 80020ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80020b2:	613b      	str	r3, [r7, #16]
		pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80020b4:	2302      	movs	r3, #2
 80020b6:	617b      	str	r3, [r7, #20]
		pLayerCfg.Alpha = 255;
 80020b8:	23ff      	movs	r3, #255	; 0xff
 80020ba:	61bb      	str	r3, [r7, #24]
		pLayerCfg.Alpha0 = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
		pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80020c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020c4:	623b      	str	r3, [r7, #32]
		pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80020c6:	2307      	movs	r3, #7
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
		pLayerCfg.FBStartAdress = 0xC0000000;
 80020ca:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
		pLayerCfg.ImageWidth = 480;
 80020d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		pLayerCfg.ImageHeight = 272;
 80020d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
		pLayerCfg.Backcolor.Blue = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		pLayerCfg.Backcolor.Green = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		pLayerCfg.Backcolor.Red = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2200      	movs	r2, #0
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_LTDC_Init+0xfc>)
 80020f6:	f006 fd3b 	bl	8008b70 <HAL_LTDC_ConfigLayer>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_LTDC_Init+0xf4>
			Error_Handler();
 8002100:	f000 fe9e 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN LTDC_Init 2 */

		/* USER CODE END LTDC_Init 2 */

	}
 8002104:	bf00      	nop
 8002106:	3738      	adds	r7, #56	; 0x38
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20004364 	.word	0x20004364
 8002110:	40016800 	.word	0x40016800

08002114 <MX_RTC_Init>:
	/**
	 * @brief RTC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_RTC_Init(void) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b092      	sub	sp, #72	; 0x48
 8002118:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN RTC_Init 0 */

		/* USER CODE END RTC_Init 0 */

		RTC_TimeTypeDef sTime = { 0 };
 800211a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	611a      	str	r2, [r3, #16]
 800212a:	615a      	str	r2, [r3, #20]
		RTC_DateTypeDef sDate = { 0 };
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
		RTC_AlarmTypeDef sAlarm = { 0 };
 8002130:	463b      	mov	r3, r7
 8002132:	222c      	movs	r2, #44	; 0x2c
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f00b f8d4 	bl	800d2e4 <memset>
		/* USER CODE BEGIN RTC_Init 1 */

		/* USER CODE END RTC_Init 1 */
		/** Initialize RTC Only
		 */
		hrtc.Instance = RTC;
 800213c:	4b46      	ldr	r3, [pc, #280]	; (8002258 <MX_RTC_Init+0x144>)
 800213e:	4a47      	ldr	r2, [pc, #284]	; (800225c <MX_RTC_Init+0x148>)
 8002140:	601a      	str	r2, [r3, #0]
		hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002142:	4b45      	ldr	r3, [pc, #276]	; (8002258 <MX_RTC_Init+0x144>)
 8002144:	2200      	movs	r2, #0
 8002146:	605a      	str	r2, [r3, #4]
		hrtc.Init.AsynchPrediv = 127;
 8002148:	4b43      	ldr	r3, [pc, #268]	; (8002258 <MX_RTC_Init+0x144>)
 800214a:	227f      	movs	r2, #127	; 0x7f
 800214c:	609a      	str	r2, [r3, #8]
		hrtc.Init.SynchPrediv = 255;
 800214e:	4b42      	ldr	r3, [pc, #264]	; (8002258 <MX_RTC_Init+0x144>)
 8002150:	22ff      	movs	r2, #255	; 0xff
 8002152:	60da      	str	r2, [r3, #12]
		hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002154:	4b40      	ldr	r3, [pc, #256]	; (8002258 <MX_RTC_Init+0x144>)
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
		hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800215a:	4b3f      	ldr	r3, [pc, #252]	; (8002258 <MX_RTC_Init+0x144>)
 800215c:	2200      	movs	r2, #0
 800215e:	615a      	str	r2, [r3, #20]
		hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002160:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <MX_RTC_Init+0x144>)
 8002162:	2200      	movs	r2, #0
 8002164:	619a      	str	r2, [r3, #24]
		if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8002166:	483c      	ldr	r0, [pc, #240]	; (8002258 <MX_RTC_Init+0x144>)
 8002168:	f008 f81a 	bl	800a1a0 <HAL_RTC_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_RTC_Init+0x62>
			Error_Handler();
 8002172:	f000 fe65 	bl	8002e40 <Error_Handler>

		/* USER CODE END Check_RTC_BKUP */

		/** Initialize RTC and set the Time and Date
		 */
		sTime.Hours = 0x0;
 8002176:	2300      	movs	r3, #0
 8002178:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		sTime.Minutes = 0x0;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		sTime.Seconds = 0x0;
 8002182:	2300      	movs	r3, #0
 8002184:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002188:	2300      	movs	r3, #0
 800218a:	643b      	str	r3, [r7, #64]	; 0x40
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8002190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002194:	2201      	movs	r2, #1
 8002196:	4619      	mov	r1, r3
 8002198:	482f      	ldr	r0, [pc, #188]	; (8002258 <MX_RTC_Init+0x144>)
 800219a:	f008 f893 	bl	800a2c4 <HAL_RTC_SetTime>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_RTC_Init+0x94>
			Error_Handler();
 80021a4:	f000 fe4c 	bl	8002e40 <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80021a8:	2301      	movs	r3, #1
 80021aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		sDate.Month = RTC_MONTH_JANUARY;
 80021ae:	2301      	movs	r3, #1
 80021b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		sDate.Date = 0x1;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		sDate.Year = 0x0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80021c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021c4:	2201      	movs	r2, #1
 80021c6:	4619      	mov	r1, r3
 80021c8:	4823      	ldr	r0, [pc, #140]	; (8002258 <MX_RTC_Init+0x144>)
 80021ca:	f008 f939 	bl	800a440 <HAL_RTC_SetDate>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_RTC_Init+0xc4>
			Error_Handler();
 80021d4:	f000 fe34 	bl	8002e40 <Error_Handler>
		}
		/** Enable the Alarm A
		 */
		sAlarm.AlarmTime.Hours = 0x0;
 80021d8:	2300      	movs	r3, #0
 80021da:	703b      	strb	r3, [r7, #0]
		sAlarm.AlarmTime.Minutes = 0x0;
 80021dc:	2300      	movs	r3, #0
 80021de:	707b      	strb	r3, [r7, #1]
		sAlarm.AlarmTime.Seconds = 0x0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	70bb      	strb	r3, [r7, #2]
		sAlarm.AlarmTime.SubSeconds = 0x0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
		sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
		sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
		sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61bb      	str	r3, [r7, #24]
		sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
		sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	623b      	str	r3, [r7, #32]
		sAlarm.AlarmDateWeekDay = 0x1;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		sAlarm.Alarm = RTC_ALARM_A;
 8002202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
		if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8002208:	463b      	mov	r3, r7
 800220a:	2201      	movs	r2, #1
 800220c:	4619      	mov	r1, r3
 800220e:	4812      	ldr	r0, [pc, #72]	; (8002258 <MX_RTC_Init+0x144>)
 8002210:	f008 f9be 	bl	800a590 <HAL_RTC_SetAlarm>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_RTC_Init+0x10a>
			Error_Handler();
 800221a:	f000 fe11 	bl	8002e40 <Error_Handler>
		}
		/** Enable the Alarm B
		 */
		sAlarm.Alarm = RTC_ALARM_B;
 800221e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
		if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8002224:	463b      	mov	r3, r7
 8002226:	2201      	movs	r2, #1
 8002228:	4619      	mov	r1, r3
 800222a:	480b      	ldr	r0, [pc, #44]	; (8002258 <MX_RTC_Init+0x144>)
 800222c:	f008 f9b0 	bl	800a590 <HAL_RTC_SetAlarm>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_RTC_Init+0x126>
			Error_Handler();
 8002236:	f000 fe03 	bl	8002e40 <Error_Handler>
		}
		/** Enable the TimeStamp
		 */
		if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING,
 800223a:	2202      	movs	r2, #2
 800223c:	2100      	movs	r1, #0
 800223e:	4806      	ldr	r0, [pc, #24]	; (8002258 <MX_RTC_Init+0x144>)
 8002240:	f008 fb30 	bl	800a8a4 <HAL_RTCEx_SetTimeStamp>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_RTC_Init+0x13a>
				RTC_TIMESTAMPPIN_POS1) != HAL_OK) {
			Error_Handler();
 800224a:	f000 fdf9 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN RTC_Init 2 */

		/* USER CODE END RTC_Init 2 */

	}
 800224e:	bf00      	nop
 8002250:	3748      	adds	r7, #72	; 0x48
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20004598 	.word	0x20004598
 800225c:	40002800 	.word	0x40002800

08002260 <MX_SPI2_Init>:
	/**
	 * @brief SPI2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI2_Init(void) {
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI2_Init 1 */

		/* USER CODE END SPI2_Init 1 */
		/* SPI2 parameter configuration*/
		hspi2.Instance = SPI2;
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <MX_SPI2_Init+0x74>)
 8002266:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <MX_SPI2_Init+0x78>)
 8002268:	601a      	str	r2, [r3, #0]
		hspi2.Init.Mode = SPI_MODE_MASTER;
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <MX_SPI2_Init+0x74>)
 800226c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002270:	605a      	str	r2, [r3, #4]
		hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <MX_SPI2_Init+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
		hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002278:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <MX_SPI2_Init+0x74>)
 800227a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800227e:	60da      	str	r2, [r3, #12]
		hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <MX_SPI2_Init+0x74>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
		hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <MX_SPI2_Init+0x74>)
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
		hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <MX_SPI2_Init+0x74>)
 800228e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002292:	619a      	str	r2, [r3, #24]
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <MX_SPI2_Init+0x74>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
		hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <MX_SPI2_Init+0x74>)
 800229c:	2200      	movs	r2, #0
 800229e:	621a      	str	r2, [r3, #32]
		hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MX_SPI2_Init+0x74>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24
		hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <MX_SPI2_Init+0x74>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
		hspi2.Init.CRCPolynomial = 7;
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <MX_SPI2_Init+0x74>)
 80022ae:	2207      	movs	r2, #7
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
		hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <MX_SPI2_Init+0x74>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
		hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <MX_SPI2_Init+0x74>)
 80022ba:	2208      	movs	r2, #8
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34
		if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80022be:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_SPI2_Init+0x74>)
 80022c0:	f008 fbd7 	bl	800aa72 <HAL_SPI_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_SPI2_Init+0x6e>
			Error_Handler();
 80022ca:	f000 fdb9 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN SPI2_Init 2 */

		/* USER CODE END SPI2_Init 2 */

	}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200040a4 	.word	0x200040a4
 80022d8:	40003800 	.word	0x40003800

080022dc <MX_TIM1_Init>:
	/**
	 * @brief TIM1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM1_Init(void) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM1_Init 0 */

		/* USER CODE END TIM1_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80022e2:	f107 0310 	add.w	r3, r7, #16
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM1_Init 1 */

		/* USER CODE END TIM1_Init 1 */
		htim1.Instance = TIM1;
 80022fa:	4b20      	ldr	r3, [pc, #128]	; (800237c <MX_TIM1_Init+0xa0>)
 80022fc:	4a20      	ldr	r2, [pc, #128]	; (8002380 <MX_TIM1_Init+0xa4>)
 80022fe:	601a      	str	r2, [r3, #0]
		htim1.Init.Prescaler = 0;
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <MX_TIM1_Init+0xa0>)
 8002302:	2200      	movs	r2, #0
 8002304:	605a      	str	r2, [r3, #4]
		htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002306:	4b1d      	ldr	r3, [pc, #116]	; (800237c <MX_TIM1_Init+0xa0>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
		htim1.Init.Period = 65535;
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <MX_TIM1_Init+0xa0>)
 800230e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002312:	60da      	str	r2, [r3, #12]
		htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <MX_TIM1_Init+0xa0>)
 8002316:	2200      	movs	r2, #0
 8002318:	611a      	str	r2, [r3, #16]
		htim1.Init.RepetitionCounter = 0;
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <MX_TIM1_Init+0xa0>)
 800231c:	2200      	movs	r2, #0
 800231e:	615a      	str	r2, [r3, #20]
		htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <MX_TIM1_Init+0xa0>)
 8002322:	2200      	movs	r2, #0
 8002324:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002326:	4815      	ldr	r0, [pc, #84]	; (800237c <MX_TIM1_Init+0xa0>)
 8002328:	f008 fc4e 	bl	800abc8 <HAL_TIM_Base_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM1_Init+0x5a>
			Error_Handler();
 8002332:	f000 fd85 	bl	8002e40 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800233a:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	4619      	mov	r1, r3
 8002342:	480e      	ldr	r0, [pc, #56]	; (800237c <MX_TIM1_Init+0xa0>)
 8002344:	f008 fea0 	bl	800b088 <HAL_TIM_ConfigClockSource>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM1_Init+0x76>
			Error_Handler();
 800234e:	f000 fd77 	bl	8002e40 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	4619      	mov	r1, r3
 8002362:	4806      	ldr	r0, [pc, #24]	; (800237c <MX_TIM1_Init+0xa0>)
 8002364:	f009 f8bc 	bl	800b4e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM1_Init+0x96>
				!= HAL_OK) {
			Error_Handler();
 800236e:	f000 fd67 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN TIM1_Init 2 */

		/* USER CODE END TIM1_Init 2 */

	}
 8002372:	bf00      	nop
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200045b8 	.word	0x200045b8
 8002380:	40010000 	.word	0x40010000

08002384 <MX_TIM2_Init>:
	/**
	 * @brief TIM2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM2_Init(void) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM2_Init 0 */

		/* USER CODE END TIM2_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800238a:	f107 0310 	add.w	r3, r7, #16
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM2_Init 1 */

		/* USER CODE END TIM2_Init 1 */
		htim2.Instance = TIM2;
 80023a2:	4b1e      	ldr	r3, [pc, #120]	; (800241c <MX_TIM2_Init+0x98>)
 80023a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023a8:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 0;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	; (800241c <MX_TIM2_Init+0x98>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_TIM2_Init+0x98>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 4294967295;
 80023b6:	4b19      	ldr	r3, [pc, #100]	; (800241c <MX_TIM2_Init+0x98>)
 80023b8:	f04f 32ff 	mov.w	r2, #4294967295
 80023bc:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <MX_TIM2_Init+0x98>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <MX_TIM2_Init+0x98>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80023ca:	4814      	ldr	r0, [pc, #80]	; (800241c <MX_TIM2_Init+0x98>)
 80023cc:	f008 fbfc 	bl	800abc8 <HAL_TIM_Base_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM2_Init+0x56>
			Error_Handler();
 80023d6:	f000 fd33 	bl	8002e40 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023de:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	4619      	mov	r1, r3
 80023e6:	480d      	ldr	r0, [pc, #52]	; (800241c <MX_TIM2_Init+0x98>)
 80023e8:	f008 fe4e 	bl	800b088 <HAL_TIM_ConfigClockSource>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM2_Init+0x72>
			Error_Handler();
 80023f2:	f000 fd25 	bl	8002e40 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	4619      	mov	r1, r3
 8002402:	4806      	ldr	r0, [pc, #24]	; (800241c <MX_TIM2_Init+0x98>)
 8002404:	f009 f86c 	bl	800b4e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM2_Init+0x8e>
				!= HAL_OK) {
			Error_Handler();
 800240e:	f000 fd17 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN TIM2_Init 2 */

		/* USER CODE END TIM2_Init 2 */

	}
 8002412:	bf00      	nop
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200046c8 	.word	0x200046c8

08002420 <MX_TIM3_Init>:
	/**
	 * @brief TIM3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM3_Init(void) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM3_Init 0 */

		/* USER CODE END TIM3_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM3_Init 1 */

		/* USER CODE END TIM3_Init 1 */
		htim3.Instance = TIM3;
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <MX_TIM3_Init+0x94>)
 8002440:	4a1d      	ldr	r2, [pc, #116]	; (80024b8 <MX_TIM3_Init+0x98>)
 8002442:	601a      	str	r2, [r3, #0]
		htim3.Init.Prescaler = 0;
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <MX_TIM3_Init+0x94>)
 8002446:	2200      	movs	r2, #0
 8002448:	605a      	str	r2, [r3, #4]
		htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244a:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <MX_TIM3_Init+0x94>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
		htim3.Init.Period = 65535;
 8002450:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <MX_TIM3_Init+0x94>)
 8002452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002456:	60da      	str	r2, [r3, #12]
		htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <MX_TIM3_Init+0x94>)
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
		htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <MX_TIM3_Init+0x94>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002464:	4813      	ldr	r0, [pc, #76]	; (80024b4 <MX_TIM3_Init+0x94>)
 8002466:	f008 fbaf 	bl	800abc8 <HAL_TIM_Base_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM3_Init+0x54>
			Error_Handler();
 8002470:	f000 fce6 	bl	8002e40 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002478:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800247a:	f107 0310 	add.w	r3, r7, #16
 800247e:	4619      	mov	r1, r3
 8002480:	480c      	ldr	r0, [pc, #48]	; (80024b4 <MX_TIM3_Init+0x94>)
 8002482:	f008 fe01 	bl	800b088 <HAL_TIM_ConfigClockSource>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM3_Init+0x70>
			Error_Handler();
 800248c:	f000 fcd8 	bl	8002e40 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002490:	2300      	movs	r3, #0
 8002492:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	; (80024b4 <MX_TIM3_Init+0x94>)
 800249e:	f009 f81f 	bl	800b4e0 <HAL_TIMEx_MasterConfigSynchronization>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM3_Init+0x8c>
				!= HAL_OK) {
			Error_Handler();
 80024a8:	f000 fcca 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN TIM3_Init 2 */

		/* USER CODE END TIM3_Init 2 */

	}
 80024ac:	bf00      	nop
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20004318 	.word	0x20004318
 80024b8:	40000400 	.word	0x40000400

080024bc <MX_TIM5_Init>:
	/**
	 * @brief TIM5 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM5_Init(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM5_Init 0 */

		/* USER CODE END TIM5_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80024c2:	f107 0310 	add.w	r3, r7, #16
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM5_Init 1 */

		/* USER CODE END TIM5_Init 1 */
		htim5.Instance = TIM5;
 80024da:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <MX_TIM5_Init+0x94>)
 80024dc:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <MX_TIM5_Init+0x98>)
 80024de:	601a      	str	r2, [r3, #0]
		htim5.Init.Prescaler = 0;
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <MX_TIM5_Init+0x94>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	605a      	str	r2, [r3, #4]
		htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <MX_TIM5_Init+0x94>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
		htim5.Init.Period = 4294967295;
 80024ec:	4b18      	ldr	r3, [pc, #96]	; (8002550 <MX_TIM5_Init+0x94>)
 80024ee:	f04f 32ff 	mov.w	r2, #4294967295
 80024f2:	60da      	str	r2, [r3, #12]
		htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <MX_TIM5_Init+0x94>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
		htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <MX_TIM5_Init+0x94>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8002500:	4813      	ldr	r0, [pc, #76]	; (8002550 <MX_TIM5_Init+0x94>)
 8002502:	f008 fb61 	bl	800abc8 <HAL_TIM_Base_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM5_Init+0x54>
			Error_Handler();
 800250c:	f000 fc98 	bl	8002e40 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002514:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	4619      	mov	r1, r3
 800251c:	480c      	ldr	r0, [pc, #48]	; (8002550 <MX_TIM5_Init+0x94>)
 800251e:	f008 fdb3 	bl	800b088 <HAL_TIM_ConfigClockSource>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM5_Init+0x70>
			Error_Handler();
 8002528:	f000 fc8a 	bl	8002e40 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252c:	2300      	movs	r3, #0
 800252e:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	4619      	mov	r1, r3
 8002538:	4805      	ldr	r0, [pc, #20]	; (8002550 <MX_TIM5_Init+0x94>)
 800253a:	f008 ffd1 	bl	800b4e0 <HAL_TIMEx_MasterConfigSynchronization>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM5_Init+0x8c>
				!= HAL_OK) {
			Error_Handler();
 8002544:	f000 fc7c 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN TIM5_Init 2 */

		/* USER CODE END TIM5_Init 2 */

	}
 8002548:	bf00      	nop
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200042cc 	.word	0x200042cc
 8002554:	40000c00 	.word	0x40000c00

08002558 <MX_TIM7_Init>:
	/**
	 * @brief TIM7 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM7_Init(void) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM7_Init 0 */

		/* USER CODE END TIM7_Init 0 */

		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM7_Init 1 */

		/* USER CODE END TIM7_Init 1 */
		htim7.Instance = TIM7;
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <MX_TIM7_Init+0x68>)
 800256a:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <MX_TIM7_Init+0x6c>)
 800256c:	601a      	str	r2, [r3, #0]
		htim7.Init.Prescaler = 0;
 800256e:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <MX_TIM7_Init+0x68>)
 8002570:	2200      	movs	r2, #0
 8002572:	605a      	str	r2, [r3, #4]
		htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <MX_TIM7_Init+0x68>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
		htim7.Init.Period = 100;
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <MX_TIM7_Init+0x68>)
 800257c:	2264      	movs	r2, #100	; 0x64
 800257e:	60da      	str	r2, [r3, #12]
		htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <MX_TIM7_Init+0x68>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8002586:	480e      	ldr	r0, [pc, #56]	; (80025c0 <MX_TIM7_Init+0x68>)
 8002588:	f008 fb1e 	bl	800abc8 <HAL_TIM_Base_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM7_Init+0x3e>
			Error_Handler();
 8002592:	f000 fc55 	bl	8002e40 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002596:	2320      	movs	r3, #32
 8002598:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4807      	ldr	r0, [pc, #28]	; (80025c0 <MX_TIM7_Init+0x68>)
 80025a4:	f008 ff9c 	bl	800b4e0 <HAL_TIMEx_MasterConfigSynchronization>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM7_Init+0x5a>
				!= HAL_OK) {
			Error_Handler();
 80025ae:	f000 fc47 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN TIM7_Init 2 */
		HAL_TIM_Base_Start(&htim7);
 80025b2:	4803      	ldr	r0, [pc, #12]	; (80025c0 <MX_TIM7_Init+0x68>)
 80025b4:	f008 fb60 	bl	800ac78 <HAL_TIM_Base_Start>

		/* USER CODE END TIM7_Init 2 */

	}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20004748 	.word	0x20004748
 80025c4:	40001400 	.word	0x40001400

080025c8 <MX_TIM8_Init>:
	/**
	 * @brief TIM8 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM8_Init(void) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM8_Init 0 */

		/* USER CODE END TIM8_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80025ce:	f107 0310 	add.w	r3, r7, #16
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM8_Init 1 */

		/* USER CODE END TIM8_Init 1 */
		htim8.Instance = TIM8;
 80025e6:	4b20      	ldr	r3, [pc, #128]	; (8002668 <MX_TIM8_Init+0xa0>)
 80025e8:	4a20      	ldr	r2, [pc, #128]	; (800266c <MX_TIM8_Init+0xa4>)
 80025ea:	601a      	str	r2, [r3, #0]
		htim8.Init.Prescaler = 0;
 80025ec:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <MX_TIM8_Init+0xa0>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	605a      	str	r2, [r3, #4]
		htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <MX_TIM8_Init+0xa0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
		htim8.Init.Period = 65535;
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <MX_TIM8_Init+0xa0>)
 80025fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025fe:	60da      	str	r2, [r3, #12]
		htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <MX_TIM8_Init+0xa0>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
		htim8.Init.RepetitionCounter = 0;
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <MX_TIM8_Init+0xa0>)
 8002608:	2200      	movs	r2, #0
 800260a:	615a      	str	r2, [r3, #20]
		htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260c:	4b16      	ldr	r3, [pc, #88]	; (8002668 <MX_TIM8_Init+0xa0>)
 800260e:	2200      	movs	r2, #0
 8002610:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8002612:	4815      	ldr	r0, [pc, #84]	; (8002668 <MX_TIM8_Init+0xa0>)
 8002614:	f008 fad8 	bl	800abc8 <HAL_TIM_Base_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM8_Init+0x5a>
			Error_Handler();
 800261e:	f000 fc0f 	bl	8002e40 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002626:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	4619      	mov	r1, r3
 800262e:	480e      	ldr	r0, [pc, #56]	; (8002668 <MX_TIM8_Init+0xa0>)
 8002630:	f008 fd2a 	bl	800b088 <HAL_TIM_ConfigClockSource>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM8_Init+0x76>
			Error_Handler();
 800263a:	f000 fc01 	bl	8002e40 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4806      	ldr	r0, [pc, #24]	; (8002668 <MX_TIM8_Init+0xa0>)
 8002650:	f008 ff46 	bl	800b4e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_TIM8_Init+0x96>
				!= HAL_OK) {
			Error_Handler();
 800265a:	f000 fbf1 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN TIM8_Init 2 */

		/* USER CODE END TIM8_Init 2 */

	}
 800265e:	bf00      	nop
 8002660:	3720      	adds	r7, #32
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20004190 	.word	0x20004190
 800266c:	40010400 	.word	0x40010400

08002670 <MX_UART7_Init>:
	/**
	 * @brief UART7 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_UART7_Init(void) {
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
		/* USER CODE END UART7_Init 0 */

		/* USER CODE BEGIN UART7_Init 1 */

		/* USER CODE END UART7_Init 1 */
		huart7.Instance = UART7;
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <MX_UART7_Init+0x58>)
 8002676:	4a15      	ldr	r2, [pc, #84]	; (80026cc <MX_UART7_Init+0x5c>)
 8002678:	601a      	str	r2, [r3, #0]
		huart7.Init.BaudRate = 115200;
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <MX_UART7_Init+0x58>)
 800267c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002680:	605a      	str	r2, [r3, #4]
		huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <MX_UART7_Init+0x58>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
		huart7.Init.StopBits = UART_STOPBITS_1;
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <MX_UART7_Init+0x58>)
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
		huart7.Init.Parity = UART_PARITY_NONE;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <MX_UART7_Init+0x58>)
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
		huart7.Init.Mode = UART_MODE_TX_RX;
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <MX_UART7_Init+0x58>)
 8002696:	220c      	movs	r2, #12
 8002698:	615a      	str	r2, [r3, #20]
		huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <MX_UART7_Init+0x58>)
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
		huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <MX_UART7_Init+0x58>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	61da      	str	r2, [r3, #28]
		huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <MX_UART7_Init+0x58>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	621a      	str	r2, [r3, #32]
		huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MX_UART7_Init+0x58>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_UART_Init(&huart7) != HAL_OK) {
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_UART7_Init+0x58>)
 80026b4:	f008 ffc0 	bl	800b638 <HAL_UART_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_UART7_Init+0x52>
			Error_Handler();
 80026be:	f000 fbbf 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN UART7_Init 2 */

		/* USER CODE END UART7_Init 2 */

	}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000410c 	.word	0x2000410c
 80026cc:	40007800 	.word	0x40007800

080026d0 <MX_USART1_UART_Init>:
	/**
	 * @brief USART1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART1_UART_Init(void) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
		/* USER CODE END USART1_Init 0 */

		/* USER CODE BEGIN USART1_Init 1 */

		/* USER CODE END USART1_Init 1 */
		huart1.Instance = USART1;
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <MX_USART1_UART_Init+0x58>)
 80026d6:	4a15      	ldr	r2, [pc, #84]	; (800272c <MX_USART1_UART_Init+0x5c>)
 80026d8:	601a      	str	r2, [r3, #0]
		huart1.Init.BaudRate = 115200;
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <MX_USART1_UART_Init+0x58>)
 80026dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e0:	605a      	str	r2, [r3, #4]
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <MX_USART1_UART_Init+0x58>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <MX_USART1_UART_Init+0x58>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <MX_USART1_UART_Init+0x58>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <MX_USART1_UART_Init+0x58>)
 80026f6:	220c      	movs	r2, #12
 80026f8:	615a      	str	r2, [r3, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <MX_USART1_UART_Init+0x58>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <MX_USART1_UART_Init+0x58>)
 8002702:	2200      	movs	r2, #0
 8002704:	61da      	str	r2, [r3, #28]
		huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <MX_USART1_UART_Init+0x58>)
 8002708:	2200      	movs	r2, #0
 800270a:	621a      	str	r2, [r3, #32]
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <MX_USART1_UART_Init+0x58>)
 800270e:	2200      	movs	r2, #0
 8002710:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002712:	4805      	ldr	r0, [pc, #20]	; (8002728 <MX_USART1_UART_Init+0x58>)
 8002714:	f008 ff90 	bl	800b638 <HAL_UART_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_USART1_UART_Init+0x52>
			Error_Handler();
 800271e:	f000 fb8f 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN USART1_Init 2 */

		/* USER CODE END USART1_Init 2 */

	}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20004500 	.word	0x20004500
 800272c:	40011000 	.word	0x40011000

08002730 <MX_USART6_UART_Init>:
	/**
	 * @brief USART6 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART6_UART_Init(void) {
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
		/* USER CODE END USART6_Init 0 */

		/* USER CODE BEGIN USART6_Init 1 */

		/* USER CODE END USART6_Init 1 */
		huart6.Instance = USART6;
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <MX_USART6_UART_Init+0x58>)
 8002736:	4a15      	ldr	r2, [pc, #84]	; (800278c <MX_USART6_UART_Init+0x5c>)
 8002738:	601a      	str	r2, [r3, #0]
		huart6.Init.BaudRate = 115200;
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <MX_USART6_UART_Init+0x58>)
 800273c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002740:	605a      	str	r2, [r3, #4]
		huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_USART6_UART_Init+0x58>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
		huart6.Init.StopBits = UART_STOPBITS_1;
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <MX_USART6_UART_Init+0x58>)
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
		huart6.Init.Parity = UART_PARITY_NONE;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <MX_USART6_UART_Init+0x58>)
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]
		huart6.Init.Mode = UART_MODE_TX_RX;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <MX_USART6_UART_Init+0x58>)
 8002756:	220c      	movs	r2, #12
 8002758:	615a      	str	r2, [r3, #20]
		huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <MX_USART6_UART_Init+0x58>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
		huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <MX_USART6_UART_Init+0x58>)
 8002762:	2200      	movs	r2, #0
 8002764:	61da      	str	r2, [r3, #28]
		huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <MX_USART6_UART_Init+0x58>)
 8002768:	2200      	movs	r2, #0
 800276a:	621a      	str	r2, [r3, #32]
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <MX_USART6_UART_Init+0x58>)
 800276e:	2200      	movs	r2, #0
 8002770:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002772:	4805      	ldr	r0, [pc, #20]	; (8002788 <MX_USART6_UART_Init+0x58>)
 8002774:	f008 ff60 	bl	800b638 <HAL_UART_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_USART6_UART_Init+0x52>
			Error_Handler();
 800277e:	f000 fb5f 	bl	8002e40 <Error_Handler>
		}
		/* USER CODE BEGIN USART6_Init 2 */

		/* USER CODE END USART6_Init 2 */

	}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20004604 	.word	0x20004604
 800278c:	40011400 	.word	0x40011400

08002790 <MX_DMA_Init>:

	/**
	 * Enable DMA controller clock
	 */
	static void MX_DMA_Init(void) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0

		/* DMA controller clock enable */
		__HAL_RCC_DMA1_CLK_ENABLE();
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <MX_DMA_Init+0x38>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <MX_DMA_Init+0x38>)
 800279c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <MX_DMA_Init+0x38>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]

		/* DMA interrupt init */
		/* DMA1_Stream5_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2105      	movs	r1, #5
 80027b2:	2010      	movs	r0, #16
 80027b4:	f003 fd0a 	bl	80061cc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027b8:	2010      	movs	r0, #16
 80027ba:	f003 fd23 	bl	8006204 <HAL_NVIC_EnableIRQ>

	}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800

080027cc <MX_FMC_Init>:

	/* FMC initialization function */
	static void MX_FMC_Init(void) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN FMC_Init 0 */

		/* USER CODE END FMC_Init 0 */

		FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
 80027e0:	615a      	str	r2, [r3, #20]
 80027e2:	619a      	str	r2, [r3, #24]

		/* USER CODE END FMC_Init 1 */

		/** Perform the SDRAM1 memory initialization sequence
		 */
		hsdram1.Instance = FMC_SDRAM_DEVICE;
 80027e4:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <MX_FMC_Init+0x98>)
 80027e6:	4a20      	ldr	r2, [pc, #128]	; (8002868 <MX_FMC_Init+0x9c>)
 80027e8:	601a      	str	r2, [r3, #0]
		/* hsdram1.Init */
		hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80027ea:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <MX_FMC_Init+0x98>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
		hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80027f0:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <MX_FMC_Init+0x98>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
		hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <MX_FMC_Init+0x98>)
 80027f8:	2204      	movs	r2, #4
 80027fa:	60da      	str	r2, [r3, #12]
		hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <MX_FMC_Init+0x98>)
 80027fe:	2210      	movs	r2, #16
 8002800:	611a      	str	r2, [r3, #16]
		hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002802:	4b18      	ldr	r3, [pc, #96]	; (8002864 <MX_FMC_Init+0x98>)
 8002804:	2240      	movs	r2, #64	; 0x40
 8002806:	615a      	str	r2, [r3, #20]
		hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002808:	4b16      	ldr	r3, [pc, #88]	; (8002864 <MX_FMC_Init+0x98>)
 800280a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800280e:	619a      	str	r2, [r3, #24]
		hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002810:	4b14      	ldr	r3, [pc, #80]	; (8002864 <MX_FMC_Init+0x98>)
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
		hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <MX_FMC_Init+0x98>)
 8002818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800281c:	621a      	str	r2, [r3, #32]
		hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <MX_FMC_Init+0x98>)
 8002820:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002824:	625a      	str	r2, [r3, #36]	; 0x24
		hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <MX_FMC_Init+0x98>)
 8002828:	2200      	movs	r2, #0
 800282a:	629a      	str	r2, [r3, #40]	; 0x28
		/* SdramTiming */
		SdramTiming.LoadToActiveDelay = 2;
 800282c:	2302      	movs	r3, #2
 800282e:	607b      	str	r3, [r7, #4]
		SdramTiming.ExitSelfRefreshDelay = 7;
 8002830:	2307      	movs	r3, #7
 8002832:	60bb      	str	r3, [r7, #8]
		SdramTiming.SelfRefreshTime = 4;
 8002834:	2304      	movs	r3, #4
 8002836:	60fb      	str	r3, [r7, #12]
		SdramTiming.RowCycleDelay = 7;
 8002838:	2307      	movs	r3, #7
 800283a:	613b      	str	r3, [r7, #16]
		SdramTiming.WriteRecoveryTime = 3;
 800283c:	2303      	movs	r3, #3
 800283e:	617b      	str	r3, [r7, #20]
		SdramTiming.RPDelay = 2;
 8002840:	2302      	movs	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
		SdramTiming.RCDDelay = 2;
 8002844:	2302      	movs	r3, #2
 8002846:	61fb      	str	r3, [r7, #28]

		if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	4619      	mov	r1, r3
 800284c:	4805      	ldr	r0, [pc, #20]	; (8002864 <MX_FMC_Init+0x98>)
 800284e:	f008 f87f 	bl	800a950 <HAL_SDRAM_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_FMC_Init+0x90>
			Error_Handler();
 8002858:	f000 faf2 	bl	8002e40 <Error_Handler>
		}

		/* USER CODE BEGIN FMC_Init 2 */

		/* USER CODE END FMC_Init 2 */
	}
 800285c:	bf00      	nop
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20004714 	.word	0x20004714
 8002868:	a0000140 	.word	0xa0000140

0800286c <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b090      	sub	sp, #64	; 0x40
 8002870:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	60da      	str	r2, [r3, #12]
 8002880:	611a      	str	r2, [r3, #16]

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8002882:	4baf      	ldr	r3, [pc, #700]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4aae      	ldr	r2, [pc, #696]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002888:	f043 0310 	orr.w	r3, r3, #16
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4bac      	ldr	r3, [pc, #688]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
		__HAL_RCC_GPIOG_CLK_ENABLE();
 800289a:	4ba9      	ldr	r3, [pc, #676]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4aa8      	ldr	r2, [pc, #672]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 80028a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4ba6      	ldr	r3, [pc, #664]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	4ba3      	ldr	r3, [pc, #652]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4aa2      	ldr	r2, [pc, #648]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4ba0      	ldr	r3, [pc, #640]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	623b      	str	r3, [r7, #32]
 80028c8:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80028ca:	4b9d      	ldr	r3, [pc, #628]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a9c      	ldr	r2, [pc, #624]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 80028d0:	f043 0308 	orr.w	r3, r3, #8
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b9a      	ldr	r3, [pc, #616]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80028e2:	4b97      	ldr	r3, [pc, #604]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a96      	ldr	r2, [pc, #600]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b94      	ldr	r3, [pc, #592]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	4b91      	ldr	r3, [pc, #580]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a90      	ldr	r2, [pc, #576]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b8e      	ldr	r3, [pc, #568]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOJ_CLK_ENABLE();
 8002912:	4b8b      	ldr	r3, [pc, #556]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a8a      	ldr	r2, [pc, #552]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002918:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b88      	ldr	r3, [pc, #544]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOI_CLK_ENABLE();
 800292a:	4b85      	ldr	r3, [pc, #532]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a84      	ldr	r2, [pc, #528]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b82      	ldr	r3, [pc, #520]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOK_CLK_ENABLE();
 8002942:	4b7f      	ldr	r3, [pc, #508]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a7e      	ldr	r2, [pc, #504]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002948:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b7c      	ldr	r3, [pc, #496]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800295a:	4b79      	ldr	r3, [pc, #484]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a78      	ldr	r2, [pc, #480]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002960:	f043 0320 	orr.w	r3, r3, #32
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b76      	ldr	r3, [pc, #472]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOH_CLK_ENABLE();
 8002972:	4b73      	ldr	r3, [pc, #460]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a72      	ldr	r2, [pc, #456]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b70      	ldr	r3, [pc, #448]	; (8002b40 <MX_GPIO_Init+0x2d4>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	683b      	ldr	r3, [r7, #0]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOE, LED14_Pin | LED15_Pin, GPIO_PIN_RESET);
 800298a:	2200      	movs	r2, #0
 800298c:	2160      	movs	r1, #96	; 0x60
 800298e:	486d      	ldr	r0, [pc, #436]	; (8002b44 <MX_GPIO_Init+0x2d8>)
 8002990:	f005 f908 	bl	8007ba4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port,
 8002994:	2201      	movs	r2, #1
 8002996:	2120      	movs	r1, #32
 8002998:	486b      	ldr	r0, [pc, #428]	; (8002b48 <MX_GPIO_Init+0x2dc>)
 800299a:	f005 f903 	bl	8007ba4 <HAL_GPIO_WritePin>
				OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800299e:	2200      	movs	r2, #0
 80029a0:	2108      	movs	r1, #8
 80029a2:	4869      	ldr	r0, [pc, #420]	; (8002b48 <MX_GPIO_Init+0x2dc>)
 80029a4:	f005 f8fe 	bl	8007ba4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80029a8:	2201      	movs	r2, #1
 80029aa:	2108      	movs	r1, #8
 80029ac:	4867      	ldr	r0, [pc, #412]	; (8002b4c <MX_GPIO_Init+0x2e0>)
 80029ae:	f005 f8f9 	bl	8007ba4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80029b2:	2201      	movs	r2, #1
 80029b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029b8:	4865      	ldr	r0, [pc, #404]	; (8002b50 <MX_GPIO_Init+0x2e4>)
 80029ba:	f005 f8f3 	bl	8007ba4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOH,
 80029be:	2200      	movs	r2, #0
 80029c0:	f645 6140 	movw	r1, #24128	; 0x5e40
 80029c4:	4863      	ldr	r0, [pc, #396]	; (8002b54 <MX_GPIO_Init+0x2e8>)
 80029c6:	f005 f8ed 	bl	8007ba4 <HAL_GPIO_WritePin>
				LED13_Pin | LED17_Pin | LED11_Pin | LED12_Pin | LED2_Pin
						| LED18_Pin, GPIO_PIN_RESET);

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 80029ca:	2200      	movs	r2, #0
 80029cc:	21c8      	movs	r1, #200	; 0xc8
 80029ce:	4862      	ldr	r0, [pc, #392]	; (8002b58 <MX_GPIO_Init+0x2ec>)
 80029d0:	f005 f8e8 	bl	8007ba4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);

		/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
		GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80029d4:	2308      	movs	r3, #8
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d8:	2300      	movs	r3, #0
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80029e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e4:	4619      	mov	r1, r3
 80029e6:	4857      	ldr	r0, [pc, #348]	; (8002b44 <MX_GPIO_Init+0x2d8>)
 80029e8:	f004 fe0c 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : QSPI_D2_Pin */
		GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80029ec:	2304      	movs	r3, #4
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80029fc:	2309      	movs	r3, #9
 80029fe:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a04:	4619      	mov	r1, r3
 8002a06:	484f      	ldr	r0, [pc, #316]	; (8002b44 <MX_GPIO_Init+0x2d8>)
 8002a08:	f004 fdfc 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
		GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 8002a0c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a1e:	230b      	movs	r3, #11
 8002a20:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a26:	4619      	mov	r1, r3
 8002a28:	484b      	ldr	r0, [pc, #300]	; (8002b58 <MX_GPIO_Init+0x2ec>)
 8002a2a:	f004 fdeb 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
		 ULPI_D1_Pin ULPI_D4_Pin */
		GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin
 8002a2e:	f643 0323 	movw	r3, #14371	; 0x3823
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
				| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a40:	230a      	movs	r3, #10
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4844      	ldr	r0, [pc, #272]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 8002a4c:	f004 fdda 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : SPDIF_RX0_Pin */
		GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002a60:	2308      	movs	r3, #8
 8002a62:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4837      	ldr	r0, [pc, #220]	; (8002b48 <MX_GPIO_Init+0x2dc>)
 8002a6c:	f004 fdca 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
		 PC8 */
		GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
 8002a70:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
				| GPIO_PIN_9 | GPIO_PIN_8;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002a82:	230c      	movs	r3, #12
 8002a84:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4834      	ldr	r0, [pc, #208]	; (8002b60 <MX_GPIO_Init+0x2f4>)
 8002a8e:	f004 fdb9 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : BP2_Pin BP1_Pin PA6 */
		GPIO_InitStruct.Pin = BP2_Pin | BP1_Pin | GPIO_PIN_6;
 8002a92:	f248 1340 	movw	r3, #33088	; 0x8140
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	482f      	ldr	r0, [pc, #188]	; (8002b64 <MX_GPIO_Init+0x2f8>)
 8002aa8:	f004 fdac 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : LED14_Pin LED15_Pin */
		GPIO_InitStruct.Pin = LED14_Pin | LED15_Pin;
 8002aac:	2360      	movs	r3, #96	; 0x60
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4820      	ldr	r0, [pc, #128]	; (8002b44 <MX_GPIO_Init+0x2d8>)
 8002ac4:	f004 fd9e 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : QSPI_NCS_Pin */
		GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002ac8:	2340      	movs	r3, #64	; 0x40
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ad8:	230a      	movs	r3, #10
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	481e      	ldr	r0, [pc, #120]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 8002ae4:	f004 fd8e 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : OTG_FS_VBUS_Pin */
		GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aee:	2300      	movs	r3, #0
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002afa:	4619      	mov	r1, r3
 8002afc:	481a      	ldr	r0, [pc, #104]	; (8002b68 <MX_GPIO_Init+0x2fc>)
 8002afe:	f004 fd81 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : Audio_INT_Pin */
		GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002b02:	2340      	movs	r3, #64	; 0x40
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b06:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b14:	4619      	mov	r1, r3
 8002b16:	480c      	ldr	r0, [pc, #48]	; (8002b48 <MX_GPIO_Init+0x2dc>)
 8002b18:	f004 fd74 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
		GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin;
 8002b1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b2e:	230a      	movs	r3, #10
 8002b30:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b36:	4619      	mov	r1, r3
 8002b38:	480a      	ldr	r0, [pc, #40]	; (8002b64 <MX_GPIO_Init+0x2f8>)
 8002b3a:	f004 fd63 	bl	8007604 <HAL_GPIO_Init>
 8002b3e:	e015      	b.n	8002b6c <MX_GPIO_Init+0x300>
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40020c00 	.word	0x40020c00
 8002b4c:	40022800 	.word	0x40022800
 8002b50:	40022000 	.word	0x40022000
 8002b54:	40021c00 	.word	0x40021c00
 8002b58:	40021800 	.word	0x40021800
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40020800 	.word	0x40020800
 8002b64:	40020000 	.word	0x40020000
 8002b68:	40022400 	.word	0x40022400

		/*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
		GPIO_InitStruct.Pin = SAI2_MCLKA_Pin | SAI2_SCKA_Pin | SAI2_FSA_Pin
 8002b6c:	23f0      	movs	r3, #240	; 0xf0
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
				| SAI2_SDA_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b7c:	230a      	movs	r3, #10
 8002b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b84:	4619      	mov	r1, r3
 8002b86:	4891      	ldr	r0, [pc, #580]	; (8002dcc <MX_GPIO_Init+0x560>)
 8002b88:	f004 fd3c 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : SAI2_SDB_Pin */
		GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b9e:	230a      	movs	r3, #10
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4889      	ldr	r0, [pc, #548]	; (8002dd0 <MX_GPIO_Init+0x564>)
 8002baa:	f004 fd2b 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
		GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin | LED16_Pin;
 8002bae:	2328      	movs	r3, #40	; 0x28
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4883      	ldr	r0, [pc, #524]	; (8002dd4 <MX_GPIO_Init+0x568>)
 8002bc6:	f004 fd1d 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : uSD_Detect_Pin */
		GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bdc:	4619      	mov	r1, r3
 8002bde:	487e      	ldr	r0, [pc, #504]	; (8002dd8 <MX_GPIO_Init+0x56c>)
 8002be0:	f004 fd10 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : LCD_BL_CTRL_Pin */
		GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002be4:	2308      	movs	r3, #8
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be8:	2301      	movs	r3, #1
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4878      	ldr	r0, [pc, #480]	; (8002ddc <MX_GPIO_Init+0x570>)
 8002bfc:	f004 fd02 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : PG9 RMII_RXER_Pin */
		GPIO_InitStruct.Pin = GPIO_PIN_9 | RMII_RXER_Pin;
 8002c00:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c06:	2300      	movs	r3, #0
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c12:	4619      	mov	r1, r3
 8002c14:	486e      	ldr	r0, [pc, #440]	; (8002dd0 <MX_GPIO_Init+0x564>)
 8002c16:	f004 fcf5 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
		GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002c1a:	2310      	movs	r3, #16
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4869      	ldr	r0, [pc, #420]	; (8002dd4 <MX_GPIO_Init+0x568>)
 8002c2e:	f004 fce9 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : SDMMC_CMD_Pin */
		GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002c32:	2304      	movs	r3, #4
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002c42:	230c      	movs	r3, #12
 8002c44:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4861      	ldr	r0, [pc, #388]	; (8002dd4 <MX_GPIO_Init+0x568>)
 8002c4e:	f004 fcd9 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
		GPIO_InitStruct.Pin = TP3_Pin | GPIO_PIN_13 | NC2_Pin;
 8002c52:	f24a 0304 	movw	r3, #40964	; 0xa004
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c64:	4619      	mov	r1, r3
 8002c66:	485e      	ldr	r0, [pc, #376]	; (8002de0 <MX_GPIO_Init+0x574>)
 8002c68:	f004 fccc 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : LCD_DISP_Pin */
		GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c72:	2301      	movs	r3, #1
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c82:	4619      	mov	r1, r3
 8002c84:	4851      	ldr	r0, [pc, #324]	; (8002dcc <MX_GPIO_Init+0x560>)
 8002c86:	f004 fcbd 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
		 LED2_Pin LED18_Pin */
		GPIO_InitStruct.Pin = LED13_Pin | LED17_Pin | LED11_Pin | LED12_Pin
 8002c8a:	f645 6340 	movw	r3, #24128	; 0x5e40
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
				| LED2_Pin | LED18_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c90:	2301      	movs	r3, #1
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	484f      	ldr	r0, [pc, #316]	; (8002de0 <MX_GPIO_Init+0x574>)
 8002ca4:	f004 fcae 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : LCD_INT_Pin */
		GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002cae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4843      	ldr	r0, [pc, #268]	; (8002dcc <MX_GPIO_Init+0x560>)
 8002cc0:	f004 fca0 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : ULPI_NXT_Pin */
		GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002cd4:	230a      	movs	r3, #10
 8002cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4840      	ldr	r0, [pc, #256]	; (8002de0 <MX_GPIO_Init+0x574>)
 8002ce0:	f004 fc90 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
		GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8002ce4:	23c8      	movs	r3, #200	; 0xc8
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4835      	ldr	r0, [pc, #212]	; (8002dd0 <MX_GPIO_Init+0x564>)
 8002cfc:	f004 fc82 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
		GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8002d00:	2305      	movs	r3, #5
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d10:	230a      	movs	r3, #10
 8002d12:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d18:	4619      	mov	r1, r3
 8002d1a:	482f      	ldr	r0, [pc, #188]	; (8002dd8 <MX_GPIO_Init+0x56c>)
 8002d1c:	f004 fc72 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
		GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8002d20:	2332      	movs	r3, #50	; 0x32
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d30:	230b      	movs	r3, #11
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4827      	ldr	r0, [pc, #156]	; (8002dd8 <MX_GPIO_Init+0x56c>)
 8002d3c:	f004 fc62 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pin : PB2 */
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d40:	2304      	movs	r3, #4
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d50:	2309      	movs	r3, #9
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4822      	ldr	r0, [pc, #136]	; (8002de4 <MX_GPIO_Init+0x578>)
 8002d5c:	f004 fc52 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
		GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 8002d60:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d72:	2309      	movs	r3, #9
 8002d74:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4815      	ldr	r0, [pc, #84]	; (8002dd4 <MX_GPIO_Init+0x568>)
 8002d7e:	f004 fc41 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
		GPIO_InitStruct.Pin =
 8002d82:	2386      	movs	r3, #134	; 0x86
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
				RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d92:	230b      	movs	r3, #11
 8002d94:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4812      	ldr	r0, [pc, #72]	; (8002de8 <MX_GPIO_Init+0x57c>)
 8002d9e:	f004 fc31 	bl	8007604 <HAL_GPIO_Init>

		/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
		GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8002da2:	2328      	movs	r3, #40	; 0x28
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dae:	2303      	movs	r3, #3
 8002db0:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002db2:	230a      	movs	r3, #10
 8002db4:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dba:	4619      	mov	r1, r3
 8002dbc:	480a      	ldr	r0, [pc, #40]	; (8002de8 <MX_GPIO_Init+0x57c>)
 8002dbe:	f004 fc21 	bl	8007604 <HAL_GPIO_Init>

	}
 8002dc2:	bf00      	nop
 8002dc4:	3740      	adds	r7, #64	; 0x40
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40022000 	.word	0x40022000
 8002dd0:	40021800 	.word	0x40021800
 8002dd4:	40020c00 	.word	0x40020c00
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	40022800 	.word	0x40022800
 8002de0:	40021c00 	.word	0x40021c00
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40020000 	.word	0x40020000

08002dec <StartDefaultTask>:
	 * @brief  Function implementing the defaultTask thread.
	 * @param  argument: Not used
	 * @retval None
	 */
	/* USER CODE END Header_StartDefaultTask */
	void StartDefaultTask(void const *argument) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
		/* USER CODE BEGIN 5 */
		/* Infinite loop */
		for (;;) {
			osDelay(1);
 8002df4:	2001      	movs	r0, #1
 8002df6:	f009 f9cf 	bl	800c198 <osDelay>
 8002dfa:	e7fb      	b.n	8002df4 <StartDefaultTask+0x8>

08002dfc <codeTacheJeu>:
	 * @brief Function implementing the tacheJeu thread.
	 * @param argument: Not used
	 * @retval None
	 */
	/* USER CODE END Header_codeTacheJeu */
	void codeTacheJeu(void const *argument) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
		/* USER CODE BEGIN codeTacheJeu */
		/* Infinite loop */
		for (;;) {
			osDelay(1);
 8002e04:	2001      	movs	r0, #1
 8002e06:	f009 f9c7 	bl	800c198 <osDelay>
 8002e0a:	e7fb      	b.n	8002e04 <codeTacheJeu+0x8>

08002e0c <codeTacheSon>:
	 * @brief Function implementing the tacheSon thread.
	 * @param argument: Not used
	 * @retval None
	 */
	/* USER CODE END Header_codeTacheSon */
	void codeTacheSon(void const *argument) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
		/* USER CODE BEGIN codeTacheSon */
		/* Infinite loop */
		for (;;) {
			osDelay(1);
 8002e14:	2001      	movs	r0, #1
 8002e16:	f009 f9bf 	bl	800c198 <osDelay>
 8002e1a:	e7fb      	b.n	8002e14 <codeTacheSon+0x8>

08002e1c <HAL_TIM_PeriodElapsedCallback>:
	 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
	 * a global variable "uwTick" used as application time base.
	 * @param  htim : TIM handle
	 * @retval None
	 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
		/* USER CODE BEGIN Callback 0 */

		/* USER CODE END Callback 0 */
		if (htim->Instance == TIM6) {
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <HAL_TIM_PeriodElapsedCallback+0x16>
			HAL_IncTick();
 8002e2e:	f002 fe19 	bl	8005a64 <HAL_IncTick>
		}
		/* USER CODE BEGIN Callback 1 */

		/* USER CODE END Callback 1 */
	}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40001000 	.word	0x40001000

08002e40 <Error_Handler>:

	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void) {
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e44:	b672      	cpsid	i
}
 8002e46:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8002e48:	e7fe      	b.n	8002e48 <Error_Handler+0x8>
	...

08002e4c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08c      	sub	sp, #48	; 0x30
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a51      	ldr	r2, [pc, #324]	; (8002f9c <I2Cx_MspInit+0x150>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d14d      	bne.n	8002ef8 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002e5c:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	4a4f      	ldr	r2, [pc, #316]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e66:	6313      	str	r3, [r2, #48]	; 0x30
 8002e68:	4b4d      	ldr	r3, [pc, #308]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002e78:	2312      	movs	r3, #18
 8002e7a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002e80:	2302      	movs	r3, #2
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002e84:	2304      	movs	r3, #4
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002e88:	f107 031c 	add.w	r3, r7, #28
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4845      	ldr	r0, [pc, #276]	; (8002fa4 <I2Cx_MspInit+0x158>)
 8002e90:	f004 fbb8 	bl	8007604 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002e9a:	f107 031c 	add.w	r3, r7, #28
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4840      	ldr	r0, [pc, #256]	; (8002fa4 <I2Cx_MspInit+0x158>)
 8002ea2:	f004 fbaf 	bl	8007604 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002ea6:	4b3e      	ldr	r3, [pc, #248]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a3d      	ldr	r2, [pc, #244]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002eac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b3b      	ldr	r3, [pc, #236]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002ebe:	4b38      	ldr	r3, [pc, #224]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a37      	ldr	r2, [pc, #220]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002ec4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ec8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002eca:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	4a34      	ldr	r2, [pc, #208]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002ed0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ed4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	210f      	movs	r1, #15
 8002eda:	2048      	movs	r0, #72	; 0x48
 8002edc:	f003 f976 	bl	80061cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002ee0:	2048      	movs	r0, #72	; 0x48
 8002ee2:	f003 f98f 	bl	8006204 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	210f      	movs	r1, #15
 8002eea:	2049      	movs	r0, #73	; 0x49
 8002eec:	f003 f96e 	bl	80061cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002ef0:	2049      	movs	r0, #73	; 0x49
 8002ef2:	f003 f987 	bl	8006204 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002ef6:	e04d      	b.n	8002f94 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002ef8:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	6313      	str	r3, [r2, #48]	; 0x30
 8002f04:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f14:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002f16:	2312      	movs	r3, #18
 8002f18:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002f22:	2304      	movs	r3, #4
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f26:	f107 031c 	add.w	r3, r7, #28
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	481e      	ldr	r0, [pc, #120]	; (8002fa8 <I2Cx_MspInit+0x15c>)
 8002f2e:	f004 fb69 	bl	8007604 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f38:	f107 031c 	add.w	r3, r7, #28
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	481a      	ldr	r0, [pc, #104]	; (8002fa8 <I2Cx_MspInit+0x15c>)
 8002f40:	f004 fb60 	bl	8007604 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002f44:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002f4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002f5c:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a0f      	ldr	r2, [pc, #60]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002f62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f66:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4a0c      	ldr	r2, [pc, #48]	; (8002fa0 <I2Cx_MspInit+0x154>)
 8002f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f72:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002f74:	2200      	movs	r2, #0
 8002f76:	210f      	movs	r1, #15
 8002f78:	201f      	movs	r0, #31
 8002f7a:	f003 f927 	bl	80061cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002f7e:	201f      	movs	r0, #31
 8002f80:	f003 f940 	bl	8006204 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002f84:	2200      	movs	r2, #0
 8002f86:	210f      	movs	r1, #15
 8002f88:	2020      	movs	r0, #32
 8002f8a:	f003 f91f 	bl	80061cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002f8e:	2020      	movs	r0, #32
 8002f90:	f003 f938 	bl	8006204 <HAL_NVIC_EnableIRQ>
}
 8002f94:	bf00      	nop
 8002f96:	3730      	adds	r7, #48	; 0x30
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	2000011c 	.word	0x2000011c
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40021c00 	.word	0x40021c00
 8002fa8:	40020400 	.word	0x40020400

08002fac <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f005 f8fd 	bl	80081b4 <HAL_I2C_GetState>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d125      	bne.n	800300c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a14      	ldr	r2, [pc, #80]	; (8003014 <I2Cx_Init+0x68>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d103      	bne.n	8002fd0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a13      	ldr	r2, [pc, #76]	; (8003018 <I2Cx_Init+0x6c>)
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e002      	b.n	8002fd6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a12      	ldr	r2, [pc, #72]	; (800301c <I2Cx_Init+0x70>)
 8002fd4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a11      	ldr	r2, [pc, #68]	; (8003020 <I2Cx_Init+0x74>)
 8002fda:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff23 	bl	8002e4c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f004 fde6 	bl	8007bd8 <HAL_I2C_Init>
  }
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	2000011c 	.word	0x2000011c
 8003018:	40005c00 	.word	0x40005c00
 800301c:	40005400 	.word	0x40005400
 8003020:	40912732 	.word	0x40912732

08003024 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af04      	add	r7, sp, #16
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	4608      	mov	r0, r1
 800302e:	4611      	mov	r1, r2
 8003030:	461a      	mov	r2, r3
 8003032:	4603      	mov	r3, r0
 8003034:	72fb      	strb	r3, [r7, #11]
 8003036:	460b      	mov	r3, r1
 8003038:	813b      	strh	r3, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003042:	7afb      	ldrb	r3, [r7, #11]
 8003044:	b299      	uxth	r1, r3
 8003046:	88f8      	ldrh	r0, [r7, #6]
 8003048:	893a      	ldrh	r2, [r7, #8]
 800304a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304e:	9302      	str	r3, [sp, #8]
 8003050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	4603      	mov	r3, r0
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f004 ff90 	bl	8007f80 <HAL_I2C_Mem_Read>
 8003060:	4603      	mov	r3, r0
 8003062:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003064:	7dfb      	ldrb	r3, [r7, #23]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d004      	beq.n	8003074 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800306a:	7afb      	ldrb	r3, [r7, #11]
 800306c:	4619      	mov	r1, r3
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f832 	bl	80030d8 <I2Cx_Error>
  }
  return status;    
 8003074:	7dfb      	ldrb	r3, [r7, #23]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b08a      	sub	sp, #40	; 0x28
 8003082:	af04      	add	r7, sp, #16
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	4608      	mov	r0, r1
 8003088:	4611      	mov	r1, r2
 800308a:	461a      	mov	r2, r3
 800308c:	4603      	mov	r3, r0
 800308e:	72fb      	strb	r3, [r7, #11]
 8003090:	460b      	mov	r3, r1
 8003092:	813b      	strh	r3, [r7, #8]
 8003094:	4613      	mov	r3, r2
 8003096:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800309c:	7afb      	ldrb	r3, [r7, #11]
 800309e:	b299      	uxth	r1, r3
 80030a0:	88f8      	ldrh	r0, [r7, #6]
 80030a2:	893a      	ldrh	r2, [r7, #8]
 80030a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a8:	9302      	str	r3, [sp, #8]
 80030aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	4603      	mov	r3, r0
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f004 fe4f 	bl	8007d58 <HAL_I2C_Mem_Write>
 80030ba:	4603      	mov	r3, r0
 80030bc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80030be:	7dfb      	ldrb	r3, [r7, #23]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80030c4:	7afb      	ldrb	r3, [r7, #11]
 80030c6:	4619      	mov	r1, r3
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f805 	bl	80030d8 <I2Cx_Error>
  }
  return status;
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f004 fe07 	bl	8007cf8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ff5e 	bl	8002fac <I2Cx_Init>
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <TS_IO_Init+0x10>)
 80030fe:	f7ff ff55 	bl	8002fac <I2Cx_Init>
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	2000011c 	.word	0x2000011c

0800310c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af02      	add	r7, sp, #8
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
 8003116:	460b      	mov	r3, r1
 8003118:	71bb      	strb	r3, [r7, #6]
 800311a:	4613      	mov	r3, r2
 800311c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800311e:	79bb      	ldrb	r3, [r7, #6]
 8003120:	b29a      	uxth	r2, r3
 8003122:	79f9      	ldrb	r1, [r7, #7]
 8003124:	2301      	movs	r3, #1
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	1d7b      	adds	r3, r7, #5
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2301      	movs	r3, #1
 800312e:	4803      	ldr	r0, [pc, #12]	; (800313c <TS_IO_Write+0x30>)
 8003130:	f7ff ffa5 	bl	800307e <I2Cx_WriteMultiple>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	2000011c 	.word	0x2000011c

08003140 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	4603      	mov	r3, r0
 8003148:	460a      	mov	r2, r1
 800314a:	71fb      	strb	r3, [r7, #7]
 800314c:	4613      	mov	r3, r2
 800314e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003154:	79bb      	ldrb	r3, [r7, #6]
 8003156:	b29a      	uxth	r2, r3
 8003158:	79f9      	ldrb	r1, [r7, #7]
 800315a:	2301      	movs	r3, #1
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	f107 030f 	add.w	r3, r7, #15
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2301      	movs	r3, #1
 8003166:	4804      	ldr	r0, [pc, #16]	; (8003178 <TS_IO_Read+0x38>)
 8003168:	f7ff ff5c 	bl	8003024 <I2Cx_ReadMultiple>

  return read_value;
 800316c:	7bfb      	ldrb	r3, [r7, #15]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	2000011c 	.word	0x2000011c

0800317c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f002 fc8d 	bl	8005aa4 <HAL_Delay>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003198:	4b31      	ldr	r3, [pc, #196]	; (8003260 <BSP_LCD_Init+0xcc>)
 800319a:	2228      	movs	r2, #40	; 0x28
 800319c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800319e:	4b30      	ldr	r3, [pc, #192]	; (8003260 <BSP_LCD_Init+0xcc>)
 80031a0:	2209      	movs	r2, #9
 80031a2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80031a4:	4b2e      	ldr	r3, [pc, #184]	; (8003260 <BSP_LCD_Init+0xcc>)
 80031a6:	2235      	movs	r2, #53	; 0x35
 80031a8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80031aa:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <BSP_LCD_Init+0xcc>)
 80031ac:	220b      	movs	r2, #11
 80031ae:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80031b0:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <BSP_LCD_Init+0xcc>)
 80031b2:	f240 121b 	movw	r2, #283	; 0x11b
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80031b8:	4b29      	ldr	r3, [pc, #164]	; (8003260 <BSP_LCD_Init+0xcc>)
 80031ba:	f240 2215 	movw	r2, #533	; 0x215
 80031be:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <BSP_LCD_Init+0xcc>)
 80031c2:	f240 121d 	movw	r2, #285	; 0x11d
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80031c8:	4b25      	ldr	r3, [pc, #148]	; (8003260 <BSP_LCD_Init+0xcc>)
 80031ca:	f240 2235 	movw	r2, #565	; 0x235
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80031d0:	2100      	movs	r1, #0
 80031d2:	4823      	ldr	r0, [pc, #140]	; (8003260 <BSP_LCD_Init+0xcc>)
 80031d4:	f000 fe86 	bl	8003ee4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <BSP_LCD_Init+0xcc>)
 80031da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80031de:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80031e0:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <BSP_LCD_Init+0xcc>)
 80031e2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80031e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <BSP_LCD_Init+0xcc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <BSP_LCD_Init+0xcc>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <BSP_LCD_Init+0xcc>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003200:	4b17      	ldr	r3, [pc, #92]	; (8003260 <BSP_LCD_Init+0xcc>)
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <BSP_LCD_Init+0xcc>)
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800320c:	4b14      	ldr	r3, [pc, #80]	; (8003260 <BSP_LCD_Init+0xcc>)
 800320e:	2200      	movs	r2, #0
 8003210:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003212:	4b13      	ldr	r3, [pc, #76]	; (8003260 <BSP_LCD_Init+0xcc>)
 8003214:	2200      	movs	r2, #0
 8003216:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <BSP_LCD_Init+0xcc>)
 800321a:	4a12      	ldr	r2, [pc, #72]	; (8003264 <BSP_LCD_Init+0xd0>)
 800321c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800321e:	4810      	ldr	r0, [pc, #64]	; (8003260 <BSP_LCD_Init+0xcc>)
 8003220:	f005 fd1a 	bl	8008c58 <HAL_LTDC_GetState>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800322a:	2100      	movs	r1, #0
 800322c:	480c      	ldr	r0, [pc, #48]	; (8003260 <BSP_LCD_Init+0xcc>)
 800322e:	f000 fd7f 	bl	8003d30 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003232:	480b      	ldr	r0, [pc, #44]	; (8003260 <BSP_LCD_Init+0xcc>)
 8003234:	f005 fb0a 	bl	800884c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003238:	2201      	movs	r2, #1
 800323a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800323e:	480a      	ldr	r0, [pc, #40]	; (8003268 <BSP_LCD_Init+0xd4>)
 8003240:	f004 fcb0 	bl	8007ba4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003244:	2201      	movs	r2, #1
 8003246:	2108      	movs	r1, #8
 8003248:	4808      	ldr	r0, [pc, #32]	; (800326c <BSP_LCD_Init+0xd8>)
 800324a:	f004 fcab 	bl	8007ba4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800324e:	f001 f86d 	bl	800432c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003252:	4807      	ldr	r0, [pc, #28]	; (8003270 <BSP_LCD_Init+0xdc>)
 8003254:	f000 f928 	bl	80034a8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	200047ac 	.word	0x200047ac
 8003264:	40016800 	.word	0x40016800
 8003268:	40022000 	.word	0x40022000
 800326c:	40022800 	.word	0x40022800
 8003270:	2000002c 	.word	0x2000002c

08003274 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <BSP_LCD_GetXSize+0x20>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a06      	ldr	r2, [pc, #24]	; (8003298 <BSP_LCD_GetXSize+0x24>)
 800327e:	2134      	movs	r1, #52	; 0x34
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	4413      	add	r3, r2
 8003286:	3360      	adds	r3, #96	; 0x60
 8003288:	681b      	ldr	r3, [r3, #0]
}
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	200001a8 	.word	0x200001a8
 8003298:	200047ac 	.word	0x200047ac

0800329c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <BSP_LCD_GetYSize+0x20>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <BSP_LCD_GetYSize+0x24>)
 80032a6:	2134      	movs	r1, #52	; 0x34
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	3364      	adds	r3, #100	; 0x64
 80032b0:	681b      	ldr	r3, [r3, #0]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	200001a8 	.word	0x200001a8
 80032c0:	200047ac 	.word	0x200047ac

080032c4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b090      	sub	sp, #64	; 0x40
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	6039      	str	r1, [r7, #0]
 80032ce:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80032d4:	f7ff ffce 	bl	8003274 <BSP_LCD_GetXSize>
 80032d8:	4603      	mov	r3, r0
 80032da:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80032e0:	f7ff ffdc 	bl	800329c <BSP_LCD_GetYSize>
 80032e4:	4603      	mov	r3, r0
 80032e6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80032f0:	23ff      	movs	r3, #255	; 0xff
 80032f2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800330a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003310:	2307      	movs	r3, #7
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003314:	f7ff ffae 	bl	8003274 <BSP_LCD_GetXSize>
 8003318:	4603      	mov	r3, r0
 800331a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800331c:	f7ff ffbe 	bl	800329c <BSP_LCD_GetYSize>
 8003320:	4603      	mov	r3, r0
 8003322:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	f107 030c 	add.w	r3, r7, #12
 800332a:	4619      	mov	r1, r3
 800332c:	4812      	ldr	r0, [pc, #72]	; (8003378 <BSP_LCD_LayerDefaultInit+0xb4>)
 800332e:	f005 fc1f 	bl	8008b70 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003332:	88fa      	ldrh	r2, [r7, #6]
 8003334:	4911      	ldr	r1, [pc, #68]	; (800337c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	3304      	adds	r3, #4
 8003342:	f04f 32ff 	mov.w	r2, #4294967295
 8003346:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003348:	88fa      	ldrh	r2, [r7, #6]
 800334a:	490c      	ldr	r1, [pc, #48]	; (800337c <BSP_LCD_LayerDefaultInit+0xb8>)
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	3308      	adds	r3, #8
 8003358:	4a09      	ldr	r2, [pc, #36]	; (8003380 <BSP_LCD_LayerDefaultInit+0xbc>)
 800335a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800335c:	88fa      	ldrh	r2, [r7, #6]
 800335e:	4907      	ldr	r1, [pc, #28]	; (800337c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800336e:	601a      	str	r2, [r3, #0]
}
 8003370:	bf00      	nop
 8003372:	3740      	adds	r7, #64	; 0x40
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	200047ac 	.word	0x200047ac
 800337c:	200001ac 	.word	0x200001ac
 8003380:	2000002c 	.word	0x2000002c

08003384 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800338c:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <BSP_LCD_SelectLayer+0x1c>)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6013      	str	r3, [r2, #0]
} 
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	200001a8 	.word	0x200001a8

080033a4 <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d112      	bne.n	80033dc <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <BSP_LCD_SetLayerVisible+0x78>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	01db      	lsls	r3, r3, #7
 80033c0:	4413      	add	r3, r2
 80033c2:	3384      	adds	r3, #132	; 0x84
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a15      	ldr	r2, [pc, #84]	; (800341c <BSP_LCD_SetLayerVisible+0x78>)
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	4611      	mov	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	01d2      	lsls	r2, r2, #7
 80033d0:	440a      	add	r2, r1
 80033d2:	3284      	adds	r2, #132	; 0x84
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e011      	b.n	8003400 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <BSP_LCD_SetLayerVisible+0x78>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	01db      	lsls	r3, r3, #7
 80033e6:	4413      	add	r3, r2
 80033e8:	3384      	adds	r3, #132	; 0x84
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0b      	ldr	r2, [pc, #44]	; (800341c <BSP_LCD_SetLayerVisible+0x78>)
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	4611      	mov	r1, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	01d2      	lsls	r2, r2, #7
 80033f6:	440a      	add	r2, r1
 80033f8:	3284      	adds	r2, #132	; 0x84
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <BSP_LCD_SetLayerVisible+0x78>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <BSP_LCD_SetLayerVisible+0x78>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	625a      	str	r2, [r3, #36]	; 0x24
} 
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	200047ac 	.word	0x200047ac

08003420 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	4619      	mov	r1, r3
 8003432:	4803      	ldr	r0, [pc, #12]	; (8003440 <BSP_LCD_SetTransparency+0x20>)
 8003434:	f005 fbda 	bl	8008bec <HAL_LTDC_SetAlpha>
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200047ac 	.word	0x200047ac

08003444 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800344c:	4b07      	ldr	r3, [pc, #28]	; (800346c <BSP_LCD_SetTextColor+0x28>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4907      	ldr	r1, [pc, #28]	; (8003470 <BSP_LCD_SetTextColor+0x2c>)
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	601a      	str	r2, [r3, #0]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	200001a8 	.word	0x200001a8
 8003470:	200001ac 	.word	0x200001ac

08003474 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <BSP_LCD_SetBackColor+0x2c>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4908      	ldr	r1, [pc, #32]	; (80034a4 <BSP_LCD_SetBackColor+0x30>)
 8003482:	4613      	mov	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	3304      	adds	r3, #4
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	601a      	str	r2, [r3, #0]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	200001a8 	.word	0x200001a8
 80034a4:	200001ac 	.word	0x200001ac

080034a8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <BSP_LCD_SetFont+0x2c>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4908      	ldr	r1, [pc, #32]	; (80034d8 <BSP_LCD_SetFont+0x30>)
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	3308      	adds	r3, #8
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	601a      	str	r2, [r3, #0]
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	200001a8 	.word	0x200001a8
 80034d8:	200001ac 	.word	0x200001ac

080034dc <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <BSP_LCD_GetFont+0x24>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4907      	ldr	r1, [pc, #28]	; (8003504 <BSP_LCD_GetFont+0x28>)
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	3308      	adds	r3, #8
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	200001a8 	.word	0x200001a8
 8003504:	200001ac 	.word	0x200001ac

08003508 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350a:	b085      	sub	sp, #20
 800350c:	af02      	add	r7, sp, #8
 800350e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <BSP_LCD_Clear+0x48>)
 8003512:	681c      	ldr	r4, [r3, #0]
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <BSP_LCD_Clear+0x48>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0e      	ldr	r2, [pc, #56]	; (8003554 <BSP_LCD_Clear+0x4c>)
 800351a:	2134      	movs	r1, #52	; 0x34
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	335c      	adds	r3, #92	; 0x5c
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461e      	mov	r6, r3
 8003528:	f7ff fea4 	bl	8003274 <BSP_LCD_GetXSize>
 800352c:	4605      	mov	r5, r0
 800352e:	f7ff feb5 	bl	800329c <BSP_LCD_GetYSize>
 8003532:	4602      	mov	r2, r0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	2300      	movs	r3, #0
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	462a      	mov	r2, r5
 8003540:	4631      	mov	r1, r6
 8003542:	4620      	mov	r0, r4
 8003544:	f000 fe62 	bl	800420c <LL_FillBuffer>
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003550:	200001a8 	.word	0x200001a8
 8003554:	200047ac 	.word	0x200047ac

08003558 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	80fb      	strh	r3, [r7, #6]
 8003562:	460b      	mov	r3, r1
 8003564:	80bb      	strh	r3, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800356a:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <BSP_LCD_DisplayChar+0x80>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	491b      	ldr	r1, [pc, #108]	; (80035dc <BSP_LCD_DisplayChar+0x84>)
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3308      	adds	r3, #8
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6819      	ldr	r1, [r3, #0]
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003586:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <BSP_LCD_DisplayChar+0x80>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4c14      	ldr	r4, [pc, #80]	; (80035dc <BSP_LCD_DisplayChar+0x84>)
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4423      	add	r3, r4
 8003596:	3308      	adds	r3, #8
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800359c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80035a0:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <BSP_LCD_DisplayChar+0x80>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4c0d      	ldr	r4, [pc, #52]	; (80035dc <BSP_LCD_DisplayChar+0x84>)
 80035a6:	4613      	mov	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4423      	add	r3, r4
 80035b0:	3308      	adds	r3, #8
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	889b      	ldrh	r3, [r3, #4]
 80035b6:	3307      	adds	r3, #7
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	da00      	bge.n	80035be <BSP_LCD_DisplayChar+0x66>
 80035bc:	3307      	adds	r3, #7
 80035be:	10db      	asrs	r3, r3, #3
 80035c0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80035c4:	18ca      	adds	r2, r1, r3
 80035c6:	88b9      	ldrh	r1, [r7, #4]
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fca6 	bl	8003f1c <DrawChar>
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd90      	pop	{r4, r7, pc}
 80035d8:	200001a8 	.word	0x200001a8
 80035dc:	200001ac 	.word	0x200001ac

080035e0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80035e0:	b5b0      	push	{r4, r5, r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60ba      	str	r2, [r7, #8]
 80035e8:	461a      	mov	r2, r3
 80035ea:	4603      	mov	r3, r0
 80035ec:	81fb      	strh	r3, [r7, #14]
 80035ee:	460b      	mov	r3, r1
 80035f0:	81bb      	strh	r3, [r7, #12]
 80035f2:	4613      	mov	r3, r2
 80035f4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80035f6:	2301      	movs	r3, #1
 80035f8:	83fb      	strh	r3, [r7, #30]
 80035fa:	2300      	movs	r3, #0
 80035fc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800360a:	e002      	b.n	8003612 <BSP_LCD_DisplayStringAt+0x32>
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	3301      	adds	r3, #1
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	617a      	str	r2, [r7, #20]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f6      	bne.n	800360c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800361e:	f7ff fe29 	bl	8003274 <BSP_LCD_GetXSize>
 8003622:	4601      	mov	r1, r0
 8003624:	4b50      	ldr	r3, [pc, #320]	; (8003768 <BSP_LCD_DisplayStringAt+0x188>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4850      	ldr	r0, [pc, #320]	; (800376c <BSP_LCD_DisplayStringAt+0x18c>)
 800362a:	4613      	mov	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4403      	add	r3, r0
 8003634:	3308      	adds	r3, #8
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	889b      	ldrh	r3, [r3, #4]
 800363a:	fbb1 f3f3 	udiv	r3, r1, r3
 800363e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d01c      	beq.n	8003680 <BSP_LCD_DisplayStringAt+0xa0>
 8003646:	2b03      	cmp	r3, #3
 8003648:	dc33      	bgt.n	80036b2 <BSP_LCD_DisplayStringAt+0xd2>
 800364a:	2b01      	cmp	r3, #1
 800364c:	d002      	beq.n	8003654 <BSP_LCD_DisplayStringAt+0x74>
 800364e:	2b02      	cmp	r3, #2
 8003650:	d019      	beq.n	8003686 <BSP_LCD_DisplayStringAt+0xa6>
 8003652:	e02e      	b.n	80036b2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	1ad1      	subs	r1, r2, r3
 800365a:	4b43      	ldr	r3, [pc, #268]	; (8003768 <BSP_LCD_DisplayStringAt+0x188>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4843      	ldr	r0, [pc, #268]	; (800376c <BSP_LCD_DisplayStringAt+0x18c>)
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4403      	add	r3, r0
 800366a:	3308      	adds	r3, #8
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	889b      	ldrh	r3, [r3, #4]
 8003670:	fb03 f301 	mul.w	r3, r3, r1
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	89fb      	ldrh	r3, [r7, #14]
 800367a:	4413      	add	r3, r2
 800367c:	83fb      	strh	r3, [r7, #30]
      break;
 800367e:	e01b      	b.n	80036b8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003680:	89fb      	ldrh	r3, [r7, #14]
 8003682:	83fb      	strh	r3, [r7, #30]
      break;
 8003684:	e018      	b.n	80036b8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	b299      	uxth	r1, r3
 800368e:	4b36      	ldr	r3, [pc, #216]	; (8003768 <BSP_LCD_DisplayStringAt+0x188>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4836      	ldr	r0, [pc, #216]	; (800376c <BSP_LCD_DisplayStringAt+0x18c>)
 8003694:	4613      	mov	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4403      	add	r3, r0
 800369e:	3308      	adds	r3, #8
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	889b      	ldrh	r3, [r3, #4]
 80036a4:	fb11 f303 	smulbb	r3, r1, r3
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	89fb      	ldrh	r3, [r7, #14]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	83fb      	strh	r3, [r7, #30]
      break;
 80036b0:	e002      	b.n	80036b8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80036b2:	89fb      	ldrh	r3, [r7, #14]
 80036b4:	83fb      	strh	r3, [r7, #30]
      break;
 80036b6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80036b8:	8bfb      	ldrh	r3, [r7, #30]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <BSP_LCD_DisplayStringAt+0xe6>
 80036be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	da1d      	bge.n	8003702 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80036ca:	e01a      	b.n	8003702 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	781a      	ldrb	r2, [r3, #0]
 80036d0:	89b9      	ldrh	r1, [r7, #12]
 80036d2:	8bfb      	ldrh	r3, [r7, #30]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff3f 	bl	8003558 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80036da:	4b23      	ldr	r3, [pc, #140]	; (8003768 <BSP_LCD_DisplayStringAt+0x188>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4923      	ldr	r1, [pc, #140]	; (800376c <BSP_LCD_DisplayStringAt+0x18c>)
 80036e0:	4613      	mov	r3, r2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	3308      	adds	r3, #8
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	889a      	ldrh	r2, [r3, #4]
 80036f0:	8bfb      	ldrh	r3, [r7, #30]
 80036f2:	4413      	add	r3, r2
 80036f4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	3301      	adds	r3, #1
 80036fa:	60bb      	str	r3, [r7, #8]
    i++;
 80036fc:	8bbb      	ldrh	r3, [r7, #28]
 80036fe:	3301      	adds	r3, #1
 8003700:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf14      	ite	ne
 800370a:	2301      	movne	r3, #1
 800370c:	2300      	moveq	r3, #0
 800370e:	b2dc      	uxtb	r4, r3
 8003710:	f7ff fdb0 	bl	8003274 <BSP_LCD_GetXSize>
 8003714:	8bb9      	ldrh	r1, [r7, #28]
 8003716:	4b14      	ldr	r3, [pc, #80]	; (8003768 <BSP_LCD_DisplayStringAt+0x188>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4d14      	ldr	r5, [pc, #80]	; (800376c <BSP_LCD_DisplayStringAt+0x18c>)
 800371c:	4613      	mov	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	442b      	add	r3, r5
 8003726:	3308      	adds	r3, #8
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	889b      	ldrh	r3, [r3, #4]
 800372c:	fb03 f301 	mul.w	r3, r3, r1
 8003730:	1ac3      	subs	r3, r0, r3
 8003732:	b299      	uxth	r1, r3
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <BSP_LCD_DisplayStringAt+0x188>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	480c      	ldr	r0, [pc, #48]	; (800376c <BSP_LCD_DisplayStringAt+0x18c>)
 800373a:	4613      	mov	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4403      	add	r3, r0
 8003744:	3308      	adds	r3, #8
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	889b      	ldrh	r3, [r3, #4]
 800374a:	4299      	cmp	r1, r3
 800374c:	bf2c      	ite	cs
 800374e:	2301      	movcs	r3, #1
 8003750:	2300      	movcc	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	4023      	ands	r3, r4
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1b7      	bne.n	80036cc <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bdb0      	pop	{r4, r5, r7, pc}
 8003766:	bf00      	nop
 8003768:	200001a8 	.word	0x200001a8
 800376c:	200001ac 	.word	0x200001ac

08003770 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	6039      	str	r1, [r7, #0]
 800377a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800377c:	f7ff feae 	bl	80034dc <BSP_LCD_GetFont>
 8003780:	4603      	mov	r3, r0
 8003782:	88db      	ldrh	r3, [r3, #6]
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	fb12 f303 	smulbb	r3, r2, r3
 800378a:	b299      	uxth	r1, r3
 800378c:	2303      	movs	r3, #3
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	2000      	movs	r0, #0
 8003792:	f7ff ff25 	bl	80035e0 <BSP_LCD_DisplayStringAt>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b08b      	sub	sp, #44	; 0x2c
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4604      	mov	r4, r0
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4623      	mov	r3, r4
 80037b0:	80fb      	strh	r3, [r7, #6]
 80037b2:	4603      	mov	r3, r0
 80037b4:	80bb      	strh	r3, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	807b      	strh	r3, [r7, #2]
 80037ba:	4613      	mov	r3, r2
 80037bc:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80037be:	2300      	movs	r3, #0
 80037c0:	823b      	strh	r3, [r7, #16]
 80037c2:	2300      	movs	r3, #0
 80037c4:	81fb      	strh	r3, [r7, #14]
 80037c6:	2300      	movs	r3, #0
 80037c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80037ca:	2300      	movs	r3, #0
 80037cc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80037ce:	2300      	movs	r3, #0
 80037d0:	847b      	strh	r3, [r7, #34]	; 0x22
 80037d2:	2300      	movs	r3, #0
 80037d4:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 80037d6:	2300      	movs	r3, #0
 80037d8:	83fb      	strh	r3, [r7, #30]
 80037da:	2300      	movs	r3, #0
 80037dc:	83bb      	strh	r3, [r7, #28]
 80037de:	2300      	movs	r3, #0
 80037e0:	837b      	strh	r3, [r7, #26]
 80037e2:	2300      	movs	r3, #0
 80037e4:	833b      	strh	r3, [r7, #24]
 80037e6:	2300      	movs	r3, #0
 80037e8:	82fb      	strh	r3, [r7, #22]
 80037ea:	2300      	movs	r3, #0
 80037ec:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80037f2:	887a      	ldrh	r2, [r7, #2]
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bfb8      	it	lt
 80037fc:	425b      	neglt	r3, r3
 80037fe:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003800:	883a      	ldrh	r2, [r7, #0]
 8003802:	88bb      	ldrh	r3, [r7, #4]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	bfb8      	it	lt
 800380a:	425b      	neglt	r3, r3
 800380c:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8003812:	88bb      	ldrh	r3, [r7, #4]
 8003814:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8003816:	887a      	ldrh	r2, [r7, #2]
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	429a      	cmp	r2, r3
 800381c:	d304      	bcc.n	8003828 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 800381e:	2301      	movs	r3, #1
 8003820:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003822:	2301      	movs	r3, #1
 8003824:	843b      	strh	r3, [r7, #32]
 8003826:	e005      	b.n	8003834 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800382c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800382e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003832:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8003834:	883a      	ldrh	r2, [r7, #0]
 8003836:	88bb      	ldrh	r3, [r7, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	d304      	bcc.n	8003846 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 800383c:	2301      	movs	r3, #1
 800383e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003840:	2301      	movs	r3, #1
 8003842:	83bb      	strh	r3, [r7, #28]
 8003844:	e005      	b.n	8003852 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800384a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 800384c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003850:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003852:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003856:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800385a:	429a      	cmp	r2, r3
 800385c:	db11      	blt.n	8003882 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800385e:	2300      	movs	r3, #0
 8003860:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003862:	2300      	movs	r3, #0
 8003864:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003866:	8a3b      	ldrh	r3, [r7, #16]
 8003868:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800386a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	da00      	bge.n	8003874 <BSP_LCD_DrawLine+0xd4>
 8003872:	3301      	adds	r3, #1
 8003874:	105b      	asrs	r3, r3, #1
 8003876:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8003878:	89fb      	ldrh	r3, [r7, #14]
 800387a:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 800387c:	8a3b      	ldrh	r3, [r7, #16]
 800387e:	82bb      	strh	r3, [r7, #20]
 8003880:	e010      	b.n	80038a4 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003882:	2300      	movs	r3, #0
 8003884:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003886:	2300      	movs	r3, #0
 8003888:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 800388a:	89fb      	ldrh	r3, [r7, #14]
 800388c:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 800388e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003892:	2b00      	cmp	r3, #0
 8003894:	da00      	bge.n	8003898 <BSP_LCD_DrawLine+0xf8>
 8003896:	3301      	adds	r3, #1
 8003898:	105b      	asrs	r3, r3, #1
 800389a:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 800389c:	8a3b      	ldrh	r3, [r7, #16]
 800389e:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 80038a0:	89fb      	ldrh	r3, [r7, #14]
 80038a2:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80038a4:	2300      	movs	r3, #0
 80038a6:	827b      	strh	r3, [r7, #18]
 80038a8:	e037      	b.n	800391a <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80038aa:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80038ac:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <BSP_LCD_DrawLine+0x190>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4c20      	ldr	r4, [pc, #128]	; (8003934 <BSP_LCD_DrawLine+0x194>)
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4423      	add	r3, r4
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	f000 f839 	bl	8003938 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 80038c6:	8b3a      	ldrh	r2, [r7, #24]
 80038c8:	8afb      	ldrh	r3, [r7, #22]
 80038ca:	4413      	add	r3, r2
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 80038d0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80038d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80038d8:	429a      	cmp	r2, r3
 80038da:	db0e      	blt.n	80038fa <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 80038dc:	8b3a      	ldrh	r2, [r7, #24]
 80038de:	8b7b      	ldrh	r3, [r7, #26]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 80038e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038ea:	4413      	add	r3, r2
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 80038f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038f2:	8bfb      	ldrh	r3, [r7, #30]
 80038f4:	4413      	add	r3, r2
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80038fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038fc:	8c3b      	ldrh	r3, [r7, #32]
 80038fe:	4413      	add	r3, r2
 8003900:	b29b      	uxth	r3, r3
 8003902:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003904:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003906:	8bbb      	ldrh	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	b29b      	uxth	r3, r3
 800390c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800390e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003912:	b29b      	uxth	r3, r3
 8003914:	3301      	adds	r3, #1
 8003916:	b29b      	uxth	r3, r3
 8003918:	827b      	strh	r3, [r7, #18]
 800391a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800391e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003922:	429a      	cmp	r2, r3
 8003924:	ddc1      	ble.n	80038aa <BSP_LCD_DrawLine+0x10a>
  }
}
 8003926:	bf00      	nop
 8003928:	bf00      	nop
 800392a:	372c      	adds	r7, #44	; 0x2c
 800392c:	46bd      	mov	sp, r7
 800392e:	bd90      	pop	{r4, r7, pc}
 8003930:	200001a8 	.word	0x200001a8
 8003934:	200001ac 	.word	0x200001ac

08003938 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003938:	b5b0      	push	{r4, r5, r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	603a      	str	r2, [r7, #0]
 8003942:	80fb      	strh	r3, [r7, #6]
 8003944:	460b      	mov	r3, r1
 8003946:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003948:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <BSP_LCD_DrawPixel+0x88>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <BSP_LCD_DrawPixel+0x8c>)
 800394e:	2134      	movs	r1, #52	; 0x34
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	4413      	add	r3, r2
 8003956:	3348      	adds	r3, #72	; 0x48
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d116      	bne.n	800398c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800395e:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <BSP_LCD_DrawPixel+0x88>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a18      	ldr	r2, [pc, #96]	; (80039c4 <BSP_LCD_DrawPixel+0x8c>)
 8003964:	2134      	movs	r1, #52	; 0x34
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	335c      	adds	r3, #92	; 0x5c
 800396e:	681c      	ldr	r4, [r3, #0]
 8003970:	88bd      	ldrh	r5, [r7, #4]
 8003972:	f7ff fc7f 	bl	8003274 <BSP_LCD_GetXSize>
 8003976:	4603      	mov	r3, r0
 8003978:	fb03 f205 	mul.w	r2, r3, r5
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	4413      	add	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4423      	add	r3, r4
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	b292      	uxth	r2, r2
 8003988:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800398a:	e015      	b.n	80039b8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <BSP_LCD_DrawPixel+0x88>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a0c      	ldr	r2, [pc, #48]	; (80039c4 <BSP_LCD_DrawPixel+0x8c>)
 8003992:	2134      	movs	r1, #52	; 0x34
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	4413      	add	r3, r2
 800399a:	335c      	adds	r3, #92	; 0x5c
 800399c:	681c      	ldr	r4, [r3, #0]
 800399e:	88bd      	ldrh	r5, [r7, #4]
 80039a0:	f7ff fc68 	bl	8003274 <BSP_LCD_GetXSize>
 80039a4:	4603      	mov	r3, r0
 80039a6:	fb03 f205 	mul.w	r2, r3, r5
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4423      	add	r3, r4
 80039b2:	461a      	mov	r2, r3
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	6013      	str	r3, [r2, #0]
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bdb0      	pop	{r4, r5, r7, pc}
 80039c0:	200001a8 	.word	0x200001a8
 80039c4:	200047ac 	.word	0x200047ac

080039c8 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b08b      	sub	sp, #44	; 0x2c
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
 80039d8:	2300      	movs	r3, #0
 80039da:	61bb      	str	r3, [r7, #24]
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	330a      	adds	r3, #10
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	330b      	adds	r3, #11
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	441a      	add	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	330c      	adds	r3, #12
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	041b      	lsls	r3, r3, #16
 8003a02:	441a      	add	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	330d      	adds	r3, #13
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	061b      	lsls	r3, r3, #24
 8003a0c:	4413      	add	r3, r2
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3312      	adds	r3, #18
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3313      	adds	r3, #19
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	441a      	add	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3314      	adds	r3, #20
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	441a      	add	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3315      	adds	r3, #21
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	061b      	lsls	r3, r3, #24
 8003a34:	4413      	add	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3316      	adds	r3, #22
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3317      	adds	r3, #23
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	441a      	add	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3318      	adds	r3, #24
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	041b      	lsls	r3, r3, #16
 8003a52:	441a      	add	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3319      	adds	r3, #25
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	061b      	lsls	r3, r3, #24
 8003a5c:	4413      	add	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	331c      	adds	r3, #28
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	331d      	adds	r3, #29
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	4413      	add	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003a74:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <BSP_LCD_DrawBitmap+0x15c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a2b      	ldr	r2, [pc, #172]	; (8003b28 <BSP_LCD_DrawBitmap+0x160>)
 8003a7a:	2134      	movs	r1, #52	; 0x34
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	4413      	add	r3, r2
 8003a82:	335c      	adds	r3, #92	; 0x5c
 8003a84:	681c      	ldr	r4, [r3, #0]
 8003a86:	f7ff fbf5 	bl	8003274 <BSP_LCD_GetXSize>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	fb03 f202 	mul.w	r2, r3, r2
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4423      	add	r3, r4
 8003a9a:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	3b20      	subs	r3, #32
 8003aa0:	2b07      	cmp	r3, #7
 8003aa2:	d802      	bhi.n	8003aaa <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	e008      	b.n	8003abc <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	3b10      	subs	r3, #16
 8003aae:	2b07      	cmp	r3, #7
 8003ab0:	d802      	bhi.n	8003ab8 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	e001      	b.n	8003abc <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	08d2      	lsrs	r2, r2, #3
 8003aca:	fb02 f203 	mul.w	r2, r2, r3
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	4413      	add	r3, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
 8003adc:	e018      	b.n	8003b10 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003ade:	6a39      	ldr	r1, [r7, #32]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fbdd 	bl	80042a4 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003aea:	f7ff fbc3 	bl	8003274 <BSP_LCD_GetXSize>
 8003aee:	4603      	mov	r3, r0
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	6a3a      	ldr	r2, [r7, #32]
 8003af4:	4413      	add	r3, r2
 8003af6:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	08db      	lsrs	r3, r3, #3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	425b      	negs	r3, r3
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d3e2      	bcc.n	8003ade <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	372c      	adds	r7, #44	; 0x2c
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd90      	pop	{r4, r7, pc}
 8003b22:	bf00      	nop
 8003b24:	200001a8 	.word	0x200001a8
 8003b28:	200047ac 	.word	0x200047ac

08003b2c <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8003b2c:	b5b0      	push	{r4, r5, r7, lr}
 8003b2e:	b08c      	sub	sp, #48	; 0x30
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	833b      	strh	r3, [r7, #24]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	82fb      	strh	r3, [r7, #22]
 8003b40:	2300      	movs	r3, #0
 8003b42:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003b44:	2300      	movs	r3, #0
 8003b46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003b48:	2300      	movs	r3, #0
 8003b4a:	82bb      	strh	r3, [r7, #20]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	827b      	strh	r3, [r7, #18]
 8003b50:	2300      	movs	r3, #0
 8003b52:	823b      	strh	r3, [r7, #16]
 8003b54:	2300      	movs	r3, #0
 8003b56:	81fb      	strh	r3, [r7, #14]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	81bb      	strh	r3, [r7, #12]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	817b      	strh	r3, [r7, #10]
 8003b60:	2300      	movs	r3, #0
 8003b62:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	843b      	strh	r3, [r7, #32]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	83fb      	strh	r3, [r7, #30]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	83bb      	strh	r3, [r7, #28]
 8003b70:	2300      	movs	r3, #0
 8003b72:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b7a:	83fb      	strh	r3, [r7, #30]
 8003b7c:	8bfb      	ldrh	r3, [r7, #30]
 8003b7e:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b86:	837b      	strh	r3, [r7, #26]
 8003b88:	8b7b      	ldrh	r3, [r7, #26]
 8003b8a:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003b90:	e02f      	b.n	8003bf2 <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 8003b92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 8003ba0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003ba4:	8c3b      	ldrh	r3, [r7, #32]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	da01      	bge.n	8003bae <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 8003baa:	89bb      	ldrh	r3, [r7, #12]
 8003bac:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 8003bae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003bb2:	8bfb      	ldrh	r3, [r7, #30]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	dd01      	ble.n	8003bbc <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 8003bb8:	89bb      	ldrh	r3, [r7, #12]
 8003bba:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 8003bbc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	885b      	ldrh	r3, [r3, #2]
 8003bc8:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 8003bca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003bce:	8bbb      	ldrh	r3, [r7, #28]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	da01      	bge.n	8003bd8 <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 8003bd4:	897b      	ldrh	r3, [r7, #10]
 8003bd6:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 8003bd8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003bdc:	8b7b      	ldrh	r3, [r7, #26]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	dd01      	ble.n	8003be6 <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 8003be2:	897b      	ldrh	r3, [r7, #10]
 8003be4:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 8003be6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3301      	adds	r3, #1
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	847b      	strh	r3, [r7, #34]	; 0x22
 8003bf2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003bf6:	887b      	ldrh	r3, [r7, #2]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	dbca      	blt.n	8003b92 <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d974      	bls.n	8003cec <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 8003c02:	8c3a      	ldrh	r2, [r7, #32]
 8003c04:	8bfb      	ldrh	r3, [r7, #30]
 8003c06:	4413      	add	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	da00      	bge.n	8003c0e <BSP_LCD_FillPolygon+0xe2>
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	105b      	asrs	r3, r3, #1
 8003c10:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 8003c12:	8b7a      	ldrh	r2, [r7, #26]
 8003c14:	8bbb      	ldrh	r3, [r7, #28]
 8003c16:	4413      	add	r3, r2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	da00      	bge.n	8003c1e <BSP_LCD_FillPolygon+0xf2>
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	105b      	asrs	r3, r3, #1
 8003c20:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	885b      	ldrh	r3, [r3, #2]
 8003c2c:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 8003c2e:	e032      	b.n	8003c96 <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	885b      	ldrh	r3, [r3, #2]
 8003c3a:	82fb      	strh	r3, [r7, #22]
    Points++;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	885b      	ldrh	r3, [r3, #2]
 8003c4c:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 8003c4e:	8b38      	ldrh	r0, [r7, #24]
 8003c50:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8003c52:	8abc      	ldrh	r4, [r7, #20]
 8003c54:	8afd      	ldrh	r5, [r7, #22]
 8003c56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c58:	8a7a      	ldrh	r2, [r7, #18]
 8003c5a:	9201      	str	r2, [sp, #4]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	462b      	mov	r3, r5
 8003c60:	4622      	mov	r2, r4
 8003c62:	f000 fa13 	bl	800408c <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 8003c66:	8b38      	ldrh	r0, [r7, #24]
 8003c68:	8ab9      	ldrh	r1, [r7, #20]
 8003c6a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003c6c:	8afd      	ldrh	r5, [r7, #22]
 8003c6e:	8a7b      	ldrh	r3, [r7, #18]
 8003c70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c72:	9201      	str	r2, [sp, #4]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	462b      	mov	r3, r5
 8003c78:	4622      	mov	r2, r4
 8003c7a:	f000 fa07 	bl	800408c <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 8003c7e:	8ab8      	ldrh	r0, [r7, #20]
 8003c80:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8003c82:	8b3c      	ldrh	r4, [r7, #24]
 8003c84:	8a7d      	ldrh	r5, [r7, #18]
 8003c86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c88:	8afa      	ldrh	r2, [r7, #22]
 8003c8a:	9201      	str	r2, [sp, #4]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	462b      	mov	r3, r5
 8003c90:	4622      	mov	r2, r4
 8003c92:	f000 f9fb 	bl	800408c <FillTriangle>
  while(--PointCount)
 8003c96:	887b      	ldrh	r3, [r7, #2]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	807b      	strh	r3, [r7, #2]
 8003c9c:	887b      	ldrh	r3, [r7, #2]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1c6      	bne.n	8003c30 <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 8003ca2:	8a38      	ldrh	r0, [r7, #16]
 8003ca4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8003ca6:	8abc      	ldrh	r4, [r7, #20]
 8003ca8:	89fd      	ldrh	r5, [r7, #14]
 8003caa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cac:	8a7a      	ldrh	r2, [r7, #18]
 8003cae:	9201      	str	r2, [sp, #4]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	462b      	mov	r3, r5
 8003cb4:	4622      	mov	r2, r4
 8003cb6:	f000 f9e9 	bl	800408c <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8003cba:	8a38      	ldrh	r0, [r7, #16]
 8003cbc:	8ab9      	ldrh	r1, [r7, #20]
 8003cbe:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003cc0:	89fd      	ldrh	r5, [r7, #14]
 8003cc2:	8a7b      	ldrh	r3, [r7, #18]
 8003cc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cc6:	9201      	str	r2, [sp, #4]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	462b      	mov	r3, r5
 8003ccc:	4622      	mov	r2, r4
 8003cce:	f000 f9dd 	bl	800408c <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 8003cd2:	8ab8      	ldrh	r0, [r7, #20]
 8003cd4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8003cd6:	8a3c      	ldrh	r4, [r7, #16]
 8003cd8:	8a7d      	ldrh	r5, [r7, #18]
 8003cda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cdc:	89fa      	ldrh	r2, [r7, #14]
 8003cde:	9201      	str	r2, [sp, #4]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	462b      	mov	r3, r5
 8003ce4:	4622      	mov	r2, r4
 8003ce6:	f000 f9d1 	bl	800408c <FillTriangle>
 8003cea:	e000      	b.n	8003cee <BSP_LCD_FillPolygon+0x1c2>
    return;
 8003cec:	bf00      	nop
}
 8003cee:	3728      	adds	r7, #40	; 0x28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bdb0      	pop	{r4, r5, r7, pc}

08003cf4 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <BSP_LCD_DisplayOn+0x30>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <BSP_LCD_DisplayOn+0x30>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d0e:	4806      	ldr	r0, [pc, #24]	; (8003d28 <BSP_LCD_DisplayOn+0x34>)
 8003d10:	f003 ff48 	bl	8007ba4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003d14:	2201      	movs	r2, #1
 8003d16:	2108      	movs	r1, #8
 8003d18:	4804      	ldr	r0, [pc, #16]	; (8003d2c <BSP_LCD_DisplayOn+0x38>)
 8003d1a:	f003 ff43 	bl	8007ba4 <HAL_GPIO_WritePin>
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200047ac 	.word	0x200047ac
 8003d28:	40022000 	.word	0x40022000
 8003d2c:	40022800 	.word	0x40022800

08003d30 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b090      	sub	sp, #64	; 0x40
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003d3a:	4b64      	ldr	r3, [pc, #400]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	4a63      	ldr	r2, [pc, #396]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003d40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d44:	6453      	str	r3, [r2, #68]	; 0x44
 8003d46:	4b61      	ldr	r3, [pc, #388]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003d52:	4b5e      	ldr	r3, [pc, #376]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	4a5d      	ldr	r2, [pc, #372]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003d58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5e:	4b5b      	ldr	r3, [pc, #364]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d6a:	4b58      	ldr	r3, [pc, #352]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	4a57      	ldr	r2, [pc, #348]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003d70:	f043 0310 	orr.w	r3, r3, #16
 8003d74:	6313      	str	r3, [r2, #48]	; 0x30
 8003d76:	4b55      	ldr	r3, [pc, #340]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	623b      	str	r3, [r7, #32]
 8003d80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d82:	4b52      	ldr	r3, [pc, #328]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	4a51      	ldr	r2, [pc, #324]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8e:	4b4f      	ldr	r3, [pc, #316]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003d9a:	4b4c      	ldr	r3, [pc, #304]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	4a4b      	ldr	r2, [pc, #300]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	4b49      	ldr	r3, [pc, #292]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003db2:	4b46      	ldr	r3, [pc, #280]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	4a45      	ldr	r2, [pc, #276]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003db8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dbe:	4b43      	ldr	r3, [pc, #268]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003dca:	4b40      	ldr	r3, [pc, #256]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	4a3f      	ldr	r2, [pc, #252]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003dd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003de2:	4b3a      	ldr	r3, [pc, #232]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4a39      	ldr	r2, [pc, #228]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dec:	6313      	str	r3, [r2, #48]	; 0x30
 8003dee:	4b37      	ldr	r3, [pc, #220]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003dfa:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	4a33      	ldr	r2, [pc, #204]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003e00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e04:	6313      	str	r3, [r2, #48]	; 0x30
 8003e06:	4b31      	ldr	r3, [pc, #196]	; (8003ecc <BSP_LCD_MspInit+0x19c>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003e12:	2310      	movs	r3, #16
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e16:	2302      	movs	r3, #2
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003e22:	230e      	movs	r3, #14
 8003e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4828      	ldr	r0, [pc, #160]	; (8003ed0 <BSP_LCD_MspInit+0x1a0>)
 8003e2e:	f003 fbe9 	bl	8007604 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003e3c:	2309      	movs	r3, #9
 8003e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003e40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e44:	4619      	mov	r1, r3
 8003e46:	4823      	ldr	r0, [pc, #140]	; (8003ed4 <BSP_LCD_MspInit+0x1a4>)
 8003e48:	f003 fbdc 	bl	8007604 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003e4c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003e50:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e52:	2302      	movs	r3, #2
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e56:	230e      	movs	r3, #14
 8003e58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e5e:	4619      	mov	r1, r3
 8003e60:	481d      	ldr	r0, [pc, #116]	; (8003ed8 <BSP_LCD_MspInit+0x1a8>)
 8003e62:	f003 fbcf 	bl	8007604 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003e66:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e70:	230e      	movs	r3, #14
 8003e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4818      	ldr	r0, [pc, #96]	; (8003edc <BSP_LCD_MspInit+0x1ac>)
 8003e7c:	f003 fbc2 	bl	8007604 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003e80:	23f7      	movs	r3, #247	; 0xf7
 8003e82:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e84:	2302      	movs	r3, #2
 8003e86:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e88:	230e      	movs	r3, #14
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e90:	4619      	mov	r1, r3
 8003e92:	4813      	ldr	r0, [pc, #76]	; (8003ee0 <BSP_LCD_MspInit+0x1b0>)
 8003e94:	f003 fbb6 	bl	8007604 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	480b      	ldr	r0, [pc, #44]	; (8003ed8 <BSP_LCD_MspInit+0x1a8>)
 8003eaa:	f003 fbab 	bl	8007604 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003eae:	2308      	movs	r3, #8
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4808      	ldr	r0, [pc, #32]	; (8003ee0 <BSP_LCD_MspInit+0x1b0>)
 8003ebe:	f003 fba1 	bl	8007604 <HAL_GPIO_Init>
}
 8003ec2:	bf00      	nop
 8003ec4:	3740      	adds	r7, #64	; 0x40
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40021800 	.word	0x40021800
 8003ed8:	40022000 	.word	0x40022000
 8003edc:	40022400 	.word	0x40022400
 8003ee0:	40022800 	.word	0x40022800

08003ee4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <BSP_LCD_ClockConfig+0x34>)
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <BSP_LCD_ClockConfig+0x34>)
 8003ef6:	22c0      	movs	r2, #192	; 0xc0
 8003ef8:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <BSP_LCD_ClockConfig+0x34>)
 8003efc:	2205      	movs	r2, #5
 8003efe:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <BSP_LCD_ClockConfig+0x34>)
 8003f02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003f08:	4803      	ldr	r0, [pc, #12]	; (8003f18 <BSP_LCD_ClockConfig+0x34>)
 8003f0a:	f005 fd59 	bl	80099c0 <HAL_RCCEx_PeriphCLKConfig>
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	200001c4 	.word	0x200001c4

08003f1c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	603a      	str	r2, [r7, #0]
 8003f26:	80fb      	strh	r3, [r7, #6]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	2300      	movs	r3, #0
 8003f32:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003f34:	4b53      	ldr	r3, [pc, #332]	; (8004084 <DrawChar+0x168>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4953      	ldr	r1, [pc, #332]	; (8004088 <DrawChar+0x16c>)
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	3308      	adds	r3, #8
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	88db      	ldrh	r3, [r3, #6]
 8003f4a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003f4c:	4b4d      	ldr	r3, [pc, #308]	; (8004084 <DrawChar+0x168>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	494d      	ldr	r1, [pc, #308]	; (8004088 <DrawChar+0x16c>)
 8003f52:	4613      	mov	r3, r2
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	889b      	ldrh	r3, [r3, #4]
 8003f62:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003f64:	8a3b      	ldrh	r3, [r7, #16]
 8003f66:	3307      	adds	r3, #7
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	da00      	bge.n	8003f6e <DrawChar+0x52>
 8003f6c:	3307      	adds	r3, #7
 8003f6e:	10db      	asrs	r3, r3, #3
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	8a3b      	ldrh	r3, [r7, #16]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	e076      	b.n	8004072 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003f84:	8a3b      	ldrh	r3, [r7, #16]
 8003f86:	3307      	adds	r3, #7
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	da00      	bge.n	8003f8e <DrawChar+0x72>
 8003f8c:	3307      	adds	r3, #7
 8003f8e:	10db      	asrs	r3, r3, #3
 8003f90:	461a      	mov	r2, r3
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	fb03 f302 	mul.w	r3, r3, r2
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003f9e:	8a3b      	ldrh	r3, [r7, #16]
 8003fa0:	3307      	adds	r3, #7
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	da00      	bge.n	8003fa8 <DrawChar+0x8c>
 8003fa6:	3307      	adds	r3, #7
 8003fa8:	10db      	asrs	r3, r3, #3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d002      	beq.n	8003fb4 <DrawChar+0x98>
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d004      	beq.n	8003fbc <DrawChar+0xa0>
 8003fb2:	e00c      	b.n	8003fce <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	617b      	str	r3, [r7, #20]
      break;
 8003fba:	e016      	b.n	8003fea <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	3201      	adds	r2, #1
 8003fc6:	7812      	ldrb	r2, [r2, #0]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
      break;
 8003fcc:	e00d      	b.n	8003fea <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	041a      	lsls	r2, r3, #16
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	3202      	adds	r2, #2
 8003fe2:	7812      	ldrb	r2, [r2, #0]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
      break;
 8003fe8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	e036      	b.n	800405e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003ff0:	8a3a      	ldrh	r2, [r7, #16]
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	1ad2      	subs	r2, r2, r3
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	461a      	mov	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d012      	beq.n	8004032 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	b29a      	uxth	r2, r3
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	4413      	add	r3, r2
 8004014:	b298      	uxth	r0, r3
 8004016:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <DrawChar+0x168>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	491b      	ldr	r1, [pc, #108]	; (8004088 <DrawChar+0x16c>)
 800401c:	4613      	mov	r3, r2
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	88bb      	ldrh	r3, [r7, #4]
 800402a:	4619      	mov	r1, r3
 800402c:	f7ff fc84 	bl	8003938 <BSP_LCD_DrawPixel>
 8004030:	e012      	b.n	8004058 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	b29a      	uxth	r2, r3
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	4413      	add	r3, r2
 800403a:	b298      	uxth	r0, r3
 800403c:	4b11      	ldr	r3, [pc, #68]	; (8004084 <DrawChar+0x168>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4911      	ldr	r1, [pc, #68]	; (8004088 <DrawChar+0x16c>)
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	3304      	adds	r3, #4
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	88bb      	ldrh	r3, [r7, #4]
 8004052:	4619      	mov	r1, r3
 8004054:	f7ff fc70 	bl	8003938 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	3301      	adds	r3, #1
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	8a3b      	ldrh	r3, [r7, #16]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	429a      	cmp	r2, r3
 8004064:	d3c4      	bcc.n	8003ff0 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004066:	88bb      	ldrh	r3, [r7, #4]
 8004068:	3301      	adds	r3, #1
 800406a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	3301      	adds	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	8a7b      	ldrh	r3, [r7, #18]
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	429a      	cmp	r2, r3
 8004078:	d384      	bcc.n	8003f84 <DrawChar+0x68>
  }
}
 800407a:	bf00      	nop
 800407c:	bf00      	nop
 800407e:	3720      	adds	r7, #32
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	200001a8 	.word	0x200001a8
 8004088:	200001ac 	.word	0x200001ac

0800408c <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b08b      	sub	sp, #44	; 0x2c
 8004090:	af00      	add	r7, sp, #0
 8004092:	4604      	mov	r4, r0
 8004094:	4608      	mov	r0, r1
 8004096:	4611      	mov	r1, r2
 8004098:	461a      	mov	r2, r3
 800409a:	4623      	mov	r3, r4
 800409c:	80fb      	strh	r3, [r7, #6]
 800409e:	4603      	mov	r3, r0
 80040a0:	80bb      	strh	r3, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	807b      	strh	r3, [r7, #2]
 80040a6:	4613      	mov	r3, r2
 80040a8:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80040aa:	2300      	movs	r3, #0
 80040ac:	823b      	strh	r3, [r7, #16]
 80040ae:	2300      	movs	r3, #0
 80040b0:	81fb      	strh	r3, [r7, #14]
 80040b2:	2300      	movs	r3, #0
 80040b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040b6:	2300      	movs	r3, #0
 80040b8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80040ba:	2300      	movs	r3, #0
 80040bc:	847b      	strh	r3, [r7, #34]	; 0x22
 80040be:	2300      	movs	r3, #0
 80040c0:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 80040c2:	2300      	movs	r3, #0
 80040c4:	83fb      	strh	r3, [r7, #30]
 80040c6:	2300      	movs	r3, #0
 80040c8:	83bb      	strh	r3, [r7, #28]
 80040ca:	2300      	movs	r3, #0
 80040cc:	837b      	strh	r3, [r7, #26]
 80040ce:	2300      	movs	r3, #0
 80040d0:	833b      	strh	r3, [r7, #24]
 80040d2:	2300      	movs	r3, #0
 80040d4:	82fb      	strh	r3, [r7, #22]
 80040d6:	2300      	movs	r3, #0
 80040d8:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80040de:	88ba      	ldrh	r2, [r7, #4]
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bfb8      	it	lt
 80040e8:	425b      	neglt	r3, r3
 80040ea:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80040ec:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80040ee:	883b      	ldrh	r3, [r7, #0]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bfb8      	it	lt
 80040f6:	425b      	neglt	r3, r3
 80040f8:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 80040fe:	883b      	ldrh	r3, [r7, #0]
 8004100:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8004102:	88ba      	ldrh	r2, [r7, #4]
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	429a      	cmp	r2, r3
 8004108:	d304      	bcc.n	8004114 <FillTriangle+0x88>
  {
    xinc1 = 1;
 800410a:	2301      	movs	r3, #1
 800410c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800410e:	2301      	movs	r3, #1
 8004110:	843b      	strh	r3, [r7, #32]
 8004112:	e005      	b.n	8004120 <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8004114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004118:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800411a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800411e:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8004120:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004122:	883b      	ldrh	r3, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d304      	bcc.n	8004132 <FillTriangle+0xa6>
  {
    yinc1 = 1;
 8004128:	2301      	movs	r3, #1
 800412a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 800412c:	2301      	movs	r3, #1
 800412e:	83bb      	strh	r3, [r7, #28]
 8004130:	e005      	b.n	800413e <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8004132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004136:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8004138:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800413c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800413e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004142:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004146:	429a      	cmp	r2, r3
 8004148:	db11      	blt.n	800416e <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800414a:	2300      	movs	r3, #0
 800414c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800414e:	2300      	movs	r3, #0
 8004150:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8004152:	8a3b      	ldrh	r3, [r7, #16]
 8004154:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8004156:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	da00      	bge.n	8004160 <FillTriangle+0xd4>
 800415e:	3301      	adds	r3, #1
 8004160:	105b      	asrs	r3, r3, #1
 8004162:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8004164:	89fb      	ldrh	r3, [r7, #14]
 8004166:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8004168:	8a3b      	ldrh	r3, [r7, #16]
 800416a:	82bb      	strh	r3, [r7, #20]
 800416c:	e010      	b.n	8004190 <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800416e:	2300      	movs	r3, #0
 8004170:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8004172:	2300      	movs	r3, #0
 8004174:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8004176:	89fb      	ldrh	r3, [r7, #14]
 8004178:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 800417a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800417e:	2b00      	cmp	r3, #0
 8004180:	da00      	bge.n	8004184 <FillTriangle+0xf8>
 8004182:	3301      	adds	r3, #1
 8004184:	105b      	asrs	r3, r3, #1
 8004186:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8004188:	8a3b      	ldrh	r3, [r7, #16]
 800418a:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 800418c:	89fb      	ldrh	r3, [r7, #14]
 800418e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8004190:	2300      	movs	r3, #0
 8004192:	827b      	strh	r3, [r7, #18]
 8004194:	e02f      	b.n	80041f6 <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 8004196:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004198:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800419a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800419c:	887a      	ldrh	r2, [r7, #2]
 800419e:	f7ff faff 	bl	80037a0 <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 80041a2:	8b3a      	ldrh	r2, [r7, #24]
 80041a4:	8afb      	ldrh	r3, [r7, #22]
 80041a6:	4413      	add	r3, r2
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 80041ac:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80041b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	db0e      	blt.n	80041d6 <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 80041b8:	8b3a      	ldrh	r2, [r7, #24]
 80041ba:	8b7b      	ldrh	r3, [r7, #26]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	b29b      	uxth	r3, r3
 80041c0:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 80041c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80041c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041c6:	4413      	add	r3, r2
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 80041cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041ce:	8bfb      	ldrh	r3, [r7, #30]
 80041d0:	4413      	add	r3, r2
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 80041d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80041d8:	8c3b      	ldrh	r3, [r7, #32]
 80041da:	4413      	add	r3, r2
 80041dc:	b29b      	uxth	r3, r3
 80041de:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 80041e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041e2:	8bbb      	ldrh	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80041ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3301      	adds	r3, #1
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	827b      	strh	r3, [r7, #18]
 80041f6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80041fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80041fe:	429a      	cmp	r2, r3
 8004200:	ddc9      	ble.n	8004196 <FillTriangle+0x10a>
  } 
}
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	372c      	adds	r7, #44	; 0x2c
 8004208:	46bd      	mov	sp, r7
 800420a:	bd90      	pop	{r4, r7, pc}

0800420c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800421a:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <LL_FillBuffer+0x88>)
 800421c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004220:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004222:	4b1d      	ldr	r3, [pc, #116]	; (8004298 <LL_FillBuffer+0x8c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1d      	ldr	r2, [pc, #116]	; (800429c <LL_FillBuffer+0x90>)
 8004228:	2134      	movs	r1, #52	; 0x34
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	4413      	add	r3, r2
 8004230:	3348      	adds	r3, #72	; 0x48
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d103      	bne.n	8004240 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004238:	4b16      	ldr	r3, [pc, #88]	; (8004294 <LL_FillBuffer+0x88>)
 800423a:	2202      	movs	r2, #2
 800423c:	609a      	str	r2, [r3, #8]
 800423e:	e002      	b.n	8004246 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004240:	4b14      	ldr	r3, [pc, #80]	; (8004294 <LL_FillBuffer+0x88>)
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004246:	4a13      	ldr	r2, [pc, #76]	; (8004294 <LL_FillBuffer+0x88>)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <LL_FillBuffer+0x88>)
 800424e:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <LL_FillBuffer+0x94>)
 8004250:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004252:	4810      	ldr	r0, [pc, #64]	; (8004294 <LL_FillBuffer+0x88>)
 8004254:	f002 fe3a 	bl	8006ecc <HAL_DMA2D_Init>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d115      	bne.n	800428a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	480c      	ldr	r0, [pc, #48]	; (8004294 <LL_FillBuffer+0x88>)
 8004262:	f003 f8a1 	bl	80073a8 <HAL_DMA2D_ConfigLayer>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10e      	bne.n	800428a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69f9      	ldr	r1, [r7, #28]
 8004276:	4807      	ldr	r0, [pc, #28]	; (8004294 <LL_FillBuffer+0x88>)
 8004278:	f002 fe72 	bl	8006f60 <HAL_DMA2D_Start>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d103      	bne.n	800428a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004282:	210a      	movs	r1, #10
 8004284:	4803      	ldr	r0, [pc, #12]	; (8004294 <LL_FillBuffer+0x88>)
 8004286:	f002 fe96 	bl	8006fb6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000168 	.word	0x20000168
 8004298:	200001a8 	.word	0x200001a8
 800429c:	200047ac 	.word	0x200047ac
 80042a0:	4002b000 	.word	0x4002b000

080042a4 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <LL_ConvertLineToARGB8888+0x80>)
 80042b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042b8:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80042ba:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <LL_ConvertLineToARGB8888+0x80>)
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80042c0:	4b18      	ldr	r3, [pc, #96]	; (8004324 <LL_ConvertLineToARGB8888+0x80>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80042c6:	4b17      	ldr	r3, [pc, #92]	; (8004324 <LL_ConvertLineToARGB8888+0x80>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80042cc:	4b15      	ldr	r3, [pc, #84]	; (8004324 <LL_ConvertLineToARGB8888+0x80>)
 80042ce:	22ff      	movs	r2, #255	; 0xff
 80042d0:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80042d2:	4a14      	ldr	r2, [pc, #80]	; (8004324 <LL_ConvertLineToARGB8888+0x80>)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <LL_ConvertLineToARGB8888+0x80>)
 80042da:	2200      	movs	r2, #0
 80042dc:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80042de:	4b11      	ldr	r3, [pc, #68]	; (8004324 <LL_ConvertLineToARGB8888+0x80>)
 80042e0:	4a11      	ldr	r2, [pc, #68]	; (8004328 <LL_ConvertLineToARGB8888+0x84>)
 80042e2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80042e4:	480f      	ldr	r0, [pc, #60]	; (8004324 <LL_ConvertLineToARGB8888+0x80>)
 80042e6:	f002 fdf1 	bl	8006ecc <HAL_DMA2D_Init>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d115      	bne.n	800431c <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80042f0:	2101      	movs	r1, #1
 80042f2:	480c      	ldr	r0, [pc, #48]	; (8004324 <LL_ConvertLineToARGB8888+0x80>)
 80042f4:	f003 f858 	bl	80073a8 <HAL_DMA2D_ConfigLayer>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10e      	bne.n	800431c <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80042fe:	68f9      	ldr	r1, [r7, #12]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	2301      	movs	r3, #1
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4806      	ldr	r0, [pc, #24]	; (8004324 <LL_ConvertLineToARGB8888+0x80>)
 800430a:	f002 fe29 	bl	8006f60 <HAL_DMA2D_Start>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004314:	210a      	movs	r1, #10
 8004316:	4803      	ldr	r0, [pc, #12]	; (8004324 <LL_ConvertLineToARGB8888+0x80>)
 8004318:	f002 fe4d 	bl	8006fb6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20000168 	.word	0x20000168
 8004328:	4002b000 	.word	0x4002b000

0800432c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004330:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <BSP_SDRAM_Init+0xac>)
 8004332:	4a2a      	ldr	r2, [pc, #168]	; (80043dc <BSP_SDRAM_Init+0xb0>)
 8004334:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004336:	4b2a      	ldr	r3, [pc, #168]	; (80043e0 <BSP_SDRAM_Init+0xb4>)
 8004338:	2202      	movs	r2, #2
 800433a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800433c:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <BSP_SDRAM_Init+0xb4>)
 800433e:	2207      	movs	r2, #7
 8004340:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004342:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <BSP_SDRAM_Init+0xb4>)
 8004344:	2204      	movs	r2, #4
 8004346:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004348:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <BSP_SDRAM_Init+0xb4>)
 800434a:	2207      	movs	r2, #7
 800434c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <BSP_SDRAM_Init+0xb4>)
 8004350:	2202      	movs	r2, #2
 8004352:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004354:	4b22      	ldr	r3, [pc, #136]	; (80043e0 <BSP_SDRAM_Init+0xb4>)
 8004356:	2202      	movs	r2, #2
 8004358:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800435a:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <BSP_SDRAM_Init+0xb4>)
 800435c:	2202      	movs	r2, #2
 800435e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004360:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <BSP_SDRAM_Init+0xac>)
 8004362:	2200      	movs	r2, #0
 8004364:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004366:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <BSP_SDRAM_Init+0xac>)
 8004368:	2200      	movs	r2, #0
 800436a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <BSP_SDRAM_Init+0xac>)
 800436e:	2204      	movs	r2, #4
 8004370:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004372:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <BSP_SDRAM_Init+0xac>)
 8004374:	2210      	movs	r2, #16
 8004376:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <BSP_SDRAM_Init+0xac>)
 800437a:	2240      	movs	r2, #64	; 0x40
 800437c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800437e:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <BSP_SDRAM_Init+0xac>)
 8004380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004384:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <BSP_SDRAM_Init+0xac>)
 8004388:	2200      	movs	r2, #0
 800438a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <BSP_SDRAM_Init+0xac>)
 800438e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004392:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004394:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <BSP_SDRAM_Init+0xac>)
 8004396:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800439a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800439c:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <BSP_SDRAM_Init+0xac>)
 800439e:	2200      	movs	r2, #0
 80043a0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80043a2:	2100      	movs	r1, #0
 80043a4:	480c      	ldr	r0, [pc, #48]	; (80043d8 <BSP_SDRAM_Init+0xac>)
 80043a6:	f000 f87f 	bl	80044a8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80043aa:	490d      	ldr	r1, [pc, #52]	; (80043e0 <BSP_SDRAM_Init+0xb4>)
 80043ac:	480a      	ldr	r0, [pc, #40]	; (80043d8 <BSP_SDRAM_Init+0xac>)
 80043ae:	f006 facf 	bl	800a950 <HAL_SDRAM_Init>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <BSP_SDRAM_Init+0xb8>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	e002      	b.n	80043c6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80043c0:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <BSP_SDRAM_Init+0xb8>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80043c6:	f240 6003 	movw	r0, #1539	; 0x603
 80043ca:	f000 f80d 	bl	80043e8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <BSP_SDRAM_Init+0xb8>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20004854 	.word	0x20004854
 80043dc:	a0000140 	.word	0xa0000140
 80043e0:	20000248 	.word	0x20000248
 80043e4:	2000003c 	.word	0x2000003c

080043e8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80043f4:	4b2a      	ldr	r3, [pc, #168]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80043fa:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043fc:	2210      	movs	r2, #16
 80043fe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004400:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004402:	2201      	movs	r2, #1
 8004404:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004406:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004408:	2200      	movs	r2, #0
 800440a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800440c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004410:	4923      	ldr	r1, [pc, #140]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004412:	4824      	ldr	r0, [pc, #144]	; (80044a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004414:	f006 fad0 	bl	800a9b8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004418:	2001      	movs	r0, #1
 800441a:	f001 fb43 	bl	8005aa4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800441e:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004420:	2202      	movs	r2, #2
 8004422:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004424:	4b1e      	ldr	r3, [pc, #120]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004426:	2210      	movs	r2, #16
 8004428:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800442a:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800442c:	2201      	movs	r2, #1
 800442e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004430:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004432:	2200      	movs	r2, #0
 8004434:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800443a:	4919      	ldr	r1, [pc, #100]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800443c:	4819      	ldr	r0, [pc, #100]	; (80044a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800443e:	f006 fabb 	bl	800a9b8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004444:	2203      	movs	r2, #3
 8004446:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800444a:	2210      	movs	r2, #16
 800444c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800444e:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004450:	2208      	movs	r2, #8
 8004452:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004454:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004456:	2200      	movs	r2, #0
 8004458:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800445a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800445e:	4910      	ldr	r1, [pc, #64]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004460:	4810      	ldr	r0, [pc, #64]	; (80044a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004462:	f006 faa9 	bl	800a9b8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004466:	f44f 7308 	mov.w	r3, #544	; 0x220
 800446a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800446e:	2204      	movs	r2, #4
 8004470:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004474:	2210      	movs	r2, #16
 8004476:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800447a:	2201      	movs	r2, #1
 800447c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a07      	ldr	r2, [pc, #28]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004482:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004488:	4905      	ldr	r1, [pc, #20]	; (80044a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800448a:	4806      	ldr	r0, [pc, #24]	; (80044a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800448c:	f006 fa94 	bl	800a9b8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4804      	ldr	r0, [pc, #16]	; (80044a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004494:	f006 fac5 	bl	800aa22 <HAL_SDRAM_ProgramRefreshRate>
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000264 	.word	0x20000264
 80044a4:	20004854 	.word	0x20004854

080044a8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b090      	sub	sp, #64	; 0x40
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80044b2:	4b70      	ldr	r3, [pc, #448]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	4a6f      	ldr	r2, [pc, #444]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	6393      	str	r3, [r2, #56]	; 0x38
 80044be:	4b6d      	ldr	r3, [pc, #436]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80044ca:	4b6a      	ldr	r3, [pc, #424]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	4a69      	ldr	r2, [pc, #420]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 80044d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044d4:	6313      	str	r3, [r2, #48]	; 0x30
 80044d6:	4b67      	ldr	r3, [pc, #412]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044e2:	4b64      	ldr	r3, [pc, #400]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a63      	ldr	r2, [pc, #396]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 80044e8:	f043 0304 	orr.w	r3, r3, #4
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
 80044ee:	4b61      	ldr	r3, [pc, #388]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	623b      	str	r3, [r7, #32]
 80044f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044fa:	4b5e      	ldr	r3, [pc, #376]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	4a5d      	ldr	r2, [pc, #372]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 8004500:	f043 0308 	orr.w	r3, r3, #8
 8004504:	6313      	str	r3, [r2, #48]	; 0x30
 8004506:	4b5b      	ldr	r3, [pc, #364]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004512:	4b58      	ldr	r3, [pc, #352]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	4a57      	ldr	r2, [pc, #348]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 8004518:	f043 0310 	orr.w	r3, r3, #16
 800451c:	6313      	str	r3, [r2, #48]	; 0x30
 800451e:	4b55      	ldr	r3, [pc, #340]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800452a:	4b52      	ldr	r3, [pc, #328]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	4a51      	ldr	r2, [pc, #324]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 8004530:	f043 0320 	orr.w	r3, r3, #32
 8004534:	6313      	str	r3, [r2, #48]	; 0x30
 8004536:	4b4f      	ldr	r3, [pc, #316]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004542:	4b4c      	ldr	r3, [pc, #304]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	4a4b      	ldr	r2, [pc, #300]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 8004548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800454c:	6313      	str	r3, [r2, #48]	; 0x30
 800454e:	4b49      	ldr	r3, [pc, #292]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800455a:	4b46      	ldr	r3, [pc, #280]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	4a45      	ldr	r2, [pc, #276]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 8004560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004564:	6313      	str	r3, [r2, #48]	; 0x30
 8004566:	4b43      	ldr	r3, [pc, #268]	; (8004674 <BSP_SDRAM_MspInit+0x1cc>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004572:	2302      	movs	r3, #2
 8004574:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004576:	2301      	movs	r3, #1
 8004578:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800457a:	2302      	movs	r3, #2
 800457c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800457e:	230c      	movs	r3, #12
 8004580:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004582:	2308      	movs	r3, #8
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800458a:	4619      	mov	r1, r3
 800458c:	483a      	ldr	r0, [pc, #232]	; (8004678 <BSP_SDRAM_MspInit+0x1d0>)
 800458e:	f003 f839 	bl	8007604 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004592:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800459c:	4619      	mov	r1, r3
 800459e:	4837      	ldr	r0, [pc, #220]	; (800467c <BSP_SDRAM_MspInit+0x1d4>)
 80045a0:	f003 f830 	bl	8007604 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80045a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80045aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045ae:	4619      	mov	r1, r3
 80045b0:	4833      	ldr	r0, [pc, #204]	; (8004680 <BSP_SDRAM_MspInit+0x1d8>)
 80045b2:	f003 f827 	bl	8007604 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80045b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80045bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045c0:	4619      	mov	r1, r3
 80045c2:	4830      	ldr	r0, [pc, #192]	; (8004684 <BSP_SDRAM_MspInit+0x1dc>)
 80045c4:	f003 f81e 	bl	8007604 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80045c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80045ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045d2:	4619      	mov	r1, r3
 80045d4:	482c      	ldr	r0, [pc, #176]	; (8004688 <BSP_SDRAM_MspInit+0x1e0>)
 80045d6:	f003 f815 	bl	8007604 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80045da:	2328      	movs	r3, #40	; 0x28
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80045de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045e2:	4619      	mov	r1, r3
 80045e4:	4829      	ldr	r0, [pc, #164]	; (800468c <BSP_SDRAM_MspInit+0x1e4>)
 80045e6:	f003 f80d 	bl	8007604 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80045ea:	4b29      	ldr	r3, [pc, #164]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80045f0:	4b27      	ldr	r3, [pc, #156]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 80045f2:	2280      	movs	r2, #128	; 0x80
 80045f4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80045f6:	4b26      	ldr	r3, [pc, #152]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 80045f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045fc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80045fe:	4b24      	ldr	r3, [pc, #144]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 8004600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004604:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004606:	4b22      	ldr	r3, [pc, #136]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 8004608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800460c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800460e:	4b20      	ldr	r3, [pc, #128]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 8004610:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004614:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004616:	4b1e      	ldr	r3, [pc, #120]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 8004618:	2200      	movs	r2, #0
 800461a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800461c:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 800461e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004622:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004624:	4b1a      	ldr	r3, [pc, #104]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 8004626:	2200      	movs	r2, #0
 8004628:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800462a:	4b19      	ldr	r3, [pc, #100]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 800462c:	2203      	movs	r2, #3
 800462e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004630:	4b17      	ldr	r3, [pc, #92]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 8004632:	2200      	movs	r2, #0
 8004634:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004636:	4b16      	ldr	r3, [pc, #88]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800463c:	4b14      	ldr	r3, [pc, #80]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 800463e:	4a15      	ldr	r2, [pc, #84]	; (8004694 <BSP_SDRAM_MspInit+0x1ec>)
 8004640:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a12      	ldr	r2, [pc, #72]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
 8004648:	4a11      	ldr	r2, [pc, #68]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800464e:	4810      	ldr	r0, [pc, #64]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 8004650:	f002 f914 	bl	800687c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004654:	480e      	ldr	r0, [pc, #56]	; (8004690 <BSP_SDRAM_MspInit+0x1e8>)
 8004656:	f002 f863 	bl	8006720 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800465a:	2200      	movs	r2, #0
 800465c:	210f      	movs	r1, #15
 800465e:	2038      	movs	r0, #56	; 0x38
 8004660:	f001 fdb4 	bl	80061cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004664:	2038      	movs	r0, #56	; 0x38
 8004666:	f001 fdcd 	bl	8006204 <HAL_NVIC_EnableIRQ>
}
 800466a:	bf00      	nop
 800466c:	3740      	adds	r7, #64	; 0x40
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800
 8004678:	40020800 	.word	0x40020800
 800467c:	40020c00 	.word	0x40020c00
 8004680:	40021000 	.word	0x40021000
 8004684:	40021400 	.word	0x40021400
 8004688:	40021800 	.word	0x40021800
 800468c:	40021c00 	.word	0x40021c00
 8004690:	20000274 	.word	0x20000274
 8004694:	40026410 	.word	0x40026410

08004698 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	460a      	mov	r2, r1
 80046a2:	80fb      	strh	r3, [r7, #6]
 80046a4:	4613      	mov	r3, r2
 80046a6:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80046ac:	4a14      	ldr	r2, [pc, #80]	; (8004700 <BSP_TS_Init+0x68>)
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80046b2:	4a14      	ldr	r2, [pc, #80]	; (8004704 <BSP_TS_Init+0x6c>)
 80046b4:	88bb      	ldrh	r3, [r7, #4]
 80046b6:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80046b8:	4b13      	ldr	r3, [pc, #76]	; (8004708 <BSP_TS_Init+0x70>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2070      	movs	r0, #112	; 0x70
 80046be:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80046c0:	4b11      	ldr	r3, [pc, #68]	; (8004708 <BSP_TS_Init+0x70>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2070      	movs	r0, #112	; 0x70
 80046c6:	4798      	blx	r3
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b51      	cmp	r3, #81	; 0x51
 80046cc:	d111      	bne.n	80046f2 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80046ce:	4b0f      	ldr	r3, [pc, #60]	; (800470c <BSP_TS_Init+0x74>)
 80046d0:	4a0d      	ldr	r2, [pc, #52]	; (8004708 <BSP_TS_Init+0x70>)
 80046d2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80046d4:	4b0e      	ldr	r3, [pc, #56]	; (8004710 <BSP_TS_Init+0x78>)
 80046d6:	2270      	movs	r2, #112	; 0x70
 80046d8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80046da:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <BSP_TS_Init+0x7c>)
 80046dc:	2208      	movs	r2, #8
 80046de:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80046e0:	4b0a      	ldr	r3, [pc, #40]	; (800470c <BSP_TS_Init+0x74>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <BSP_TS_Init+0x78>)
 80046e8:	7812      	ldrb	r2, [r2, #0]
 80046ea:	b292      	uxth	r2, r2
 80046ec:	4610      	mov	r0, r2
 80046ee:	4798      	blx	r3
 80046f0:	e001      	b.n	80046f6 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80046f2:	2303      	movs	r3, #3
 80046f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	200002d8 	.word	0x200002d8
 8004704:	200002da 	.word	0x200002da
 8004708:	20000000 	.word	0x20000000
 800470c:	200002d4 	.word	0x200002d4
 8004710:	200002dd 	.word	0x200002dd
 8004714:	200002dc 	.word	0x200002dc

08004718 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b097      	sub	sp, #92	; 0x5c
 800471c:	af02      	add	r7, sp, #8
 800471e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004732:	4b97      	ldr	r3, [pc, #604]	; (8004990 <BSP_TS_GetState+0x278>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	4a96      	ldr	r2, [pc, #600]	; (8004994 <BSP_TS_GetState+0x27c>)
 800473a:	7812      	ldrb	r2, [r2, #0]
 800473c:	b292      	uxth	r2, r2
 800473e:	4610      	mov	r0, r2
 8004740:	4798      	blx	r3
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 81a8 	beq.w	8004aa4 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004754:	2300      	movs	r3, #0
 8004756:	64bb      	str	r3, [r7, #72]	; 0x48
 8004758:	e197      	b.n	8004a8a <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800475a:	4b8d      	ldr	r3, [pc, #564]	; (8004990 <BSP_TS_GetState+0x278>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	4a8c      	ldr	r2, [pc, #560]	; (8004994 <BSP_TS_GetState+0x27c>)
 8004762:	7812      	ldrb	r2, [r2, #0]
 8004764:	b290      	uxth	r0, r2
 8004766:	f107 0120 	add.w	r1, r7, #32
 800476a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800476c:	0052      	lsls	r2, r2, #1
 800476e:	188c      	adds	r4, r1, r2
 8004770:	f107 0114 	add.w	r1, r7, #20
 8004774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004776:	0052      	lsls	r2, r2, #1
 8004778:	440a      	add	r2, r1
 800477a:	4621      	mov	r1, r4
 800477c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800477e:	4b86      	ldr	r3, [pc, #536]	; (8004998 <BSP_TS_GetState+0x280>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d11b      	bne.n	80047be <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8004786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800478e:	4413      	add	r3, r2
 8004790:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800479c:	440b      	add	r3, r1
 800479e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80047a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80047aa:	4413      	add	r3, r2
 80047ac:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80047b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80047b8:	440b      	add	r3, r1
 80047ba:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80047be:	4b76      	ldr	r3, [pc, #472]	; (8004998 <BSP_TS_GetState+0x280>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d010      	beq.n	80047ec <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 80047ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80047d2:	4413      	add	r3, r2
 80047d4:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80047d8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80047dc:	b29a      	uxth	r2, r3
 80047de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80047e6:	440b      	add	r3, r1
 80047e8:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80047ec:	4b6a      	ldr	r3, [pc, #424]	; (8004998 <BSP_TS_GetState+0x280>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 80047f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004800:	4413      	add	r3, r2
 8004802:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004806:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800480a:	b29a      	uxth	r2, r3
 800480c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004814:	440b      	add	r3, r1
 8004816:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800481a:	4b5f      	ldr	r3, [pc, #380]	; (8004998 <BSP_TS_GetState+0x280>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01b      	beq.n	800485e <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8004826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800482e:	4413      	add	r3, r2
 8004830:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800483c:	440b      	add	r3, r1
 800483e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800484a:	4413      	add	r3, r2
 800484c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004858:	440b      	add	r3, r1
 800485a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800485e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004866:	4413      	add	r3, r2
 8004868:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800486c:	4619      	mov	r1, r3
 800486e:	4a4b      	ldr	r2, [pc, #300]	; (800499c <BSP_TS_GetState+0x284>)
 8004870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004876:	4299      	cmp	r1, r3
 8004878:	d90e      	bls.n	8004898 <BSP_TS_GetState+0x180>
 800487a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004882:	4413      	add	r3, r2
 8004884:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004888:	4944      	ldr	r1, [pc, #272]	; (800499c <BSP_TS_GetState+0x284>)
 800488a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800488c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004890:	b29b      	uxth	r3, r3
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	b29b      	uxth	r3, r3
 8004896:	e00d      	b.n	80048b4 <BSP_TS_GetState+0x19c>
 8004898:	4a40      	ldr	r2, [pc, #256]	; (800499c <BSP_TS_GetState+0x284>)
 800489a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80048aa:	440b      	add	r3, r1
 80048ac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80048b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80048c0:	4413      	add	r3, r2
 80048c2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80048c6:	4619      	mov	r1, r3
 80048c8:	4a35      	ldr	r2, [pc, #212]	; (80049a0 <BSP_TS_GetState+0x288>)
 80048ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d0:	4299      	cmp	r1, r3
 80048d2:	d90e      	bls.n	80048f2 <BSP_TS_GetState+0x1da>
 80048d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80048dc:	4413      	add	r3, r2
 80048de:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80048e2:	492f      	ldr	r1, [pc, #188]	; (80049a0 <BSP_TS_GetState+0x288>)
 80048e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	e00d      	b.n	800490e <BSP_TS_GetState+0x1f6>
 80048f2:	4a2b      	ldr	r2, [pc, #172]	; (80049a0 <BSP_TS_GetState+0x288>)
 80048f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004904:	440b      	add	r3, r1
 8004906:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	b29b      	uxth	r3, r3
 800490e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8004912:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004916:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800491a:	4413      	add	r3, r2
 800491c:	2b05      	cmp	r3, #5
 800491e:	dd17      	ble.n	8004950 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8004920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004928:	4413      	add	r3, r2
 800492a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800492e:	4619      	mov	r1, r3
 8004930:	4a1a      	ldr	r2, [pc, #104]	; (800499c <BSP_TS_GetState+0x284>)
 8004932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004934:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004940:	4413      	add	r3, r2
 8004942:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004946:	4619      	mov	r1, r3
 8004948:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <BSP_TS_GetState+0x288>)
 800494a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800494c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004950:	4b10      	ldr	r3, [pc, #64]	; (8004994 <BSP_TS_GetState+0x27c>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b70      	cmp	r3, #112	; 0x70
 8004956:	d125      	bne.n	80049a4 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8004958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004960:	4413      	add	r3, r2
 8004962:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	4413      	add	r3, r2
 800496e:	460a      	mov	r2, r1
 8004970:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800497a:	4413      	add	r3, r2
 800497c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004984:	3304      	adds	r3, #4
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	4413      	add	r3, r2
 800498a:	460a      	mov	r2, r1
 800498c:	809a      	strh	r2, [r3, #4]
 800498e:	e02c      	b.n	80049ea <BSP_TS_GetState+0x2d2>
 8004990:	200002d4 	.word	0x200002d4
 8004994:	200002dd 	.word	0x200002dd
 8004998:	200002dc 	.word	0x200002dc
 800499c:	200002e0 	.word	0x200002e0
 80049a0:	200002f4 	.word	0x200002f4
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80049a4:	4b42      	ldr	r3, [pc, #264]	; (8004ab0 <BSP_TS_GetState+0x398>)
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	4619      	mov	r1, r3
 80049aa:	4a42      	ldr	r2, [pc, #264]	; (8004ab4 <BSP_TS_GetState+0x39c>)
 80049ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b2:	fb03 f301 	mul.w	r3, r3, r1
 80049b6:	0b1b      	lsrs	r3, r3, #12
 80049b8:	b299      	uxth	r1, r3
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	4413      	add	r3, r2
 80049c2:	460a      	mov	r2, r1
 80049c4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80049c6:	4b3c      	ldr	r3, [pc, #240]	; (8004ab8 <BSP_TS_GetState+0x3a0>)
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	4619      	mov	r1, r3
 80049cc:	4a3b      	ldr	r2, [pc, #236]	; (8004abc <BSP_TS_GetState+0x3a4>)
 80049ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d4:	fb03 f301 	mul.w	r3, r3, r1
 80049d8:	0b1b      	lsrs	r3, r3, #12
 80049da:	b299      	uxth	r1, r3
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e0:	3304      	adds	r3, #4
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	4413      	add	r3, r2
 80049e6:	460a      	mov	r2, r1
 80049e8:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80049ea:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <BSP_TS_GetState+0x3a8>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	b298      	uxth	r0, r3
 80049f0:	f107 010c 	add.w	r1, r7, #12
 80049f4:	f107 0210 	add.w	r2, r7, #16
 80049f8:	f107 0308 	add.w	r3, r7, #8
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	460b      	mov	r3, r1
 8004a00:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a02:	f7fc fc07 	bl	8001214 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	b2d9      	uxtb	r1, r3
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0e:	4413      	add	r3, r2
 8004a10:	3316      	adds	r3, #22
 8004a12:	460a      	mov	r2, r1
 8004a14:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	b2d9      	uxtb	r1, r3
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1e:	4413      	add	r3, r2
 8004a20:	3320      	adds	r3, #32
 8004a22:	460a      	mov	r2, r1
 8004a24:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d827      	bhi.n	8004a7c <BSP_TS_GetState+0x364>
 8004a2c:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <BSP_TS_GetState+0x31c>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a45 	.word	0x08004a45
 8004a38:	08004a53 	.word	0x08004a53
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a6f 	.word	0x08004a6f
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a48:	4413      	add	r3, r2
 8004a4a:	331b      	adds	r3, #27
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	701a      	strb	r2, [r3, #0]
          break;
 8004a50:	e018      	b.n	8004a84 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a56:	4413      	add	r3, r2
 8004a58:	331b      	adds	r3, #27
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	701a      	strb	r2, [r3, #0]
          break;
 8004a5e:	e011      	b.n	8004a84 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a64:	4413      	add	r3, r2
 8004a66:	331b      	adds	r3, #27
 8004a68:	2203      	movs	r2, #3
 8004a6a:	701a      	strb	r2, [r3, #0]
          break;
 8004a6c:	e00a      	b.n	8004a84 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a72:	4413      	add	r3, r2
 8004a74:	331b      	adds	r3, #27
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
          break;
 8004a7a:	e003      	b.n	8004a84 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8004a82:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a86:	3301      	adds	r3, #1
 8004a88:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a92:	4293      	cmp	r3, r2
 8004a94:	f4ff ae61 	bcc.w	800475a <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f813 	bl	8004ac4 <BSP_TS_Get_GestureId>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004aa4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3754      	adds	r7, #84	; 0x54
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd90      	pop	{r4, r7, pc}
 8004ab0:	200002d8 	.word	0x200002d8
 8004ab4:	200002e0 	.word	0x200002e0
 8004ab8:	200002da 	.word	0x200002da
 8004abc:	200002f4 	.word	0x200002f4
 8004ac0:	200002dd 	.word	0x200002dd

08004ac4 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004ad4:	4b3b      	ldr	r3, [pc, #236]	; (8004bc4 <BSP_TS_Get_GestureId+0x100>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f107 0208 	add.w	r2, r7, #8
 8004ade:	4611      	mov	r1, r2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fc fb7e 	bl	80011e2 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b49      	cmp	r3, #73	; 0x49
 8004aea:	d05e      	beq.n	8004baa <BSP_TS_Get_GestureId+0xe6>
 8004aec:	2b49      	cmp	r3, #73	; 0x49
 8004aee:	d860      	bhi.n	8004bb2 <BSP_TS_Get_GestureId+0xee>
 8004af0:	2b1c      	cmp	r3, #28
 8004af2:	d83f      	bhi.n	8004b74 <BSP_TS_Get_GestureId+0xb0>
 8004af4:	2b1c      	cmp	r3, #28
 8004af6:	d85c      	bhi.n	8004bb2 <BSP_TS_Get_GestureId+0xee>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <BSP_TS_Get_GestureId+0x3c>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b7b 	.word	0x08004b7b
 8004b04:	08004bb3 	.word	0x08004bb3
 8004b08:	08004bb3 	.word	0x08004bb3
 8004b0c:	08004bb3 	.word	0x08004bb3
 8004b10:	08004bb3 	.word	0x08004bb3
 8004b14:	08004bb3 	.word	0x08004bb3
 8004b18:	08004bb3 	.word	0x08004bb3
 8004b1c:	08004bb3 	.word	0x08004bb3
 8004b20:	08004bb3 	.word	0x08004bb3
 8004b24:	08004bb3 	.word	0x08004bb3
 8004b28:	08004bb3 	.word	0x08004bb3
 8004b2c:	08004bb3 	.word	0x08004bb3
 8004b30:	08004bb3 	.word	0x08004bb3
 8004b34:	08004bb3 	.word	0x08004bb3
 8004b38:	08004bb3 	.word	0x08004bb3
 8004b3c:	08004bb3 	.word	0x08004bb3
 8004b40:	08004b83 	.word	0x08004b83
 8004b44:	08004bb3 	.word	0x08004bb3
 8004b48:	08004bb3 	.word	0x08004bb3
 8004b4c:	08004bb3 	.word	0x08004bb3
 8004b50:	08004b8b 	.word	0x08004b8b
 8004b54:	08004bb3 	.word	0x08004bb3
 8004b58:	08004bb3 	.word	0x08004bb3
 8004b5c:	08004bb3 	.word	0x08004bb3
 8004b60:	08004b93 	.word	0x08004b93
 8004b64:	08004bb3 	.word	0x08004bb3
 8004b68:	08004bb3 	.word	0x08004bb3
 8004b6c:	08004bb3 	.word	0x08004bb3
 8004b70:	08004b9b 	.word	0x08004b9b
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	d014      	beq.n	8004ba2 <BSP_TS_Get_GestureId+0xde>
 8004b78:	e01b      	b.n	8004bb2 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004b80:	e01a      	b.n	8004bb8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004b88:	e016      	b.n	8004bb8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004b90:	e012      	b.n	8004bb8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2203      	movs	r2, #3
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004b98:	e00e      	b.n	8004bb8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004ba0:	e00a      	b.n	8004bb8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2205      	movs	r2, #5
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004ba8:	e006      	b.n	8004bb8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2206      	movs	r2, #6
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004bb0:	e002      	b.n	8004bb8 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb6:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	200002dd 	.word	0x200002dd

08004bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bce:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <HAL_MspInit+0x4c>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	4a10      	ldr	r2, [pc, #64]	; (8004c14 <HAL_MspInit+0x4c>)
 8004bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bda:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <HAL_MspInit+0x4c>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be2:	607b      	str	r3, [r7, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <HAL_MspInit+0x4c>)
 8004be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bea:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <HAL_MspInit+0x4c>)
 8004bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <HAL_MspInit+0x4c>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004bfe:	2200      	movs	r2, #0
 8004c00:	210f      	movs	r1, #15
 8004c02:	f06f 0001 	mvn.w	r0, #1
 8004c06:	f001 fae1 	bl	80061cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800

08004c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	; 0x30
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c20:	f107 031c 	add.w	r3, r7, #28
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	60da      	str	r2, [r3, #12]
 8004c2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2a      	ldr	r2, [pc, #168]	; (8004ce0 <HAL_ADC_MspInit+0xc8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d124      	bne.n	8004c84 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ce4 <HAL_ADC_MspInit+0xcc>)
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3e:	4a29      	ldr	r2, [pc, #164]	; (8004ce4 <HAL_ADC_MspInit+0xcc>)
 8004c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c44:	6453      	str	r3, [r2, #68]	; 0x44
 8004c46:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <HAL_ADC_MspInit+0xcc>)
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c52:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <HAL_ADC_MspInit+0xcc>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <HAL_ADC_MspInit+0xcc>)
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5e:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <HAL_ADC_MspInit+0xcc>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c76:	f107 031c 	add.w	r3, r7, #28
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	481a      	ldr	r0, [pc, #104]	; (8004ce8 <HAL_ADC_MspInit+0xd0>)
 8004c7e:	f002 fcc1 	bl	8007604 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004c82:	e029      	b.n	8004cd8 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a18      	ldr	r2, [pc, #96]	; (8004cec <HAL_ADC_MspInit+0xd4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d124      	bne.n	8004cd8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004c8e:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <HAL_ADC_MspInit+0xcc>)
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	4a14      	ldr	r2, [pc, #80]	; (8004ce4 <HAL_ADC_MspInit+0xcc>)
 8004c94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c98:	6453      	str	r3, [r2, #68]	; 0x44
 8004c9a:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <HAL_ADC_MspInit+0xcc>)
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ca6:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <HAL_ADC_MspInit+0xcc>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	4a0e      	ldr	r2, [pc, #56]	; (8004ce4 <HAL_ADC_MspInit+0xcc>)
 8004cac:	f043 0320 	orr.w	r3, r3, #32
 8004cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <HAL_ADC_MspInit+0xcc>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8004cbe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ccc:	f107 031c 	add.w	r3, r7, #28
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4807      	ldr	r0, [pc, #28]	; (8004cf0 <HAL_ADC_MspInit+0xd8>)
 8004cd4:	f002 fc96 	bl	8007604 <HAL_GPIO_Init>
}
 8004cd8:	bf00      	nop
 8004cda:	3730      	adds	r7, #48	; 0x30
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40012000 	.word	0x40012000
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	40020000 	.word	0x40020000
 8004cec:	40012200 	.word	0x40012200
 8004cf0:	40021400 	.word	0x40021400

08004cf4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08a      	sub	sp, #40	; 0x28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cfc:	f107 0314 	add.w	r3, r7, #20
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	609a      	str	r2, [r3, #8]
 8004d08:	60da      	str	r2, [r3, #12]
 8004d0a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a31      	ldr	r2, [pc, #196]	; (8004dd8 <HAL_DAC_MspInit+0xe4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d15c      	bne.n	8004dd0 <HAL_DAC_MspInit+0xdc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004d16:	4b31      	ldr	r3, [pc, #196]	; (8004ddc <HAL_DAC_MspInit+0xe8>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4a30      	ldr	r2, [pc, #192]	; (8004ddc <HAL_DAC_MspInit+0xe8>)
 8004d1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d20:	6413      	str	r3, [r2, #64]	; 0x40
 8004d22:	4b2e      	ldr	r3, [pc, #184]	; (8004ddc <HAL_DAC_MspInit+0xe8>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2e:	4b2b      	ldr	r3, [pc, #172]	; (8004ddc <HAL_DAC_MspInit+0xe8>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	4a2a      	ldr	r2, [pc, #168]	; (8004ddc <HAL_DAC_MspInit+0xe8>)
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	6313      	str	r3, [r2, #48]	; 0x30
 8004d3a:	4b28      	ldr	r3, [pc, #160]	; (8004ddc <HAL_DAC_MspInit+0xe8>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004d46:	2310      	movs	r3, #16
 8004d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d52:	f107 0314 	add.w	r3, r7, #20
 8004d56:	4619      	mov	r1, r3
 8004d58:	4821      	ldr	r0, [pc, #132]	; (8004de0 <HAL_DAC_MspInit+0xec>)
 8004d5a:	f002 fc53 	bl	8007604 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8004d5e:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <HAL_DAC_MspInit+0xf0>)
 8004d60:	4a21      	ldr	r2, [pc, #132]	; (8004de8 <HAL_DAC_MspInit+0xf4>)
 8004d62:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8004d64:	4b1f      	ldr	r3, [pc, #124]	; (8004de4 <HAL_DAC_MspInit+0xf0>)
 8004d66:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8004d6a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d6c:	4b1d      	ldr	r3, [pc, #116]	; (8004de4 <HAL_DAC_MspInit+0xf0>)
 8004d6e:	2240      	movs	r2, #64	; 0x40
 8004d70:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d72:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <HAL_DAC_MspInit+0xf0>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8004d78:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <HAL_DAC_MspInit+0xf0>)
 8004d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d7e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d80:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <HAL_DAC_MspInit+0xf0>)
 8004d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d86:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d88:	4b16      	ldr	r3, [pc, #88]	; (8004de4 <HAL_DAC_MspInit+0xf0>)
 8004d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d8e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8004d90:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <HAL_DAC_MspInit+0xf0>)
 8004d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d96:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8004d98:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <HAL_DAC_MspInit+0xf0>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_DAC_MspInit+0xf0>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8004da4:	480f      	ldr	r0, [pc, #60]	; (8004de4 <HAL_DAC_MspInit+0xf0>)
 8004da6:	f001 fcbb 	bl	8006720 <HAL_DMA_Init>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8004db0:	f7fe f846 	bl	8002e40 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a0b      	ldr	r2, [pc, #44]	; (8004de4 <HAL_DAC_MspInit+0xf0>)
 8004db8:	609a      	str	r2, [r3, #8]
 8004dba:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <HAL_DAC_MspInit+0xf0>)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	210f      	movs	r1, #15
 8004dc4:	2036      	movs	r0, #54	; 0x36
 8004dc6:	f001 fa01 	bl	80061cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004dca:	2036      	movs	r0, #54	; 0x36
 8004dcc:	f001 fa1a 	bl	8006204 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004dd0:	bf00      	nop
 8004dd2:	3728      	adds	r7, #40	; 0x28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40007400 	.word	0x40007400
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	40020000 	.word	0x40020000
 8004de4:	2000440c 	.word	0x2000440c
 8004de8:	40026088 	.word	0x40026088

08004dec <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a0c      	ldr	r2, [pc, #48]	; (8004e2c <HAL_DAC_MspDeInit+0x40>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d111      	bne.n	8004e22 <HAL_DAC_MspDeInit+0x36>
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <HAL_DAC_MspDeInit+0x44>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	4a0b      	ldr	r2, [pc, #44]	; (8004e30 <HAL_DAC_MspDeInit+0x44>)
 8004e04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e08:	6413      	str	r3, [r2, #64]	; 0x40

    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8004e0a:	2110      	movs	r1, #16
 8004e0c:	4809      	ldr	r0, [pc, #36]	; (8004e34 <HAL_DAC_MspDeInit+0x48>)
 8004e0e:	f002 fda5 	bl	800795c <HAL_GPIO_DeInit>

    /* DAC DMA DeInit */
    HAL_DMA_DeInit(hdac->DMA_Handle1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 fd30 	bl	800687c <HAL_DMA_DeInit>

    /* DAC interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8004e1c:	2036      	movs	r0, #54	; 0x36
 8004e1e:	f001 f9ff 	bl	8006220 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }

}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40007400 	.word	0x40007400
 8004e30:	40023800 	.word	0x40023800
 8004e34:	40020000 	.word	0x40020000

08004e38 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <HAL_DMA2D_MspInit+0x44>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d113      	bne.n	8004e72 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <HAL_DMA2D_MspInit+0x48>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	4a0c      	ldr	r2, [pc, #48]	; (8004e80 <HAL_DMA2D_MspInit+0x48>)
 8004e50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e54:	6313      	str	r3, [r2, #48]	; 0x30
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <HAL_DMA2D_MspInit+0x48>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004e62:	2200      	movs	r2, #0
 8004e64:	2105      	movs	r1, #5
 8004e66:	205a      	movs	r0, #90	; 0x5a
 8004e68:	f001 f9b0 	bl	80061cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004e6c:	205a      	movs	r0, #90	; 0x5a
 8004e6e:	f001 f9c9 	bl	8006204 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	4002b000 	.word	0x4002b000
 8004e80:	40023800 	.word	0x40023800

08004e84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b0ac      	sub	sp, #176	; 0xb0
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	609a      	str	r2, [r3, #8]
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e9c:	f107 0318 	add.w	r3, r7, #24
 8004ea0:	2284      	movs	r2, #132	; 0x84
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f008 fa1d 	bl	800d2e4 <memset>
  if(hi2c->Instance==I2C1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a44      	ldr	r2, [pc, #272]	; (8004fc0 <HAL_I2C_MspInit+0x13c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d13d      	bne.n	8004f30 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004eb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004eb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ebe:	f107 0318 	add.w	r3, r7, #24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f004 fd7c 	bl	80099c0 <HAL_RCCEx_PeriphCLKConfig>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004ece:	f7fd ffb7 	bl	8002e40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ed2:	4b3c      	ldr	r3, [pc, #240]	; (8004fc4 <HAL_I2C_MspInit+0x140>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	4a3b      	ldr	r2, [pc, #236]	; (8004fc4 <HAL_I2C_MspInit+0x140>)
 8004ed8:	f043 0302 	orr.w	r3, r3, #2
 8004edc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ede:	4b39      	ldr	r3, [pc, #228]	; (8004fc4 <HAL_I2C_MspInit+0x140>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004eea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ef2:	2312      	movs	r3, #18
 8004ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004efe:	2303      	movs	r3, #3
 8004f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f04:	2304      	movs	r3, #4
 8004f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004f0e:	4619      	mov	r1, r3
 8004f10:	482d      	ldr	r0, [pc, #180]	; (8004fc8 <HAL_I2C_MspInit+0x144>)
 8004f12:	f002 fb77 	bl	8007604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f16:	4b2b      	ldr	r3, [pc, #172]	; (8004fc4 <HAL_I2C_MspInit+0x140>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	4a2a      	ldr	r2, [pc, #168]	; (8004fc4 <HAL_I2C_MspInit+0x140>)
 8004f1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f20:	6413      	str	r3, [r2, #64]	; 0x40
 8004f22:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <HAL_I2C_MspInit+0x140>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004f2e:	e042      	b.n	8004fb6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a25      	ldr	r2, [pc, #148]	; (8004fcc <HAL_I2C_MspInit+0x148>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d13d      	bne.n	8004fb6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f46:	f107 0318 	add.w	r3, r7, #24
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f004 fd38 	bl	80099c0 <HAL_RCCEx_PeriphCLKConfig>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8004f56:	f7fd ff73 	bl	8002e40 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <HAL_I2C_MspInit+0x140>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	4a19      	ldr	r2, [pc, #100]	; (8004fc4 <HAL_I2C_MspInit+0x140>)
 8004f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f64:	6313      	str	r3, [r2, #48]	; 0x30
 8004f66:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <HAL_I2C_MspInit+0x140>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004f72:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f7a:	2312      	movs	r3, #18
 8004f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f80:	2301      	movs	r3, #1
 8004f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f86:	2303      	movs	r3, #3
 8004f88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004f92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004f96:	4619      	mov	r1, r3
 8004f98:	480d      	ldr	r0, [pc, #52]	; (8004fd0 <HAL_I2C_MspInit+0x14c>)
 8004f9a:	f002 fb33 	bl	8007604 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004f9e:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <HAL_I2C_MspInit+0x140>)
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	4a08      	ldr	r2, [pc, #32]	; (8004fc4 <HAL_I2C_MspInit+0x140>)
 8004fa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_I2C_MspInit+0x140>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
}
 8004fb6:	bf00      	nop
 8004fb8:	37b0      	adds	r7, #176	; 0xb0
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40005400 	.word	0x40005400
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40020400 	.word	0x40020400
 8004fcc:	40005c00 	.word	0x40005c00
 8004fd0:	40021c00 	.word	0x40021c00

08004fd4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a15      	ldr	r2, [pc, #84]	; (8005038 <HAL_I2C_MspDeInit+0x64>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d110      	bne.n	8005008 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004fe6:	4b15      	ldr	r3, [pc, #84]	; (800503c <HAL_I2C_MspDeInit+0x68>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	4a14      	ldr	r2, [pc, #80]	; (800503c <HAL_I2C_MspDeInit+0x68>)
 8004fec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ff0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ff6:	4812      	ldr	r0, [pc, #72]	; (8005040 <HAL_I2C_MspDeInit+0x6c>)
 8004ff8:	f002 fcb0 	bl	800795c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004ffc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005000:	480f      	ldr	r0, [pc, #60]	; (8005040 <HAL_I2C_MspDeInit+0x6c>)
 8005002:	f002 fcab 	bl	800795c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005006:	e013      	b.n	8005030 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a0d      	ldr	r2, [pc, #52]	; (8005044 <HAL_I2C_MspDeInit+0x70>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10e      	bne.n	8005030 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005012:	4b0a      	ldr	r3, [pc, #40]	; (800503c <HAL_I2C_MspDeInit+0x68>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	4a09      	ldr	r2, [pc, #36]	; (800503c <HAL_I2C_MspDeInit+0x68>)
 8005018:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800501c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800501e:	2180      	movs	r1, #128	; 0x80
 8005020:	4809      	ldr	r0, [pc, #36]	; (8005048 <HAL_I2C_MspDeInit+0x74>)
 8005022:	f002 fc9b 	bl	800795c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8005026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800502a:	4807      	ldr	r0, [pc, #28]	; (8005048 <HAL_I2C_MspDeInit+0x74>)
 800502c:	f002 fc96 	bl	800795c <HAL_GPIO_DeInit>
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40005400 	.word	0x40005400
 800503c:	40023800 	.word	0x40023800
 8005040:	40020400 	.word	0x40020400
 8005044:	40005c00 	.word	0x40005c00
 8005048:	40021c00 	.word	0x40021c00

0800504c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b0ae      	sub	sp, #184	; 0xb8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005054:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	60da      	str	r2, [r3, #12]
 8005062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005064:	f107 0320 	add.w	r3, r7, #32
 8005068:	2284      	movs	r2, #132	; 0x84
 800506a:	2100      	movs	r1, #0
 800506c:	4618      	mov	r0, r3
 800506e:	f008 f939 	bl	800d2e4 <memset>
  if(hltdc->Instance==LTDC)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a6f      	ldr	r2, [pc, #444]	; (8005234 <HAL_LTDC_MspInit+0x1e8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	f040 80d6 	bne.w	800522a <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800507e:	2308      	movs	r3, #8
 8005080:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8005082:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005086:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8005088:	2305      	movs	r3, #5
 800508a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800508c:	2302      	movs	r3, #2
 800508e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8005090:	2303      	movs	r3, #3
 8005092:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8005094:	2301      	movs	r3, #1
 8005096:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8005098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800509c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800509e:	f107 0320 	add.w	r3, r7, #32
 80050a2:	4618      	mov	r0, r3
 80050a4:	f004 fc8c 	bl	80099c0 <HAL_RCCEx_PeriphCLKConfig>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80050ae:	f7fd fec7 	bl	8002e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80050b2:	4b61      	ldr	r3, [pc, #388]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	4a60      	ldr	r2, [pc, #384]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 80050b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050bc:	6453      	str	r3, [r2, #68]	; 0x44
 80050be:	4b5e      	ldr	r3, [pc, #376]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80050ca:	4b5b      	ldr	r3, [pc, #364]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	4a5a      	ldr	r2, [pc, #360]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 80050d0:	f043 0310 	orr.w	r3, r3, #16
 80050d4:	6313      	str	r3, [r2, #48]	; 0x30
 80050d6:	4b58      	ldr	r3, [pc, #352]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	61bb      	str	r3, [r7, #24]
 80050e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80050e2:	4b55      	ldr	r3, [pc, #340]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	4a54      	ldr	r2, [pc, #336]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 80050e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050ec:	6313      	str	r3, [r2, #48]	; 0x30
 80050ee:	4b52      	ldr	r3, [pc, #328]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80050fa:	4b4f      	ldr	r3, [pc, #316]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	4a4e      	ldr	r2, [pc, #312]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 8005100:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005104:	6313      	str	r3, [r2, #48]	; 0x30
 8005106:	4b4c      	ldr	r3, [pc, #304]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 8005108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005112:	4b49      	ldr	r3, [pc, #292]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005116:	4a48      	ldr	r2, [pc, #288]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 8005118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511c:	6313      	str	r3, [r2, #48]	; 0x30
 800511e:	4b46      	ldr	r3, [pc, #280]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800512a:	4b43      	ldr	r3, [pc, #268]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	4a42      	ldr	r2, [pc, #264]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 8005130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005134:	6313      	str	r3, [r2, #48]	; 0x30
 8005136:	4b40      	ldr	r3, [pc, #256]	; (8005238 <HAL_LTDC_MspInit+0x1ec>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8005142:	2310      	movs	r3, #16
 8005144:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005148:	2302      	movs	r3, #2
 800514a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514e:	2300      	movs	r3, #0
 8005150:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005154:	2300      	movs	r3, #0
 8005156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800515a:	230e      	movs	r3, #14
 800515c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8005160:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005164:	4619      	mov	r1, r3
 8005166:	4835      	ldr	r0, [pc, #212]	; (800523c <HAL_LTDC_MspInit+0x1f0>)
 8005168:	f002 fa4c 	bl	8007604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800516c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8005170:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005174:	2302      	movs	r3, #2
 8005176:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517a:	2300      	movs	r3, #0
 800517c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005180:	2300      	movs	r3, #0
 8005182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005186:	230e      	movs	r3, #14
 8005188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800518c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005190:	4619      	mov	r1, r3
 8005192:	482b      	ldr	r0, [pc, #172]	; (8005240 <HAL_LTDC_MspInit+0x1f4>)
 8005194:	f002 fa36 	bl	8007604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8005198:	23f7      	movs	r3, #247	; 0xf7
 800519a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519e:	2302      	movs	r3, #2
 80051a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051aa:	2300      	movs	r3, #0
 80051ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80051b0:	230e      	movs	r3, #14
 80051b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80051b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80051ba:	4619      	mov	r1, r3
 80051bc:	4821      	ldr	r0, [pc, #132]	; (8005244 <HAL_LTDC_MspInit+0x1f8>)
 80051be:	f002 fa21 	bl	8007604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80051c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ca:	2302      	movs	r3, #2
 80051cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d6:	2300      	movs	r3, #0
 80051d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80051dc:	2309      	movs	r3, #9
 80051de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80051e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80051e6:	4619      	mov	r1, r3
 80051e8:	4817      	ldr	r0, [pc, #92]	; (8005248 <HAL_LTDC_MspInit+0x1fc>)
 80051ea:	f002 fa0b 	bl	8007604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80051ee:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80051f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f6:	2302      	movs	r3, #2
 80051f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005202:	2300      	movs	r3, #0
 8005204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005208:	230e      	movs	r3, #14
 800520a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800520e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005212:	4619      	mov	r1, r3
 8005214:	480d      	ldr	r0, [pc, #52]	; (800524c <HAL_LTDC_MspInit+0x200>)
 8005216:	f002 f9f5 	bl	8007604 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800521a:	2200      	movs	r2, #0
 800521c:	2105      	movs	r1, #5
 800521e:	2058      	movs	r0, #88	; 0x58
 8005220:	f000 ffd4 	bl	80061cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005224:	2058      	movs	r0, #88	; 0x58
 8005226:	f000 ffed 	bl	8006204 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800522a:	bf00      	nop
 800522c:	37b8      	adds	r7, #184	; 0xb8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40016800 	.word	0x40016800
 8005238:	40023800 	.word	0x40023800
 800523c:	40021000 	.word	0x40021000
 8005240:	40022400 	.word	0x40022400
 8005244:	40022800 	.word	0x40022800
 8005248:	40021800 	.word	0x40021800
 800524c:	40022000 	.word	0x40022000

08005250 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b0a4      	sub	sp, #144	; 0x90
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005258:	f107 030c 	add.w	r3, r7, #12
 800525c:	2284      	movs	r2, #132	; 0x84
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f008 f83f 	bl	800d2e4 <memset>
  if(hrtc->Instance==RTC)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a0e      	ldr	r2, [pc, #56]	; (80052a4 <HAL_RTC_MspInit+0x54>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d114      	bne.n	800529a <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005270:	2320      	movs	r3, #32
 8005272:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005278:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800527a:	f107 030c 	add.w	r3, r7, #12
 800527e:	4618      	mov	r0, r3
 8005280:	f004 fb9e 	bl	80099c0 <HAL_RCCEx_PeriphCLKConfig>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800528a:	f7fd fdd9 	bl	8002e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800528e:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <HAL_RTC_MspInit+0x58>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	4a05      	ldr	r2, [pc, #20]	; (80052a8 <HAL_RTC_MspInit+0x58>)
 8005294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005298:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800529a:	bf00      	nop
 800529c:	3790      	adds	r7, #144	; 0x90
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40002800 	.word	0x40002800
 80052a8:	40023800 	.word	0x40023800

080052ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08a      	sub	sp, #40	; 0x28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b4:	f107 0314 	add.w	r3, r7, #20
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	605a      	str	r2, [r3, #4]
 80052be:	609a      	str	r2, [r3, #8]
 80052c0:	60da      	str	r2, [r3, #12]
 80052c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a25      	ldr	r2, [pc, #148]	; (8005360 <HAL_SPI_MspInit+0xb4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d144      	bne.n	8005358 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80052ce:	4b25      	ldr	r3, [pc, #148]	; (8005364 <HAL_SPI_MspInit+0xb8>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	4a24      	ldr	r2, [pc, #144]	; (8005364 <HAL_SPI_MspInit+0xb8>)
 80052d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052d8:	6413      	str	r3, [r2, #64]	; 0x40
 80052da:	4b22      	ldr	r3, [pc, #136]	; (8005364 <HAL_SPI_MspInit+0xb8>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80052e6:	4b1f      	ldr	r3, [pc, #124]	; (8005364 <HAL_SPI_MspInit+0xb8>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	4a1e      	ldr	r2, [pc, #120]	; (8005364 <HAL_SPI_MspInit+0xb8>)
 80052ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f0:	6313      	str	r3, [r2, #48]	; 0x30
 80052f2:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <HAL_SPI_MspInit+0xb8>)
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052fe:	4b19      	ldr	r3, [pc, #100]	; (8005364 <HAL_SPI_MspInit+0xb8>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	4a18      	ldr	r2, [pc, #96]	; (8005364 <HAL_SPI_MspInit+0xb8>)
 8005304:	f043 0302 	orr.w	r3, r3, #2
 8005308:	6313      	str	r3, [r2, #48]	; 0x30
 800530a:	4b16      	ldr	r3, [pc, #88]	; (8005364 <HAL_SPI_MspInit+0xb8>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	60bb      	str	r3, [r7, #8]
 8005314:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8005316:	2303      	movs	r3, #3
 8005318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800531a:	2302      	movs	r3, #2
 800531c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005322:	2303      	movs	r3, #3
 8005324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005326:	2305      	movs	r3, #5
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800532a:	f107 0314 	add.w	r3, r7, #20
 800532e:	4619      	mov	r1, r3
 8005330:	480d      	ldr	r0, [pc, #52]	; (8005368 <HAL_SPI_MspInit+0xbc>)
 8005332:	f002 f967 	bl	8007604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8005336:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800533a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533c:	2302      	movs	r3, #2
 800533e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005340:	2300      	movs	r3, #0
 8005342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005344:	2300      	movs	r3, #0
 8005346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005348:	2305      	movs	r3, #5
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800534c:	f107 0314 	add.w	r3, r7, #20
 8005350:	4619      	mov	r1, r3
 8005352:	4806      	ldr	r0, [pc, #24]	; (800536c <HAL_SPI_MspInit+0xc0>)
 8005354:	f002 f956 	bl	8007604 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005358:	bf00      	nop
 800535a:	3728      	adds	r7, #40	; 0x28
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40003800 	.word	0x40003800
 8005364:	40023800 	.word	0x40023800
 8005368:	40022000 	.word	0x40022000
 800536c:	40020400 	.word	0x40020400

08005370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08e      	sub	sp, #56	; 0x38
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	605a      	str	r2, [r3, #4]
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	60da      	str	r2, [r3, #12]
 8005386:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a44      	ldr	r2, [pc, #272]	; (80054a0 <HAL_TIM_Base_MspInit+0x130>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d10c      	bne.n	80053ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005392:	4b44      	ldr	r3, [pc, #272]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 8005394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005396:	4a43      	ldr	r2, [pc, #268]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	6453      	str	r3, [r2, #68]	; 0x44
 800539e:	4b41      	ldr	r3, [pc, #260]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 80053a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80053aa:	e074      	b.n	8005496 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b4:	d10c      	bne.n	80053d0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053b6:	4b3b      	ldr	r3, [pc, #236]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	4a3a      	ldr	r2, [pc, #232]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 80053bc:	f043 0301 	orr.w	r3, r3, #1
 80053c0:	6413      	str	r3, [r2, #64]	; 0x40
 80053c2:	4b38      	ldr	r3, [pc, #224]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	69fb      	ldr	r3, [r7, #28]
}
 80053ce:	e062      	b.n	8005496 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a34      	ldr	r2, [pc, #208]	; (80054a8 <HAL_TIM_Base_MspInit+0x138>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d10c      	bne.n	80053f4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80053da:	4b32      	ldr	r3, [pc, #200]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	4a31      	ldr	r2, [pc, #196]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 80053e0:	f043 0302 	orr.w	r3, r3, #2
 80053e4:	6413      	str	r3, [r2, #64]	; 0x40
 80053e6:	4b2f      	ldr	r3, [pc, #188]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	61bb      	str	r3, [r7, #24]
 80053f0:	69bb      	ldr	r3, [r7, #24]
}
 80053f2:	e050      	b.n	8005496 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <HAL_TIM_Base_MspInit+0x13c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d10c      	bne.n	8005418 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80053fe:	4b29      	ldr	r3, [pc, #164]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	4a28      	ldr	r2, [pc, #160]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 8005404:	f043 0308 	orr.w	r3, r3, #8
 8005408:	6413      	str	r3, [r2, #64]	; 0x40
 800540a:	4b26      	ldr	r3, [pc, #152]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	697b      	ldr	r3, [r7, #20]
}
 8005416:	e03e      	b.n	8005496 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM7)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a24      	ldr	r2, [pc, #144]	; (80054b0 <HAL_TIM_Base_MspInit+0x140>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d10c      	bne.n	800543c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005422:	4b20      	ldr	r3, [pc, #128]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	4a1f      	ldr	r2, [pc, #124]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 8005428:	f043 0320 	orr.w	r3, r3, #32
 800542c:	6413      	str	r3, [r2, #64]	; 0x40
 800542e:	4b1d      	ldr	r3, [pc, #116]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	693b      	ldr	r3, [r7, #16]
}
 800543a:	e02c      	b.n	8005496 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM8)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <HAL_TIM_Base_MspInit+0x144>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d127      	bne.n	8005496 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005446:	4b17      	ldr	r3, [pc, #92]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	4a16      	ldr	r2, [pc, #88]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 800544c:	f043 0302 	orr.w	r3, r3, #2
 8005450:	6453      	str	r3, [r2, #68]	; 0x44
 8005452:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800545e:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	4a10      	ldr	r2, [pc, #64]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 8005464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005468:	6313      	str	r3, [r2, #48]	; 0x30
 800546a:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <HAL_TIM_Base_MspInit+0x134>)
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	60bb      	str	r3, [r7, #8]
 8005474:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005476:	2304      	movs	r3, #4
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800547a:	2302      	movs	r3, #2
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547e:	2300      	movs	r3, #0
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005482:	2300      	movs	r3, #0
 8005484:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005486:	2303      	movs	r3, #3
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800548a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800548e:	4619      	mov	r1, r3
 8005490:	4809      	ldr	r0, [pc, #36]	; (80054b8 <HAL_TIM_Base_MspInit+0x148>)
 8005492:	f002 f8b7 	bl	8007604 <HAL_GPIO_Init>
}
 8005496:	bf00      	nop
 8005498:	3738      	adds	r7, #56	; 0x38
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40010000 	.word	0x40010000
 80054a4:	40023800 	.word	0x40023800
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	40001400 	.word	0x40001400
 80054b4:	40010400 	.word	0x40010400
 80054b8:	40022000 	.word	0x40022000

080054bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b0b0      	sub	sp, #192	; 0xc0
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	609a      	str	r2, [r3, #8]
 80054d0:	60da      	str	r2, [r3, #12]
 80054d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80054d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054d8:	2284      	movs	r2, #132	; 0x84
 80054da:	2100      	movs	r1, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	f007 ff01 	bl	800d2e4 <memset>
  if(huart->Instance==UART7)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a75      	ldr	r2, [pc, #468]	; (80056bc <HAL_UART_MspInit+0x200>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d13d      	bne.n	8005568 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80054ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80054f2:	2300      	movs	r3, #0
 80054f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054fc:	4618      	mov	r0, r3
 80054fe:	f004 fa5f 	bl	80099c0 <HAL_RCCEx_PeriphCLKConfig>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005508:	f7fd fc9a 	bl	8002e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800550c:	4b6c      	ldr	r3, [pc, #432]	; (80056c0 <HAL_UART_MspInit+0x204>)
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	4a6b      	ldr	r2, [pc, #428]	; (80056c0 <HAL_UART_MspInit+0x204>)
 8005512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005516:	6413      	str	r3, [r2, #64]	; 0x40
 8005518:	4b69      	ldr	r3, [pc, #420]	; (80056c0 <HAL_UART_MspInit+0x204>)
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005524:	4b66      	ldr	r3, [pc, #408]	; (80056c0 <HAL_UART_MspInit+0x204>)
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	4a65      	ldr	r2, [pc, #404]	; (80056c0 <HAL_UART_MspInit+0x204>)
 800552a:	f043 0320 	orr.w	r3, r3, #32
 800552e:	6313      	str	r3, [r2, #48]	; 0x30
 8005530:	4b63      	ldr	r3, [pc, #396]	; (80056c0 <HAL_UART_MspInit+0x204>)
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	623b      	str	r3, [r7, #32]
 800553a:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800553c:	23c0      	movs	r3, #192	; 0xc0
 800553e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005542:	2302      	movs	r3, #2
 8005544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005548:	2300      	movs	r3, #0
 800554a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800554e:	2303      	movs	r3, #3
 8005550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005554:	2308      	movs	r3, #8
 8005556:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800555a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800555e:	4619      	mov	r1, r3
 8005560:	4858      	ldr	r0, [pc, #352]	; (80056c4 <HAL_UART_MspInit+0x208>)
 8005562:	f002 f84f 	bl	8007604 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005566:	e0a4      	b.n	80056b2 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a56      	ldr	r2, [pc, #344]	; (80056c8 <HAL_UART_MspInit+0x20c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d15d      	bne.n	800562e <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005572:	2340      	movs	r3, #64	; 0x40
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005576:	2300      	movs	r3, #0
 8005578:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800557a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800557e:	4618      	mov	r0, r3
 8005580:	f004 fa1e 	bl	80099c0 <HAL_RCCEx_PeriphCLKConfig>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800558a:	f7fd fc59 	bl	8002e40 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800558e:	4b4c      	ldr	r3, [pc, #304]	; (80056c0 <HAL_UART_MspInit+0x204>)
 8005590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005592:	4a4b      	ldr	r2, [pc, #300]	; (80056c0 <HAL_UART_MspInit+0x204>)
 8005594:	f043 0310 	orr.w	r3, r3, #16
 8005598:	6453      	str	r3, [r2, #68]	; 0x44
 800559a:	4b49      	ldr	r3, [pc, #292]	; (80056c0 <HAL_UART_MspInit+0x204>)
 800559c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055a6:	4b46      	ldr	r3, [pc, #280]	; (80056c0 <HAL_UART_MspInit+0x204>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	4a45      	ldr	r2, [pc, #276]	; (80056c0 <HAL_UART_MspInit+0x204>)
 80055ac:	f043 0302 	orr.w	r3, r3, #2
 80055b0:	6313      	str	r3, [r2, #48]	; 0x30
 80055b2:	4b43      	ldr	r3, [pc, #268]	; (80056c0 <HAL_UART_MspInit+0x204>)
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055be:	4b40      	ldr	r3, [pc, #256]	; (80056c0 <HAL_UART_MspInit+0x204>)
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	4a3f      	ldr	r2, [pc, #252]	; (80056c0 <HAL_UART_MspInit+0x204>)
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	6313      	str	r3, [r2, #48]	; 0x30
 80055ca:	4b3d      	ldr	r3, [pc, #244]	; (80056c0 <HAL_UART_MspInit+0x204>)
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055dc:	2302      	movs	r3, #2
 80055de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055e8:	2300      	movs	r3, #0
 80055ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80055ee:	2307      	movs	r3, #7
 80055f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80055f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80055f8:	4619      	mov	r1, r3
 80055fa:	4834      	ldr	r0, [pc, #208]	; (80056cc <HAL_UART_MspInit+0x210>)
 80055fc:	f002 f802 	bl	8007604 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005608:	2302      	movs	r3, #2
 800560a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560e:	2300      	movs	r3, #0
 8005610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005614:	2300      	movs	r3, #0
 8005616:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800561a:	2307      	movs	r3, #7
 800561c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005620:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005624:	4619      	mov	r1, r3
 8005626:	482a      	ldr	r0, [pc, #168]	; (80056d0 <HAL_UART_MspInit+0x214>)
 8005628:	f001 ffec 	bl	8007604 <HAL_GPIO_Init>
}
 800562c:	e041      	b.n	80056b2 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a28      	ldr	r2, [pc, #160]	; (80056d4 <HAL_UART_MspInit+0x218>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d13c      	bne.n	80056b2 <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005638:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800563c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800563e:	2300      	movs	r3, #0
 8005640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005648:	4618      	mov	r0, r3
 800564a:	f004 f9b9 	bl	80099c0 <HAL_RCCEx_PeriphCLKConfig>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8005654:	f7fd fbf4 	bl	8002e40 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005658:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <HAL_UART_MspInit+0x204>)
 800565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565c:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <HAL_UART_MspInit+0x204>)
 800565e:	f043 0320 	orr.w	r3, r3, #32
 8005662:	6453      	str	r3, [r2, #68]	; 0x44
 8005664:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <HAL_UART_MspInit+0x204>)
 8005666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005670:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <HAL_UART_MspInit+0x204>)
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	4a12      	ldr	r2, [pc, #72]	; (80056c0 <HAL_UART_MspInit+0x204>)
 8005676:	f043 0304 	orr.w	r3, r3, #4
 800567a:	6313      	str	r3, [r2, #48]	; 0x30
 800567c:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <HAL_UART_MspInit+0x204>)
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8005688:	23c0      	movs	r3, #192	; 0xc0
 800568a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800568e:	2302      	movs	r3, #2
 8005690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005694:	2300      	movs	r3, #0
 8005696:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800569a:	2303      	movs	r3, #3
 800569c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80056a0:	2308      	movs	r3, #8
 80056a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80056aa:	4619      	mov	r1, r3
 80056ac:	480a      	ldr	r0, [pc, #40]	; (80056d8 <HAL_UART_MspInit+0x21c>)
 80056ae:	f001 ffa9 	bl	8007604 <HAL_GPIO_Init>
}
 80056b2:	bf00      	nop
 80056b4:	37c0      	adds	r7, #192	; 0xc0
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40007800 	.word	0x40007800
 80056c0:	40023800 	.word	0x40023800
 80056c4:	40021400 	.word	0x40021400
 80056c8:	40011000 	.word	0x40011000
 80056cc:	40020400 	.word	0x40020400
 80056d0:	40020000 	.word	0x40020000
 80056d4:	40011400 	.word	0x40011400
 80056d8:	40020800 	.word	0x40020800

080056dc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	605a      	str	r2, [r3, #4]
 80056ea:	609a      	str	r2, [r3, #8]
 80056ec:	60da      	str	r2, [r3, #12]
 80056ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80056f0:	4b3a      	ldr	r3, [pc, #232]	; (80057dc <HAL_FMC_MspInit+0x100>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d16d      	bne.n	80057d4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80056f8:	4b38      	ldr	r3, [pc, #224]	; (80057dc <HAL_FMC_MspInit+0x100>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80056fe:	4b38      	ldr	r3, [pc, #224]	; (80057e0 <HAL_FMC_MspInit+0x104>)
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	4a37      	ldr	r2, [pc, #220]	; (80057e0 <HAL_FMC_MspInit+0x104>)
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	6393      	str	r3, [r2, #56]	; 0x38
 800570a:	4b35      	ldr	r3, [pc, #212]	; (80057e0 <HAL_FMC_MspInit+0x104>)
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8005716:	f64f 7383 	movw	r3, #65411	; 0xff83
 800571a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571c:	2302      	movs	r3, #2
 800571e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005724:	2303      	movs	r3, #3
 8005726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005728:	230c      	movs	r3, #12
 800572a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800572c:	1d3b      	adds	r3, r7, #4
 800572e:	4619      	mov	r1, r3
 8005730:	482c      	ldr	r0, [pc, #176]	; (80057e4 <HAL_FMC_MspInit+0x108>)
 8005732:	f001 ff67 	bl	8007604 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8005736:	f248 1333 	movw	r3, #33075	; 0x8133
 800573a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800573c:	2302      	movs	r3, #2
 800573e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005744:	2303      	movs	r3, #3
 8005746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005748:	230c      	movs	r3, #12
 800574a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800574c:	1d3b      	adds	r3, r7, #4
 800574e:	4619      	mov	r1, r3
 8005750:	4825      	ldr	r0, [pc, #148]	; (80057e8 <HAL_FMC_MspInit+0x10c>)
 8005752:	f001 ff57 	bl	8007604 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8005756:	f24c 7303 	movw	r3, #50947	; 0xc703
 800575a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800575c:	2302      	movs	r3, #2
 800575e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005764:	2303      	movs	r3, #3
 8005766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005768:	230c      	movs	r3, #12
 800576a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800576c:	1d3b      	adds	r3, r7, #4
 800576e:	4619      	mov	r1, r3
 8005770:	481e      	ldr	r0, [pc, #120]	; (80057ec <HAL_FMC_MspInit+0x110>)
 8005772:	f001 ff47 	bl	8007604 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8005776:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800577a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577c:	2302      	movs	r3, #2
 800577e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005784:	2303      	movs	r3, #3
 8005786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005788:	230c      	movs	r3, #12
 800578a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800578c:	1d3b      	adds	r3, r7, #4
 800578e:	4619      	mov	r1, r3
 8005790:	4817      	ldr	r0, [pc, #92]	; (80057f0 <HAL_FMC_MspInit+0x114>)
 8005792:	f001 ff37 	bl	8007604 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8005796:	2328      	movs	r3, #40	; 0x28
 8005798:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800579a:	2302      	movs	r3, #2
 800579c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057a2:	2303      	movs	r3, #3
 80057a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80057a6:	230c      	movs	r3, #12
 80057a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	4811      	ldr	r0, [pc, #68]	; (80057f4 <HAL_FMC_MspInit+0x118>)
 80057b0:	f001 ff28 	bl	8007604 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80057b4:	2308      	movs	r3, #8
 80057b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b8:	2302      	movs	r3, #2
 80057ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057c0:	2303      	movs	r3, #3
 80057c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80057c4:	230c      	movs	r3, #12
 80057c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80057c8:	1d3b      	adds	r3, r7, #4
 80057ca:	4619      	mov	r1, r3
 80057cc:	480a      	ldr	r0, [pc, #40]	; (80057f8 <HAL_FMC_MspInit+0x11c>)
 80057ce:	f001 ff19 	bl	8007604 <HAL_GPIO_Init>
 80057d2:	e000      	b.n	80057d6 <HAL_FMC_MspInit+0xfa>
    return;
 80057d4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000308 	.word	0x20000308
 80057e0:	40023800 	.word	0x40023800
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40021800 	.word	0x40021800
 80057ec:	40020c00 	.word	0x40020c00
 80057f0:	40021400 	.word	0x40021400
 80057f4:	40021c00 	.word	0x40021c00
 80057f8:	40020800 	.word	0x40020800

080057fc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005804:	f7ff ff6a 	bl	80056dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08c      	sub	sp, #48	; 0x30
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800581c:	2300      	movs	r3, #0
 800581e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005820:	2200      	movs	r2, #0
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	2036      	movs	r0, #54	; 0x36
 8005826:	f000 fcd1 	bl	80061cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800582a:	2036      	movs	r0, #54	; 0x36
 800582c:	f000 fcea 	bl	8006204 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005830:	4b1f      	ldr	r3, [pc, #124]	; (80058b0 <HAL_InitTick+0xa0>)
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	4a1e      	ldr	r2, [pc, #120]	; (80058b0 <HAL_InitTick+0xa0>)
 8005836:	f043 0310 	orr.w	r3, r3, #16
 800583a:	6413      	str	r3, [r2, #64]	; 0x40
 800583c:	4b1c      	ldr	r3, [pc, #112]	; (80058b0 <HAL_InitTick+0xa0>)
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005848:	f107 0210 	add.w	r2, r7, #16
 800584c:	f107 0314 	add.w	r3, r7, #20
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f004 f882 	bl	800995c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005858:	f004 f858 	bl	800990c <HAL_RCC_GetPCLK1Freq>
 800585c:	4603      	mov	r3, r0
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005864:	4a13      	ldr	r2, [pc, #76]	; (80058b4 <HAL_InitTick+0xa4>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	0c9b      	lsrs	r3, r3, #18
 800586c:	3b01      	subs	r3, #1
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005870:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <HAL_InitTick+0xa8>)
 8005872:	4a12      	ldr	r2, [pc, #72]	; (80058bc <HAL_InitTick+0xac>)
 8005874:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005876:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <HAL_InitTick+0xa8>)
 8005878:	f240 32e7 	movw	r2, #999	; 0x3e7
 800587c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800587e:	4a0e      	ldr	r2, [pc, #56]	; (80058b8 <HAL_InitTick+0xa8>)
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <HAL_InitTick+0xa8>)
 8005886:	2200      	movs	r2, #0
 8005888:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <HAL_InitTick+0xa8>)
 800588c:	2200      	movs	r2, #0
 800588e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005890:	4809      	ldr	r0, [pc, #36]	; (80058b8 <HAL_InitTick+0xa8>)
 8005892:	f005 f999 	bl	800abc8 <HAL_TIM_Base_Init>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800589c:	4806      	ldr	r0, [pc, #24]	; (80058b8 <HAL_InitTick+0xa8>)
 800589e:	f005 fa5b 	bl	800ad58 <HAL_TIM_Base_Start_IT>
 80058a2:	4603      	mov	r3, r0
 80058a4:	e000      	b.n	80058a8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3730      	adds	r7, #48	; 0x30
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40023800 	.word	0x40023800
 80058b4:	431bde83 	.word	0x431bde83
 80058b8:	20004888 	.word	0x20004888
 80058bc:	40001000 	.word	0x40001000

080058c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058c4:	e7fe      	b.n	80058c4 <NMI_Handler+0x4>

080058c6 <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)

{
 80058c6:	b480      	push	{r7}
 80058c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058ca:	e7fe      	b.n	80058ca <HardFault_Handler+0x4>

080058cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058d0:	e7fe      	b.n	80058d0 <MemManage_Handler+0x4>

080058d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058d2:	b480      	push	{r7}
 80058d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058d6:	e7fe      	b.n	80058d6 <BusFault_Handler+0x4>

080058d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058dc:	e7fe      	b.n	80058dc <UsageFault_Handler+0x4>

080058de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058de:	b480      	push	{r7}
 80058e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058e2:	bf00      	nop
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80058f0:	4802      	ldr	r0, [pc, #8]	; (80058fc <DMA1_Stream5_IRQHandler+0x10>)
 80058f2:	f001 f881 	bl	80069f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80058f6:	bf00      	nop
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	2000440c 	.word	0x2000440c

08005900 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8005904:	4b06      	ldr	r3, [pc, #24]	; (8005920 <TIM6_DAC_IRQHandler+0x20>)
 8005906:	791b      	ldrb	r3, [r3, #4]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800590e:	4804      	ldr	r0, [pc, #16]	; (8005920 <TIM6_DAC_IRQHandler+0x20>)
 8005910:	f000 fda0 	bl	8006454 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8005914:	4803      	ldr	r0, [pc, #12]	; (8005924 <TIM6_DAC_IRQHandler+0x24>)
 8005916:	f005 fa97 	bl	800ae48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800591a:	bf00      	nop
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20004584 	.word	0x20004584
 8005924:	20004888 	.word	0x20004888

08005928 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800592c:	4802      	ldr	r0, [pc, #8]	; (8005938 <LTDC_IRQHandler+0x10>)
 800592e:	f003 f85d 	bl	80089ec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005932:	bf00      	nop
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20004364 	.word	0x20004364

0800593c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005940:	4802      	ldr	r0, [pc, #8]	; (800594c <DMA2D_IRQHandler+0x10>)
 8005942:	f001 fc21 	bl	8007188 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005946:	bf00      	nop
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20004688 	.word	0x20004688

08005950 <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
	return -1;
 8005958:	f04f 33ff 	mov.w	r3, #4294967295
}
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005970:	4a14      	ldr	r2, [pc, #80]	; (80059c4 <_sbrk+0x5c>)
 8005972:	4b15      	ldr	r3, [pc, #84]	; (80059c8 <_sbrk+0x60>)
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800597c:	4b13      	ldr	r3, [pc, #76]	; (80059cc <_sbrk+0x64>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005984:	4b11      	ldr	r3, [pc, #68]	; (80059cc <_sbrk+0x64>)
 8005986:	4a12      	ldr	r2, [pc, #72]	; (80059d0 <_sbrk+0x68>)
 8005988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800598a:	4b10      	ldr	r3, [pc, #64]	; (80059cc <_sbrk+0x64>)
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4413      	add	r3, r2
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	429a      	cmp	r2, r3
 8005996:	d207      	bcs.n	80059a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005998:	f007 fc6a 	bl	800d270 <__errno>
 800599c:	4603      	mov	r3, r0
 800599e:	220c      	movs	r2, #12
 80059a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295
 80059a6:	e009      	b.n	80059bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80059a8:	4b08      	ldr	r3, [pc, #32]	; (80059cc <_sbrk+0x64>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80059ae:	4b07      	ldr	r3, [pc, #28]	; (80059cc <_sbrk+0x64>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4413      	add	r3, r2
 80059b6:	4a05      	ldr	r2, [pc, #20]	; (80059cc <_sbrk+0x64>)
 80059b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80059ba:	68fb      	ldr	r3, [r7, #12]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20050000 	.word	0x20050000
 80059c8:	00000400 	.word	0x00000400
 80059cc:	2000030c 	.word	0x2000030c
 80059d0:	200048e8 	.word	0x200048e8

080059d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059d8:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <SystemInit+0x20>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	4a05      	ldr	r2, [pc, #20]	; (80059f4 <SystemInit+0x20>)
 80059e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059e8:	bf00      	nop
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	e000ed00 	.word	0xe000ed00

080059f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80059f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80059fc:	480d      	ldr	r0, [pc, #52]	; (8005a34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80059fe:	490e      	ldr	r1, [pc, #56]	; (8005a38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005a00:	4a0e      	ldr	r2, [pc, #56]	; (8005a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a04:	e002      	b.n	8005a0c <LoopCopyDataInit>

08005a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a0a:	3304      	adds	r3, #4

08005a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a10:	d3f9      	bcc.n	8005a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a12:	4a0b      	ldr	r2, [pc, #44]	; (8005a40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005a14:	4c0b      	ldr	r4, [pc, #44]	; (8005a44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a18:	e001      	b.n	8005a1e <LoopFillZerobss>

08005a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a1c:	3204      	adds	r2, #4

08005a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a20:	d3fb      	bcc.n	8005a1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a22:	f7ff ffd7 	bl	80059d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a26:	f007 fc29 	bl	800d27c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a2a:	f7fb fccb 	bl	80013c4 <main>
  bx  lr    
 8005a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a30:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a38:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8005a3c:	0808f7e8 	.word	0x0808f7e8
  ldr r2, =_sbss
 8005a40:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8005a44:	200048e8 	.word	0x200048e8

08005a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a48:	e7fe      	b.n	8005a48 <ADC_IRQHandler>

08005a4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a4e:	2003      	movs	r0, #3
 8005a50:	f000 fbb1 	bl	80061b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a54:	200f      	movs	r0, #15
 8005a56:	f7ff fedb 	bl	8005810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a5a:	f7ff f8b5 	bl	8004bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a68:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <HAL_IncTick+0x20>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <HAL_IncTick+0x24>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4413      	add	r3, r2
 8005a74:	4a04      	ldr	r2, [pc, #16]	; (8005a88 <HAL_IncTick+0x24>)
 8005a76:	6013      	str	r3, [r2, #0]
}
 8005a78:	bf00      	nop
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20000048 	.word	0x20000048
 8005a88:	200048d4 	.word	0x200048d4

08005a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8005a90:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <HAL_GetTick+0x14>)
 8005a92:	681b      	ldr	r3, [r3, #0]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	200048d4 	.word	0x200048d4

08005aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005aac:	f7ff ffee 	bl	8005a8c <HAL_GetTick>
 8005ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d005      	beq.n	8005aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005abe:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <HAL_Delay+0x44>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005aca:	bf00      	nop
 8005acc:	f7ff ffde 	bl	8005a8c <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d8f7      	bhi.n	8005acc <HAL_Delay+0x28>
  {
  }
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000048 	.word	0x20000048

08005aec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e031      	b.n	8005b66 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff f884 	bl	8004c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d116      	bne.n	8005b58 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b2e:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <HAL_ADC_Init+0x84>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	f043 0202 	orr.w	r2, r3, #2
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f970 	bl	8005e20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f023 0303 	bic.w	r3, r3, #3
 8005b4e:	f043 0201 	orr.w	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	641a      	str	r2, [r3, #64]	; 0x40
 8005b56:	e001      	b.n	8005b5c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	ffffeefd 	.word	0xffffeefd

08005b74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_ADC_ConfigChannel+0x1c>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e136      	b.n	8005dfe <HAL_ADC_ConfigChannel+0x28a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b09      	cmp	r3, #9
 8005b9e:	d93a      	bls.n	8005c16 <HAL_ADC_ConfigChannel+0xa2>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba8:	d035      	beq.n	8005c16 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68d9      	ldr	r1, [r3, #12]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	4613      	mov	r3, r2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	4413      	add	r3, r2
 8005bbe:	3b1e      	subs	r3, #30
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	43da      	mvns	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	400a      	ands	r2, r1
 8005bce:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a8d      	ldr	r2, [pc, #564]	; (8005e0c <HAL_ADC_ConfigChannel+0x298>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d10a      	bne.n	8005bf0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68d9      	ldr	r1, [r3, #12]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	061a      	lsls	r2, r3, #24
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bee:	e035      	b.n	8005c5c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68d9      	ldr	r1, [r3, #12]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	4618      	mov	r0, r3
 8005c02:	4603      	mov	r3, r0
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	4403      	add	r3, r0
 8005c08:	3b1e      	subs	r3, #30
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c14:	e022      	b.n	8005c5c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6919      	ldr	r1, [r3, #16]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	4613      	mov	r3, r2
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	4413      	add	r3, r2
 8005c2a:	2207      	movs	r2, #7
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	43da      	mvns	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	400a      	ands	r2, r1
 8005c38:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6919      	ldr	r1, [r3, #16]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	4403      	add	r3, r0
 8005c52:	409a      	lsls	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b06      	cmp	r3, #6
 8005c62:	d824      	bhi.n	8005cae <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	3b05      	subs	r3, #5
 8005c76:	221f      	movs	r2, #31
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	43da      	mvns	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	400a      	ands	r2, r1
 8005c84:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	4618      	mov	r0, r3
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	3b05      	subs	r3, #5
 8005ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	635a      	str	r2, [r3, #52]	; 0x34
 8005cac:	e04c      	b.n	8005d48 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b0c      	cmp	r3, #12
 8005cb4:	d824      	bhi.n	8005d00 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	3b23      	subs	r3, #35	; 0x23
 8005cc8:	221f      	movs	r2, #31
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	43da      	mvns	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	400a      	ands	r2, r1
 8005cd6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	3b23      	subs	r3, #35	; 0x23
 8005cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8005cfe:	e023      	b.n	8005d48 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	3b41      	subs	r3, #65	; 0x41
 8005d12:	221f      	movs	r2, #31
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	43da      	mvns	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	400a      	ands	r2, r1
 8005d20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	4618      	mov	r0, r3
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	3b41      	subs	r3, #65	; 0x41
 8005d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a30      	ldr	r2, [pc, #192]	; (8005e10 <HAL_ADC_ConfigChannel+0x29c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d10a      	bne.n	8005d68 <HAL_ADC_ConfigChannel+0x1f4>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d5a:	d105      	bne.n	8005d68 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005d5c:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a2c      	ldr	r2, [pc, #176]	; (8005e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8005d62:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005d66:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a28      	ldr	r2, [pc, #160]	; (8005e10 <HAL_ADC_ConfigChannel+0x29c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d10f      	bne.n	8005d92 <HAL_ADC_ConfigChannel+0x21e>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b12      	cmp	r3, #18
 8005d78:	d10b      	bne.n	8005d92 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005d7a:	4b26      	ldr	r3, [pc, #152]	; (8005e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	4a25      	ldr	r2, [pc, #148]	; (8005e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8005d80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005d84:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005d86:	4b23      	ldr	r3, [pc, #140]	; (8005e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4a22      	ldr	r2, [pc, #136]	; (8005e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8005d8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d90:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <HAL_ADC_ConfigChannel+0x29c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d12b      	bne.n	8005df4 <HAL_ADC_ConfigChannel+0x280>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1a      	ldr	r2, [pc, #104]	; (8005e0c <HAL_ADC_ConfigChannel+0x298>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d003      	beq.n	8005dae <HAL_ADC_ConfigChannel+0x23a>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b11      	cmp	r3, #17
 8005dac:	d122      	bne.n	8005df4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005dae:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	4a18      	ldr	r2, [pc, #96]	; (8005e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8005db4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005db8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005dba:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8005dc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005dc4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a10      	ldr	r2, [pc, #64]	; (8005e0c <HAL_ADC_ConfigChannel+0x298>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d111      	bne.n	8005df4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005dd0:	4b11      	ldr	r3, [pc, #68]	; (8005e18 <HAL_ADC_ConfigChannel+0x2a4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a11      	ldr	r2, [pc, #68]	; (8005e1c <HAL_ADC_ConfigChannel+0x2a8>)
 8005dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dda:	0c9a      	lsrs	r2, r3, #18
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005de6:	e002      	b.n	8005dee <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1f9      	bne.n	8005de8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	10000012 	.word	0x10000012
 8005e10:	40012000 	.word	0x40012000
 8005e14:	40012300 	.word	0x40012300
 8005e18:	20000040 	.word	0x20000040
 8005e1c:	431bde83 	.word	0x431bde83

08005e20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005e28:	4b78      	ldr	r3, [pc, #480]	; (800600c <ADC_Init+0x1ec>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	4a77      	ldr	r2, [pc, #476]	; (800600c <ADC_Init+0x1ec>)
 8005e2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005e32:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005e34:	4b75      	ldr	r3, [pc, #468]	; (800600c <ADC_Init+0x1ec>)
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	4973      	ldr	r1, [pc, #460]	; (800600c <ADC_Init+0x1ec>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6859      	ldr	r1, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	021a      	lsls	r2, r3, #8
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6859      	ldr	r1, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6899      	ldr	r1, [r3, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eae:	4a58      	ldr	r2, [pc, #352]	; (8006010 <ADC_Init+0x1f0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d022      	beq.n	8005efa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ec2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6899      	ldr	r1, [r3, #8]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6899      	ldr	r1, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	609a      	str	r2, [r3, #8]
 8005ef8:	e00f      	b.n	8005f1a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0202 	bic.w	r2, r2, #2
 8005f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6899      	ldr	r1, [r3, #8]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	005a      	lsls	r2, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01b      	beq.n	8005f80 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005f66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6859      	ldr	r1, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	3b01      	subs	r3, #1
 8005f74:	035a      	lsls	r2, r3, #13
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	e007      	b.n	8005f90 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	051a      	lsls	r2, r3, #20
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6899      	ldr	r1, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fd2:	025a      	lsls	r2, r3, #9
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6899      	ldr	r1, [r3, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	029a      	lsls	r2, r3, #10
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	609a      	str	r2, [r3, #8]
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	40012300 	.word	0x40012300
 8006010:	0f000001 	.word	0x0f000001

08006014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006024:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <__NVIC_SetPriorityGrouping+0x40>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006030:	4013      	ands	r3, r2
 8006032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800603c:	4b06      	ldr	r3, [pc, #24]	; (8006058 <__NVIC_SetPriorityGrouping+0x44>)
 800603e:	4313      	orrs	r3, r2
 8006040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006042:	4a04      	ldr	r2, [pc, #16]	; (8006054 <__NVIC_SetPriorityGrouping+0x40>)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	60d3      	str	r3, [r2, #12]
}
 8006048:	bf00      	nop
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	e000ed00 	.word	0xe000ed00
 8006058:	05fa0000 	.word	0x05fa0000

0800605c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006060:	4b04      	ldr	r3, [pc, #16]	; (8006074 <__NVIC_GetPriorityGrouping+0x18>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	0a1b      	lsrs	r3, r3, #8
 8006066:	f003 0307 	and.w	r3, r3, #7
}
 800606a:	4618      	mov	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	e000ed00 	.word	0xe000ed00

08006078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006086:	2b00      	cmp	r3, #0
 8006088:	db0b      	blt.n	80060a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	f003 021f 	and.w	r2, r3, #31
 8006090:	4907      	ldr	r1, [pc, #28]	; (80060b0 <__NVIC_EnableIRQ+0x38>)
 8006092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	2001      	movs	r0, #1
 800609a:	fa00 f202 	lsl.w	r2, r0, r2
 800609e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	e000e100 	.word	0xe000e100

080060b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	db12      	blt.n	80060ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	f003 021f 	and.w	r2, r3, #31
 80060cc:	490a      	ldr	r1, [pc, #40]	; (80060f8 <__NVIC_DisableIRQ+0x44>)
 80060ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	2001      	movs	r0, #1
 80060d6:	fa00 f202 	lsl.w	r2, r0, r2
 80060da:	3320      	adds	r3, #32
 80060dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80060e0:	f3bf 8f4f 	dsb	sy
}
 80060e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060e6:	f3bf 8f6f 	isb	sy
}
 80060ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	e000e100 	.word	0xe000e100

080060fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	6039      	str	r1, [r7, #0]
 8006106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610c:	2b00      	cmp	r3, #0
 800610e:	db0a      	blt.n	8006126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	b2da      	uxtb	r2, r3
 8006114:	490c      	ldr	r1, [pc, #48]	; (8006148 <__NVIC_SetPriority+0x4c>)
 8006116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611a:	0112      	lsls	r2, r2, #4
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	440b      	add	r3, r1
 8006120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006124:	e00a      	b.n	800613c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	b2da      	uxtb	r2, r3
 800612a:	4908      	ldr	r1, [pc, #32]	; (800614c <__NVIC_SetPriority+0x50>)
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	3b04      	subs	r3, #4
 8006134:	0112      	lsls	r2, r2, #4
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	440b      	add	r3, r1
 800613a:	761a      	strb	r2, [r3, #24]
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	e000e100 	.word	0xe000e100
 800614c:	e000ed00 	.word	0xe000ed00

08006150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006150:	b480      	push	{r7}
 8006152:	b089      	sub	sp, #36	; 0x24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f1c3 0307 	rsb	r3, r3, #7
 800616a:	2b04      	cmp	r3, #4
 800616c:	bf28      	it	cs
 800616e:	2304      	movcs	r3, #4
 8006170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	3304      	adds	r3, #4
 8006176:	2b06      	cmp	r3, #6
 8006178:	d902      	bls.n	8006180 <NVIC_EncodePriority+0x30>
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	3b03      	subs	r3, #3
 800617e:	e000      	b.n	8006182 <NVIC_EncodePriority+0x32>
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006184:	f04f 32ff 	mov.w	r2, #4294967295
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	43da      	mvns	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	401a      	ands	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006198:	f04f 31ff 	mov.w	r1, #4294967295
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	fa01 f303 	lsl.w	r3, r1, r3
 80061a2:	43d9      	mvns	r1, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061a8:	4313      	orrs	r3, r2
         );
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3724      	adds	r7, #36	; 0x24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff ff28 	bl	8006014 <__NVIC_SetPriorityGrouping>
}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061de:	f7ff ff3d 	bl	800605c <__NVIC_GetPriorityGrouping>
 80061e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	6978      	ldr	r0, [r7, #20]
 80061ea:	f7ff ffb1 	bl	8006150 <NVIC_EncodePriority>
 80061ee:	4602      	mov	r2, r0
 80061f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff ff80 	bl	80060fc <__NVIC_SetPriority>
}
 80061fc:	bf00      	nop
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	4603      	mov	r3, r0
 800620c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800620e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff ff30 	bl	8006078 <__NVIC_EnableIRQ>
}
 8006218:	bf00      	nop
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800622a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff ff40 	bl	80060b4 <__NVIC_DisableIRQ>
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e014      	b.n	8006278 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	791b      	ldrb	r3, [r3, #4]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d105      	bne.n	8006264 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fe fd48 	bl	8004cf4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e00f      	b.n	80062b2 <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7fe fda7 	bl	8004dec <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	795b      	ldrb	r3, [r3, #5]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_DAC_Start_DMA+0x1e>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e0ab      	b.n	8006432 <HAL_DAC_Start_DMA+0x176>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2202      	movs	r2, #2
 80062e4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d12f      	bne.n	800634c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	4a52      	ldr	r2, [pc, #328]	; (800643c <HAL_DAC_Start_DMA+0x180>)
 80062f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	4a51      	ldr	r2, [pc, #324]	; (8006440 <HAL_DAC_Start_DMA+0x184>)
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	4a50      	ldr	r2, [pc, #320]	; (8006444 <HAL_DAC_Start_DMA+0x188>)
 8006302:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006312:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	2b08      	cmp	r3, #8
 8006318:	d013      	beq.n	8006342 <HAL_DAC_Start_DMA+0x86>
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	2b08      	cmp	r3, #8
 800631e:	d845      	bhi.n	80063ac <HAL_DAC_Start_DMA+0xf0>
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_DAC_Start_DMA+0x72>
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	2b04      	cmp	r3, #4
 800632a:	d005      	beq.n	8006338 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800632c:	e03e      	b.n	80063ac <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	613b      	str	r3, [r7, #16]
        break;
 8006336:	e03c      	b.n	80063b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	330c      	adds	r3, #12
 800633e:	613b      	str	r3, [r7, #16]
        break;
 8006340:	e037      	b.n	80063b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3310      	adds	r3, #16
 8006348:	613b      	str	r3, [r7, #16]
        break;
 800634a:	e032      	b.n	80063b2 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	4a3d      	ldr	r2, [pc, #244]	; (8006448 <HAL_DAC_Start_DMA+0x18c>)
 8006352:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	4a3c      	ldr	r2, [pc, #240]	; (800644c <HAL_DAC_Start_DMA+0x190>)
 800635a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	4a3b      	ldr	r2, [pc, #236]	; (8006450 <HAL_DAC_Start_DMA+0x194>)
 8006362:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006372:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	2b08      	cmp	r3, #8
 8006378:	d013      	beq.n	80063a2 <HAL_DAC_Start_DMA+0xe6>
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	2b08      	cmp	r3, #8
 800637e:	d817      	bhi.n	80063b0 <HAL_DAC_Start_DMA+0xf4>
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_DAC_Start_DMA+0xd2>
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	2b04      	cmp	r3, #4
 800638a:	d005      	beq.n	8006398 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800638c:	e010      	b.n	80063b0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3314      	adds	r3, #20
 8006394:	613b      	str	r3, [r7, #16]
        break;
 8006396:	e00c      	b.n	80063b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3318      	adds	r3, #24
 800639e:	613b      	str	r3, [r7, #16]
        break;
 80063a0:	e007      	b.n	80063b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	331c      	adds	r3, #28
 80063a8:	613b      	str	r3, [r7, #16]
        break;
 80063aa:	e002      	b.n	80063b2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80063ac:	bf00      	nop
 80063ae:	e000      	b.n	80063b2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80063b0:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d111      	bne.n	80063dc <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6898      	ldr	r0, [r3, #8]
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	f000 fab1 	bl	8006938 <HAL_DMA_Start_IT>
 80063d6:	4603      	mov	r3, r0
 80063d8:	75fb      	strb	r3, [r7, #23]
 80063da:	e010      	b.n	80063fe <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80063ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	68d8      	ldr	r0, [r3, #12]
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	f000 fa9f 	bl	8006938 <HAL_DMA_Start_IT>
 80063fa:	4603      	mov	r3, r0
 80063fc:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006404:	7dfb      	ldrb	r3, [r7, #23]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10c      	bne.n	8006424 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6819      	ldr	r1, [r3, #0]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2201      	movs	r2, #1
 8006418:	409a      	lsls	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	e005      	b.n	8006430 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f043 0204 	orr.w	r2, r3, #4
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006430:	7dfb      	ldrb	r3, [r7, #23]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	080065f7 	.word	0x080065f7
 8006440:	08006619 	.word	0x08006619
 8006444:	08006635 	.word	0x08006635
 8006448:	080066b3 	.word	0x080066b3
 800644c:	080066d5 	.word	0x080066d5
 8006450:	080066f1 	.word	0x080066f1

08006454 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646a:	d120      	bne.n	80064ae <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800647a:	d118      	bne.n	80064ae <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2204      	movs	r2, #4
 8006480:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f043 0201 	orr.w	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006496:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064a6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f84b 	bl	8006544 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064bc:	d120      	bne.n	8006500 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064cc:	d118      	bne.n	8006500 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2204      	movs	r2, #4
 80064d2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f043 0202 	orr.w	r2, r3, #2
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80064e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80064f8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8cf 	bl	800669e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	795b      	ldrb	r3, [r3, #5]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <HAL_DAC_ConfigChannel+0x18>
 800656c:	2302      	movs	r3, #2
 800656e:	e03c      	b.n	80065ea <HAL_DAC_ConfigChannel+0x92>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2202      	movs	r2, #2
 800657a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	43db      	mvns	r3, r3
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4013      	ands	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6819      	ldr	r1, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	22c0      	movs	r2, #192	; 0xc0
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	43da      	mvns	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	400a      	ands	r2, r1
 80065da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f7ff ff7f 	bl	8006508 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	711a      	strb	r2, [r3, #4]
}
 8006610:	bf00      	nop
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f7ff ff78 	bl	800651c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800662c:	bf00      	nop
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f043 0204 	orr.w	r2, r3, #4
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f7ff ff6e 	bl	8006530 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	711a      	strb	r2, [r3, #4]
}
 800665a:	bf00      	nop
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff ffce 	bl	8006662 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	711a      	strb	r2, [r3, #4]
}
 80066cc:	bf00      	nop
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7ff ffc7 	bl	8006676 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80066e8:	bf00      	nop
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f043 0204 	orr.w	r2, r3, #4
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff ffbd 	bl	800668a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	711a      	strb	r2, [r3, #4]
}
 8006716:	bf00      	nop
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
	...

08006720 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800672c:	f7ff f9ae 	bl	8005a8c <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e099      	b.n	8006870 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0201 	bic.w	r2, r2, #1
 800675a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800675c:	e00f      	b.n	800677e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800675e:	f7ff f995 	bl	8005a8c <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b05      	cmp	r3, #5
 800676a:	d908      	bls.n	800677e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2203      	movs	r2, #3
 8006776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e078      	b.n	8006870 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1e8      	bne.n	800675e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4b38      	ldr	r3, [pc, #224]	; (8006878 <HAL_DMA_Init+0x158>)
 8006798:	4013      	ands	r3, r2
 800679a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d107      	bne.n	80067e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	4313      	orrs	r3, r2
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f023 0307 	bic.w	r3, r3, #7
 80067fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	2b04      	cmp	r3, #4
 8006810:	d117      	bne.n	8006842 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4313      	orrs	r3, r2
 800681a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00e      	beq.n	8006842 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fad5 	bl	8006dd4 <DMA_CheckFifoParam>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d008      	beq.n	8006842 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2240      	movs	r2, #64	; 0x40
 8006834:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800683e:	2301      	movs	r3, #1
 8006840:	e016      	b.n	8006870 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fa8c 	bl	8006d68 <DMA_CalcBaseAndBitshift>
 8006850:	4603      	mov	r3, r0
 8006852:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006858:	223f      	movs	r2, #63	; 0x3f
 800685a:	409a      	lsls	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	f010803f 	.word	0xf010803f

0800687c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e050      	b.n	8006930 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d101      	bne.n	800689e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800689a:	2302      	movs	r3, #2
 800689c:	e048      	b.n	8006930 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2200      	movs	r2, #0
 80068bc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2200      	movs	r2, #0
 80068c4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2200      	movs	r2, #0
 80068cc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2200      	movs	r2, #0
 80068d4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2221      	movs	r2, #33	; 0x21
 80068dc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fa42 	bl	8006d68 <DMA_CalcBaseAndBitshift>
 80068e4:	4603      	mov	r3, r0
 80068e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ec:	223f      	movs	r2, #63	; 0x3f
 80068ee:	409a      	lsls	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_DMA_Start_IT+0x26>
 800695a:	2302      	movs	r3, #2
 800695c:	e048      	b.n	80069f0 <HAL_DMA_Start_IT+0xb8>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b01      	cmp	r3, #1
 8006970:	d137      	bne.n	80069e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2202      	movs	r2, #2
 8006976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 f9c0 	bl	8006d0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006990:	223f      	movs	r2, #63	; 0x3f
 8006992:	409a      	lsls	r2, r3
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0216 	orr.w	r2, r2, #22
 80069a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069b6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d007      	beq.n	80069d0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0208 	orr.w	r2, r2, #8
 80069ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	e005      	b.n	80069ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80069ea:	2302      	movs	r3, #2
 80069ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006a04:	4b92      	ldr	r3, [pc, #584]	; (8006c50 <HAL_DMA_IRQHandler+0x258>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a92      	ldr	r2, [pc, #584]	; (8006c54 <HAL_DMA_IRQHandler+0x25c>)
 8006a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0e:	0a9b      	lsrs	r3, r3, #10
 8006a10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a22:	2208      	movs	r2, #8
 8006a24:	409a      	lsls	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01a      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d013      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0204 	bic.w	r2, r2, #4
 8006a4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a50:	2208      	movs	r2, #8
 8006a52:	409a      	lsls	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5c:	f043 0201 	orr.w	r2, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a68:	2201      	movs	r2, #1
 8006a6a:	409a      	lsls	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d012      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a86:	2201      	movs	r2, #1
 8006a88:	409a      	lsls	r2, r3
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a92:	f043 0202 	orr.w	r2, r3, #2
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9e:	2204      	movs	r2, #4
 8006aa0:	409a      	lsls	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d012      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00b      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006abc:	2204      	movs	r2, #4
 8006abe:	409a      	lsls	r2, r3
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac8:	f043 0204 	orr.w	r2, r3, #4
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad4:	2210      	movs	r2, #16
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d043      	beq.n	8006b68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0308 	and.w	r3, r3, #8
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d03c      	beq.n	8006b68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af2:	2210      	movs	r2, #16
 8006af4:	409a      	lsls	r2, r3
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d018      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d108      	bne.n	8006b28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d024      	beq.n	8006b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	4798      	blx	r3
 8006b26:	e01f      	b.n	8006b68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01b      	beq.n	8006b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	4798      	blx	r3
 8006b38:	e016      	b.n	8006b68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d107      	bne.n	8006b58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0208 	bic.w	r2, r2, #8
 8006b56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	409a      	lsls	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4013      	ands	r3, r2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 808e 	beq.w	8006c96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0310 	and.w	r3, r3, #16
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 8086 	beq.w	8006c96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b8e:	2220      	movs	r2, #32
 8006b90:	409a      	lsls	r2, r3
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b05      	cmp	r3, #5
 8006ba0:	d136      	bne.n	8006c10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0216 	bic.w	r2, r2, #22
 8006bb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695a      	ldr	r2, [r3, #20]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <HAL_DMA_IRQHandler+0x1da>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d007      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0208 	bic.w	r2, r2, #8
 8006be0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be6:	223f      	movs	r2, #63	; 0x3f
 8006be8:	409a      	lsls	r2, r3
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d07d      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	4798      	blx	r3
        }
        return;
 8006c0e:	e078      	b.n	8006d02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01c      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d108      	bne.n	8006c3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d030      	beq.n	8006c96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
 8006c3c:	e02b      	b.n	8006c96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d027      	beq.n	8006c96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	4798      	blx	r3
 8006c4e:	e022      	b.n	8006c96 <HAL_DMA_IRQHandler+0x29e>
 8006c50:	20000040 	.word	0x20000040
 8006c54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10f      	bne.n	8006c86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0210 	bic.w	r2, r2, #16
 8006c74:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d032      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d022      	beq.n	8006cf0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2205      	movs	r2, #5
 8006cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0201 	bic.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	60bb      	str	r3, [r7, #8]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d307      	bcc.n	8006cde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1f2      	bne.n	8006cc2 <HAL_DMA_IRQHandler+0x2ca>
 8006cdc:	e000      	b.n	8006ce0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006cde:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	4798      	blx	r3
 8006d00:	e000      	b.n	8006d04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006d02:	bf00      	nop
    }
  }
}
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop

08006d0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d108      	bne.n	8006d4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d4a:	e007      	b.n	8006d5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	60da      	str	r2, [r3, #12]
}
 8006d5c:	bf00      	nop
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	3b10      	subs	r3, #16
 8006d78:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <DMA_CalcBaseAndBitshift+0x60>)
 8006d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7e:	091b      	lsrs	r3, r3, #4
 8006d80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d82:	4a12      	ldr	r2, [pc, #72]	; (8006dcc <DMA_CalcBaseAndBitshift+0x64>)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4413      	add	r3, r2
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d908      	bls.n	8006da8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8006d9e:	4013      	ands	r3, r2
 8006da0:	1d1a      	adds	r2, r3, #4
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	659a      	str	r2, [r3, #88]	; 0x58
 8006da6:	e006      	b.n	8006db6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	4b08      	ldr	r3, [pc, #32]	; (8006dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	aaaaaaab 	.word	0xaaaaaaab
 8006dcc:	0808f6f8 	.word	0x0808f6f8
 8006dd0:	fffffc00 	.word	0xfffffc00

08006dd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d11f      	bne.n	8006e2e <DMA_CheckFifoParam+0x5a>
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d856      	bhi.n	8006ea2 <DMA_CheckFifoParam+0xce>
 8006df4:	a201      	add	r2, pc, #4	; (adr r2, 8006dfc <DMA_CheckFifoParam+0x28>)
 8006df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfa:	bf00      	nop
 8006dfc:	08006e0d 	.word	0x08006e0d
 8006e00:	08006e1f 	.word	0x08006e1f
 8006e04:	08006e0d 	.word	0x08006e0d
 8006e08:	08006ea3 	.word	0x08006ea3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d046      	beq.n	8006ea6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e1c:	e043      	b.n	8006ea6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e26:	d140      	bne.n	8006eaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e2c:	e03d      	b.n	8006eaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e36:	d121      	bne.n	8006e7c <DMA_CheckFifoParam+0xa8>
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d837      	bhi.n	8006eae <DMA_CheckFifoParam+0xda>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <DMA_CheckFifoParam+0x70>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e5b 	.word	0x08006e5b
 8006e4c:	08006e55 	.word	0x08006e55
 8006e50:	08006e6d 	.word	0x08006e6d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	73fb      	strb	r3, [r7, #15]
      break;
 8006e58:	e030      	b.n	8006ebc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d025      	beq.n	8006eb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e6a:	e022      	b.n	8006eb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e74:	d11f      	bne.n	8006eb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e7a:	e01c      	b.n	8006eb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d903      	bls.n	8006e8a <DMA_CheckFifoParam+0xb6>
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d003      	beq.n	8006e90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e88:	e018      	b.n	8006ebc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e8e:	e015      	b.n	8006ebc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00e      	beq.n	8006eba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea0:	e00b      	b.n	8006eba <DMA_CheckFifoParam+0xe6>
      break;
 8006ea2:	bf00      	nop
 8006ea4:	e00a      	b.n	8006ebc <DMA_CheckFifoParam+0xe8>
      break;
 8006ea6:	bf00      	nop
 8006ea8:	e008      	b.n	8006ebc <DMA_CheckFifoParam+0xe8>
      break;
 8006eaa:	bf00      	nop
 8006eac:	e006      	b.n	8006ebc <DMA_CheckFifoParam+0xe8>
      break;
 8006eae:	bf00      	nop
 8006eb0:	e004      	b.n	8006ebc <DMA_CheckFifoParam+0xe8>
      break;
 8006eb2:	bf00      	nop
 8006eb4:	e002      	b.n	8006ebc <DMA_CheckFifoParam+0xe8>
      break;   
 8006eb6:	bf00      	nop
 8006eb8:	e000      	b.n	8006ebc <DMA_CheckFifoParam+0xe8>
      break;
 8006eba:	bf00      	nop
    }
  } 
  
  return status; 
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop

08006ecc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e039      	b.n	8006f52 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fd ffa0 	bl	8004e38 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1c:	f023 0107 	bic.w	r1, r3, #7
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f32:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <HAL_DMA2D_Init+0x90>)
 8006f34:	4013      	ands	r3, r2
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	68d1      	ldr	r1, [r2, #12]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	430b      	orrs	r3, r1
 8006f40:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	ffffc000 	.word	0xffffc000

08006f60 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_DMA2D_Start+0x1c>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e018      	b.n	8006fae <HAL_DMA2D_Start+0x4e>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	68b9      	ldr	r1, [r7, #8]
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 fa98 	bl	80074cc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 0201 	orr.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d056      	beq.n	8007080 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fd2:	f7fe fd5b 	bl	8005a8c <HAL_GetTick>
 8006fd6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006fd8:	e04b      	b.n	8007072 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d023      	beq.n	8007034 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d005      	beq.n	8007002 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffa:	f043 0202 	orr.w	r2, r3, #2
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007010:	f043 0201 	orr.w	r2, r3, #1
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2221      	movs	r2, #33	; 0x21
 800701e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2204      	movs	r2, #4
 8007024:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e0a5      	b.n	8007180 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703a:	d01a      	beq.n	8007072 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800703c:	f7fe fd26 	bl	8005a8c <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d302      	bcc.n	8007052 <HAL_DMA2D_PollForTransfer+0x9c>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10f      	bne.n	8007072 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007056:	f043 0220 	orr.w	r2, r3, #32
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2203      	movs	r2, #3
 8007062:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e086      	b.n	8007180 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0ac      	beq.n	8006fda <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4313      	orrs	r3, r2
 800709a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d061      	beq.n	8007166 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80070a2:	f7fe fcf3 	bl	8005a8c <HAL_GetTick>
 80070a6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80070a8:	e056      	b.n	8007158 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d02e      	beq.n	800711a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f003 0308 	and.w	r3, r3, #8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d005      	beq.n	80070d2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ca:	f043 0204 	orr.w	r2, r3, #4
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f003 0320 	and.w	r3, r3, #32
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e0:	f043 0202 	orr.w	r2, r3, #2
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d005      	beq.n	80070fe <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f6:	f043 0201 	orr.w	r2, r3, #1
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2229      	movs	r2, #41	; 0x29
 8007104:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2204      	movs	r2, #4
 800710a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e032      	b.n	8007180 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007120:	d01a      	beq.n	8007158 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007122:	f7fe fcb3 	bl	8005a8c <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	429a      	cmp	r2, r3
 8007130:	d302      	bcc.n	8007138 <HAL_DMA2D_PollForTransfer+0x182>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10f      	bne.n	8007158 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713c:	f043 0220 	orr.w	r2, r3, #32
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2203      	movs	r2, #3
 8007148:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e013      	b.n	8007180 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f003 0310 	and.w	r3, r3, #16
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0a1      	beq.n	80070aa <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2212      	movs	r2, #18
 800716c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d026      	beq.n	80071f8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d021      	beq.n	80071f8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071c2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c8:	f043 0201 	orr.w	r2, r3, #1
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2201      	movs	r2, #1
 80071d6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2204      	movs	r2, #4
 80071dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d026      	beq.n	8007250 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d021      	beq.n	8007250 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800721a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2220      	movs	r2, #32
 8007222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007228:	f043 0202 	orr.w	r2, r3, #2
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2204      	movs	r2, #4
 8007234:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d026      	beq.n	80072a8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007260:	2b00      	cmp	r3, #0
 8007262:	d021      	beq.n	80072a8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007272:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2208      	movs	r2, #8
 800727a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007280:	f043 0204 	orr.w	r2, r3, #4
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2204      	movs	r2, #4
 800728c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d013      	beq.n	80072da <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00e      	beq.n	80072da <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2204      	movs	r2, #4
 80072d2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f853 	bl	8007380 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d024      	beq.n	800732e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d01f      	beq.n	800732e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80072fc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2202      	movs	r2, #2
 8007304:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f003 0310 	and.w	r3, r3, #16
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01f      	beq.n	8007378 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d01a      	beq.n	8007378 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007350:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2210      	movs	r2, #16
 8007358:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f80e 	bl	8007394 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007378:	bf00      	nop
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d101      	bne.n	80073c8 <HAL_DMA2D_ConfigLayer+0x20>
 80073c4:	2302      	movs	r3, #2
 80073c6:	e079      	b.n	80074bc <HAL_DMA2D_ConfigLayer+0x114>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	3318      	adds	r3, #24
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	4413      	add	r3, r2
 80073e2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	041b      	lsls	r3, r3, #16
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80073f2:	4b35      	ldr	r3, [pc, #212]	; (80074c8 <HAL_DMA2D_ConfigLayer+0x120>)
 80073f4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b0a      	cmp	r3, #10
 80073fc:	d003      	beq.n	8007406 <HAL_DMA2D_ConfigLayer+0x5e>
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b09      	cmp	r3, #9
 8007404:	d107      	bne.n	8007416 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	4313      	orrs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	e005      	b.n	8007422 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	061b      	lsls	r3, r3, #24
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d120      	bne.n	800746a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	43db      	mvns	r3, r3
 8007432:	ea02 0103 	and.w	r1, r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	430a      	orrs	r2, r1
 800743e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	6812      	ldr	r2, [r2, #0]
 8007448:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b0a      	cmp	r3, #10
 8007450:	d003      	beq.n	800745a <HAL_DMA2D_ConfigLayer+0xb2>
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2b09      	cmp	r3, #9
 8007458:	d127      	bne.n	80074aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007466:	629a      	str	r2, [r3, #40]	; 0x28
 8007468:	e01f      	b.n	80074aa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69da      	ldr	r2, [r3, #28]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	43db      	mvns	r3, r3
 8007474:	ea02 0103 	and.w	r1, r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	430a      	orrs	r2, r1
 8007480:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	6812      	ldr	r2, [r2, #0]
 800748a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2b0a      	cmp	r3, #10
 8007492:	d003      	beq.n	800749c <HAL_DMA2D_ConfigLayer+0xf4>
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	2b09      	cmp	r3, #9
 800749a:	d106      	bne.n	80074aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80074a8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	ff03000f 	.word	0xff03000f

080074cc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b08b      	sub	sp, #44	; 0x2c
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	041a      	lsls	r2, r3, #16
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	431a      	orrs	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007504:	d174      	bne.n	80075f0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800750c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007514:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800751c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d108      	bne.n	800753e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	431a      	orrs	r2, r3
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	4313      	orrs	r3, r2
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4313      	orrs	r3, r2
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
 800753c:	e053      	b.n	80075e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d106      	bne.n	8007554 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	4313      	orrs	r3, r2
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	4313      	orrs	r3, r2
 8007550:	627b      	str	r3, [r7, #36]	; 0x24
 8007552:	e048      	b.n	80075e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b02      	cmp	r3, #2
 800755a:	d111      	bne.n	8007580 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	0cdb      	lsrs	r3, r3, #19
 8007560:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	0a9b      	lsrs	r3, r3, #10
 8007566:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	08db      	lsrs	r3, r3, #3
 800756c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	02db      	lsls	r3, r3, #11
 8007576:	4313      	orrs	r3, r2
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	4313      	orrs	r3, r2
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
 800757e:	e032      	b.n	80075e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	2b03      	cmp	r3, #3
 8007586:	d117      	bne.n	80075b8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	0fdb      	lsrs	r3, r3, #31
 800758c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	0cdb      	lsrs	r3, r3, #19
 8007592:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	0adb      	lsrs	r3, r3, #11
 8007598:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	08db      	lsrs	r3, r3, #3
 800759e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	029b      	lsls	r3, r3, #10
 80075a8:	431a      	orrs	r2, r3
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	03db      	lsls	r3, r3, #15
 80075ae:	4313      	orrs	r3, r2
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
 80075b6:	e016      	b.n	80075e6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	0f1b      	lsrs	r3, r3, #28
 80075bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	0d1b      	lsrs	r3, r3, #20
 80075c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	0b1b      	lsrs	r3, r3, #12
 80075c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	091b      	lsrs	r3, r3, #4
 80075ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	011a      	lsls	r2, r3, #4
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	431a      	orrs	r2, r3
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	031b      	lsls	r3, r3, #12
 80075de:	4313      	orrs	r3, r2
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ec:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80075ee:	e003      	b.n	80075f8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	60da      	str	r2, [r3, #12]
}
 80075f8:	bf00      	nop
 80075fa:	372c      	adds	r7, #44	; 0x2c
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007604:	b480      	push	{r7}
 8007606:	b089      	sub	sp, #36	; 0x24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800760e:	2300      	movs	r3, #0
 8007610:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007612:	2300      	movs	r3, #0
 8007614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800761a:	2300      	movs	r3, #0
 800761c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800761e:	2300      	movs	r3, #0
 8007620:	61fb      	str	r3, [r7, #28]
 8007622:	e175      	b.n	8007910 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007624:	2201      	movs	r2, #1
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	fa02 f303 	lsl.w	r3, r2, r3
 800762c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	4013      	ands	r3, r2
 8007636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	429a      	cmp	r2, r3
 800763e:	f040 8164 	bne.w	800790a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	2b01      	cmp	r3, #1
 800764c:	d005      	beq.n	800765a <HAL_GPIO_Init+0x56>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	2b02      	cmp	r3, #2
 8007658:	d130      	bne.n	80076bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	2203      	movs	r2, #3
 8007666:	fa02 f303 	lsl.w	r3, r2, r3
 800766a:	43db      	mvns	r3, r3
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	4013      	ands	r3, r2
 8007670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	fa02 f303 	lsl.w	r3, r2, r3
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	4313      	orrs	r3, r2
 8007682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007690:	2201      	movs	r2, #1
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	fa02 f303 	lsl.w	r3, r2, r3
 8007698:	43db      	mvns	r3, r3
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	4013      	ands	r3, r2
 800769e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	091b      	lsrs	r3, r3, #4
 80076a6:	f003 0201 	and.w	r2, r3, #1
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	fa02 f303 	lsl.w	r3, r2, r3
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	69ba      	ldr	r2, [r7, #24]
 80076ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f003 0303 	and.w	r3, r3, #3
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d017      	beq.n	80076f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	2203      	movs	r2, #3
 80076d4:	fa02 f303 	lsl.w	r3, r2, r3
 80076d8:	43db      	mvns	r3, r3
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	4013      	ands	r3, r2
 80076de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f003 0303 	and.w	r3, r3, #3
 8007700:	2b02      	cmp	r3, #2
 8007702:	d123      	bne.n	800774c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	08da      	lsrs	r2, r3, #3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3208      	adds	r2, #8
 800770c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	220f      	movs	r2, #15
 800771c:	fa02 f303 	lsl.w	r3, r2, r3
 8007720:	43db      	mvns	r3, r3
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	4013      	ands	r3, r2
 8007726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	691a      	ldr	r2, [r3, #16]
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	fa02 f303 	lsl.w	r3, r2, r3
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	4313      	orrs	r3, r2
 800773c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	08da      	lsrs	r2, r3, #3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3208      	adds	r2, #8
 8007746:	69b9      	ldr	r1, [r7, #24]
 8007748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	2203      	movs	r2, #3
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	43db      	mvns	r3, r3
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	4013      	ands	r3, r2
 8007762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f003 0203 	and.w	r2, r3, #3
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	fa02 f303 	lsl.w	r3, r2, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	4313      	orrs	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 80be 	beq.w	800790a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800778e:	4b66      	ldr	r3, [pc, #408]	; (8007928 <HAL_GPIO_Init+0x324>)
 8007790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007792:	4a65      	ldr	r2, [pc, #404]	; (8007928 <HAL_GPIO_Init+0x324>)
 8007794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007798:	6453      	str	r3, [r2, #68]	; 0x44
 800779a:	4b63      	ldr	r3, [pc, #396]	; (8007928 <HAL_GPIO_Init+0x324>)
 800779c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80077a6:	4a61      	ldr	r2, [pc, #388]	; (800792c <HAL_GPIO_Init+0x328>)
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	089b      	lsrs	r3, r3, #2
 80077ac:	3302      	adds	r3, #2
 80077ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	220f      	movs	r2, #15
 80077be:	fa02 f303 	lsl.w	r3, r2, r3
 80077c2:	43db      	mvns	r3, r3
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	4013      	ands	r3, r2
 80077c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a58      	ldr	r2, [pc, #352]	; (8007930 <HAL_GPIO_Init+0x32c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d037      	beq.n	8007842 <HAL_GPIO_Init+0x23e>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a57      	ldr	r2, [pc, #348]	; (8007934 <HAL_GPIO_Init+0x330>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d031      	beq.n	800783e <HAL_GPIO_Init+0x23a>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a56      	ldr	r2, [pc, #344]	; (8007938 <HAL_GPIO_Init+0x334>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d02b      	beq.n	800783a <HAL_GPIO_Init+0x236>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a55      	ldr	r2, [pc, #340]	; (800793c <HAL_GPIO_Init+0x338>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d025      	beq.n	8007836 <HAL_GPIO_Init+0x232>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a54      	ldr	r2, [pc, #336]	; (8007940 <HAL_GPIO_Init+0x33c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d01f      	beq.n	8007832 <HAL_GPIO_Init+0x22e>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a53      	ldr	r2, [pc, #332]	; (8007944 <HAL_GPIO_Init+0x340>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d019      	beq.n	800782e <HAL_GPIO_Init+0x22a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a52      	ldr	r2, [pc, #328]	; (8007948 <HAL_GPIO_Init+0x344>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <HAL_GPIO_Init+0x226>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a51      	ldr	r2, [pc, #324]	; (800794c <HAL_GPIO_Init+0x348>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00d      	beq.n	8007826 <HAL_GPIO_Init+0x222>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a50      	ldr	r2, [pc, #320]	; (8007950 <HAL_GPIO_Init+0x34c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d007      	beq.n	8007822 <HAL_GPIO_Init+0x21e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a4f      	ldr	r2, [pc, #316]	; (8007954 <HAL_GPIO_Init+0x350>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d101      	bne.n	800781e <HAL_GPIO_Init+0x21a>
 800781a:	2309      	movs	r3, #9
 800781c:	e012      	b.n	8007844 <HAL_GPIO_Init+0x240>
 800781e:	230a      	movs	r3, #10
 8007820:	e010      	b.n	8007844 <HAL_GPIO_Init+0x240>
 8007822:	2308      	movs	r3, #8
 8007824:	e00e      	b.n	8007844 <HAL_GPIO_Init+0x240>
 8007826:	2307      	movs	r3, #7
 8007828:	e00c      	b.n	8007844 <HAL_GPIO_Init+0x240>
 800782a:	2306      	movs	r3, #6
 800782c:	e00a      	b.n	8007844 <HAL_GPIO_Init+0x240>
 800782e:	2305      	movs	r3, #5
 8007830:	e008      	b.n	8007844 <HAL_GPIO_Init+0x240>
 8007832:	2304      	movs	r3, #4
 8007834:	e006      	b.n	8007844 <HAL_GPIO_Init+0x240>
 8007836:	2303      	movs	r3, #3
 8007838:	e004      	b.n	8007844 <HAL_GPIO_Init+0x240>
 800783a:	2302      	movs	r3, #2
 800783c:	e002      	b.n	8007844 <HAL_GPIO_Init+0x240>
 800783e:	2301      	movs	r3, #1
 8007840:	e000      	b.n	8007844 <HAL_GPIO_Init+0x240>
 8007842:	2300      	movs	r3, #0
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	f002 0203 	and.w	r2, r2, #3
 800784a:	0092      	lsls	r2, r2, #2
 800784c:	4093      	lsls	r3, r2
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	4313      	orrs	r3, r2
 8007852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007854:	4935      	ldr	r1, [pc, #212]	; (800792c <HAL_GPIO_Init+0x328>)
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	089b      	lsrs	r3, r3, #2
 800785a:	3302      	adds	r3, #2
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007862:	4b3d      	ldr	r3, [pc, #244]	; (8007958 <HAL_GPIO_Init+0x354>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	43db      	mvns	r3, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	4013      	ands	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	4313      	orrs	r3, r2
 8007884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007886:	4a34      	ldr	r2, [pc, #208]	; (8007958 <HAL_GPIO_Init+0x354>)
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800788c:	4b32      	ldr	r3, [pc, #200]	; (8007958 <HAL_GPIO_Init+0x354>)
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	43db      	mvns	r3, r3
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	4013      	ands	r3, r2
 800789a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80078b0:	4a29      	ldr	r2, [pc, #164]	; (8007958 <HAL_GPIO_Init+0x354>)
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80078b6:	4b28      	ldr	r3, [pc, #160]	; (8007958 <HAL_GPIO_Init+0x354>)
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	43db      	mvns	r3, r3
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	4013      	ands	r3, r2
 80078c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80078da:	4a1f      	ldr	r2, [pc, #124]	; (8007958 <HAL_GPIO_Init+0x354>)
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80078e0:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <HAL_GPIO_Init+0x354>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	43db      	mvns	r3, r3
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	4013      	ands	r3, r2
 80078ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007904:	4a14      	ldr	r2, [pc, #80]	; (8007958 <HAL_GPIO_Init+0x354>)
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	3301      	adds	r3, #1
 800790e:	61fb      	str	r3, [r7, #28]
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	2b0f      	cmp	r3, #15
 8007914:	f67f ae86 	bls.w	8007624 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	3724      	adds	r7, #36	; 0x24
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	40023800 	.word	0x40023800
 800792c:	40013800 	.word	0x40013800
 8007930:	40020000 	.word	0x40020000
 8007934:	40020400 	.word	0x40020400
 8007938:	40020800 	.word	0x40020800
 800793c:	40020c00 	.word	0x40020c00
 8007940:	40021000 	.word	0x40021000
 8007944:	40021400 	.word	0x40021400
 8007948:	40021800 	.word	0x40021800
 800794c:	40021c00 	.word	0x40021c00
 8007950:	40022000 	.word	0x40022000
 8007954:	40022400 	.word	0x40022400
 8007958:	40013c00 	.word	0x40013c00

0800795c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007966:	2300      	movs	r3, #0
 8007968:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800796e:	2300      	movs	r3, #0
 8007970:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	e0d9      	b.n	8007b2c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007978:	2201      	movs	r2, #1
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	fa02 f303 	lsl.w	r3, r2, r3
 8007980:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	4013      	ands	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	429a      	cmp	r2, r3
 8007990:	f040 80c9 	bne.w	8007b26 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007994:	4a6b      	ldr	r2, [pc, #428]	; (8007b44 <HAL_GPIO_DeInit+0x1e8>)
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	089b      	lsrs	r3, r3, #2
 800799a:	3302      	adds	r3, #2
 800799c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f003 0303 	and.w	r3, r3, #3
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	220f      	movs	r2, #15
 80079ac:	fa02 f303 	lsl.w	r3, r2, r3
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	4013      	ands	r3, r2
 80079b4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a63      	ldr	r2, [pc, #396]	; (8007b48 <HAL_GPIO_DeInit+0x1ec>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d037      	beq.n	8007a2e <HAL_GPIO_DeInit+0xd2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a62      	ldr	r2, [pc, #392]	; (8007b4c <HAL_GPIO_DeInit+0x1f0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d031      	beq.n	8007a2a <HAL_GPIO_DeInit+0xce>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a61      	ldr	r2, [pc, #388]	; (8007b50 <HAL_GPIO_DeInit+0x1f4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d02b      	beq.n	8007a26 <HAL_GPIO_DeInit+0xca>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a60      	ldr	r2, [pc, #384]	; (8007b54 <HAL_GPIO_DeInit+0x1f8>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d025      	beq.n	8007a22 <HAL_GPIO_DeInit+0xc6>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a5f      	ldr	r2, [pc, #380]	; (8007b58 <HAL_GPIO_DeInit+0x1fc>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d01f      	beq.n	8007a1e <HAL_GPIO_DeInit+0xc2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a5e      	ldr	r2, [pc, #376]	; (8007b5c <HAL_GPIO_DeInit+0x200>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d019      	beq.n	8007a1a <HAL_GPIO_DeInit+0xbe>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a5d      	ldr	r2, [pc, #372]	; (8007b60 <HAL_GPIO_DeInit+0x204>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d013      	beq.n	8007a16 <HAL_GPIO_DeInit+0xba>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a5c      	ldr	r2, [pc, #368]	; (8007b64 <HAL_GPIO_DeInit+0x208>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d00d      	beq.n	8007a12 <HAL_GPIO_DeInit+0xb6>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a5b      	ldr	r2, [pc, #364]	; (8007b68 <HAL_GPIO_DeInit+0x20c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d007      	beq.n	8007a0e <HAL_GPIO_DeInit+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a5a      	ldr	r2, [pc, #360]	; (8007b6c <HAL_GPIO_DeInit+0x210>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d101      	bne.n	8007a0a <HAL_GPIO_DeInit+0xae>
 8007a06:	2309      	movs	r3, #9
 8007a08:	e012      	b.n	8007a30 <HAL_GPIO_DeInit+0xd4>
 8007a0a:	230a      	movs	r3, #10
 8007a0c:	e010      	b.n	8007a30 <HAL_GPIO_DeInit+0xd4>
 8007a0e:	2308      	movs	r3, #8
 8007a10:	e00e      	b.n	8007a30 <HAL_GPIO_DeInit+0xd4>
 8007a12:	2307      	movs	r3, #7
 8007a14:	e00c      	b.n	8007a30 <HAL_GPIO_DeInit+0xd4>
 8007a16:	2306      	movs	r3, #6
 8007a18:	e00a      	b.n	8007a30 <HAL_GPIO_DeInit+0xd4>
 8007a1a:	2305      	movs	r3, #5
 8007a1c:	e008      	b.n	8007a30 <HAL_GPIO_DeInit+0xd4>
 8007a1e:	2304      	movs	r3, #4
 8007a20:	e006      	b.n	8007a30 <HAL_GPIO_DeInit+0xd4>
 8007a22:	2303      	movs	r3, #3
 8007a24:	e004      	b.n	8007a30 <HAL_GPIO_DeInit+0xd4>
 8007a26:	2302      	movs	r3, #2
 8007a28:	e002      	b.n	8007a30 <HAL_GPIO_DeInit+0xd4>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e000      	b.n	8007a30 <HAL_GPIO_DeInit+0xd4>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	f002 0203 	and.w	r2, r2, #3
 8007a36:	0092      	lsls	r2, r2, #2
 8007a38:	4093      	lsls	r3, r2
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d132      	bne.n	8007aa6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007a40:	4b4b      	ldr	r3, [pc, #300]	; (8007b70 <HAL_GPIO_DeInit+0x214>)
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	43db      	mvns	r3, r3
 8007a48:	4949      	ldr	r1, [pc, #292]	; (8007b70 <HAL_GPIO_DeInit+0x214>)
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007a4e:	4b48      	ldr	r3, [pc, #288]	; (8007b70 <HAL_GPIO_DeInit+0x214>)
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	43db      	mvns	r3, r3
 8007a56:	4946      	ldr	r1, [pc, #280]	; (8007b70 <HAL_GPIO_DeInit+0x214>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007a5c:	4b44      	ldr	r3, [pc, #272]	; (8007b70 <HAL_GPIO_DeInit+0x214>)
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	43db      	mvns	r3, r3
 8007a64:	4942      	ldr	r1, [pc, #264]	; (8007b70 <HAL_GPIO_DeInit+0x214>)
 8007a66:	4013      	ands	r3, r2
 8007a68:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007a6a:	4b41      	ldr	r3, [pc, #260]	; (8007b70 <HAL_GPIO_DeInit+0x214>)
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	43db      	mvns	r3, r3
 8007a72:	493f      	ldr	r1, [pc, #252]	; (8007b70 <HAL_GPIO_DeInit+0x214>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	220f      	movs	r2, #15
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007a88:	4a2e      	ldr	r2, [pc, #184]	; (8007b44 <HAL_GPIO_DeInit+0x1e8>)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	089b      	lsrs	r3, r3, #2
 8007a8e:	3302      	adds	r3, #2
 8007a90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	43da      	mvns	r2, r3
 8007a98:	482a      	ldr	r0, [pc, #168]	; (8007b44 <HAL_GPIO_DeInit+0x1e8>)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	089b      	lsrs	r3, r3, #2
 8007a9e:	400a      	ands	r2, r1
 8007aa0:	3302      	adds	r3, #2
 8007aa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	2103      	movs	r1, #3
 8007ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab4:	43db      	mvns	r3, r3
 8007ab6:	401a      	ands	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	08da      	lsrs	r2, r3, #3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3208      	adds	r2, #8
 8007ac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	220f      	movs	r2, #15
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	43db      	mvns	r3, r3
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	08d2      	lsrs	r2, r2, #3
 8007adc:	4019      	ands	r1, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3208      	adds	r2, #8
 8007ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	2103      	movs	r1, #3
 8007af0:	fa01 f303 	lsl.w	r3, r1, r3
 8007af4:	43db      	mvns	r3, r3
 8007af6:	401a      	ands	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	2101      	movs	r1, #1
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	fa01 f303 	lsl.w	r3, r1, r3
 8007b08:	43db      	mvns	r3, r3
 8007b0a:	401a      	ands	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	2103      	movs	r1, #3
 8007b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1e:	43db      	mvns	r3, r3
 8007b20:	401a      	ands	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	617b      	str	r3, [r7, #20]
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b0f      	cmp	r3, #15
 8007b30:	f67f af22 	bls.w	8007978 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	40013800 	.word	0x40013800
 8007b48:	40020000 	.word	0x40020000
 8007b4c:	40020400 	.word	0x40020400
 8007b50:	40020800 	.word	0x40020800
 8007b54:	40020c00 	.word	0x40020c00
 8007b58:	40021000 	.word	0x40021000
 8007b5c:	40021400 	.word	0x40021400
 8007b60:	40021800 	.word	0x40021800
 8007b64:	40021c00 	.word	0x40021c00
 8007b68:	40022000 	.word	0x40022000
 8007b6c:	40022400 	.word	0x40022400
 8007b70:	40013c00 	.word	0x40013c00

08007b74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	887b      	ldrh	r3, [r7, #2]
 8007b86:	4013      	ands	r3, r2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	73fb      	strb	r3, [r7, #15]
 8007b90:	e001      	b.n	8007b96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	807b      	strh	r3, [r7, #2]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007bb4:	787b      	ldrb	r3, [r7, #1]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bba:	887a      	ldrh	r2, [r7, #2]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007bc0:	e003      	b.n	8007bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007bc2:	887b      	ldrh	r3, [r7, #2]
 8007bc4:	041a      	lsls	r2, r3, #16
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	619a      	str	r2, [r3, #24]
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
	...

08007bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e07f      	b.n	8007cea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fd f940 	bl	8004e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2224      	movs	r2, #36	; 0x24
 8007c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 0201 	bic.w	r2, r2, #1
 8007c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d107      	bne.n	8007c52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	689a      	ldr	r2, [r3, #8]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c4e:	609a      	str	r2, [r3, #8]
 8007c50:	e006      	b.n	8007c60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007c5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d104      	bne.n	8007c72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6859      	ldr	r1, [r3, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	4b1d      	ldr	r3, [pc, #116]	; (8007cf4 <HAL_I2C_Init+0x11c>)
 8007c7e:	430b      	orrs	r3, r1
 8007c80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691a      	ldr	r2, [r3, #16]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	69d9      	ldr	r1, [r3, #28]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a1a      	ldr	r2, [r3, #32]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0201 	orr.w	r2, r2, #1
 8007cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	02008000 	.word	0x02008000

08007cf8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e021      	b.n	8007d4e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2224      	movs	r2, #36	; 0x24
 8007d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f022 0201 	bic.w	r2, r2, #1
 8007d20:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fd f956 	bl	8004fd4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b088      	sub	sp, #32
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	4608      	mov	r0, r1
 8007d62:	4611      	mov	r1, r2
 8007d64:	461a      	mov	r2, r3
 8007d66:	4603      	mov	r3, r0
 8007d68:	817b      	strh	r3, [r7, #10]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	813b      	strh	r3, [r7, #8]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	f040 80f9 	bne.w	8007f72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d002      	beq.n	8007d8c <HAL_I2C_Mem_Write+0x34>
 8007d86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d105      	bne.n	8007d98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e0ed      	b.n	8007f74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d101      	bne.n	8007da6 <HAL_I2C_Mem_Write+0x4e>
 8007da2:	2302      	movs	r3, #2
 8007da4:	e0e6      	b.n	8007f74 <HAL_I2C_Mem_Write+0x21c>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007dae:	f7fd fe6d 	bl	8005a8c <HAL_GetTick>
 8007db2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	2319      	movs	r3, #25
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 fad1 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0d1      	b.n	8007f74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2221      	movs	r2, #33	; 0x21
 8007dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2240      	movs	r2, #64	; 0x40
 8007ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6a3a      	ldr	r2, [r7, #32]
 8007dea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007df8:	88f8      	ldrh	r0, [r7, #6]
 8007dfa:	893a      	ldrh	r2, [r7, #8]
 8007dfc:	8979      	ldrh	r1, [r7, #10]
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	9301      	str	r3, [sp, #4]
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	4603      	mov	r3, r0
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 f9e1 	bl	80081d0 <I2C_RequestMemoryWrite>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d005      	beq.n	8007e20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e0a9      	b.n	8007f74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2bff      	cmp	r3, #255	; 0xff
 8007e28:	d90e      	bls.n	8007e48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	22ff      	movs	r2, #255	; 0xff
 8007e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	8979      	ldrh	r1, [r7, #10]
 8007e38:	2300      	movs	r3, #0
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 fc39 	bl	80086b8 <I2C_TransferConfig>
 8007e46:	e00f      	b.n	8007e68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	8979      	ldrh	r1, [r7, #10]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 fc28 	bl	80086b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 fabb 	bl	80083e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e07b      	b.n	8007f74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	781a      	ldrb	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	1c5a      	adds	r2, r3, #1
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d034      	beq.n	8007f20 <HAL_I2C_Mem_Write+0x1c8>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d130      	bne.n	8007f20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2180      	movs	r1, #128	; 0x80
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 fa4d 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e04d      	b.n	8007f74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	2bff      	cmp	r3, #255	; 0xff
 8007ee0:	d90e      	bls.n	8007f00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	22ff      	movs	r2, #255	; 0xff
 8007ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	8979      	ldrh	r1, [r7, #10]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 fbdd 	bl	80086b8 <I2C_TransferConfig>
 8007efe:	e00f      	b.n	8007f20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	8979      	ldrh	r1, [r7, #10]
 8007f12:	2300      	movs	r3, #0
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 fbcc 	bl	80086b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d19e      	bne.n	8007e68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 fa9a 	bl	8008468 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e01a      	b.n	8007f74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2220      	movs	r2, #32
 8007f44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6859      	ldr	r1, [r3, #4]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	4b0a      	ldr	r3, [pc, #40]	; (8007f7c <HAL_I2C_Mem_Write+0x224>)
 8007f52:	400b      	ands	r3, r1
 8007f54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e000      	b.n	8007f74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007f72:	2302      	movs	r3, #2
  }
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	fe00e800 	.word	0xfe00e800

08007f80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af02      	add	r7, sp, #8
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	4608      	mov	r0, r1
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	4603      	mov	r3, r0
 8007f90:	817b      	strh	r3, [r7, #10]
 8007f92:	460b      	mov	r3, r1
 8007f94:	813b      	strh	r3, [r7, #8]
 8007f96:	4613      	mov	r3, r2
 8007f98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	f040 80fd 	bne.w	80081a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <HAL_I2C_Mem_Read+0x34>
 8007fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d105      	bne.n	8007fc0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e0f1      	b.n	80081a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d101      	bne.n	8007fce <HAL_I2C_Mem_Read+0x4e>
 8007fca:	2302      	movs	r3, #2
 8007fcc:	e0ea      	b.n	80081a4 <HAL_I2C_Mem_Read+0x224>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007fd6:	f7fd fd59 	bl	8005a8c <HAL_GetTick>
 8007fda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	2319      	movs	r3, #25
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 f9bd 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e0d5      	b.n	80081a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2222      	movs	r2, #34	; 0x22
 8007ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2240      	movs	r2, #64	; 0x40
 8008004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6a3a      	ldr	r2, [r7, #32]
 8008012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008018:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008020:	88f8      	ldrh	r0, [r7, #6]
 8008022:	893a      	ldrh	r2, [r7, #8]
 8008024:	8979      	ldrh	r1, [r7, #10]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	4603      	mov	r3, r0
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 f921 	bl	8008278 <I2C_RequestMemoryRead>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d005      	beq.n	8008048 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e0ad      	b.n	80081a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800804c:	b29b      	uxth	r3, r3
 800804e:	2bff      	cmp	r3, #255	; 0xff
 8008050:	d90e      	bls.n	8008070 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	22ff      	movs	r2, #255	; 0xff
 8008056:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800805c:	b2da      	uxtb	r2, r3
 800805e:	8979      	ldrh	r1, [r7, #10]
 8008060:	4b52      	ldr	r3, [pc, #328]	; (80081ac <HAL_I2C_Mem_Read+0x22c>)
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 fb25 	bl	80086b8 <I2C_TransferConfig>
 800806e:	e00f      	b.n	8008090 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008074:	b29a      	uxth	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807e:	b2da      	uxtb	r2, r3
 8008080:	8979      	ldrh	r1, [r7, #10]
 8008082:	4b4a      	ldr	r3, [pc, #296]	; (80081ac <HAL_I2C_Mem_Read+0x22c>)
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 fb14 	bl	80086b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	2200      	movs	r2, #0
 8008098:	2104      	movs	r1, #4
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f964 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e07c      	b.n	80081a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	b2d2      	uxtb	r2, r2
 80080b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	3b01      	subs	r3, #1
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d034      	beq.n	8008150 <HAL_I2C_Mem_Read+0x1d0>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d130      	bne.n	8008150 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	2200      	movs	r2, #0
 80080f6:	2180      	movs	r1, #128	; 0x80
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 f935 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e04d      	b.n	80081a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810c:	b29b      	uxth	r3, r3
 800810e:	2bff      	cmp	r3, #255	; 0xff
 8008110:	d90e      	bls.n	8008130 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	22ff      	movs	r2, #255	; 0xff
 8008116:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800811c:	b2da      	uxtb	r2, r3
 800811e:	8979      	ldrh	r1, [r7, #10]
 8008120:	2300      	movs	r3, #0
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 fac5 	bl	80086b8 <I2C_TransferConfig>
 800812e:	e00f      	b.n	8008150 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008134:	b29a      	uxth	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800813e:	b2da      	uxtb	r2, r3
 8008140:	8979      	ldrh	r1, [r7, #10]
 8008142:	2300      	movs	r3, #0
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 fab4 	bl	80086b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d19a      	bne.n	8008090 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 f982 	bl	8008468 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e01a      	b.n	80081a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2220      	movs	r2, #32
 8008174:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6859      	ldr	r1, [r3, #4]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <HAL_I2C_Mem_Read+0x230>)
 8008182:	400b      	ands	r3, r1
 8008184:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2220      	movs	r2, #32
 800818a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	e000      	b.n	80081a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80081a2:	2302      	movs	r3, #2
  }
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	80002400 	.word	0x80002400
 80081b0:	fe00e800 	.word	0xfe00e800

080081b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081c2:	b2db      	uxtb	r3, r3
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	4608      	mov	r0, r1
 80081da:	4611      	mov	r1, r2
 80081dc:	461a      	mov	r2, r3
 80081de:	4603      	mov	r3, r0
 80081e0:	817b      	strh	r3, [r7, #10]
 80081e2:	460b      	mov	r3, r1
 80081e4:	813b      	strh	r3, [r7, #8]
 80081e6:	4613      	mov	r3, r2
 80081e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80081ea:	88fb      	ldrh	r3, [r7, #6]
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	8979      	ldrh	r1, [r7, #10]
 80081f0:	4b20      	ldr	r3, [pc, #128]	; (8008274 <I2C_RequestMemoryWrite+0xa4>)
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 fa5d 	bl	80086b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081fe:	69fa      	ldr	r2, [r7, #28]
 8008200:	69b9      	ldr	r1, [r7, #24]
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f8f0 	bl	80083e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e02c      	b.n	800826c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008212:	88fb      	ldrh	r3, [r7, #6]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d105      	bne.n	8008224 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008218:	893b      	ldrh	r3, [r7, #8]
 800821a:	b2da      	uxtb	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	629a      	str	r2, [r3, #40]	; 0x28
 8008222:	e015      	b.n	8008250 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008224:	893b      	ldrh	r3, [r7, #8]
 8008226:	0a1b      	lsrs	r3, r3, #8
 8008228:	b29b      	uxth	r3, r3
 800822a:	b2da      	uxtb	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008232:	69fa      	ldr	r2, [r7, #28]
 8008234:	69b9      	ldr	r1, [r7, #24]
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 f8d6 	bl	80083e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e012      	b.n	800826c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008246:	893b      	ldrh	r3, [r7, #8]
 8008248:	b2da      	uxtb	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	2200      	movs	r2, #0
 8008258:	2180      	movs	r1, #128	; 0x80
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f884 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	80002000 	.word	0x80002000

08008278 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af02      	add	r7, sp, #8
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	4608      	mov	r0, r1
 8008282:	4611      	mov	r1, r2
 8008284:	461a      	mov	r2, r3
 8008286:	4603      	mov	r3, r0
 8008288:	817b      	strh	r3, [r7, #10]
 800828a:	460b      	mov	r3, r1
 800828c:	813b      	strh	r3, [r7, #8]
 800828e:	4613      	mov	r3, r2
 8008290:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	b2da      	uxtb	r2, r3
 8008296:	8979      	ldrh	r1, [r7, #10]
 8008298:	4b20      	ldr	r3, [pc, #128]	; (800831c <I2C_RequestMemoryRead+0xa4>)
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	2300      	movs	r3, #0
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 fa0a 	bl	80086b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	69b9      	ldr	r1, [r7, #24]
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 f89d 	bl	80083e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e02c      	b.n	8008312 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082b8:	88fb      	ldrh	r3, [r7, #6]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d105      	bne.n	80082ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082be:	893b      	ldrh	r3, [r7, #8]
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	629a      	str	r2, [r3, #40]	; 0x28
 80082c8:	e015      	b.n	80082f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80082ca:	893b      	ldrh	r3, [r7, #8]
 80082cc:	0a1b      	lsrs	r3, r3, #8
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082d8:	69fa      	ldr	r2, [r7, #28]
 80082da:	69b9      	ldr	r1, [r7, #24]
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 f883 	bl	80083e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e012      	b.n	8008312 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082ec:	893b      	ldrh	r3, [r7, #8]
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2200      	movs	r2, #0
 80082fe:	2140      	movs	r1, #64	; 0x40
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 f831 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e000      	b.n	8008312 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	80002000 	.word	0x80002000

08008320 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b02      	cmp	r3, #2
 8008334:	d103      	bne.n	800833e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b01      	cmp	r3, #1
 800834a:	d007      	beq.n	800835c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699a      	ldr	r2, [r3, #24]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0201 	orr.w	r2, r2, #1
 800835a:	619a      	str	r2, [r3, #24]
  }
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	4613      	mov	r3, r2
 8008376:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008378:	e022      	b.n	80083c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008380:	d01e      	beq.n	80083c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008382:	f7fd fb83 	bl	8005a8c <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d302      	bcc.n	8008398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d113      	bne.n	80083c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800839c:	f043 0220 	orr.w	r2, r3, #32
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2220      	movs	r2, #32
 80083a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e00f      	b.n	80083e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699a      	ldr	r2, [r3, #24]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4013      	ands	r3, r2
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	bf0c      	ite	eq
 80083d0:	2301      	moveq	r3, #1
 80083d2:	2300      	movne	r3, #0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	461a      	mov	r2, r3
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d0cd      	beq.n	800837a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80083f4:	e02c      	b.n	8008450 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	68b9      	ldr	r1, [r7, #8]
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 f870 	bl	80084e0 <I2C_IsErrorOccurred>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e02a      	b.n	8008460 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008410:	d01e      	beq.n	8008450 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008412:	f7fd fb3b 	bl	8005a8c <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	429a      	cmp	r2, r3
 8008420:	d302      	bcc.n	8008428 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d113      	bne.n	8008450 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842c:	f043 0220 	orr.w	r2, r3, #32
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e007      	b.n	8008460 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	f003 0302 	and.w	r3, r3, #2
 800845a:	2b02      	cmp	r3, #2
 800845c:	d1cb      	bne.n	80083f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008474:	e028      	b.n	80084c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	68b9      	ldr	r1, [r7, #8]
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 f830 	bl	80084e0 <I2C_IsErrorOccurred>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e026      	b.n	80084d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800848a:	f7fd faff 	bl	8005a8c <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	429a      	cmp	r2, r3
 8008498:	d302      	bcc.n	80084a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d113      	bne.n	80084c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a4:	f043 0220 	orr.w	r2, r3, #32
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2220      	movs	r2, #32
 80084b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e007      	b.n	80084d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d1cf      	bne.n	8008476 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08a      	sub	sp, #40	; 0x28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	f003 0310 	and.w	r3, r3, #16
 8008508:	2b00      	cmp	r3, #0
 800850a:	d075      	beq.n	80085f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2210      	movs	r2, #16
 8008512:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008514:	e056      	b.n	80085c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851c:	d052      	beq.n	80085c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800851e:	f7fd fab5 	bl	8005a8c <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	429a      	cmp	r2, r3
 800852c:	d302      	bcc.n	8008534 <I2C_IsErrorOccurred+0x54>
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d147      	bne.n	80085c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800853e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008546:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008556:	d12e      	bne.n	80085b6 <I2C_IsErrorOccurred+0xd6>
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800855e:	d02a      	beq.n	80085b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008560:	7cfb      	ldrb	r3, [r7, #19]
 8008562:	2b20      	cmp	r3, #32
 8008564:	d027      	beq.n	80085b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008574:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008576:	f7fd fa89 	bl	8005a8c <HAL_GetTick>
 800857a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800857c:	e01b      	b.n	80085b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800857e:	f7fd fa85 	bl	8005a8c <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b19      	cmp	r3, #25
 800858a:	d914      	bls.n	80085b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008590:	f043 0220 	orr.w	r2, r3, #32
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2220      	movs	r2, #32
 800859c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	2b20      	cmp	r3, #32
 80085c2:	d1dc      	bne.n	800857e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	f003 0320 	and.w	r3, r3, #32
 80085ce:	2b20      	cmp	r3, #32
 80085d0:	d003      	beq.n	80085da <I2C_IsErrorOccurred+0xfa>
 80085d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d09d      	beq.n	8008516 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80085da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d103      	bne.n	80085ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2220      	movs	r2, #32
 80085e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	f043 0304 	orr.w	r3, r3, #4
 80085f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00b      	beq.n	8008622 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	f043 0301 	orr.w	r3, r3, #1
 8008610:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800861a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	f043 0308 	orr.w	r3, r3, #8
 8008632:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800863c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00b      	beq.n	8008666 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	f043 0302 	orr.w	r3, r3, #2
 8008654:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800865e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800866a:	2b00      	cmp	r3, #0
 800866c:	d01c      	beq.n	80086a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f7ff fe56 	bl	8008320 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6859      	ldr	r1, [r3, #4]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	4b0d      	ldr	r3, [pc, #52]	; (80086b4 <I2C_IsErrorOccurred+0x1d4>)
 8008680:	400b      	ands	r3, r1
 8008682:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	431a      	orrs	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2220      	movs	r2, #32
 8008694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80086a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3728      	adds	r7, #40	; 0x28
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	fe00e800 	.word	0xfe00e800

080086b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	607b      	str	r3, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	817b      	strh	r3, [r7, #10]
 80086c6:	4613      	mov	r3, r2
 80086c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086ca:	897b      	ldrh	r3, [r7, #10]
 80086cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086d0:	7a7b      	ldrb	r3, [r7, #9]
 80086d2:	041b      	lsls	r3, r3, #16
 80086d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086d8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086e6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	0d5b      	lsrs	r3, r3, #21
 80086f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80086f6:	4b08      	ldr	r3, [pc, #32]	; (8008718 <I2C_TransferConfig+0x60>)
 80086f8:	430b      	orrs	r3, r1
 80086fa:	43db      	mvns	r3, r3
 80086fc:	ea02 0103 	and.w	r1, r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	430a      	orrs	r2, r1
 8008708:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800870a:	bf00      	nop
 800870c:	371c      	adds	r7, #28
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	03ff63ff 	.word	0x03ff63ff

0800871c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b20      	cmp	r3, #32
 8008730:	d138      	bne.n	80087a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008738:	2b01      	cmp	r3, #1
 800873a:	d101      	bne.n	8008740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800873c:	2302      	movs	r3, #2
 800873e:	e032      	b.n	80087a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2224      	movs	r2, #36	; 0x24
 800874c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0201 	bic.w	r2, r2, #1
 800875e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800876e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6819      	ldr	r1, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0201 	orr.w	r2, r2, #1
 800878e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	e000      	b.n	80087a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80087a4:	2302      	movs	r3, #2
  }
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b085      	sub	sp, #20
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b20      	cmp	r3, #32
 80087c6:	d139      	bne.n	800883c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80087d2:	2302      	movs	r3, #2
 80087d4:	e033      	b.n	800883e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2224      	movs	r2, #36	; 0x24
 80087e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 0201 	bic.w	r2, r2, #1
 80087f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008804:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	021b      	lsls	r3, r3, #8
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	4313      	orrs	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0201 	orr.w	r2, r2, #1
 8008826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2220      	movs	r2, #32
 800882c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	e000      	b.n	800883e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800883c:	2302      	movs	r3, #2
  }
}
 800883e:	4618      	mov	r0, r3
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e0bf      	b.n	80089de <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d106      	bne.n	8008878 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7fc fbea 	bl	800504c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699a      	ldr	r2, [r3, #24]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800888e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6999      	ldr	r1, [r3, #24]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088a4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	430a      	orrs	r2, r1
 80088b2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6899      	ldr	r1, [r3, #8]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	4b4a      	ldr	r3, [pc, #296]	; (80089e8 <HAL_LTDC_Init+0x19c>)
 80088c0:	400b      	ands	r3, r1
 80088c2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	041b      	lsls	r3, r3, #16
 80088ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6899      	ldr	r1, [r3, #8]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	699a      	ldr	r2, [r3, #24]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	431a      	orrs	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68d9      	ldr	r1, [r3, #12]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	4b3e      	ldr	r3, [pc, #248]	; (80089e8 <HAL_LTDC_Init+0x19c>)
 80088ee:	400b      	ands	r3, r1
 80088f0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	041b      	lsls	r3, r3, #16
 80088f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68d9      	ldr	r1, [r3, #12]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a1a      	ldr	r2, [r3, #32]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6919      	ldr	r1, [r3, #16]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	4b33      	ldr	r3, [pc, #204]	; (80089e8 <HAL_LTDC_Init+0x19c>)
 800891c:	400b      	ands	r3, r1
 800891e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	041b      	lsls	r3, r3, #16
 8008926:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6919      	ldr	r1, [r3, #16]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	431a      	orrs	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6959      	ldr	r1, [r3, #20]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	4b27      	ldr	r3, [pc, #156]	; (80089e8 <HAL_LTDC_Init+0x19c>)
 800894a:	400b      	ands	r3, r1
 800894c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008952:	041b      	lsls	r3, r3, #16
 8008954:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6959      	ldr	r1, [r3, #20]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008972:	021b      	lsls	r3, r3, #8
 8008974:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800897c:	041b      	lsls	r3, r3, #16
 800897e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800898e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4313      	orrs	r3, r2
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80089a2:	431a      	orrs	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0206 	orr.w	r2, r2, #6
 80089ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	699a      	ldr	r2, [r3, #24]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0201 	orr.w	r2, r2, #1
 80089ca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	f000f800 	.word	0xf000f800

080089ec <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a02:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f003 0304 	and.w	r3, r3, #4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d023      	beq.n	8008a56 <HAL_LTDC_IRQHandler+0x6a>
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f003 0304 	and.w	r3, r3, #4
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01e      	beq.n	8008a56 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 0204 	bic.w	r2, r2, #4
 8008a26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2204      	movs	r2, #4
 8008a2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a36:	f043 0201 	orr.w	r2, r3, #1
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2204      	movs	r2, #4
 8008a44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f86f 	bl	8008b34 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f003 0302 	and.w	r3, r3, #2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d023      	beq.n	8008aa8 <HAL_LTDC_IRQHandler+0xbc>
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d01e      	beq.n	8008aa8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0202 	bic.w	r2, r2, #2
 8008a78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a88:	f043 0202 	orr.w	r2, r3, #2
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2204      	movs	r2, #4
 8008a96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f846 	bl	8008b34 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d01b      	beq.n	8008aea <HAL_LTDC_IRQHandler+0xfe>
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d016      	beq.n	8008aea <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0201 	bic.w	r2, r2, #1
 8008aca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f82f 	bl	8008b48 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f003 0308 	and.w	r3, r3, #8
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01b      	beq.n	8008b2c <HAL_LTDC_IRQHandler+0x140>
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f003 0308 	and.w	r3, r3, #8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d016      	beq.n	8008b2c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f022 0208 	bic.w	r2, r2, #8
 8008b0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2208      	movs	r2, #8
 8008b14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f818 	bl	8008b5c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008b2c:	bf00      	nop
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008b70:	b5b0      	push	{r4, r5, r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d101      	bne.n	8008b8a <HAL_LTDC_ConfigLayer+0x1a>
 8008b86:	2302      	movs	r3, #2
 8008b88:	e02c      	b.n	8008be4 <HAL_LTDC_ConfigLayer+0x74>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2202      	movs	r2, #2
 8008b96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2134      	movs	r1, #52	; 0x34
 8008ba0:	fb01 f303 	mul.w	r3, r1, r3
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	4614      	mov	r4, r2
 8008bae:	461d      	mov	r5, r3
 8008bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	68b9      	ldr	r1, [r7, #8]
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 f855 	bl	8008c74 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bdb0      	pop	{r4, r5, r7, pc}

08008bec <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d101      	bne.n	8008c06 <HAL_LTDC_SetAlpha+0x1a>
 8008c02:	2302      	movs	r3, #2
 8008c04:	e024      	b.n	8008c50 <HAL_LTDC_SetAlpha+0x64>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2202      	movs	r2, #2
 8008c12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2234      	movs	r2, #52	; 0x34
 8008c1a:	fb02 f303 	mul.w	r3, r2, r3
 8008c1e:	3338      	adds	r3, #56	; 0x38
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6979      	ldr	r1, [r7, #20]
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 f81f 	bl	8008c74 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008c66:	b2db      	uxtb	r3, r3
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b089      	sub	sp, #36	; 0x24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	0c1b      	lsrs	r3, r3, #16
 8008c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c90:	4413      	add	r3, r2
 8008c92:	041b      	lsls	r3, r3, #16
 8008c94:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	01db      	lsls	r3, r3, #7
 8008ca0:	4413      	add	r3, r2
 8008ca2:	3384      	adds	r3, #132	; 0x84
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	6812      	ldr	r2, [r2, #0]
 8008caa:	4611      	mov	r1, r2
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	01d2      	lsls	r2, r2, #7
 8008cb0:	440a      	add	r2, r1
 8008cb2:	3284      	adds	r2, #132	; 0x84
 8008cb4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008cb8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	0c1b      	lsrs	r3, r3, #16
 8008cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cca:	4413      	add	r3, r2
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	01db      	lsls	r3, r3, #7
 8008cd8:	440b      	add	r3, r1
 8008cda:	3384      	adds	r3, #132	; 0x84
 8008cdc:	4619      	mov	r1, r3
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	68da      	ldr	r2, [r3, #12]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cf2:	4413      	add	r3, r2
 8008cf4:	041b      	lsls	r3, r3, #16
 8008cf6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	01db      	lsls	r3, r3, #7
 8008d02:	4413      	add	r3, r2
 8008d04:	3384      	adds	r3, #132	; 0x84
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	6812      	ldr	r2, [r2, #0]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	01d2      	lsls	r2, r2, #7
 8008d12:	440a      	add	r2, r1
 8008d14:	3284      	adds	r2, #132	; 0x84
 8008d16:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008d1a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d2a:	4413      	add	r3, r2
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4619      	mov	r1, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	01db      	lsls	r3, r3, #7
 8008d38:	440b      	add	r3, r1
 8008d3a:	3384      	adds	r3, #132	; 0x84
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	01db      	lsls	r3, r3, #7
 8008d4e:	4413      	add	r3, r2
 8008d50:	3384      	adds	r3, #132	; 0x84
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	6812      	ldr	r2, [r2, #0]
 8008d58:	4611      	mov	r1, r2
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	01d2      	lsls	r2, r2, #7
 8008d5e:	440a      	add	r2, r1
 8008d60:	3284      	adds	r2, #132	; 0x84
 8008d62:	f023 0307 	bic.w	r3, r3, #7
 8008d66:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	01db      	lsls	r3, r3, #7
 8008d72:	4413      	add	r3, r2
 8008d74:	3384      	adds	r3, #132	; 0x84
 8008d76:	461a      	mov	r2, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d84:	021b      	lsls	r3, r3, #8
 8008d86:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008d8e:	041b      	lsls	r3, r3, #16
 8008d90:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	061b      	lsls	r3, r3, #24
 8008d98:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	01db      	lsls	r3, r3, #7
 8008da4:	4413      	add	r3, r2
 8008da6:	3384      	adds	r3, #132	; 0x84
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	01db      	lsls	r3, r3, #7
 8008db4:	4413      	add	r3, r2
 8008db6:	3384      	adds	r3, #132	; 0x84
 8008db8:	461a      	mov	r2, r3
 8008dba:	2300      	movs	r3, #0
 8008dbc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	01db      	lsls	r3, r3, #7
 8008dd8:	440b      	add	r3, r1
 8008dda:	3384      	adds	r3, #132	; 0x84
 8008ddc:	4619      	mov	r1, r3
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	461a      	mov	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	01db      	lsls	r3, r3, #7
 8008dee:	4413      	add	r3, r2
 8008df0:	3384      	adds	r3, #132	; 0x84
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	6812      	ldr	r2, [r2, #0]
 8008df8:	4611      	mov	r1, r2
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	01d2      	lsls	r2, r2, #7
 8008dfe:	440a      	add	r2, r1
 8008e00:	3284      	adds	r2, #132	; 0x84
 8008e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008e06:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	01db      	lsls	r3, r3, #7
 8008e12:	4413      	add	r3, r2
 8008e14:	3384      	adds	r3, #132	; 0x84
 8008e16:	461a      	mov	r2, r3
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	695b      	ldr	r3, [r3, #20]
 8008e1c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	461a      	mov	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	01db      	lsls	r3, r3, #7
 8008e28:	4413      	add	r3, r2
 8008e2a:	3384      	adds	r3, #132	; 0x84
 8008e2c:	69da      	ldr	r2, [r3, #28]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4619      	mov	r1, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	01db      	lsls	r3, r3, #7
 8008e38:	440b      	add	r3, r1
 8008e3a:	3384      	adds	r3, #132	; 0x84
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4b58      	ldr	r3, [pc, #352]	; (8008fa0 <LTDC_SetConfig+0x32c>)
 8008e40:	4013      	ands	r3, r2
 8008e42:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	69da      	ldr	r2, [r3, #28]
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	6a1b      	ldr	r3, [r3, #32]
 8008e4c:	68f9      	ldr	r1, [r7, #12]
 8008e4e:	6809      	ldr	r1, [r1, #0]
 8008e50:	4608      	mov	r0, r1
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	01c9      	lsls	r1, r1, #7
 8008e56:	4401      	add	r1, r0
 8008e58:	3184      	adds	r1, #132	; 0x84
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	01db      	lsls	r3, r3, #7
 8008e68:	4413      	add	r3, r2
 8008e6a:	3384      	adds	r3, #132	; 0x84
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	01db      	lsls	r3, r3, #7
 8008e78:	4413      	add	r3, r2
 8008e7a:	3384      	adds	r3, #132	; 0x84
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	2300      	movs	r3, #0
 8008e80:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	01db      	lsls	r3, r3, #7
 8008e8c:	4413      	add	r3, r2
 8008e8e:	3384      	adds	r3, #132	; 0x84
 8008e90:	461a      	mov	r2, r3
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d102      	bne.n	8008ea6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008ea0:	2304      	movs	r3, #4
 8008ea2:	61fb      	str	r3, [r7, #28]
 8008ea4:	e01b      	b.n	8008ede <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d102      	bne.n	8008eb4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	61fb      	str	r3, [r7, #28]
 8008eb2:	e014      	b.n	8008ede <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d00b      	beq.n	8008ed4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d007      	beq.n	8008ed4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008ec8:	2b03      	cmp	r3, #3
 8008eca:	d003      	beq.n	8008ed4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008ed0:	2b07      	cmp	r3, #7
 8008ed2:	d102      	bne.n	8008eda <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	61fb      	str	r3, [r7, #28]
 8008ed8:	e001      	b.n	8008ede <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008eda:	2301      	movs	r3, #1
 8008edc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	01db      	lsls	r3, r3, #7
 8008ee8:	4413      	add	r3, r2
 8008eea:	3384      	adds	r3, #132	; 0x84
 8008eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	6812      	ldr	r2, [r2, #0]
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	01d2      	lsls	r2, r2, #7
 8008ef8:	440a      	add	r2, r1
 8008efa:	3284      	adds	r2, #132	; 0x84
 8008efc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008f00:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f06:	69fa      	ldr	r2, [r7, #28]
 8008f08:	fb02 f303 	mul.w	r3, r2, r3
 8008f0c:	041a      	lsls	r2, r3, #16
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	6859      	ldr	r1, [r3, #4]
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	1acb      	subs	r3, r1, r3
 8008f18:	69f9      	ldr	r1, [r7, #28]
 8008f1a:	fb01 f303 	mul.w	r3, r1, r3
 8008f1e:	3303      	adds	r3, #3
 8008f20:	68f9      	ldr	r1, [r7, #12]
 8008f22:	6809      	ldr	r1, [r1, #0]
 8008f24:	4608      	mov	r0, r1
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	01c9      	lsls	r1, r1, #7
 8008f2a:	4401      	add	r1, r0
 8008f2c:	3184      	adds	r1, #132	; 0x84
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	461a      	mov	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	01db      	lsls	r3, r3, #7
 8008f3c:	4413      	add	r3, r2
 8008f3e:	3384      	adds	r3, #132	; 0x84
 8008f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4619      	mov	r1, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	01db      	lsls	r3, r3, #7
 8008f4c:	440b      	add	r3, r1
 8008f4e:	3384      	adds	r3, #132	; 0x84
 8008f50:	4619      	mov	r1, r3
 8008f52:	4b14      	ldr	r3, [pc, #80]	; (8008fa4 <LTDC_SetConfig+0x330>)
 8008f54:	4013      	ands	r3, r2
 8008f56:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	01db      	lsls	r3, r3, #7
 8008f62:	4413      	add	r3, r2
 8008f64:	3384      	adds	r3, #132	; 0x84
 8008f66:	461a      	mov	r2, r3
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	01db      	lsls	r3, r3, #7
 8008f78:	4413      	add	r3, r2
 8008f7a:	3384      	adds	r3, #132	; 0x84
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	6812      	ldr	r2, [r2, #0]
 8008f82:	4611      	mov	r1, r2
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	01d2      	lsls	r2, r2, #7
 8008f88:	440a      	add	r2, r1
 8008f8a:	3284      	adds	r2, #132	; 0x84
 8008f8c:	f043 0301 	orr.w	r3, r3, #1
 8008f90:	6013      	str	r3, [r2, #0]
}
 8008f92:	bf00      	nop
 8008f94:	3724      	adds	r7, #36	; 0x24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	fffff8f8 	.word	0xfffff8f8
 8008fa4:	fffff800 	.word	0xfffff800

08008fa8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fac:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a04      	ldr	r2, [pc, #16]	; (8008fc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fb6:	6013      	str	r3, [r2, #0]
}
 8008fb8:	bf00      	nop
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	40007000 	.word	0x40007000

08008fc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008fd2:	4b23      	ldr	r3, [pc, #140]	; (8009060 <HAL_PWREx_EnableOverDrive+0x98>)
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	4a22      	ldr	r2, [pc, #136]	; (8009060 <HAL_PWREx_EnableOverDrive+0x98>)
 8008fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8008fde:	4b20      	ldr	r3, [pc, #128]	; (8009060 <HAL_PWREx_EnableOverDrive+0x98>)
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fe6:	603b      	str	r3, [r7, #0]
 8008fe8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008fea:	4b1e      	ldr	r3, [pc, #120]	; (8009064 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a1d      	ldr	r2, [pc, #116]	; (8009064 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ff4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ff6:	f7fc fd49 	bl	8005a8c <HAL_GetTick>
 8008ffa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008ffc:	e009      	b.n	8009012 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008ffe:	f7fc fd45 	bl	8005a8c <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800900c:	d901      	bls.n	8009012 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e022      	b.n	8009058 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009012:	4b14      	ldr	r3, [pc, #80]	; (8009064 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800901a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800901e:	d1ee      	bne.n	8008ffe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009020:	4b10      	ldr	r3, [pc, #64]	; (8009064 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a0f      	ldr	r2, [pc, #60]	; (8009064 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800902a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800902c:	f7fc fd2e 	bl	8005a8c <HAL_GetTick>
 8009030:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009032:	e009      	b.n	8009048 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009034:	f7fc fd2a 	bl	8005a8c <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009042:	d901      	bls.n	8009048 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e007      	b.n	8009058 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009048:	4b06      	ldr	r3, [pc, #24]	; (8009064 <HAL_PWREx_EnableOverDrive+0x9c>)
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009054:	d1ee      	bne.n	8009034 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	40023800 	.word	0x40023800
 8009064:	40007000 	.word	0x40007000

08009068 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009070:	2300      	movs	r3, #0
 8009072:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e291      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	2b00      	cmp	r3, #0
 8009088:	f000 8087 	beq.w	800919a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800908c:	4b96      	ldr	r3, [pc, #600]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f003 030c 	and.w	r3, r3, #12
 8009094:	2b04      	cmp	r3, #4
 8009096:	d00c      	beq.n	80090b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009098:	4b93      	ldr	r3, [pc, #588]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f003 030c 	and.w	r3, r3, #12
 80090a0:	2b08      	cmp	r3, #8
 80090a2:	d112      	bne.n	80090ca <HAL_RCC_OscConfig+0x62>
 80090a4:	4b90      	ldr	r3, [pc, #576]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090b0:	d10b      	bne.n	80090ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090b2:	4b8d      	ldr	r3, [pc, #564]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d06c      	beq.n	8009198 <HAL_RCC_OscConfig+0x130>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d168      	bne.n	8009198 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e26b      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090d2:	d106      	bne.n	80090e2 <HAL_RCC_OscConfig+0x7a>
 80090d4:	4b84      	ldr	r3, [pc, #528]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a83      	ldr	r2, [pc, #524]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80090da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	e02e      	b.n	8009140 <HAL_RCC_OscConfig+0xd8>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10c      	bne.n	8009104 <HAL_RCC_OscConfig+0x9c>
 80090ea:	4b7f      	ldr	r3, [pc, #508]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a7e      	ldr	r2, [pc, #504]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80090f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090f4:	6013      	str	r3, [r2, #0]
 80090f6:	4b7c      	ldr	r3, [pc, #496]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a7b      	ldr	r2, [pc, #492]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80090fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009100:	6013      	str	r3, [r2, #0]
 8009102:	e01d      	b.n	8009140 <HAL_RCC_OscConfig+0xd8>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800910c:	d10c      	bne.n	8009128 <HAL_RCC_OscConfig+0xc0>
 800910e:	4b76      	ldr	r3, [pc, #472]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a75      	ldr	r2, [pc, #468]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 8009114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009118:	6013      	str	r3, [r2, #0]
 800911a:	4b73      	ldr	r3, [pc, #460]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a72      	ldr	r2, [pc, #456]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 8009120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009124:	6013      	str	r3, [r2, #0]
 8009126:	e00b      	b.n	8009140 <HAL_RCC_OscConfig+0xd8>
 8009128:	4b6f      	ldr	r3, [pc, #444]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a6e      	ldr	r2, [pc, #440]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 800912e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009132:	6013      	str	r3, [r2, #0]
 8009134:	4b6c      	ldr	r3, [pc, #432]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a6b      	ldr	r2, [pc, #428]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 800913a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800913e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d013      	beq.n	8009170 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009148:	f7fc fca0 	bl	8005a8c <HAL_GetTick>
 800914c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800914e:	e008      	b.n	8009162 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009150:	f7fc fc9c 	bl	8005a8c <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	2b64      	cmp	r3, #100	; 0x64
 800915c:	d901      	bls.n	8009162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e21f      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009162:	4b61      	ldr	r3, [pc, #388]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d0f0      	beq.n	8009150 <HAL_RCC_OscConfig+0xe8>
 800916e:	e014      	b.n	800919a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009170:	f7fc fc8c 	bl	8005a8c <HAL_GetTick>
 8009174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009176:	e008      	b.n	800918a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009178:	f7fc fc88 	bl	8005a8c <HAL_GetTick>
 800917c:	4602      	mov	r2, r0
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	2b64      	cmp	r3, #100	; 0x64
 8009184:	d901      	bls.n	800918a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e20b      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800918a:	4b57      	ldr	r3, [pc, #348]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1f0      	bne.n	8009178 <HAL_RCC_OscConfig+0x110>
 8009196:	e000      	b.n	800919a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d069      	beq.n	800927a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80091a6:	4b50      	ldr	r3, [pc, #320]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f003 030c 	and.w	r3, r3, #12
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00b      	beq.n	80091ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80091b2:	4b4d      	ldr	r3, [pc, #308]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f003 030c 	and.w	r3, r3, #12
 80091ba:	2b08      	cmp	r3, #8
 80091bc:	d11c      	bne.n	80091f8 <HAL_RCC_OscConfig+0x190>
 80091be:	4b4a      	ldr	r3, [pc, #296]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d116      	bne.n	80091f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80091ca:	4b47      	ldr	r3, [pc, #284]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d005      	beq.n	80091e2 <HAL_RCC_OscConfig+0x17a>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d001      	beq.n	80091e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e1df      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091e2:	4b41      	ldr	r3, [pc, #260]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	00db      	lsls	r3, r3, #3
 80091f0:	493d      	ldr	r1, [pc, #244]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80091f6:	e040      	b.n	800927a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d023      	beq.n	8009248 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009200:	4b39      	ldr	r3, [pc, #228]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a38      	ldr	r2, [pc, #224]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 8009206:	f043 0301 	orr.w	r3, r3, #1
 800920a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800920c:	f7fc fc3e 	bl	8005a8c <HAL_GetTick>
 8009210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009212:	e008      	b.n	8009226 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009214:	f7fc fc3a 	bl	8005a8c <HAL_GetTick>
 8009218:	4602      	mov	r2, r0
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	2b02      	cmp	r3, #2
 8009220:	d901      	bls.n	8009226 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009222:	2303      	movs	r3, #3
 8009224:	e1bd      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009226:	4b30      	ldr	r3, [pc, #192]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 0302 	and.w	r3, r3, #2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d0f0      	beq.n	8009214 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009232:	4b2d      	ldr	r3, [pc, #180]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	4929      	ldr	r1, [pc, #164]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 8009242:	4313      	orrs	r3, r2
 8009244:	600b      	str	r3, [r1, #0]
 8009246:	e018      	b.n	800927a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009248:	4b27      	ldr	r3, [pc, #156]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a26      	ldr	r2, [pc, #152]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 800924e:	f023 0301 	bic.w	r3, r3, #1
 8009252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009254:	f7fc fc1a 	bl	8005a8c <HAL_GetTick>
 8009258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800925a:	e008      	b.n	800926e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800925c:	f7fc fc16 	bl	8005a8c <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b02      	cmp	r3, #2
 8009268:	d901      	bls.n	800926e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e199      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800926e:	4b1e      	ldr	r3, [pc, #120]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1f0      	bne.n	800925c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0308 	and.w	r3, r3, #8
 8009282:	2b00      	cmp	r3, #0
 8009284:	d038      	beq.n	80092f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d019      	beq.n	80092c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800928e:	4b16      	ldr	r3, [pc, #88]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 8009290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009292:	4a15      	ldr	r2, [pc, #84]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 8009294:	f043 0301 	orr.w	r3, r3, #1
 8009298:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800929a:	f7fc fbf7 	bl	8005a8c <HAL_GetTick>
 800929e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092a0:	e008      	b.n	80092b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092a2:	f7fc fbf3 	bl	8005a8c <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d901      	bls.n	80092b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e176      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092b4:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80092b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092b8:	f003 0302 	and.w	r3, r3, #2
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0f0      	beq.n	80092a2 <HAL_RCC_OscConfig+0x23a>
 80092c0:	e01a      	b.n	80092f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092c2:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80092c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092c6:	4a08      	ldr	r2, [pc, #32]	; (80092e8 <HAL_RCC_OscConfig+0x280>)
 80092c8:	f023 0301 	bic.w	r3, r3, #1
 80092cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ce:	f7fc fbdd 	bl	8005a8c <HAL_GetTick>
 80092d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80092d4:	e00a      	b.n	80092ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092d6:	f7fc fbd9 	bl	8005a8c <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d903      	bls.n	80092ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e15c      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
 80092e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80092ec:	4b91      	ldr	r3, [pc, #580]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 80092ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1ee      	bne.n	80092d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0304 	and.w	r3, r3, #4
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 80a4 	beq.w	800944e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009306:	4b8b      	ldr	r3, [pc, #556]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10d      	bne.n	800932e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009312:	4b88      	ldr	r3, [pc, #544]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009316:	4a87      	ldr	r2, [pc, #540]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800931c:	6413      	str	r3, [r2, #64]	; 0x40
 800931e:	4b85      	ldr	r3, [pc, #532]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009326:	60bb      	str	r3, [r7, #8]
 8009328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800932a:	2301      	movs	r3, #1
 800932c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800932e:	4b82      	ldr	r3, [pc, #520]	; (8009538 <HAL_RCC_OscConfig+0x4d0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009336:	2b00      	cmp	r3, #0
 8009338:	d118      	bne.n	800936c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800933a:	4b7f      	ldr	r3, [pc, #508]	; (8009538 <HAL_RCC_OscConfig+0x4d0>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a7e      	ldr	r2, [pc, #504]	; (8009538 <HAL_RCC_OscConfig+0x4d0>)
 8009340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009346:	f7fc fba1 	bl	8005a8c <HAL_GetTick>
 800934a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800934c:	e008      	b.n	8009360 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800934e:	f7fc fb9d 	bl	8005a8c <HAL_GetTick>
 8009352:	4602      	mov	r2, r0
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	2b64      	cmp	r3, #100	; 0x64
 800935a:	d901      	bls.n	8009360 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e120      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009360:	4b75      	ldr	r3, [pc, #468]	; (8009538 <HAL_RCC_OscConfig+0x4d0>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0f0      	beq.n	800934e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d106      	bne.n	8009382 <HAL_RCC_OscConfig+0x31a>
 8009374:	4b6f      	ldr	r3, [pc, #444]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009378:	4a6e      	ldr	r2, [pc, #440]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 800937a:	f043 0301 	orr.w	r3, r3, #1
 800937e:	6713      	str	r3, [r2, #112]	; 0x70
 8009380:	e02d      	b.n	80093de <HAL_RCC_OscConfig+0x376>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10c      	bne.n	80093a4 <HAL_RCC_OscConfig+0x33c>
 800938a:	4b6a      	ldr	r3, [pc, #424]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 800938c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938e:	4a69      	ldr	r2, [pc, #420]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009390:	f023 0301 	bic.w	r3, r3, #1
 8009394:	6713      	str	r3, [r2, #112]	; 0x70
 8009396:	4b67      	ldr	r3, [pc, #412]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800939a:	4a66      	ldr	r2, [pc, #408]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 800939c:	f023 0304 	bic.w	r3, r3, #4
 80093a0:	6713      	str	r3, [r2, #112]	; 0x70
 80093a2:	e01c      	b.n	80093de <HAL_RCC_OscConfig+0x376>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	2b05      	cmp	r3, #5
 80093aa:	d10c      	bne.n	80093c6 <HAL_RCC_OscConfig+0x35e>
 80093ac:	4b61      	ldr	r3, [pc, #388]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 80093ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b0:	4a60      	ldr	r2, [pc, #384]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 80093b2:	f043 0304 	orr.w	r3, r3, #4
 80093b6:	6713      	str	r3, [r2, #112]	; 0x70
 80093b8:	4b5e      	ldr	r3, [pc, #376]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 80093ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093bc:	4a5d      	ldr	r2, [pc, #372]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 80093be:	f043 0301 	orr.w	r3, r3, #1
 80093c2:	6713      	str	r3, [r2, #112]	; 0x70
 80093c4:	e00b      	b.n	80093de <HAL_RCC_OscConfig+0x376>
 80093c6:	4b5b      	ldr	r3, [pc, #364]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 80093c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ca:	4a5a      	ldr	r2, [pc, #360]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 80093cc:	f023 0301 	bic.w	r3, r3, #1
 80093d0:	6713      	str	r3, [r2, #112]	; 0x70
 80093d2:	4b58      	ldr	r3, [pc, #352]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 80093d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d6:	4a57      	ldr	r2, [pc, #348]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 80093d8:	f023 0304 	bic.w	r3, r3, #4
 80093dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d015      	beq.n	8009412 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093e6:	f7fc fb51 	bl	8005a8c <HAL_GetTick>
 80093ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093ec:	e00a      	b.n	8009404 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093ee:	f7fc fb4d 	bl	8005a8c <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d901      	bls.n	8009404 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e0ce      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009404:	4b4b      	ldr	r3, [pc, #300]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009408:	f003 0302 	and.w	r3, r3, #2
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0ee      	beq.n	80093ee <HAL_RCC_OscConfig+0x386>
 8009410:	e014      	b.n	800943c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009412:	f7fc fb3b 	bl	8005a8c <HAL_GetTick>
 8009416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009418:	e00a      	b.n	8009430 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800941a:	f7fc fb37 	bl	8005a8c <HAL_GetTick>
 800941e:	4602      	mov	r2, r0
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	f241 3288 	movw	r2, #5000	; 0x1388
 8009428:	4293      	cmp	r3, r2
 800942a:	d901      	bls.n	8009430 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e0b8      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009430:	4b40      	ldr	r3, [pc, #256]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009434:	f003 0302 	and.w	r3, r3, #2
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1ee      	bne.n	800941a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d105      	bne.n	800944e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009442:	4b3c      	ldr	r3, [pc, #240]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009446:	4a3b      	ldr	r2, [pc, #236]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800944c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 80a4 	beq.w	80095a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009458:	4b36      	ldr	r3, [pc, #216]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f003 030c 	and.w	r3, r3, #12
 8009460:	2b08      	cmp	r3, #8
 8009462:	d06b      	beq.n	800953c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	2b02      	cmp	r3, #2
 800946a:	d149      	bne.n	8009500 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800946c:	4b31      	ldr	r3, [pc, #196]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a30      	ldr	r2, [pc, #192]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009478:	f7fc fb08 	bl	8005a8c <HAL_GetTick>
 800947c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800947e:	e008      	b.n	8009492 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009480:	f7fc fb04 	bl	8005a8c <HAL_GetTick>
 8009484:	4602      	mov	r2, r0
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	2b02      	cmp	r3, #2
 800948c:	d901      	bls.n	8009492 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e087      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009492:	4b28      	ldr	r3, [pc, #160]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1f0      	bne.n	8009480 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	69da      	ldr	r2, [r3, #28]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	431a      	orrs	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ac:	019b      	lsls	r3, r3, #6
 80094ae:	431a      	orrs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b4:	085b      	lsrs	r3, r3, #1
 80094b6:	3b01      	subs	r3, #1
 80094b8:	041b      	lsls	r3, r3, #16
 80094ba:	431a      	orrs	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	061b      	lsls	r3, r3, #24
 80094c2:	4313      	orrs	r3, r2
 80094c4:	4a1b      	ldr	r2, [pc, #108]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 80094c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094ca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094cc:	4b19      	ldr	r3, [pc, #100]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a18      	ldr	r2, [pc, #96]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 80094d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094d8:	f7fc fad8 	bl	8005a8c <HAL_GetTick>
 80094dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094de:	e008      	b.n	80094f2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094e0:	f7fc fad4 	bl	8005a8c <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d901      	bls.n	80094f2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e057      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094f2:	4b10      	ldr	r3, [pc, #64]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0f0      	beq.n	80094e0 <HAL_RCC_OscConfig+0x478>
 80094fe:	e04f      	b.n	80095a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009500:	4b0c      	ldr	r3, [pc, #48]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a0b      	ldr	r2, [pc, #44]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800950a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800950c:	f7fc fabe 	bl	8005a8c <HAL_GetTick>
 8009510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009512:	e008      	b.n	8009526 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009514:	f7fc faba 	bl	8005a8c <HAL_GetTick>
 8009518:	4602      	mov	r2, r0
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	2b02      	cmp	r3, #2
 8009520:	d901      	bls.n	8009526 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e03d      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009526:	4b03      	ldr	r3, [pc, #12]	; (8009534 <HAL_RCC_OscConfig+0x4cc>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1f0      	bne.n	8009514 <HAL_RCC_OscConfig+0x4ac>
 8009532:	e035      	b.n	80095a0 <HAL_RCC_OscConfig+0x538>
 8009534:	40023800 	.word	0x40023800
 8009538:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800953c:	4b1b      	ldr	r3, [pc, #108]	; (80095ac <HAL_RCC_OscConfig+0x544>)
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d028      	beq.n	800959c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009554:	429a      	cmp	r2, r3
 8009556:	d121      	bne.n	800959c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009562:	429a      	cmp	r2, r3
 8009564:	d11a      	bne.n	800959c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800956c:	4013      	ands	r3, r2
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009572:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009574:	4293      	cmp	r3, r2
 8009576:	d111      	bne.n	800959c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009582:	085b      	lsrs	r3, r3, #1
 8009584:	3b01      	subs	r3, #1
 8009586:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009588:	429a      	cmp	r2, r3
 800958a:	d107      	bne.n	800959c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009596:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009598:	429a      	cmp	r2, r3
 800959a:	d001      	beq.n	80095a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e000      	b.n	80095a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3718      	adds	r7, #24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	40023800 	.word	0x40023800

080095b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d101      	bne.n	80095c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e0d0      	b.n	800976a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80095c8:	4b6a      	ldr	r3, [pc, #424]	; (8009774 <HAL_RCC_ClockConfig+0x1c4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 030f 	and.w	r3, r3, #15
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d910      	bls.n	80095f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095d6:	4b67      	ldr	r3, [pc, #412]	; (8009774 <HAL_RCC_ClockConfig+0x1c4>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f023 020f 	bic.w	r2, r3, #15
 80095de:	4965      	ldr	r1, [pc, #404]	; (8009774 <HAL_RCC_ClockConfig+0x1c4>)
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095e6:	4b63      	ldr	r3, [pc, #396]	; (8009774 <HAL_RCC_ClockConfig+0x1c4>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 030f 	and.w	r3, r3, #15
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d001      	beq.n	80095f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e0b8      	b.n	800976a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0302 	and.w	r3, r3, #2
 8009600:	2b00      	cmp	r3, #0
 8009602:	d020      	beq.n	8009646 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 0304 	and.w	r3, r3, #4
 800960c:	2b00      	cmp	r3, #0
 800960e:	d005      	beq.n	800961c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009610:	4b59      	ldr	r3, [pc, #356]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	4a58      	ldr	r2, [pc, #352]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 8009616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800961a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0308 	and.w	r3, r3, #8
 8009624:	2b00      	cmp	r3, #0
 8009626:	d005      	beq.n	8009634 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009628:	4b53      	ldr	r3, [pc, #332]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	4a52      	ldr	r2, [pc, #328]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 800962e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009632:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009634:	4b50      	ldr	r3, [pc, #320]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	494d      	ldr	r1, [pc, #308]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 8009642:	4313      	orrs	r3, r2
 8009644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d040      	beq.n	80096d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d107      	bne.n	800966a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800965a:	4b47      	ldr	r3, [pc, #284]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d115      	bne.n	8009692 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e07f      	b.n	800976a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	2b02      	cmp	r3, #2
 8009670:	d107      	bne.n	8009682 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009672:	4b41      	ldr	r3, [pc, #260]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d109      	bne.n	8009692 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e073      	b.n	800976a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009682:	4b3d      	ldr	r3, [pc, #244]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0302 	and.w	r3, r3, #2
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e06b      	b.n	800976a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009692:	4b39      	ldr	r3, [pc, #228]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f023 0203 	bic.w	r2, r3, #3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	4936      	ldr	r1, [pc, #216]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 80096a0:	4313      	orrs	r3, r2
 80096a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096a4:	f7fc f9f2 	bl	8005a8c <HAL_GetTick>
 80096a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096aa:	e00a      	b.n	80096c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096ac:	f7fc f9ee 	bl	8005a8c <HAL_GetTick>
 80096b0:	4602      	mov	r2, r0
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	1ad3      	subs	r3, r2, r3
 80096b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d901      	bls.n	80096c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e053      	b.n	800976a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096c2:	4b2d      	ldr	r3, [pc, #180]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	f003 020c 	and.w	r2, r3, #12
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d1eb      	bne.n	80096ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80096d4:	4b27      	ldr	r3, [pc, #156]	; (8009774 <HAL_RCC_ClockConfig+0x1c4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 030f 	and.w	r3, r3, #15
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d210      	bcs.n	8009704 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096e2:	4b24      	ldr	r3, [pc, #144]	; (8009774 <HAL_RCC_ClockConfig+0x1c4>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f023 020f 	bic.w	r2, r3, #15
 80096ea:	4922      	ldr	r1, [pc, #136]	; (8009774 <HAL_RCC_ClockConfig+0x1c4>)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096f2:	4b20      	ldr	r3, [pc, #128]	; (8009774 <HAL_RCC_ClockConfig+0x1c4>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d001      	beq.n	8009704 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e032      	b.n	800976a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0304 	and.w	r3, r3, #4
 800970c:	2b00      	cmp	r3, #0
 800970e:	d008      	beq.n	8009722 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009710:	4b19      	ldr	r3, [pc, #100]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	4916      	ldr	r1, [pc, #88]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 800971e:	4313      	orrs	r3, r2
 8009720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0308 	and.w	r3, r3, #8
 800972a:	2b00      	cmp	r3, #0
 800972c:	d009      	beq.n	8009742 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800972e:	4b12      	ldr	r3, [pc, #72]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	00db      	lsls	r3, r3, #3
 800973c:	490e      	ldr	r1, [pc, #56]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 800973e:	4313      	orrs	r3, r2
 8009740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009742:	f000 f821 	bl	8009788 <HAL_RCC_GetSysClockFreq>
 8009746:	4602      	mov	r2, r0
 8009748:	4b0b      	ldr	r3, [pc, #44]	; (8009778 <HAL_RCC_ClockConfig+0x1c8>)
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	091b      	lsrs	r3, r3, #4
 800974e:	f003 030f 	and.w	r3, r3, #15
 8009752:	490a      	ldr	r1, [pc, #40]	; (800977c <HAL_RCC_ClockConfig+0x1cc>)
 8009754:	5ccb      	ldrb	r3, [r1, r3]
 8009756:	fa22 f303 	lsr.w	r3, r2, r3
 800975a:	4a09      	ldr	r2, [pc, #36]	; (8009780 <HAL_RCC_ClockConfig+0x1d0>)
 800975c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800975e:	4b09      	ldr	r3, [pc, #36]	; (8009784 <HAL_RCC_ClockConfig+0x1d4>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4618      	mov	r0, r3
 8009764:	f7fc f854 	bl	8005810 <HAL_InitTick>

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	40023c00 	.word	0x40023c00
 8009778:	40023800 	.word	0x40023800
 800977c:	0808f6e0 	.word	0x0808f6e0
 8009780:	20000040 	.word	0x20000040
 8009784:	20000044 	.word	0x20000044

08009788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009788:	b5b0      	push	{r4, r5, r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800978e:	2100      	movs	r1, #0
 8009790:	6079      	str	r1, [r7, #4]
 8009792:	2100      	movs	r1, #0
 8009794:	60f9      	str	r1, [r7, #12]
 8009796:	2100      	movs	r1, #0
 8009798:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800979a:	2100      	movs	r1, #0
 800979c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800979e:	4952      	ldr	r1, [pc, #328]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80097a0:	6889      	ldr	r1, [r1, #8]
 80097a2:	f001 010c 	and.w	r1, r1, #12
 80097a6:	2908      	cmp	r1, #8
 80097a8:	d00d      	beq.n	80097c6 <HAL_RCC_GetSysClockFreq+0x3e>
 80097aa:	2908      	cmp	r1, #8
 80097ac:	f200 8094 	bhi.w	80098d8 <HAL_RCC_GetSysClockFreq+0x150>
 80097b0:	2900      	cmp	r1, #0
 80097b2:	d002      	beq.n	80097ba <HAL_RCC_GetSysClockFreq+0x32>
 80097b4:	2904      	cmp	r1, #4
 80097b6:	d003      	beq.n	80097c0 <HAL_RCC_GetSysClockFreq+0x38>
 80097b8:	e08e      	b.n	80098d8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80097ba:	4b4c      	ldr	r3, [pc, #304]	; (80098ec <HAL_RCC_GetSysClockFreq+0x164>)
 80097bc:	60bb      	str	r3, [r7, #8]
      break;
 80097be:	e08e      	b.n	80098de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80097c0:	4b4b      	ldr	r3, [pc, #300]	; (80098f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80097c2:	60bb      	str	r3, [r7, #8]
      break;
 80097c4:	e08b      	b.n	80098de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80097c6:	4948      	ldr	r1, [pc, #288]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80097c8:	6849      	ldr	r1, [r1, #4]
 80097ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80097ce:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80097d0:	4945      	ldr	r1, [pc, #276]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80097d2:	6849      	ldr	r1, [r1, #4]
 80097d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80097d8:	2900      	cmp	r1, #0
 80097da:	d024      	beq.n	8009826 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097dc:	4942      	ldr	r1, [pc, #264]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80097de:	6849      	ldr	r1, [r1, #4]
 80097e0:	0989      	lsrs	r1, r1, #6
 80097e2:	4608      	mov	r0, r1
 80097e4:	f04f 0100 	mov.w	r1, #0
 80097e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80097ec:	f04f 0500 	mov.w	r5, #0
 80097f0:	ea00 0204 	and.w	r2, r0, r4
 80097f4:	ea01 0305 	and.w	r3, r1, r5
 80097f8:	493d      	ldr	r1, [pc, #244]	; (80098f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80097fa:	fb01 f003 	mul.w	r0, r1, r3
 80097fe:	2100      	movs	r1, #0
 8009800:	fb01 f102 	mul.w	r1, r1, r2
 8009804:	1844      	adds	r4, r0, r1
 8009806:	493a      	ldr	r1, [pc, #232]	; (80098f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8009808:	fba2 0101 	umull	r0, r1, r2, r1
 800980c:	1863      	adds	r3, r4, r1
 800980e:	4619      	mov	r1, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	461a      	mov	r2, r3
 8009814:	f04f 0300 	mov.w	r3, #0
 8009818:	f7f7 f9b6 	bl	8000b88 <__aeabi_uldivmod>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4613      	mov	r3, r2
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	e04a      	b.n	80098bc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009826:	4b30      	ldr	r3, [pc, #192]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	099b      	lsrs	r3, r3, #6
 800982c:	461a      	mov	r2, r3
 800982e:	f04f 0300 	mov.w	r3, #0
 8009832:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009836:	f04f 0100 	mov.w	r1, #0
 800983a:	ea02 0400 	and.w	r4, r2, r0
 800983e:	ea03 0501 	and.w	r5, r3, r1
 8009842:	4620      	mov	r0, r4
 8009844:	4629      	mov	r1, r5
 8009846:	f04f 0200 	mov.w	r2, #0
 800984a:	f04f 0300 	mov.w	r3, #0
 800984e:	014b      	lsls	r3, r1, #5
 8009850:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009854:	0142      	lsls	r2, r0, #5
 8009856:	4610      	mov	r0, r2
 8009858:	4619      	mov	r1, r3
 800985a:	1b00      	subs	r0, r0, r4
 800985c:	eb61 0105 	sbc.w	r1, r1, r5
 8009860:	f04f 0200 	mov.w	r2, #0
 8009864:	f04f 0300 	mov.w	r3, #0
 8009868:	018b      	lsls	r3, r1, #6
 800986a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800986e:	0182      	lsls	r2, r0, #6
 8009870:	1a12      	subs	r2, r2, r0
 8009872:	eb63 0301 	sbc.w	r3, r3, r1
 8009876:	f04f 0000 	mov.w	r0, #0
 800987a:	f04f 0100 	mov.w	r1, #0
 800987e:	00d9      	lsls	r1, r3, #3
 8009880:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009884:	00d0      	lsls	r0, r2, #3
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	1912      	adds	r2, r2, r4
 800988c:	eb45 0303 	adc.w	r3, r5, r3
 8009890:	f04f 0000 	mov.w	r0, #0
 8009894:	f04f 0100 	mov.w	r1, #0
 8009898:	0299      	lsls	r1, r3, #10
 800989a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800989e:	0290      	lsls	r0, r2, #10
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	4610      	mov	r0, r2
 80098a6:	4619      	mov	r1, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	461a      	mov	r2, r3
 80098ac:	f04f 0300 	mov.w	r3, #0
 80098b0:	f7f7 f96a 	bl	8000b88 <__aeabi_uldivmod>
 80098b4:	4602      	mov	r2, r0
 80098b6:	460b      	mov	r3, r1
 80098b8:	4613      	mov	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80098bc:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	0c1b      	lsrs	r3, r3, #16
 80098c2:	f003 0303 	and.w	r3, r3, #3
 80098c6:	3301      	adds	r3, #1
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d4:	60bb      	str	r3, [r7, #8]
      break;
 80098d6:	e002      	b.n	80098de <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80098d8:	4b04      	ldr	r3, [pc, #16]	; (80098ec <HAL_RCC_GetSysClockFreq+0x164>)
 80098da:	60bb      	str	r3, [r7, #8]
      break;
 80098dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80098de:	68bb      	ldr	r3, [r7, #8]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bdb0      	pop	{r4, r5, r7, pc}
 80098e8:	40023800 	.word	0x40023800
 80098ec:	00f42400 	.word	0x00f42400
 80098f0:	017d7840 	.word	0x017d7840

080098f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098f4:	b480      	push	{r7}
 80098f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80098f8:	4b03      	ldr	r3, [pc, #12]	; (8009908 <HAL_RCC_GetHCLKFreq+0x14>)
 80098fa:	681b      	ldr	r3, [r3, #0]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	20000040 	.word	0x20000040

0800990c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009910:	f7ff fff0 	bl	80098f4 <HAL_RCC_GetHCLKFreq>
 8009914:	4602      	mov	r2, r0
 8009916:	4b05      	ldr	r3, [pc, #20]	; (800992c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	0a9b      	lsrs	r3, r3, #10
 800991c:	f003 0307 	and.w	r3, r3, #7
 8009920:	4903      	ldr	r1, [pc, #12]	; (8009930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009922:	5ccb      	ldrb	r3, [r1, r3]
 8009924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009928:	4618      	mov	r0, r3
 800992a:	bd80      	pop	{r7, pc}
 800992c:	40023800 	.word	0x40023800
 8009930:	0808f6f0 	.word	0x0808f6f0

08009934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009938:	f7ff ffdc 	bl	80098f4 <HAL_RCC_GetHCLKFreq>
 800993c:	4602      	mov	r2, r0
 800993e:	4b05      	ldr	r3, [pc, #20]	; (8009954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	0b5b      	lsrs	r3, r3, #13
 8009944:	f003 0307 	and.w	r3, r3, #7
 8009948:	4903      	ldr	r1, [pc, #12]	; (8009958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800994a:	5ccb      	ldrb	r3, [r1, r3]
 800994c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009950:	4618      	mov	r0, r3
 8009952:	bd80      	pop	{r7, pc}
 8009954:	40023800 	.word	0x40023800
 8009958:	0808f6f0 	.word	0x0808f6f0

0800995c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	220f      	movs	r2, #15
 800996a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800996c:	4b12      	ldr	r3, [pc, #72]	; (80099b8 <HAL_RCC_GetClockConfig+0x5c>)
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f003 0203 	and.w	r2, r3, #3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009978:	4b0f      	ldr	r3, [pc, #60]	; (80099b8 <HAL_RCC_GetClockConfig+0x5c>)
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009984:	4b0c      	ldr	r3, [pc, #48]	; (80099b8 <HAL_RCC_GetClockConfig+0x5c>)
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009990:	4b09      	ldr	r3, [pc, #36]	; (80099b8 <HAL_RCC_GetClockConfig+0x5c>)
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	08db      	lsrs	r3, r3, #3
 8009996:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800999e:	4b07      	ldr	r3, [pc, #28]	; (80099bc <HAL_RCC_GetClockConfig+0x60>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 020f 	and.w	r2, r3, #15
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	601a      	str	r2, [r3, #0]
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	40023800 	.word	0x40023800
 80099bc:	40023c00 	.word	0x40023c00

080099c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b088      	sub	sp, #32
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d012      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80099e8:	4b69      	ldr	r3, [pc, #420]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	4a68      	ldr	r2, [pc, #416]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80099f2:	6093      	str	r3, [r2, #8]
 80099f4:	4b66      	ldr	r3, [pc, #408]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099fc:	4964      	ldr	r1, [pc, #400]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d017      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a1a:	4b5d      	ldr	r3, [pc, #372]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a28:	4959      	ldr	r1, [pc, #356]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a38:	d101      	bne.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009a46:	2301      	movs	r3, #1
 8009a48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d017      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009a56:	4b4e      	ldr	r3, [pc, #312]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a64:	494a      	ldr	r1, [pc, #296]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a74:	d101      	bne.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009a76:	2301      	movs	r3, #1
 8009a78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009a82:	2301      	movs	r3, #1
 8009a84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009a92:	2301      	movs	r3, #1
 8009a94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 0320 	and.w	r3, r3, #32
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 808b 	beq.w	8009bba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009aa4:	4b3a      	ldr	r3, [pc, #232]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa8:	4a39      	ldr	r2, [pc, #228]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aae:	6413      	str	r3, [r2, #64]	; 0x40
 8009ab0:	4b37      	ldr	r3, [pc, #220]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ab8:	60bb      	str	r3, [r7, #8]
 8009aba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009abc:	4b35      	ldr	r3, [pc, #212]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a34      	ldr	r2, [pc, #208]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ac8:	f7fb ffe0 	bl	8005a8c <HAL_GetTick>
 8009acc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009ace:	e008      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ad0:	f7fb ffdc 	bl	8005a8c <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	2b64      	cmp	r3, #100	; 0x64
 8009adc:	d901      	bls.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e357      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009ae2:	4b2c      	ldr	r3, [pc, #176]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d0f0      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009aee:	4b28      	ldr	r3, [pc, #160]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009af6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d035      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d02e      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b0c:	4b20      	ldr	r3, [pc, #128]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009b16:	4b1e      	ldr	r3, [pc, #120]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b1a:	4a1d      	ldr	r2, [pc, #116]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009b22:	4b1b      	ldr	r3, [pc, #108]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b26:	4a1a      	ldr	r2, [pc, #104]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009b2e:	4a18      	ldr	r2, [pc, #96]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009b34:	4b16      	ldr	r3, [pc, #88]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d114      	bne.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b40:	f7fb ffa4 	bl	8005a8c <HAL_GetTick>
 8009b44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b46:	e00a      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b48:	f7fb ffa0 	bl	8005a8c <HAL_GetTick>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d901      	bls.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e319      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b5e:	4b0c      	ldr	r3, [pc, #48]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b62:	f003 0302 	and.w	r3, r3, #2
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d0ee      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b76:	d111      	bne.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009b78:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009b84:	4b04      	ldr	r3, [pc, #16]	; (8009b98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009b86:	400b      	ands	r3, r1
 8009b88:	4901      	ldr	r1, [pc, #4]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	608b      	str	r3, [r1, #8]
 8009b8e:	e00b      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009b90:	40023800 	.word	0x40023800
 8009b94:	40007000 	.word	0x40007000
 8009b98:	0ffffcff 	.word	0x0ffffcff
 8009b9c:	4bb1      	ldr	r3, [pc, #708]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	4ab0      	ldr	r2, [pc, #704]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009ba2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009ba6:	6093      	str	r3, [r2, #8]
 8009ba8:	4bae      	ldr	r3, [pc, #696]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bb4:	49ab      	ldr	r1, [pc, #684]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 0310 	and.w	r3, r3, #16
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d010      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009bc6:	4ba7      	ldr	r3, [pc, #668]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bcc:	4aa5      	ldr	r2, [pc, #660]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009bd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009bd6:	4ba3      	ldr	r3, [pc, #652]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be0:	49a0      	ldr	r1, [pc, #640]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00a      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009bf4:	4b9b      	ldr	r3, [pc, #620]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c02:	4998      	ldr	r1, [pc, #608]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009c16:	4b93      	ldr	r3, [pc, #588]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c24:	498f      	ldr	r1, [pc, #572]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00a      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009c38:	4b8a      	ldr	r3, [pc, #552]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c46:	4987      	ldr	r1, [pc, #540]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c5a:	4b82      	ldr	r3, [pc, #520]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c68:	497e      	ldr	r1, [pc, #504]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c7c:	4b79      	ldr	r3, [pc, #484]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c82:	f023 0203 	bic.w	r2, r3, #3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8a:	4976      	ldr	r1, [pc, #472]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c9e:	4b71      	ldr	r3, [pc, #452]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca4:	f023 020c 	bic.w	r2, r3, #12
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cac:	496d      	ldr	r1, [pc, #436]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00a      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009cc0:	4b68      	ldr	r3, [pc, #416]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cce:	4965      	ldr	r1, [pc, #404]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00a      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ce2:	4b60      	ldr	r3, [pc, #384]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ce8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cf0:	495c      	ldr	r1, [pc, #368]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00a      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009d04:	4b57      	ldr	r3, [pc, #348]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d12:	4954      	ldr	r1, [pc, #336]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d14:	4313      	orrs	r3, r2
 8009d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00a      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009d26:	4b4f      	ldr	r3, [pc, #316]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d34:	494b      	ldr	r1, [pc, #300]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00a      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009d48:	4b46      	ldr	r3, [pc, #280]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d56:	4943      	ldr	r1, [pc, #268]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009d6a:	4b3e      	ldr	r3, [pc, #248]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d78:	493a      	ldr	r1, [pc, #232]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00a      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d8c:	4b35      	ldr	r3, [pc, #212]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d92:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d9a:	4932      	ldr	r1, [pc, #200]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d011      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009dae:	4b2d      	ldr	r3, [pc, #180]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009db4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dbc:	4929      	ldr	r1, [pc, #164]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dcc:	d101      	bne.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f003 0308 	and.w	r3, r3, #8
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009dde:	2301      	movs	r3, #1
 8009de0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00a      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009dee:	4b1d      	ldr	r3, [pc, #116]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009df4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dfc:	4919      	ldr	r1, [pc, #100]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00b      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009e10:	4b14      	ldr	r3, [pc, #80]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e16:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e20:	4910      	ldr	r1, [pc, #64]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d006      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 80d9 	beq.w	8009fee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009e3c:	4b09      	ldr	r3, [pc, #36]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a08      	ldr	r2, [pc, #32]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009e42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e48:	f7fb fe20 	bl	8005a8c <HAL_GetTick>
 8009e4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009e4e:	e00b      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009e50:	f7fb fe1c 	bl	8005a8c <HAL_GetTick>
 8009e54:	4602      	mov	r2, r0
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	2b64      	cmp	r3, #100	; 0x64
 8009e5c:	d904      	bls.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	e197      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009e62:	bf00      	nop
 8009e64:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009e68:	4b6c      	ldr	r3, [pc, #432]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1ed      	bne.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d021      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d11d      	bne.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009e88:	4b64      	ldr	r3, [pc, #400]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e8e:	0c1b      	lsrs	r3, r3, #16
 8009e90:	f003 0303 	and.w	r3, r3, #3
 8009e94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009e96:	4b61      	ldr	r3, [pc, #388]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e9c:	0e1b      	lsrs	r3, r3, #24
 8009e9e:	f003 030f 	and.w	r3, r3, #15
 8009ea2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	019a      	lsls	r2, r3, #6
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	041b      	lsls	r3, r3, #16
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	061b      	lsls	r3, r3, #24
 8009eb4:	431a      	orrs	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	071b      	lsls	r3, r3, #28
 8009ebc:	4957      	ldr	r1, [pc, #348]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d004      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ed8:	d00a      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d02e      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009eee:	d129      	bne.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009ef0:	4b4a      	ldr	r3, [pc, #296]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ef6:	0c1b      	lsrs	r3, r3, #16
 8009ef8:	f003 0303 	and.w	r3, r3, #3
 8009efc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009efe:	4b47      	ldr	r3, [pc, #284]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f04:	0f1b      	lsrs	r3, r3, #28
 8009f06:	f003 0307 	and.w	r3, r3, #7
 8009f0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	019a      	lsls	r2, r3, #6
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	041b      	lsls	r3, r3, #16
 8009f16:	431a      	orrs	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	061b      	lsls	r3, r3, #24
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	071b      	lsls	r3, r3, #28
 8009f24:	493d      	ldr	r1, [pc, #244]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009f2c:	4b3b      	ldr	r3, [pc, #236]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f32:	f023 021f 	bic.w	r2, r3, #31
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	4937      	ldr	r1, [pc, #220]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d01d      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009f50:	4b32      	ldr	r3, [pc, #200]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f56:	0e1b      	lsrs	r3, r3, #24
 8009f58:	f003 030f 	and.w	r3, r3, #15
 8009f5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009f5e:	4b2f      	ldr	r3, [pc, #188]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f64:	0f1b      	lsrs	r3, r3, #28
 8009f66:	f003 0307 	and.w	r3, r3, #7
 8009f6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	019a      	lsls	r2, r3, #6
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	041b      	lsls	r3, r3, #16
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	061b      	lsls	r3, r3, #24
 8009f7e:	431a      	orrs	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	071b      	lsls	r3, r3, #28
 8009f84:	4925      	ldr	r1, [pc, #148]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d011      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	019a      	lsls	r2, r3, #6
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	041b      	lsls	r3, r3, #16
 8009fa4:	431a      	orrs	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	061b      	lsls	r3, r3, #24
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	071b      	lsls	r3, r3, #28
 8009fb4:	4919      	ldr	r1, [pc, #100]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009fbc:	4b17      	ldr	r3, [pc, #92]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a16      	ldr	r2, [pc, #88]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009fc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fc8:	f7fb fd60 	bl	8005a8c <HAL_GetTick>
 8009fcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009fce:	e008      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009fd0:	f7fb fd5c 	bl	8005a8c <HAL_GetTick>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	2b64      	cmp	r3, #100	; 0x64
 8009fdc:	d901      	bls.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e0d7      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009fe2:	4b0e      	ldr	r3, [pc, #56]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0f0      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	f040 80cd 	bne.w	800a190 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009ff6:	4b09      	ldr	r3, [pc, #36]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a08      	ldr	r2, [pc, #32]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a002:	f7fb fd43 	bl	8005a8c <HAL_GetTick>
 800a006:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a008:	e00a      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a00a:	f7fb fd3f 	bl	8005a8c <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	2b64      	cmp	r3, #100	; 0x64
 800a016:	d903      	bls.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a018:	2303      	movs	r3, #3
 800a01a:	e0ba      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a01c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a020:	4b5e      	ldr	r3, [pc, #376]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a02c:	d0ed      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d009      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d02e      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a052:	2b00      	cmp	r3, #0
 800a054:	d12a      	bne.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a056:	4b51      	ldr	r3, [pc, #324]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a05c:	0c1b      	lsrs	r3, r3, #16
 800a05e:	f003 0303 	and.w	r3, r3, #3
 800a062:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a064:	4b4d      	ldr	r3, [pc, #308]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a06a:	0f1b      	lsrs	r3, r3, #28
 800a06c:	f003 0307 	and.w	r3, r3, #7
 800a070:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	019a      	lsls	r2, r3, #6
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	041b      	lsls	r3, r3, #16
 800a07c:	431a      	orrs	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	061b      	lsls	r3, r3, #24
 800a084:	431a      	orrs	r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	071b      	lsls	r3, r3, #28
 800a08a:	4944      	ldr	r1, [pc, #272]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a092:	4b42      	ldr	r3, [pc, #264]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a098:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	021b      	lsls	r3, r3, #8
 800a0a4:	493d      	ldr	r1, [pc, #244]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d022      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0c0:	d11d      	bne.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a0c2:	4b36      	ldr	r3, [pc, #216]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c8:	0e1b      	lsrs	r3, r3, #24
 800a0ca:	f003 030f 	and.w	r3, r3, #15
 800a0ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a0d0:	4b32      	ldr	r3, [pc, #200]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d6:	0f1b      	lsrs	r3, r3, #28
 800a0d8:	f003 0307 	and.w	r3, r3, #7
 800a0dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	019a      	lsls	r2, r3, #6
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	041b      	lsls	r3, r3, #16
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	061b      	lsls	r3, r3, #24
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	071b      	lsls	r3, r3, #28
 800a0f6:	4929      	ldr	r1, [pc, #164]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 0308 	and.w	r3, r3, #8
 800a106:	2b00      	cmp	r3, #0
 800a108:	d028      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a10a:	4b24      	ldr	r3, [pc, #144]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a110:	0e1b      	lsrs	r3, r3, #24
 800a112:	f003 030f 	and.w	r3, r3, #15
 800a116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a118:	4b20      	ldr	r3, [pc, #128]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a11e:	0c1b      	lsrs	r3, r3, #16
 800a120:	f003 0303 	and.w	r3, r3, #3
 800a124:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	019a      	lsls	r2, r3, #6
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	041b      	lsls	r3, r3, #16
 800a130:	431a      	orrs	r2, r3
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	061b      	lsls	r3, r3, #24
 800a136:	431a      	orrs	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	69db      	ldr	r3, [r3, #28]
 800a13c:	071b      	lsls	r3, r3, #28
 800a13e:	4917      	ldr	r1, [pc, #92]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a140:	4313      	orrs	r3, r2
 800a142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a146:	4b15      	ldr	r3, [pc, #84]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a14c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a154:	4911      	ldr	r1, [pc, #68]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a156:	4313      	orrs	r3, r2
 800a158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a15c:	4b0f      	ldr	r3, [pc, #60]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a0e      	ldr	r2, [pc, #56]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a168:	f7fb fc90 	bl	8005a8c <HAL_GetTick>
 800a16c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a16e:	e008      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a170:	f7fb fc8c 	bl	8005a8c <HAL_GetTick>
 800a174:	4602      	mov	r2, r0
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	2b64      	cmp	r3, #100	; 0x64
 800a17c:	d901      	bls.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e007      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a182:	4b06      	ldr	r3, [pc, #24]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a18a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a18e:	d1ef      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3720      	adds	r7, #32
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	40023800 	.word	0x40023800

0800a1a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e081      	b.n	800a2b6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	7f5b      	ldrb	r3, [r3, #29]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d105      	bne.n	800a1c8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7fb f844 	bl	8005250 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2202      	movs	r2, #2
 800a1cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	22ca      	movs	r2, #202	; 0xca
 800a1d4:	625a      	str	r2, [r3, #36]	; 0x24
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2253      	movs	r2, #83	; 0x53
 800a1dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fb16 	bl	800a810 <RTC_EnterInitMode>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d008      	beq.n	800a1fc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	22ff      	movs	r2, #255	; 0xff
 800a1f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2204      	movs	r2, #4
 800a1f6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e05c      	b.n	800a2b6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6899      	ldr	r1, [r3, #8]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	4b2e      	ldr	r3, [pc, #184]	; (800a2c0 <HAL_RTC_Init+0x120>)
 800a208:	400b      	ands	r3, r1
 800a20a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6899      	ldr	r1, [r3, #8]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	431a      	orrs	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	695b      	ldr	r3, [r3, #20]
 800a220:	431a      	orrs	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	430a      	orrs	r2, r1
 800a228:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	68d2      	ldr	r2, [r2, #12]
 800a232:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6919      	ldr	r1, [r3, #16]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	041a      	lsls	r2, r3, #16
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	430a      	orrs	r2, r1
 800a246:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68da      	ldr	r2, [r3, #12]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a256:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	f003 0320 	and.w	r3, r3, #32
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10e      	bne.n	800a284 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 faaa 	bl	800a7c0 <HAL_RTC_WaitForSynchro>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d008      	beq.n	800a284 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	22ff      	movs	r2, #255	; 0xff
 800a278:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2204      	movs	r2, #4
 800a27e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	e018      	b.n	800a2b6 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f022 0208 	bic.w	r2, r2, #8
 800a292:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	699a      	ldr	r2, [r3, #24]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	22ff      	movs	r2, #255	; 0xff
 800a2ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
  }
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	ff8fffbf 	.word	0xff8fffbf

0800a2c4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a2c4:	b590      	push	{r4, r7, lr}
 800a2c6:	b087      	sub	sp, #28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	7f1b      	ldrb	r3, [r3, #28]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d101      	bne.n	800a2e0 <HAL_RTC_SetTime+0x1c>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	e0a8      	b.n	800a432 <HAL_RTC_SetTime+0x16e>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2202      	movs	r2, #2
 800a2ea:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d126      	bne.n	800a340 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d102      	bne.n	800a306 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	2200      	movs	r2, #0
 800a304:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 faac 	bl	800a868 <RTC_ByteToBcd2>
 800a310:	4603      	mov	r3, r0
 800a312:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	785b      	ldrb	r3, [r3, #1]
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 faa5 	bl	800a868 <RTC_ByteToBcd2>
 800a31e:	4603      	mov	r3, r0
 800a320:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a322:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	789b      	ldrb	r3, [r3, #2]
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 fa9d 	bl	800a868 <RTC_ByteToBcd2>
 800a32e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a330:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	7b1b      	ldrb	r3, [r3, #12]
 800a338:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a33a:	4313      	orrs	r3, r2
 800a33c:	617b      	str	r3, [r7, #20]
 800a33e:	e018      	b.n	800a372 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d102      	bne.n	800a354 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	2200      	movs	r2, #0
 800a352:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	785b      	ldrb	r3, [r3, #1]
 800a35e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a360:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a366:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	7b1b      	ldrb	r3, [r3, #12]
 800a36c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a36e:	4313      	orrs	r3, r2
 800a370:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	22ca      	movs	r2, #202	; 0xca
 800a378:	625a      	str	r2, [r3, #36]	; 0x24
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2253      	movs	r2, #83	; 0x53
 800a380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f000 fa44 	bl	800a810 <RTC_EnterInitMode>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00b      	beq.n	800a3a6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	22ff      	movs	r2, #255	; 0xff
 800a394:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2204      	movs	r2, #4
 800a39a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e045      	b.n	800a432 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	6979      	ldr	r1, [r7, #20]
 800a3ac:	4b23      	ldr	r3, [pc, #140]	; (800a43c <HAL_RTC_SetTime+0x178>)
 800a3ae:	400b      	ands	r3, r1
 800a3b0:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689a      	ldr	r2, [r3, #8]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a3c0:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6899      	ldr	r1, [r3, #8]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	691a      	ldr	r2, [r3, #16]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	430a      	orrs	r2, r1
 800a3d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68da      	ldr	r2, [r3, #12]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3e8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	f003 0320 	and.w	r3, r3, #32
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d111      	bne.n	800a41c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 f9e1 	bl	800a7c0 <HAL_RTC_WaitForSynchro>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00b      	beq.n	800a41c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	22ff      	movs	r2, #255	; 0xff
 800a40a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2204      	movs	r2, #4
 800a410:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e00a      	b.n	800a432 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	22ff      	movs	r2, #255	; 0xff
 800a422:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2201      	movs	r2, #1
 800a428:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a430:	2300      	movs	r3, #0
  }
}
 800a432:	4618      	mov	r0, r3
 800a434:	371c      	adds	r7, #28
 800a436:	46bd      	mov	sp, r7
 800a438:	bd90      	pop	{r4, r7, pc}
 800a43a:	bf00      	nop
 800a43c:	007f7f7f 	.word	0x007f7f7f

0800a440 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a440:	b590      	push	{r4, r7, lr}
 800a442:	b087      	sub	sp, #28
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	7f1b      	ldrb	r3, [r3, #28]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d101      	bne.n	800a45c <HAL_RTC_SetDate+0x1c>
 800a458:	2302      	movs	r3, #2
 800a45a:	e092      	b.n	800a582 <HAL_RTC_SetDate+0x142>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2201      	movs	r2, #1
 800a460:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2202      	movs	r2, #2
 800a466:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10e      	bne.n	800a48c <HAL_RTC_SetDate+0x4c>
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	785b      	ldrb	r3, [r3, #1]
 800a472:	f003 0310 	and.w	r3, r3, #16
 800a476:	2b00      	cmp	r3, #0
 800a478:	d008      	beq.n	800a48c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	785b      	ldrb	r3, [r3, #1]
 800a47e:	f023 0310 	bic.w	r3, r3, #16
 800a482:	b2db      	uxtb	r3, r3
 800a484:	330a      	adds	r3, #10
 800a486:	b2da      	uxtb	r2, r3
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d11c      	bne.n	800a4cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	78db      	ldrb	r3, [r3, #3]
 800a496:	4618      	mov	r0, r3
 800a498:	f000 f9e6 	bl	800a868 <RTC_ByteToBcd2>
 800a49c:	4603      	mov	r3, r0
 800a49e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	785b      	ldrb	r3, [r3, #1]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 f9df 	bl	800a868 <RTC_ByteToBcd2>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a4ae:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	789b      	ldrb	r3, [r3, #2]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 f9d7 	bl	800a868 <RTC_ByteToBcd2>
 800a4ba:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a4bc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	617b      	str	r3, [r7, #20]
 800a4ca:	e00e      	b.n	800a4ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	78db      	ldrb	r3, [r3, #3]
 800a4d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	785b      	ldrb	r3, [r3, #1]
 800a4d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a4d8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a4de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	22ca      	movs	r2, #202	; 0xca
 800a4f0:	625a      	str	r2, [r3, #36]	; 0x24
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2253      	movs	r2, #83	; 0x53
 800a4f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f000 f988 	bl	800a810 <RTC_EnterInitMode>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00b      	beq.n	800a51e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	22ff      	movs	r2, #255	; 0xff
 800a50c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2204      	movs	r2, #4
 800a512:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e031      	b.n	800a582 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	6979      	ldr	r1, [r7, #20]
 800a524:	4b19      	ldr	r3, [pc, #100]	; (800a58c <HAL_RTC_SetDate+0x14c>)
 800a526:	400b      	ands	r3, r1
 800a528:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68da      	ldr	r2, [r3, #12]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a538:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	f003 0320 	and.w	r3, r3, #32
 800a544:	2b00      	cmp	r3, #0
 800a546:	d111      	bne.n	800a56c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f000 f939 	bl	800a7c0 <HAL_RTC_WaitForSynchro>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00b      	beq.n	800a56c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	22ff      	movs	r2, #255	; 0xff
 800a55a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2204      	movs	r2, #4
 800a560:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e00a      	b.n	800a582 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	22ff      	movs	r2, #255	; 0xff
 800a572:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2201      	movs	r2, #1
 800a578:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a580:	2300      	movs	r3, #0
  }
}
 800a582:	4618      	mov	r0, r3
 800a584:	371c      	adds	r7, #28
 800a586:	46bd      	mov	sp, r7
 800a588:	bd90      	pop	{r4, r7, pc}
 800a58a:	bf00      	nop
 800a58c:	00ffff3f 	.word	0x00ffff3f

0800a590 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a590:	b590      	push	{r4, r7, lr}
 800a592:	b089      	sub	sp, #36	; 0x24
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a59c:	2300      	movs	r3, #0
 800a59e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	61fb      	str	r3, [r7, #28]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	7f1b      	ldrb	r3, [r3, #28]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d101      	bne.n	800a5b4 <HAL_RTC_SetAlarm+0x24>
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	e101      	b.n	800a7b8 <HAL_RTC_SetAlarm+0x228>
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2202      	movs	r2, #2
 800a5be:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d137      	bne.n	800a636 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d102      	bne.n	800a5da <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 f942 	bl	800a868 <RTC_ByteToBcd2>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	785b      	ldrb	r3, [r3, #1]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 f93b 	bl	800a868 <RTC_ByteToBcd2>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a5f6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	789b      	ldrb	r3, [r3, #2]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 f933 	bl	800a868 <RTC_ByteToBcd2>
 800a602:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a604:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	7b1b      	ldrb	r3, [r3, #12]
 800a60c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a60e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 f925 	bl	800a868 <RTC_ByteToBcd2>
 800a61e:	4603      	mov	r3, r0
 800a620:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a622:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a62a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a630:	4313      	orrs	r3, r2
 800a632:	61fb      	str	r3, [r7, #28]
 800a634:	e023      	b.n	800a67e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2200      	movs	r2, #0
 800a648:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	785b      	ldrb	r3, [r3, #1]
 800a654:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a656:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a65c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	7b1b      	ldrb	r3, [r3, #12]
 800a662:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a664:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a66c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a66e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a674:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a67a:	4313      	orrs	r3, r2
 800a67c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	69db      	ldr	r3, [r3, #28]
 800a686:	4313      	orrs	r3, r2
 800a688:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	22ca      	movs	r2, #202	; 0xca
 800a690:	625a      	str	r2, [r3, #36]	; 0x24
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2253      	movs	r2, #83	; 0x53
 800a698:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a69e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6a2:	d13f      	bne.n	800a724 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6b2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	689a      	ldr	r2, [r3, #8]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a6c2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a6c4:	f7fb f9e2 	bl	8005a8c <HAL_GetTick>
 800a6c8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a6ca:	e013      	b.n	800a6f4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a6cc:	f7fb f9de 	bl	8005a8c <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6da:	d90b      	bls.n	800a6f4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	22ff      	movs	r2, #255	; 0xff
 800a6e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2203      	movs	r2, #3
 800a6e8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e061      	b.n	800a7b8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	f003 0301 	and.w	r3, r3, #1
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d0e4      	beq.n	800a6cc <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	69fa      	ldr	r2, [r7, #28]
 800a708:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a720:	609a      	str	r2, [r3, #8]
 800a722:	e03e      	b.n	800a7a2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	689a      	ldr	r2, [r3, #8]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a732:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689a      	ldr	r2, [r3, #8]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a742:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a744:	f7fb f9a2 	bl	8005a8c <HAL_GetTick>
 800a748:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a74a:	e013      	b.n	800a774 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a74c:	f7fb f99e 	bl	8005a8c <HAL_GetTick>
 800a750:	4602      	mov	r2, r0
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	1ad3      	subs	r3, r2, r3
 800a756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a75a:	d90b      	bls.n	800a774 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	22ff      	movs	r2, #255	; 0xff
 800a762:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2203      	movs	r2, #3
 800a768:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e021      	b.n	800a7b8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	f003 0302 	and.w	r3, r3, #2
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d0e4      	beq.n	800a74c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	69fa      	ldr	r2, [r7, #28]
 800a788:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	22ff      	movs	r2, #255	; 0xff
 800a7a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3724      	adds	r7, #36	; 0x24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd90      	pop	{r4, r7, pc}

0800a7c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68da      	ldr	r2, [r3, #12]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a7da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a7dc:	f7fb f956 	bl	8005a8c <HAL_GetTick>
 800a7e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a7e2:	e009      	b.n	800a7f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a7e4:	f7fb f952 	bl	8005a8c <HAL_GetTick>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7f2:	d901      	bls.n	800a7f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e007      	b.n	800a808 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	f003 0320 	and.w	r3, r3, #32
 800a802:	2b00      	cmp	r3, #0
 800a804:	d0ee      	beq.n	800a7e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a818:	2300      	movs	r3, #0
 800a81a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a826:	2b00      	cmp	r3, #0
 800a828:	d119      	bne.n	800a85e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f04f 32ff 	mov.w	r2, #4294967295
 800a832:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a834:	f7fb f92a 	bl	8005a8c <HAL_GetTick>
 800a838:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a83a:	e009      	b.n	800a850 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a83c:	f7fb f926 	bl	8005a8c <HAL_GetTick>
 800a840:	4602      	mov	r2, r0
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a84a:	d901      	bls.n	800a850 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e007      	b.n	800a860 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0ee      	beq.n	800a83c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a872:	2300      	movs	r3, #0
 800a874:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a876:	e005      	b.n	800a884 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	3301      	adds	r3, #1
 800a87c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	3b0a      	subs	r3, #10
 800a882:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	2b09      	cmp	r3, #9
 800a888:	d8f6      	bhi.n	800a878 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	011b      	lsls	r3, r3, #4
 800a890:	b2da      	uxtb	r2, r3
 800a892:	79fb      	ldrb	r3, [r7, #7]
 800a894:	4313      	orrs	r3, r2
 800a896:	b2db      	uxtb	r3, r3
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	7f1b      	ldrb	r3, [r3, #28]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d101      	bne.n	800a8c0 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	e03e      	b.n	800a93e <HAL_RTCEx_SetTimeStamp+0x9a>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	689a      	ldr	r2, [r3, #8]
 800a8d2:	4b1e      	ldr	r3, [pc, #120]	; (800a94c <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a8d8:	697a      	ldr	r2, [r7, #20]
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	22ca      	movs	r2, #202	; 0xca
 800a8e6:	625a      	str	r2, [r3, #36]	; 0x24
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2253      	movs	r2, #83	; 0x53
 800a8ee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f022 0206 	bic.w	r2, r2, #6
 800a8fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	689a      	ldr	r2, [r3, #8]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a926:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	22ff      	movs	r2, #255	; 0xff
 800a92e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2201      	movs	r2, #1
 800a934:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	371c      	adds	r7, #28
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	fffff7f7 	.word	0xfffff7f7

0800a950 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d101      	bne.n	800a964 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	e025      	b.n	800a9b0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7fa ff3f 	bl	80057fc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2202      	movs	r2, #2
 800a982:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	3304      	adds	r3, #4
 800a98e:	4619      	mov	r1, r3
 800a990:	4610      	mov	r0, r2
 800a992:	f001 fa9b 	bl	800becc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6818      	ldr	r0, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	f001 faef 	bl	800bf84 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9ca:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d101      	bne.n	800a9d6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e021      	b.n	800aa1a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d002      	beq.n	800a9e2 <HAL_SDRAM_SendCommand+0x2a>
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	2b05      	cmp	r3, #5
 800a9e0:	d118      	bne.n	800aa14 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	68b9      	ldr	r1, [r7, #8]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f001 fb30 	bl	800c058 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d104      	bne.n	800aa0a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2205      	movs	r2, #5
 800aa04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aa08:	e006      	b.n	800aa18 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aa12:	e001      	b.n	800aa18 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e000      	b.n	800aa1a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3718      	adds	r7, #24
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b082      	sub	sp, #8
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d101      	bne.n	800aa3c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800aa38:	2302      	movs	r3, #2
 800aa3a:	e016      	b.n	800aa6a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d10f      	bne.n	800aa68 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2202      	movs	r2, #2
 800aa4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f001 fb22 	bl	800c0a0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	e000      	b.n	800aa6a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e09d      	b.n	800abc0 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d108      	bne.n	800aa9e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa94:	d009      	beq.n	800aaaa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	61da      	str	r2, [r3, #28]
 800aa9c:	e005      	b.n	800aaaa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d106      	bne.n	800aaca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f7fa fbf1 	bl	80052ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2202      	movs	r2, #2
 800aace:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aae0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aaea:	d902      	bls.n	800aaf2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aaec:	2300      	movs	r3, #0
 800aaee:	60fb      	str	r3, [r7, #12]
 800aaf0:	e002      	b.n	800aaf8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aaf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaf6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ab00:	d007      	beq.n	800ab12 <HAL_SPI_Init+0xa0>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab0a:	d002      	beq.n	800ab12 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ab22:	431a      	orrs	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	f003 0302 	and.w	r3, r3, #2
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	431a      	orrs	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab40:	431a      	orrs	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab4a:	431a      	orrs	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a1b      	ldr	r3, [r3, #32]
 800ab50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab54:	ea42 0103 	orr.w	r1, r2, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	430a      	orrs	r2, r1
 800ab66:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	0c1b      	lsrs	r3, r3, #16
 800ab6e:	f003 0204 	and.w	r2, r3, #4
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab76:	f003 0310 	and.w	r3, r3, #16
 800ab7a:	431a      	orrs	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab80:	f003 0308 	and.w	r3, r3, #8
 800ab84:	431a      	orrs	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ab8e:	ea42 0103 	orr.w	r1, r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	69da      	ldr	r2, [r3, #28]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800abae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d101      	bne.n	800abda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	e049      	b.n	800ac6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d106      	bne.n	800abf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7fa fbbe 	bl	8005370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2202      	movs	r2, #2
 800abf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	3304      	adds	r3, #4
 800ac04:	4619      	mov	r1, r3
 800ac06:	4610      	mov	r0, r2
 800ac08:	f000 fb30 	bl	800b26c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
	...

0800ac78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d001      	beq.n	800ac90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e04c      	b.n	800ad2a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2202      	movs	r2, #2
 800ac94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a26      	ldr	r2, [pc, #152]	; (800ad38 <HAL_TIM_Base_Start+0xc0>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d022      	beq.n	800ace8 <HAL_TIM_Base_Start+0x70>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acaa:	d01d      	beq.n	800ace8 <HAL_TIM_Base_Start+0x70>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a22      	ldr	r2, [pc, #136]	; (800ad3c <HAL_TIM_Base_Start+0xc4>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d018      	beq.n	800ace8 <HAL_TIM_Base_Start+0x70>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a21      	ldr	r2, [pc, #132]	; (800ad40 <HAL_TIM_Base_Start+0xc8>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d013      	beq.n	800ace8 <HAL_TIM_Base_Start+0x70>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a1f      	ldr	r2, [pc, #124]	; (800ad44 <HAL_TIM_Base_Start+0xcc>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d00e      	beq.n	800ace8 <HAL_TIM_Base_Start+0x70>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a1e      	ldr	r2, [pc, #120]	; (800ad48 <HAL_TIM_Base_Start+0xd0>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d009      	beq.n	800ace8 <HAL_TIM_Base_Start+0x70>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a1c      	ldr	r2, [pc, #112]	; (800ad4c <HAL_TIM_Base_Start+0xd4>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d004      	beq.n	800ace8 <HAL_TIM_Base_Start+0x70>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a1b      	ldr	r2, [pc, #108]	; (800ad50 <HAL_TIM_Base_Start+0xd8>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d115      	bne.n	800ad14 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	689a      	ldr	r2, [r3, #8]
 800acee:	4b19      	ldr	r3, [pc, #100]	; (800ad54 <HAL_TIM_Base_Start+0xdc>)
 800acf0:	4013      	ands	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2b06      	cmp	r3, #6
 800acf8:	d015      	beq.n	800ad26 <HAL_TIM_Base_Start+0xae>
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad00:	d011      	beq.n	800ad26 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f042 0201 	orr.w	r2, r2, #1
 800ad10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad12:	e008      	b.n	800ad26 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f042 0201 	orr.w	r2, r2, #1
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	e000      	b.n	800ad28 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	40010000 	.word	0x40010000
 800ad3c:	40000400 	.word	0x40000400
 800ad40:	40000800 	.word	0x40000800
 800ad44:	40000c00 	.word	0x40000c00
 800ad48:	40010400 	.word	0x40010400
 800ad4c:	40014000 	.word	0x40014000
 800ad50:	40001800 	.word	0x40001800
 800ad54:	00010007 	.word	0x00010007

0800ad58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d001      	beq.n	800ad70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e054      	b.n	800ae1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2202      	movs	r2, #2
 800ad74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68da      	ldr	r2, [r3, #12]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f042 0201 	orr.w	r2, r2, #1
 800ad86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a26      	ldr	r2, [pc, #152]	; (800ae28 <HAL_TIM_Base_Start_IT+0xd0>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d022      	beq.n	800add8 <HAL_TIM_Base_Start_IT+0x80>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad9a:	d01d      	beq.n	800add8 <HAL_TIM_Base_Start_IT+0x80>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a22      	ldr	r2, [pc, #136]	; (800ae2c <HAL_TIM_Base_Start_IT+0xd4>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d018      	beq.n	800add8 <HAL_TIM_Base_Start_IT+0x80>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a21      	ldr	r2, [pc, #132]	; (800ae30 <HAL_TIM_Base_Start_IT+0xd8>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d013      	beq.n	800add8 <HAL_TIM_Base_Start_IT+0x80>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a1f      	ldr	r2, [pc, #124]	; (800ae34 <HAL_TIM_Base_Start_IT+0xdc>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d00e      	beq.n	800add8 <HAL_TIM_Base_Start_IT+0x80>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a1e      	ldr	r2, [pc, #120]	; (800ae38 <HAL_TIM_Base_Start_IT+0xe0>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d009      	beq.n	800add8 <HAL_TIM_Base_Start_IT+0x80>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a1c      	ldr	r2, [pc, #112]	; (800ae3c <HAL_TIM_Base_Start_IT+0xe4>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d004      	beq.n	800add8 <HAL_TIM_Base_Start_IT+0x80>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a1b      	ldr	r2, [pc, #108]	; (800ae40 <HAL_TIM_Base_Start_IT+0xe8>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d115      	bne.n	800ae04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	689a      	ldr	r2, [r3, #8]
 800adde:	4b19      	ldr	r3, [pc, #100]	; (800ae44 <HAL_TIM_Base_Start_IT+0xec>)
 800ade0:	4013      	ands	r3, r2
 800ade2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b06      	cmp	r3, #6
 800ade8:	d015      	beq.n	800ae16 <HAL_TIM_Base_Start_IT+0xbe>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adf0:	d011      	beq.n	800ae16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f042 0201 	orr.w	r2, r2, #1
 800ae00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae02:	e008      	b.n	800ae16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f042 0201 	orr.w	r2, r2, #1
 800ae12:	601a      	str	r2, [r3, #0]
 800ae14:	e000      	b.n	800ae18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	40010000 	.word	0x40010000
 800ae2c:	40000400 	.word	0x40000400
 800ae30:	40000800 	.word	0x40000800
 800ae34:	40000c00 	.word	0x40000c00
 800ae38:	40010400 	.word	0x40010400
 800ae3c:	40014000 	.word	0x40014000
 800ae40:	40001800 	.word	0x40001800
 800ae44:	00010007 	.word	0x00010007

0800ae48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	f003 0302 	and.w	r3, r3, #2
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	d122      	bne.n	800aea4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	f003 0302 	and.w	r3, r3, #2
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d11b      	bne.n	800aea4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f06f 0202 	mvn.w	r2, #2
 800ae74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	f003 0303 	and.w	r3, r3, #3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d003      	beq.n	800ae92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f9d0 	bl	800b230 <HAL_TIM_IC_CaptureCallback>
 800ae90:	e005      	b.n	800ae9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f9c2 	bl	800b21c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 f9d3 	bl	800b244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	f003 0304 	and.w	r3, r3, #4
 800aeae:	2b04      	cmp	r3, #4
 800aeb0:	d122      	bne.n	800aef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	f003 0304 	and.w	r3, r3, #4
 800aebc:	2b04      	cmp	r3, #4
 800aebe:	d11b      	bne.n	800aef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f06f 0204 	mvn.w	r2, #4
 800aec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2202      	movs	r2, #2
 800aece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d003      	beq.n	800aee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f9a6 	bl	800b230 <HAL_TIM_IC_CaptureCallback>
 800aee4:	e005      	b.n	800aef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f998 	bl	800b21c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f9a9 	bl	800b244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	f003 0308 	and.w	r3, r3, #8
 800af02:	2b08      	cmp	r3, #8
 800af04:	d122      	bne.n	800af4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	f003 0308 	and.w	r3, r3, #8
 800af10:	2b08      	cmp	r3, #8
 800af12:	d11b      	bne.n	800af4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f06f 0208 	mvn.w	r2, #8
 800af1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2204      	movs	r2, #4
 800af22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	69db      	ldr	r3, [r3, #28]
 800af2a:	f003 0303 	and.w	r3, r3, #3
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d003      	beq.n	800af3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f97c 	bl	800b230 <HAL_TIM_IC_CaptureCallback>
 800af38:	e005      	b.n	800af46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f96e 	bl	800b21c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 f97f 	bl	800b244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	f003 0310 	and.w	r3, r3, #16
 800af56:	2b10      	cmp	r3, #16
 800af58:	d122      	bne.n	800afa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	f003 0310 	and.w	r3, r3, #16
 800af64:	2b10      	cmp	r3, #16
 800af66:	d11b      	bne.n	800afa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f06f 0210 	mvn.w	r2, #16
 800af70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2208      	movs	r2, #8
 800af76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	69db      	ldr	r3, [r3, #28]
 800af7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af82:	2b00      	cmp	r3, #0
 800af84:	d003      	beq.n	800af8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f952 	bl	800b230 <HAL_TIM_IC_CaptureCallback>
 800af8c:	e005      	b.n	800af9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f944 	bl	800b21c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f955 	bl	800b244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d10e      	bne.n	800afcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d107      	bne.n	800afcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f06f 0201 	mvn.w	r2, #1
 800afc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7f7 ff28 	bl	8002e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afd6:	2b80      	cmp	r3, #128	; 0x80
 800afd8:	d10e      	bne.n	800aff8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afe4:	2b80      	cmp	r3, #128	; 0x80
 800afe6:	d107      	bne.n	800aff8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fb0c 	bl	800b610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b006:	d10e      	bne.n	800b026 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b012:	2b80      	cmp	r3, #128	; 0x80
 800b014:	d107      	bne.n	800b026 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b01e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 faff 	bl	800b624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b030:	2b40      	cmp	r3, #64	; 0x40
 800b032:	d10e      	bne.n	800b052 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b03e:	2b40      	cmp	r3, #64	; 0x40
 800b040:	d107      	bne.n	800b052 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b04a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 f903 	bl	800b258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	f003 0320 	and.w	r3, r3, #32
 800b05c:	2b20      	cmp	r3, #32
 800b05e:	d10e      	bne.n	800b07e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	f003 0320 	and.w	r3, r3, #32
 800b06a:	2b20      	cmp	r3, #32
 800b06c:	d107      	bne.n	800b07e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f06f 0220 	mvn.w	r2, #32
 800b076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fabf 	bl	800b5fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b07e:	bf00      	nop
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
	...

0800b088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d101      	bne.n	800b0a4 <HAL_TIM_ConfigClockSource+0x1c>
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	e0b4      	b.n	800b20e <HAL_TIM_ConfigClockSource+0x186>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0bc:	68ba      	ldr	r2, [r7, #8]
 800b0be:	4b56      	ldr	r3, [pc, #344]	; (800b218 <HAL_TIM_ConfigClockSource+0x190>)
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0dc:	d03e      	beq.n	800b15c <HAL_TIM_ConfigClockSource+0xd4>
 800b0de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0e2:	f200 8087 	bhi.w	800b1f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b0e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0ea:	f000 8086 	beq.w	800b1fa <HAL_TIM_ConfigClockSource+0x172>
 800b0ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0f2:	d87f      	bhi.n	800b1f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b0f4:	2b70      	cmp	r3, #112	; 0x70
 800b0f6:	d01a      	beq.n	800b12e <HAL_TIM_ConfigClockSource+0xa6>
 800b0f8:	2b70      	cmp	r3, #112	; 0x70
 800b0fa:	d87b      	bhi.n	800b1f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b0fc:	2b60      	cmp	r3, #96	; 0x60
 800b0fe:	d050      	beq.n	800b1a2 <HAL_TIM_ConfigClockSource+0x11a>
 800b100:	2b60      	cmp	r3, #96	; 0x60
 800b102:	d877      	bhi.n	800b1f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b104:	2b50      	cmp	r3, #80	; 0x50
 800b106:	d03c      	beq.n	800b182 <HAL_TIM_ConfigClockSource+0xfa>
 800b108:	2b50      	cmp	r3, #80	; 0x50
 800b10a:	d873      	bhi.n	800b1f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b10c:	2b40      	cmp	r3, #64	; 0x40
 800b10e:	d058      	beq.n	800b1c2 <HAL_TIM_ConfigClockSource+0x13a>
 800b110:	2b40      	cmp	r3, #64	; 0x40
 800b112:	d86f      	bhi.n	800b1f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b114:	2b30      	cmp	r3, #48	; 0x30
 800b116:	d064      	beq.n	800b1e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b118:	2b30      	cmp	r3, #48	; 0x30
 800b11a:	d86b      	bhi.n	800b1f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b11c:	2b20      	cmp	r3, #32
 800b11e:	d060      	beq.n	800b1e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b120:	2b20      	cmp	r3, #32
 800b122:	d867      	bhi.n	800b1f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b124:	2b00      	cmp	r3, #0
 800b126:	d05c      	beq.n	800b1e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b128:	2b10      	cmp	r3, #16
 800b12a:	d05a      	beq.n	800b1e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b12c:	e062      	b.n	800b1f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	6899      	ldr	r1, [r3, #8]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	685a      	ldr	r2, [r3, #4]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	f000 f9af 	bl	800b4a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68ba      	ldr	r2, [r7, #8]
 800b158:	609a      	str	r2, [r3, #8]
      break;
 800b15a:	e04f      	b.n	800b1fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6818      	ldr	r0, [r3, #0]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	6899      	ldr	r1, [r3, #8]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	685a      	ldr	r2, [r3, #4]
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	f000 f998 	bl	800b4a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	689a      	ldr	r2, [r3, #8]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b17e:	609a      	str	r2, [r3, #8]
      break;
 800b180:	e03c      	b.n	800b1fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6818      	ldr	r0, [r3, #0]
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	6859      	ldr	r1, [r3, #4]
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	461a      	mov	r2, r3
 800b190:	f000 f90c 	bl	800b3ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2150      	movs	r1, #80	; 0x50
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 f965 	bl	800b46a <TIM_ITRx_SetConfig>
      break;
 800b1a0:	e02c      	b.n	800b1fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	6859      	ldr	r1, [r3, #4]
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	f000 f92b 	bl	800b40a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2160      	movs	r1, #96	; 0x60
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 f955 	bl	800b46a <TIM_ITRx_SetConfig>
      break;
 800b1c0:	e01c      	b.n	800b1fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6818      	ldr	r0, [r3, #0]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	6859      	ldr	r1, [r3, #4]
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	f000 f8ec 	bl	800b3ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2140      	movs	r1, #64	; 0x40
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 f945 	bl	800b46a <TIM_ITRx_SetConfig>
      break;
 800b1e0:	e00c      	b.n	800b1fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	4610      	mov	r0, r2
 800b1ee:	f000 f93c 	bl	800b46a <TIM_ITRx_SetConfig>
      break;
 800b1f2:	e003      	b.n	800b1fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1f8:	e000      	b.n	800b1fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b1fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	fffeff88 	.word	0xfffeff88

0800b21c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a40      	ldr	r2, [pc, #256]	; (800b380 <TIM_Base_SetConfig+0x114>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d013      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b28a:	d00f      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a3d      	ldr	r2, [pc, #244]	; (800b384 <TIM_Base_SetConfig+0x118>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d00b      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a3c      	ldr	r2, [pc, #240]	; (800b388 <TIM_Base_SetConfig+0x11c>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d007      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a3b      	ldr	r2, [pc, #236]	; (800b38c <TIM_Base_SetConfig+0x120>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d003      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4a3a      	ldr	r2, [pc, #232]	; (800b390 <TIM_Base_SetConfig+0x124>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d108      	bne.n	800b2be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a2f      	ldr	r2, [pc, #188]	; (800b380 <TIM_Base_SetConfig+0x114>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d02b      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2cc:	d027      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a2c      	ldr	r2, [pc, #176]	; (800b384 <TIM_Base_SetConfig+0x118>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d023      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a2b      	ldr	r2, [pc, #172]	; (800b388 <TIM_Base_SetConfig+0x11c>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d01f      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a2a      	ldr	r2, [pc, #168]	; (800b38c <TIM_Base_SetConfig+0x120>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d01b      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a29      	ldr	r2, [pc, #164]	; (800b390 <TIM_Base_SetConfig+0x124>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d017      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a28      	ldr	r2, [pc, #160]	; (800b394 <TIM_Base_SetConfig+0x128>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d013      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a27      	ldr	r2, [pc, #156]	; (800b398 <TIM_Base_SetConfig+0x12c>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d00f      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a26      	ldr	r2, [pc, #152]	; (800b39c <TIM_Base_SetConfig+0x130>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d00b      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a25      	ldr	r2, [pc, #148]	; (800b3a0 <TIM_Base_SetConfig+0x134>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d007      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a24      	ldr	r2, [pc, #144]	; (800b3a4 <TIM_Base_SetConfig+0x138>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d003      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a23      	ldr	r2, [pc, #140]	; (800b3a8 <TIM_Base_SetConfig+0x13c>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d108      	bne.n	800b330 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	689a      	ldr	r2, [r3, #8]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a0a      	ldr	r2, [pc, #40]	; (800b380 <TIM_Base_SetConfig+0x114>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d003      	beq.n	800b364 <TIM_Base_SetConfig+0xf8>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a0c      	ldr	r2, [pc, #48]	; (800b390 <TIM_Base_SetConfig+0x124>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d103      	bne.n	800b36c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	691a      	ldr	r2, [r3, #16]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	615a      	str	r2, [r3, #20]
}
 800b372:	bf00      	nop
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	40010000 	.word	0x40010000
 800b384:	40000400 	.word	0x40000400
 800b388:	40000800 	.word	0x40000800
 800b38c:	40000c00 	.word	0x40000c00
 800b390:	40010400 	.word	0x40010400
 800b394:	40014000 	.word	0x40014000
 800b398:	40014400 	.word	0x40014400
 800b39c:	40014800 	.word	0x40014800
 800b3a0:	40001800 	.word	0x40001800
 800b3a4:	40001c00 	.word	0x40001c00
 800b3a8:	40002000 	.word	0x40002000

0800b3ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6a1b      	ldr	r3, [r3, #32]
 800b3bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	f023 0201 	bic.w	r2, r3, #1
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b3d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	011b      	lsls	r3, r3, #4
 800b3dc:	693a      	ldr	r2, [r7, #16]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f023 030a 	bic.w	r3, r3, #10
 800b3e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b3ea:	697a      	ldr	r2, [r7, #20]
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	693a      	ldr	r2, [r7, #16]
 800b3f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	697a      	ldr	r2, [r7, #20]
 800b3fc:	621a      	str	r2, [r3, #32]
}
 800b3fe:	bf00      	nop
 800b400:	371c      	adds	r7, #28
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b40a:	b480      	push	{r7}
 800b40c:	b087      	sub	sp, #28
 800b40e:	af00      	add	r7, sp, #0
 800b410:	60f8      	str	r0, [r7, #12]
 800b412:	60b9      	str	r1, [r7, #8]
 800b414:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	f023 0210 	bic.w	r2, r3, #16
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6a1b      	ldr	r3, [r3, #32]
 800b42c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b434:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	031b      	lsls	r3, r3, #12
 800b43a:	697a      	ldr	r2, [r7, #20]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b446:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	011b      	lsls	r3, r3, #4
 800b44c:	693a      	ldr	r2, [r7, #16]
 800b44e:	4313      	orrs	r3, r2
 800b450:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	621a      	str	r2, [r3, #32]
}
 800b45e:	bf00      	nop
 800b460:	371c      	adds	r7, #28
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr

0800b46a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b46a:	b480      	push	{r7}
 800b46c:	b085      	sub	sp, #20
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
 800b472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b480:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	4313      	orrs	r3, r2
 800b488:	f043 0307 	orr.w	r3, r3, #7
 800b48c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	609a      	str	r2, [r3, #8]
}
 800b494:	bf00      	nop
 800b496:	3714      	adds	r7, #20
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b087      	sub	sp, #28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
 800b4ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	021a      	lsls	r2, r3, #8
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	431a      	orrs	r2, r3
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	697a      	ldr	r2, [r7, #20]
 800b4d2:	609a      	str	r2, [r3, #8]
}
 800b4d4:	bf00      	nop
 800b4d6:	371c      	adds	r7, #28
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d101      	bne.n	800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	e06d      	b.n	800b5d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2202      	movs	r2, #2
 800b504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a30      	ldr	r2, [pc, #192]	; (800b5e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d004      	beq.n	800b52c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a2f      	ldr	r2, [pc, #188]	; (800b5e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d108      	bne.n	800b53e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b532:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b544:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a20      	ldr	r2, [pc, #128]	; (800b5e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d022      	beq.n	800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b56a:	d01d      	beq.n	800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a1d      	ldr	r2, [pc, #116]	; (800b5e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d018      	beq.n	800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a1c      	ldr	r2, [pc, #112]	; (800b5ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d013      	beq.n	800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a1a      	ldr	r2, [pc, #104]	; (800b5f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d00e      	beq.n	800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a15      	ldr	r2, [pc, #84]	; (800b5e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d009      	beq.n	800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a16      	ldr	r2, [pc, #88]	; (800b5f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d004      	beq.n	800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a15      	ldr	r2, [pc, #84]	; (800b5f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d10c      	bne.n	800b5c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	68ba      	ldr	r2, [r7, #8]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr
 800b5e0:	40010000 	.word	0x40010000
 800b5e4:	40010400 	.word	0x40010400
 800b5e8:	40000400 	.word	0x40000400
 800b5ec:	40000800 	.word	0x40000800
 800b5f0:	40000c00 	.word	0x40000c00
 800b5f4:	40014000 	.word	0x40014000
 800b5f8:	40001800 	.word	0x40001800

0800b5fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d101      	bne.n	800b64a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	e040      	b.n	800b6cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d106      	bne.n	800b660 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7f9 ff2e 	bl	80054bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2224      	movs	r2, #36	; 0x24
 800b664:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f022 0201 	bic.w	r2, r2, #1
 800b674:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f82c 	bl	800b6d4 <UART_SetConfig>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d101      	bne.n	800b686 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	e022      	b.n	800b6cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d002      	beq.n	800b694 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fa82 	bl	800bb98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	685a      	ldr	r2, [r3, #4]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b6a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	689a      	ldr	r2, [r3, #8]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b6b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f042 0201 	orr.w	r2, r2, #1
 800b6c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fb09 	bl	800bcdc <UART_CheckIdleState>
 800b6ca:	4603      	mov	r3, r0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b088      	sub	sp, #32
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	689a      	ldr	r2, [r3, #8]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	431a      	orrs	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	695b      	ldr	r3, [r3, #20]
 800b6ee:	431a      	orrs	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	69db      	ldr	r3, [r3, #28]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	4ba7      	ldr	r3, [pc, #668]	; (800b99c <UART_SetConfig+0x2c8>)
 800b700:	4013      	ands	r3, r2
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	6812      	ldr	r2, [r2, #0]
 800b706:	6979      	ldr	r1, [r7, #20]
 800b708:	430b      	orrs	r3, r1
 800b70a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68da      	ldr	r2, [r3, #12]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	430a      	orrs	r2, r1
 800b720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	699b      	ldr	r3, [r3, #24]
 800b726:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a1b      	ldr	r3, [r3, #32]
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	4313      	orrs	r3, r2
 800b730:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	697a      	ldr	r2, [r7, #20]
 800b742:	430a      	orrs	r2, r1
 800b744:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a95      	ldr	r2, [pc, #596]	; (800b9a0 <UART_SetConfig+0x2cc>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d120      	bne.n	800b792 <UART_SetConfig+0xbe>
 800b750:	4b94      	ldr	r3, [pc, #592]	; (800b9a4 <UART_SetConfig+0x2d0>)
 800b752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b756:	f003 0303 	and.w	r3, r3, #3
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d816      	bhi.n	800b78c <UART_SetConfig+0xb8>
 800b75e:	a201      	add	r2, pc, #4	; (adr r2, 800b764 <UART_SetConfig+0x90>)
 800b760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b764:	0800b775 	.word	0x0800b775
 800b768:	0800b781 	.word	0x0800b781
 800b76c:	0800b77b 	.word	0x0800b77b
 800b770:	0800b787 	.word	0x0800b787
 800b774:	2301      	movs	r3, #1
 800b776:	77fb      	strb	r3, [r7, #31]
 800b778:	e14f      	b.n	800ba1a <UART_SetConfig+0x346>
 800b77a:	2302      	movs	r3, #2
 800b77c:	77fb      	strb	r3, [r7, #31]
 800b77e:	e14c      	b.n	800ba1a <UART_SetConfig+0x346>
 800b780:	2304      	movs	r3, #4
 800b782:	77fb      	strb	r3, [r7, #31]
 800b784:	e149      	b.n	800ba1a <UART_SetConfig+0x346>
 800b786:	2308      	movs	r3, #8
 800b788:	77fb      	strb	r3, [r7, #31]
 800b78a:	e146      	b.n	800ba1a <UART_SetConfig+0x346>
 800b78c:	2310      	movs	r3, #16
 800b78e:	77fb      	strb	r3, [r7, #31]
 800b790:	e143      	b.n	800ba1a <UART_SetConfig+0x346>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a84      	ldr	r2, [pc, #528]	; (800b9a8 <UART_SetConfig+0x2d4>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d132      	bne.n	800b802 <UART_SetConfig+0x12e>
 800b79c:	4b81      	ldr	r3, [pc, #516]	; (800b9a4 <UART_SetConfig+0x2d0>)
 800b79e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7a2:	f003 030c 	and.w	r3, r3, #12
 800b7a6:	2b0c      	cmp	r3, #12
 800b7a8:	d828      	bhi.n	800b7fc <UART_SetConfig+0x128>
 800b7aa:	a201      	add	r2, pc, #4	; (adr r2, 800b7b0 <UART_SetConfig+0xdc>)
 800b7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b0:	0800b7e5 	.word	0x0800b7e5
 800b7b4:	0800b7fd 	.word	0x0800b7fd
 800b7b8:	0800b7fd 	.word	0x0800b7fd
 800b7bc:	0800b7fd 	.word	0x0800b7fd
 800b7c0:	0800b7f1 	.word	0x0800b7f1
 800b7c4:	0800b7fd 	.word	0x0800b7fd
 800b7c8:	0800b7fd 	.word	0x0800b7fd
 800b7cc:	0800b7fd 	.word	0x0800b7fd
 800b7d0:	0800b7eb 	.word	0x0800b7eb
 800b7d4:	0800b7fd 	.word	0x0800b7fd
 800b7d8:	0800b7fd 	.word	0x0800b7fd
 800b7dc:	0800b7fd 	.word	0x0800b7fd
 800b7e0:	0800b7f7 	.word	0x0800b7f7
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	77fb      	strb	r3, [r7, #31]
 800b7e8:	e117      	b.n	800ba1a <UART_SetConfig+0x346>
 800b7ea:	2302      	movs	r3, #2
 800b7ec:	77fb      	strb	r3, [r7, #31]
 800b7ee:	e114      	b.n	800ba1a <UART_SetConfig+0x346>
 800b7f0:	2304      	movs	r3, #4
 800b7f2:	77fb      	strb	r3, [r7, #31]
 800b7f4:	e111      	b.n	800ba1a <UART_SetConfig+0x346>
 800b7f6:	2308      	movs	r3, #8
 800b7f8:	77fb      	strb	r3, [r7, #31]
 800b7fa:	e10e      	b.n	800ba1a <UART_SetConfig+0x346>
 800b7fc:	2310      	movs	r3, #16
 800b7fe:	77fb      	strb	r3, [r7, #31]
 800b800:	e10b      	b.n	800ba1a <UART_SetConfig+0x346>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a69      	ldr	r2, [pc, #420]	; (800b9ac <UART_SetConfig+0x2d8>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d120      	bne.n	800b84e <UART_SetConfig+0x17a>
 800b80c:	4b65      	ldr	r3, [pc, #404]	; (800b9a4 <UART_SetConfig+0x2d0>)
 800b80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b812:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b816:	2b30      	cmp	r3, #48	; 0x30
 800b818:	d013      	beq.n	800b842 <UART_SetConfig+0x16e>
 800b81a:	2b30      	cmp	r3, #48	; 0x30
 800b81c:	d814      	bhi.n	800b848 <UART_SetConfig+0x174>
 800b81e:	2b20      	cmp	r3, #32
 800b820:	d009      	beq.n	800b836 <UART_SetConfig+0x162>
 800b822:	2b20      	cmp	r3, #32
 800b824:	d810      	bhi.n	800b848 <UART_SetConfig+0x174>
 800b826:	2b00      	cmp	r3, #0
 800b828:	d002      	beq.n	800b830 <UART_SetConfig+0x15c>
 800b82a:	2b10      	cmp	r3, #16
 800b82c:	d006      	beq.n	800b83c <UART_SetConfig+0x168>
 800b82e:	e00b      	b.n	800b848 <UART_SetConfig+0x174>
 800b830:	2300      	movs	r3, #0
 800b832:	77fb      	strb	r3, [r7, #31]
 800b834:	e0f1      	b.n	800ba1a <UART_SetConfig+0x346>
 800b836:	2302      	movs	r3, #2
 800b838:	77fb      	strb	r3, [r7, #31]
 800b83a:	e0ee      	b.n	800ba1a <UART_SetConfig+0x346>
 800b83c:	2304      	movs	r3, #4
 800b83e:	77fb      	strb	r3, [r7, #31]
 800b840:	e0eb      	b.n	800ba1a <UART_SetConfig+0x346>
 800b842:	2308      	movs	r3, #8
 800b844:	77fb      	strb	r3, [r7, #31]
 800b846:	e0e8      	b.n	800ba1a <UART_SetConfig+0x346>
 800b848:	2310      	movs	r3, #16
 800b84a:	77fb      	strb	r3, [r7, #31]
 800b84c:	e0e5      	b.n	800ba1a <UART_SetConfig+0x346>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a57      	ldr	r2, [pc, #348]	; (800b9b0 <UART_SetConfig+0x2dc>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d120      	bne.n	800b89a <UART_SetConfig+0x1c6>
 800b858:	4b52      	ldr	r3, [pc, #328]	; (800b9a4 <UART_SetConfig+0x2d0>)
 800b85a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b85e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b862:	2bc0      	cmp	r3, #192	; 0xc0
 800b864:	d013      	beq.n	800b88e <UART_SetConfig+0x1ba>
 800b866:	2bc0      	cmp	r3, #192	; 0xc0
 800b868:	d814      	bhi.n	800b894 <UART_SetConfig+0x1c0>
 800b86a:	2b80      	cmp	r3, #128	; 0x80
 800b86c:	d009      	beq.n	800b882 <UART_SetConfig+0x1ae>
 800b86e:	2b80      	cmp	r3, #128	; 0x80
 800b870:	d810      	bhi.n	800b894 <UART_SetConfig+0x1c0>
 800b872:	2b00      	cmp	r3, #0
 800b874:	d002      	beq.n	800b87c <UART_SetConfig+0x1a8>
 800b876:	2b40      	cmp	r3, #64	; 0x40
 800b878:	d006      	beq.n	800b888 <UART_SetConfig+0x1b4>
 800b87a:	e00b      	b.n	800b894 <UART_SetConfig+0x1c0>
 800b87c:	2300      	movs	r3, #0
 800b87e:	77fb      	strb	r3, [r7, #31]
 800b880:	e0cb      	b.n	800ba1a <UART_SetConfig+0x346>
 800b882:	2302      	movs	r3, #2
 800b884:	77fb      	strb	r3, [r7, #31]
 800b886:	e0c8      	b.n	800ba1a <UART_SetConfig+0x346>
 800b888:	2304      	movs	r3, #4
 800b88a:	77fb      	strb	r3, [r7, #31]
 800b88c:	e0c5      	b.n	800ba1a <UART_SetConfig+0x346>
 800b88e:	2308      	movs	r3, #8
 800b890:	77fb      	strb	r3, [r7, #31]
 800b892:	e0c2      	b.n	800ba1a <UART_SetConfig+0x346>
 800b894:	2310      	movs	r3, #16
 800b896:	77fb      	strb	r3, [r7, #31]
 800b898:	e0bf      	b.n	800ba1a <UART_SetConfig+0x346>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a45      	ldr	r2, [pc, #276]	; (800b9b4 <UART_SetConfig+0x2e0>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d125      	bne.n	800b8f0 <UART_SetConfig+0x21c>
 800b8a4:	4b3f      	ldr	r3, [pc, #252]	; (800b9a4 <UART_SetConfig+0x2d0>)
 800b8a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8b2:	d017      	beq.n	800b8e4 <UART_SetConfig+0x210>
 800b8b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8b8:	d817      	bhi.n	800b8ea <UART_SetConfig+0x216>
 800b8ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8be:	d00b      	beq.n	800b8d8 <UART_SetConfig+0x204>
 800b8c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8c4:	d811      	bhi.n	800b8ea <UART_SetConfig+0x216>
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d003      	beq.n	800b8d2 <UART_SetConfig+0x1fe>
 800b8ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ce:	d006      	beq.n	800b8de <UART_SetConfig+0x20a>
 800b8d0:	e00b      	b.n	800b8ea <UART_SetConfig+0x216>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	77fb      	strb	r3, [r7, #31]
 800b8d6:	e0a0      	b.n	800ba1a <UART_SetConfig+0x346>
 800b8d8:	2302      	movs	r3, #2
 800b8da:	77fb      	strb	r3, [r7, #31]
 800b8dc:	e09d      	b.n	800ba1a <UART_SetConfig+0x346>
 800b8de:	2304      	movs	r3, #4
 800b8e0:	77fb      	strb	r3, [r7, #31]
 800b8e2:	e09a      	b.n	800ba1a <UART_SetConfig+0x346>
 800b8e4:	2308      	movs	r3, #8
 800b8e6:	77fb      	strb	r3, [r7, #31]
 800b8e8:	e097      	b.n	800ba1a <UART_SetConfig+0x346>
 800b8ea:	2310      	movs	r3, #16
 800b8ec:	77fb      	strb	r3, [r7, #31]
 800b8ee:	e094      	b.n	800ba1a <UART_SetConfig+0x346>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a30      	ldr	r2, [pc, #192]	; (800b9b8 <UART_SetConfig+0x2e4>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d125      	bne.n	800b946 <UART_SetConfig+0x272>
 800b8fa:	4b2a      	ldr	r3, [pc, #168]	; (800b9a4 <UART_SetConfig+0x2d0>)
 800b8fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b900:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b904:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b908:	d017      	beq.n	800b93a <UART_SetConfig+0x266>
 800b90a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b90e:	d817      	bhi.n	800b940 <UART_SetConfig+0x26c>
 800b910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b914:	d00b      	beq.n	800b92e <UART_SetConfig+0x25a>
 800b916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b91a:	d811      	bhi.n	800b940 <UART_SetConfig+0x26c>
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d003      	beq.n	800b928 <UART_SetConfig+0x254>
 800b920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b924:	d006      	beq.n	800b934 <UART_SetConfig+0x260>
 800b926:	e00b      	b.n	800b940 <UART_SetConfig+0x26c>
 800b928:	2301      	movs	r3, #1
 800b92a:	77fb      	strb	r3, [r7, #31]
 800b92c:	e075      	b.n	800ba1a <UART_SetConfig+0x346>
 800b92e:	2302      	movs	r3, #2
 800b930:	77fb      	strb	r3, [r7, #31]
 800b932:	e072      	b.n	800ba1a <UART_SetConfig+0x346>
 800b934:	2304      	movs	r3, #4
 800b936:	77fb      	strb	r3, [r7, #31]
 800b938:	e06f      	b.n	800ba1a <UART_SetConfig+0x346>
 800b93a:	2308      	movs	r3, #8
 800b93c:	77fb      	strb	r3, [r7, #31]
 800b93e:	e06c      	b.n	800ba1a <UART_SetConfig+0x346>
 800b940:	2310      	movs	r3, #16
 800b942:	77fb      	strb	r3, [r7, #31]
 800b944:	e069      	b.n	800ba1a <UART_SetConfig+0x346>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a1c      	ldr	r2, [pc, #112]	; (800b9bc <UART_SetConfig+0x2e8>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d137      	bne.n	800b9c0 <UART_SetConfig+0x2ec>
 800b950:	4b14      	ldr	r3, [pc, #80]	; (800b9a4 <UART_SetConfig+0x2d0>)
 800b952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b956:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b95a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b95e:	d017      	beq.n	800b990 <UART_SetConfig+0x2bc>
 800b960:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b964:	d817      	bhi.n	800b996 <UART_SetConfig+0x2c2>
 800b966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b96a:	d00b      	beq.n	800b984 <UART_SetConfig+0x2b0>
 800b96c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b970:	d811      	bhi.n	800b996 <UART_SetConfig+0x2c2>
 800b972:	2b00      	cmp	r3, #0
 800b974:	d003      	beq.n	800b97e <UART_SetConfig+0x2aa>
 800b976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b97a:	d006      	beq.n	800b98a <UART_SetConfig+0x2b6>
 800b97c:	e00b      	b.n	800b996 <UART_SetConfig+0x2c2>
 800b97e:	2300      	movs	r3, #0
 800b980:	77fb      	strb	r3, [r7, #31]
 800b982:	e04a      	b.n	800ba1a <UART_SetConfig+0x346>
 800b984:	2302      	movs	r3, #2
 800b986:	77fb      	strb	r3, [r7, #31]
 800b988:	e047      	b.n	800ba1a <UART_SetConfig+0x346>
 800b98a:	2304      	movs	r3, #4
 800b98c:	77fb      	strb	r3, [r7, #31]
 800b98e:	e044      	b.n	800ba1a <UART_SetConfig+0x346>
 800b990:	2308      	movs	r3, #8
 800b992:	77fb      	strb	r3, [r7, #31]
 800b994:	e041      	b.n	800ba1a <UART_SetConfig+0x346>
 800b996:	2310      	movs	r3, #16
 800b998:	77fb      	strb	r3, [r7, #31]
 800b99a:	e03e      	b.n	800ba1a <UART_SetConfig+0x346>
 800b99c:	efff69f3 	.word	0xefff69f3
 800b9a0:	40011000 	.word	0x40011000
 800b9a4:	40023800 	.word	0x40023800
 800b9a8:	40004400 	.word	0x40004400
 800b9ac:	40004800 	.word	0x40004800
 800b9b0:	40004c00 	.word	0x40004c00
 800b9b4:	40005000 	.word	0x40005000
 800b9b8:	40011400 	.word	0x40011400
 800b9bc:	40007800 	.word	0x40007800
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a71      	ldr	r2, [pc, #452]	; (800bb8c <UART_SetConfig+0x4b8>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d125      	bne.n	800ba16 <UART_SetConfig+0x342>
 800b9ca:	4b71      	ldr	r3, [pc, #452]	; (800bb90 <UART_SetConfig+0x4bc>)
 800b9cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b9d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b9d8:	d017      	beq.n	800ba0a <UART_SetConfig+0x336>
 800b9da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b9de:	d817      	bhi.n	800ba10 <UART_SetConfig+0x33c>
 800b9e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9e4:	d00b      	beq.n	800b9fe <UART_SetConfig+0x32a>
 800b9e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9ea:	d811      	bhi.n	800ba10 <UART_SetConfig+0x33c>
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d003      	beq.n	800b9f8 <UART_SetConfig+0x324>
 800b9f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9f4:	d006      	beq.n	800ba04 <UART_SetConfig+0x330>
 800b9f6:	e00b      	b.n	800ba10 <UART_SetConfig+0x33c>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	77fb      	strb	r3, [r7, #31]
 800b9fc:	e00d      	b.n	800ba1a <UART_SetConfig+0x346>
 800b9fe:	2302      	movs	r3, #2
 800ba00:	77fb      	strb	r3, [r7, #31]
 800ba02:	e00a      	b.n	800ba1a <UART_SetConfig+0x346>
 800ba04:	2304      	movs	r3, #4
 800ba06:	77fb      	strb	r3, [r7, #31]
 800ba08:	e007      	b.n	800ba1a <UART_SetConfig+0x346>
 800ba0a:	2308      	movs	r3, #8
 800ba0c:	77fb      	strb	r3, [r7, #31]
 800ba0e:	e004      	b.n	800ba1a <UART_SetConfig+0x346>
 800ba10:	2310      	movs	r3, #16
 800ba12:	77fb      	strb	r3, [r7, #31]
 800ba14:	e001      	b.n	800ba1a <UART_SetConfig+0x346>
 800ba16:	2310      	movs	r3, #16
 800ba18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	69db      	ldr	r3, [r3, #28]
 800ba1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba22:	d15a      	bne.n	800bada <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800ba24:	7ffb      	ldrb	r3, [r7, #31]
 800ba26:	2b08      	cmp	r3, #8
 800ba28:	d827      	bhi.n	800ba7a <UART_SetConfig+0x3a6>
 800ba2a:	a201      	add	r2, pc, #4	; (adr r2, 800ba30 <UART_SetConfig+0x35c>)
 800ba2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba30:	0800ba55 	.word	0x0800ba55
 800ba34:	0800ba5d 	.word	0x0800ba5d
 800ba38:	0800ba65 	.word	0x0800ba65
 800ba3c:	0800ba7b 	.word	0x0800ba7b
 800ba40:	0800ba6b 	.word	0x0800ba6b
 800ba44:	0800ba7b 	.word	0x0800ba7b
 800ba48:	0800ba7b 	.word	0x0800ba7b
 800ba4c:	0800ba7b 	.word	0x0800ba7b
 800ba50:	0800ba73 	.word	0x0800ba73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba54:	f7fd ff5a 	bl	800990c <HAL_RCC_GetPCLK1Freq>
 800ba58:	61b8      	str	r0, [r7, #24]
        break;
 800ba5a:	e013      	b.n	800ba84 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba5c:	f7fd ff6a 	bl	8009934 <HAL_RCC_GetPCLK2Freq>
 800ba60:	61b8      	str	r0, [r7, #24]
        break;
 800ba62:	e00f      	b.n	800ba84 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba64:	4b4b      	ldr	r3, [pc, #300]	; (800bb94 <UART_SetConfig+0x4c0>)
 800ba66:	61bb      	str	r3, [r7, #24]
        break;
 800ba68:	e00c      	b.n	800ba84 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba6a:	f7fd fe8d 	bl	8009788 <HAL_RCC_GetSysClockFreq>
 800ba6e:	61b8      	str	r0, [r7, #24]
        break;
 800ba70:	e008      	b.n	800ba84 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba76:	61bb      	str	r3, [r7, #24]
        break;
 800ba78:	e004      	b.n	800ba84 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	77bb      	strb	r3, [r7, #30]
        break;
 800ba82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d074      	beq.n	800bb74 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	005a      	lsls	r2, r3, #1
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	085b      	lsrs	r3, r3, #1
 800ba94:	441a      	add	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	2b0f      	cmp	r3, #15
 800baa4:	d916      	bls.n	800bad4 <UART_SetConfig+0x400>
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baac:	d212      	bcs.n	800bad4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	f023 030f 	bic.w	r3, r3, #15
 800bab6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	085b      	lsrs	r3, r3, #1
 800babc:	b29b      	uxth	r3, r3
 800babe:	f003 0307 	and.w	r3, r3, #7
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	89fb      	ldrh	r3, [r7, #14]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	89fa      	ldrh	r2, [r7, #14]
 800bad0:	60da      	str	r2, [r3, #12]
 800bad2:	e04f      	b.n	800bb74 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	77bb      	strb	r3, [r7, #30]
 800bad8:	e04c      	b.n	800bb74 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bada:	7ffb      	ldrb	r3, [r7, #31]
 800badc:	2b08      	cmp	r3, #8
 800bade:	d828      	bhi.n	800bb32 <UART_SetConfig+0x45e>
 800bae0:	a201      	add	r2, pc, #4	; (adr r2, 800bae8 <UART_SetConfig+0x414>)
 800bae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae6:	bf00      	nop
 800bae8:	0800bb0d 	.word	0x0800bb0d
 800baec:	0800bb15 	.word	0x0800bb15
 800baf0:	0800bb1d 	.word	0x0800bb1d
 800baf4:	0800bb33 	.word	0x0800bb33
 800baf8:	0800bb23 	.word	0x0800bb23
 800bafc:	0800bb33 	.word	0x0800bb33
 800bb00:	0800bb33 	.word	0x0800bb33
 800bb04:	0800bb33 	.word	0x0800bb33
 800bb08:	0800bb2b 	.word	0x0800bb2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb0c:	f7fd fefe 	bl	800990c <HAL_RCC_GetPCLK1Freq>
 800bb10:	61b8      	str	r0, [r7, #24]
        break;
 800bb12:	e013      	b.n	800bb3c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb14:	f7fd ff0e 	bl	8009934 <HAL_RCC_GetPCLK2Freq>
 800bb18:	61b8      	str	r0, [r7, #24]
        break;
 800bb1a:	e00f      	b.n	800bb3c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb1c:	4b1d      	ldr	r3, [pc, #116]	; (800bb94 <UART_SetConfig+0x4c0>)
 800bb1e:	61bb      	str	r3, [r7, #24]
        break;
 800bb20:	e00c      	b.n	800bb3c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb22:	f7fd fe31 	bl	8009788 <HAL_RCC_GetSysClockFreq>
 800bb26:	61b8      	str	r0, [r7, #24]
        break;
 800bb28:	e008      	b.n	800bb3c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb2e:	61bb      	str	r3, [r7, #24]
        break;
 800bb30:	e004      	b.n	800bb3c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800bb32:	2300      	movs	r3, #0
 800bb34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	77bb      	strb	r3, [r7, #30]
        break;
 800bb3a:	bf00      	nop
    }

    if (pclk != 0U)
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d018      	beq.n	800bb74 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	085a      	lsrs	r2, r3, #1
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	441a      	add	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	2b0f      	cmp	r3, #15
 800bb5a:	d909      	bls.n	800bb70 <UART_SetConfig+0x49c>
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb62:	d205      	bcs.n	800bb70 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	60da      	str	r2, [r3, #12]
 800bb6e:	e001      	b.n	800bb74 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bb80:	7fbb      	ldrb	r3, [r7, #30]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3720      	adds	r7, #32
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	40007c00 	.word	0x40007c00
 800bb90:	40023800 	.word	0x40023800
 800bb94:	00f42400 	.word	0x00f42400

0800bb98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba4:	f003 0301 	and.w	r3, r3, #1
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00a      	beq.n	800bbc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	430a      	orrs	r2, r1
 800bbc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc6:	f003 0302 	and.w	r3, r3, #2
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00a      	beq.n	800bbe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	430a      	orrs	r2, r1
 800bbe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe8:	f003 0304 	and.w	r3, r3, #4
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d00a      	beq.n	800bc06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	430a      	orrs	r2, r1
 800bc04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0a:	f003 0308 	and.w	r3, r3, #8
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00a      	beq.n	800bc28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	430a      	orrs	r2, r1
 800bc26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	f003 0310 	and.w	r3, r3, #16
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00a      	beq.n	800bc4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	430a      	orrs	r2, r1
 800bc48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4e:	f003 0320 	and.w	r3, r3, #32
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00a      	beq.n	800bc6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	430a      	orrs	r2, r1
 800bc6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d01a      	beq.n	800bcae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	430a      	orrs	r2, r1
 800bc8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc96:	d10a      	bne.n	800bcae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	430a      	orrs	r2, r1
 800bcac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00a      	beq.n	800bcd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	430a      	orrs	r2, r1
 800bcce:	605a      	str	r2, [r3, #4]
  }
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af02      	add	r7, sp, #8
 800bce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bcec:	f7f9 fece 	bl	8005a8c <HAL_GetTick>
 800bcf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f003 0308 	and.w	r3, r3, #8
 800bcfc:	2b08      	cmp	r3, #8
 800bcfe:	d10e      	bne.n	800bd1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 f817 	bl	800bd42 <UART_WaitOnFlagUntilTimeout>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d001      	beq.n	800bd1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	e00d      	b.n	800bd3a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2220      	movs	r2, #32
 800bd22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2220      	movs	r2, #32
 800bd28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b09c      	sub	sp, #112	; 0x70
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	60f8      	str	r0, [r7, #12]
 800bd4a:	60b9      	str	r1, [r7, #8]
 800bd4c:	603b      	str	r3, [r7, #0]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd52:	e0a5      	b.n	800bea0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5a:	f000 80a1 	beq.w	800bea0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd5e:	f7f9 fe95 	bl	8005a8c <HAL_GetTick>
 800bd62:	4602      	mov	r2, r0
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d302      	bcc.n	800bd74 <UART_WaitOnFlagUntilTimeout+0x32>
 800bd6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d13e      	bne.n	800bdf2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd7c:	e853 3f00 	ldrex	r3, [r3]
 800bd80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bd82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd88:	667b      	str	r3, [r7, #100]	; 0x64
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd9a:	e841 2300 	strex	r3, r2, [r1]
 800bd9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bda0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1e6      	bne.n	800bd74 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3308      	adds	r3, #8
 800bdac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb0:	e853 3f00 	ldrex	r3, [r3]
 800bdb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb8:	f023 0301 	bic.w	r3, r3, #1
 800bdbc:	663b      	str	r3, [r7, #96]	; 0x60
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bdc6:	64ba      	str	r2, [r7, #72]	; 0x48
 800bdc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bdcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdce:	e841 2300 	strex	r3, r2, [r1]
 800bdd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bdd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1e5      	bne.n	800bda6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2220      	movs	r2, #32
 800bdde:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2220      	movs	r2, #32
 800bde4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2200      	movs	r2, #0
 800bdea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bdee:	2303      	movs	r3, #3
 800bdf0:	e067      	b.n	800bec2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f003 0304 	and.w	r3, r3, #4
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d04f      	beq.n	800bea0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	69db      	ldr	r3, [r3, #28]
 800be06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be0e:	d147      	bne.n	800bea0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be22:	e853 3f00 	ldrex	r3, [r3]
 800be26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	461a      	mov	r2, r3
 800be36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be38:	637b      	str	r3, [r7, #52]	; 0x34
 800be3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be40:	e841 2300 	strex	r3, r2, [r1]
 800be44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1e6      	bne.n	800be1a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	3308      	adds	r3, #8
 800be52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	e853 3f00 	ldrex	r3, [r3]
 800be5a:	613b      	str	r3, [r7, #16]
   return(result);
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	f023 0301 	bic.w	r3, r3, #1
 800be62:	66bb      	str	r3, [r7, #104]	; 0x68
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3308      	adds	r3, #8
 800be6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be6c:	623a      	str	r2, [r7, #32]
 800be6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be70:	69f9      	ldr	r1, [r7, #28]
 800be72:	6a3a      	ldr	r2, [r7, #32]
 800be74:	e841 2300 	strex	r3, r2, [r1]
 800be78:	61bb      	str	r3, [r7, #24]
   return(result);
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1e5      	bne.n	800be4c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2220      	movs	r2, #32
 800be84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2220      	movs	r2, #32
 800be8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2220      	movs	r2, #32
 800be90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800be9c:	2303      	movs	r3, #3
 800be9e:	e010      	b.n	800bec2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	69da      	ldr	r2, [r3, #28]
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	4013      	ands	r3, r2
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	429a      	cmp	r2, r3
 800beae:	bf0c      	ite	eq
 800beb0:	2301      	moveq	r3, #1
 800beb2:	2300      	movne	r3, #0
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	461a      	mov	r2, r3
 800beb8:	79fb      	ldrb	r3, [r7, #7]
 800beba:	429a      	cmp	r2, r3
 800bebc:	f43f af4a 	beq.w	800bd54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3770      	adds	r7, #112	; 0x70
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
	...

0800becc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d121      	bne.n	800bf22 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	4b27      	ldr	r3, [pc, #156]	; (800bf80 <FMC_SDRAM_Init+0xb4>)
 800bee4:	4013      	ands	r3, r2
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	6851      	ldr	r1, [r2, #4]
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	6892      	ldr	r2, [r2, #8]
 800beee:	4311      	orrs	r1, r2
 800bef0:	683a      	ldr	r2, [r7, #0]
 800bef2:	68d2      	ldr	r2, [r2, #12]
 800bef4:	4311      	orrs	r1, r2
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	6912      	ldr	r2, [r2, #16]
 800befa:	4311      	orrs	r1, r2
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	6952      	ldr	r2, [r2, #20]
 800bf00:	4311      	orrs	r1, r2
 800bf02:	683a      	ldr	r2, [r7, #0]
 800bf04:	6992      	ldr	r2, [r2, #24]
 800bf06:	4311      	orrs	r1, r2
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	69d2      	ldr	r2, [r2, #28]
 800bf0c:	4311      	orrs	r1, r2
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	6a12      	ldr	r2, [r2, #32]
 800bf12:	4311      	orrs	r1, r2
 800bf14:	683a      	ldr	r2, [r7, #0]
 800bf16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bf18:	430a      	orrs	r2, r1
 800bf1a:	431a      	orrs	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	601a      	str	r2, [r3, #0]
 800bf20:	e026      	b.n	800bf70 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	69d9      	ldr	r1, [r3, #28]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	4319      	orrs	r1, r3
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf38:	430b      	orrs	r3, r1
 800bf3a:	431a      	orrs	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	685a      	ldr	r2, [r3, #4]
 800bf44:	4b0e      	ldr	r3, [pc, #56]	; (800bf80 <FMC_SDRAM_Init+0xb4>)
 800bf46:	4013      	ands	r3, r2
 800bf48:	683a      	ldr	r2, [r7, #0]
 800bf4a:	6851      	ldr	r1, [r2, #4]
 800bf4c:	683a      	ldr	r2, [r7, #0]
 800bf4e:	6892      	ldr	r2, [r2, #8]
 800bf50:	4311      	orrs	r1, r2
 800bf52:	683a      	ldr	r2, [r7, #0]
 800bf54:	68d2      	ldr	r2, [r2, #12]
 800bf56:	4311      	orrs	r1, r2
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	6912      	ldr	r2, [r2, #16]
 800bf5c:	4311      	orrs	r1, r2
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	6952      	ldr	r2, [r2, #20]
 800bf62:	4311      	orrs	r1, r2
 800bf64:	683a      	ldr	r2, [r7, #0]
 800bf66:	6992      	ldr	r2, [r2, #24]
 800bf68:	430a      	orrs	r2, r1
 800bf6a:	431a      	orrs	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	370c      	adds	r7, #12
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	ffff8000 	.word	0xffff8000

0800bf84 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d128      	bne.n	800bfe8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	1e59      	subs	r1, r3, #1
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	011b      	lsls	r3, r3, #4
 800bfac:	4319      	orrs	r1, r3
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	021b      	lsls	r3, r3, #8
 800bfb6:	4319      	orrs	r1, r3
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	031b      	lsls	r3, r3, #12
 800bfc0:	4319      	orrs	r1, r3
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	041b      	lsls	r3, r3, #16
 800bfca:	4319      	orrs	r1, r3
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	695b      	ldr	r3, [r3, #20]
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	051b      	lsls	r3, r3, #20
 800bfd4:	4319      	orrs	r1, r3
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	699b      	ldr	r3, [r3, #24]
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	061b      	lsls	r3, r3, #24
 800bfde:	430b      	orrs	r3, r1
 800bfe0:	431a      	orrs	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	609a      	str	r2, [r3, #8]
 800bfe6:	e02d      	b.n	800c044 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	689a      	ldr	r2, [r3, #8]
 800bfec:	4b19      	ldr	r3, [pc, #100]	; (800c054 <FMC_SDRAM_Timing_Init+0xd0>)
 800bfee:	4013      	ands	r3, r2
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	68d2      	ldr	r2, [r2, #12]
 800bff4:	3a01      	subs	r2, #1
 800bff6:	0311      	lsls	r1, r2, #12
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	6952      	ldr	r2, [r2, #20]
 800bffc:	3a01      	subs	r2, #1
 800bffe:	0512      	lsls	r2, r2, #20
 800c000:	430a      	orrs	r2, r1
 800c002:	431a      	orrs	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	1e59      	subs	r1, r3, #1
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	3b01      	subs	r3, #1
 800c01c:	011b      	lsls	r3, r3, #4
 800c01e:	4319      	orrs	r1, r3
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	3b01      	subs	r3, #1
 800c026:	021b      	lsls	r3, r3, #8
 800c028:	4319      	orrs	r1, r3
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	3b01      	subs	r3, #1
 800c030:	041b      	lsls	r3, r3, #16
 800c032:	4319      	orrs	r1, r3
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	699b      	ldr	r3, [r3, #24]
 800c038:	3b01      	subs	r3, #1
 800c03a:	061b      	lsls	r3, r3, #24
 800c03c:	430b      	orrs	r3, r1
 800c03e:	431a      	orrs	r2, r3
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	3714      	adds	r7, #20
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	ff0f0fff 	.word	0xff0f0fff

0800c058 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	691a      	ldr	r2, [r3, #16]
 800c068:	4b0c      	ldr	r3, [pc, #48]	; (800c09c <FMC_SDRAM_SendCommand+0x44>)
 800c06a:	4013      	ands	r3, r2
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	6811      	ldr	r1, [r2, #0]
 800c070:	68ba      	ldr	r2, [r7, #8]
 800c072:	6852      	ldr	r2, [r2, #4]
 800c074:	4311      	orrs	r1, r2
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	6892      	ldr	r2, [r2, #8]
 800c07a:	3a01      	subs	r2, #1
 800c07c:	0152      	lsls	r2, r2, #5
 800c07e:	4311      	orrs	r1, r2
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	68d2      	ldr	r2, [r2, #12]
 800c084:	0252      	lsls	r2, r2, #9
 800c086:	430a      	orrs	r2, r1
 800c088:	431a      	orrs	r2, r3
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	ffc00000 	.word	0xffc00000

0800c0a0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	695a      	ldr	r2, [r3, #20]
 800c0ae:	4b07      	ldr	r3, [pc, #28]	; (800c0cc <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	0052      	lsls	r2, r2, #1
 800c0b6:	431a      	orrs	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	370c      	adds	r7, #12
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	ffffc001 	.word	0xffffc001

0800c0d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b085      	sub	sp, #20
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c0de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0e2:	2b84      	cmp	r3, #132	; 0x84
 800c0e4:	d005      	beq.n	800c0f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c0e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	3303      	adds	r3, #3
 800c0f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3714      	adds	r7, #20
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c102:	b089      	sub	sp, #36	; 0x24
 800c104:	af04      	add	r7, sp, #16
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d020      	beq.n	800c154 <osThreadCreate+0x54>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d01c      	beq.n	800c154 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685c      	ldr	r4, [r3, #4]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681d      	ldr	r5, [r3, #0]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	691e      	ldr	r6, [r3, #16]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7ff ffcf 	bl	800c0d0 <makeFreeRtosPriority>
 800c132:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	695b      	ldr	r3, [r3, #20]
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c13c:	9202      	str	r2, [sp, #8]
 800c13e:	9301      	str	r3, [sp, #4]
 800c140:	9100      	str	r1, [sp, #0]
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	4632      	mov	r2, r6
 800c146:	4629      	mov	r1, r5
 800c148:	4620      	mov	r0, r4
 800c14a:	f000 f8ed 	bl	800c328 <xTaskCreateStatic>
 800c14e:	4603      	mov	r3, r0
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	e01c      	b.n	800c18e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685c      	ldr	r4, [r3, #4]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c160:	b29e      	uxth	r6, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c168:	4618      	mov	r0, r3
 800c16a:	f7ff ffb1 	bl	800c0d0 <makeFreeRtosPriority>
 800c16e:	4602      	mov	r2, r0
 800c170:	f107 030c 	add.w	r3, r7, #12
 800c174:	9301      	str	r3, [sp, #4]
 800c176:	9200      	str	r2, [sp, #0]
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	4632      	mov	r2, r6
 800c17c:	4629      	mov	r1, r5
 800c17e:	4620      	mov	r0, r4
 800c180:	f000 f935 	bl	800c3ee <xTaskCreate>
 800c184:	4603      	mov	r3, r0
 800c186:	2b01      	cmp	r3, #1
 800c188:	d001      	beq.n	800c18e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c18a:	2300      	movs	r3, #0
 800c18c:	e000      	b.n	800c190 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c18e:	68fb      	ldr	r3, [r7, #12]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3714      	adds	r7, #20
 800c194:	46bd      	mov	sp, r7
 800c196:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c198 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d001      	beq.n	800c1ae <osDelay+0x16>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	e000      	b.n	800c1b0 <osDelay+0x18>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f000 fa6b 	bl	800c68c <vTaskDelay>
  
  return osOK;
 800c1b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f103 0208 	add.w	r2, r3, #8
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f103 0208 	add.w	r2, r3, #8
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f103 0208 	add.w	r2, r3, #8
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c1f4:	bf00      	nop
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c20e:	bf00      	nop
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c21a:	b480      	push	{r7}
 800c21c:	b085      	sub	sp, #20
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
 800c222:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	689a      	ldr	r2, [r3, #8]
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	601a      	str	r2, [r3, #0]
}
 800c256:	bf00      	nop
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c262:	b480      	push	{r7}
 800c264:	b085      	sub	sp, #20
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
 800c26a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c278:	d103      	bne.n	800c282 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	60fb      	str	r3, [r7, #12]
 800c280:	e00c      	b.n	800c29c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	3308      	adds	r3, #8
 800c286:	60fb      	str	r3, [r7, #12]
 800c288:	e002      	b.n	800c290 <vListInsert+0x2e>
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	60fb      	str	r3, [r7, #12]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d2f6      	bcs.n	800c28a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	685a      	ldr	r2, [r3, #4]
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	1c5a      	adds	r2, r3, #1
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	601a      	str	r2, [r3, #0]
}
 800c2c8:	bf00      	nop
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	691b      	ldr	r3, [r3, #16]
 800c2e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	6892      	ldr	r2, [r2, #8]
 800c2ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	6852      	ldr	r2, [r2, #4]
 800c2f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d103      	bne.n	800c308 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	689a      	ldr	r2, [r3, #8]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	1e5a      	subs	r2, r3, #1
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3714      	adds	r7, #20
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08e      	sub	sp, #56	; 0x38
 800c32c:	af04      	add	r7, sp, #16
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d10c      	bne.n	800c356 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c340:	b672      	cpsid	i
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	b662      	cpsie	i
 800c350:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c352:	bf00      	nop
 800c354:	e7fe      	b.n	800c354 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10c      	bne.n	800c376 <xTaskCreateStatic+0x4e>
	__asm volatile
 800c35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c360:	b672      	cpsid	i
 800c362:	f383 8811 	msr	BASEPRI, r3
 800c366:	f3bf 8f6f 	isb	sy
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	b662      	cpsie	i
 800c370:	61fb      	str	r3, [r7, #28]
}
 800c372:	bf00      	nop
 800c374:	e7fe      	b.n	800c374 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c376:	23b4      	movs	r3, #180	; 0xb4
 800c378:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	2bb4      	cmp	r3, #180	; 0xb4
 800c37e:	d00c      	beq.n	800c39a <xTaskCreateStatic+0x72>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	b672      	cpsid	i
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	b662      	cpsie	i
 800c394:	61bb      	str	r3, [r7, #24]
}
 800c396:	bf00      	nop
 800c398:	e7fe      	b.n	800c398 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c39a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d01e      	beq.n	800c3e0 <xTaskCreateStatic+0xb8>
 800c3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d01b      	beq.n	800c3e0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b4:	2202      	movs	r2, #2
 800c3b6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	9303      	str	r3, [sp, #12]
 800c3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c0:	9302      	str	r3, [sp, #8]
 800c3c2:	f107 0314 	add.w	r3, r7, #20
 800c3c6:	9301      	str	r3, [sp, #4]
 800c3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	68b9      	ldr	r1, [r7, #8]
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	f000 f850 	bl	800c478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3da:	f000 f8ed 	bl	800c5b8 <prvAddNewTaskToReadyList>
 800c3de:	e001      	b.n	800c3e4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c3e4:	697b      	ldr	r3, [r7, #20]
	}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3728      	adds	r7, #40	; 0x28
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b08c      	sub	sp, #48	; 0x30
 800c3f2:	af04      	add	r7, sp, #16
 800c3f4:	60f8      	str	r0, [r7, #12]
 800c3f6:	60b9      	str	r1, [r7, #8]
 800c3f8:	603b      	str	r3, [r7, #0]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c3fe:	88fb      	ldrh	r3, [r7, #6]
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	4618      	mov	r0, r3
 800c404:	f000 fd3c 	bl	800ce80 <pvPortMalloc>
 800c408:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d00e      	beq.n	800c42e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c410:	20b4      	movs	r0, #180	; 0xb4
 800c412:	f000 fd35 	bl	800ce80 <pvPortMalloc>
 800c416:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d003      	beq.n	800c426 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c41e:	69fb      	ldr	r3, [r7, #28]
 800c420:	697a      	ldr	r2, [r7, #20]
 800c422:	631a      	str	r2, [r3, #48]	; 0x30
 800c424:	e005      	b.n	800c432 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c426:	6978      	ldr	r0, [r7, #20]
 800c428:	f000 fdf4 	bl	800d014 <vPortFree>
 800c42c:	e001      	b.n	800c432 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c42e:	2300      	movs	r3, #0
 800c430:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d017      	beq.n	800c468 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c440:	88fa      	ldrh	r2, [r7, #6]
 800c442:	2300      	movs	r3, #0
 800c444:	9303      	str	r3, [sp, #12]
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	9302      	str	r3, [sp, #8]
 800c44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44c:	9301      	str	r3, [sp, #4]
 800c44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	68b9      	ldr	r1, [r7, #8]
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f000 f80e 	bl	800c478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c45c:	69f8      	ldr	r0, [r7, #28]
 800c45e:	f000 f8ab 	bl	800c5b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c462:	2301      	movs	r3, #1
 800c464:	61bb      	str	r3, [r7, #24]
 800c466:	e002      	b.n	800c46e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c468:	f04f 33ff 	mov.w	r3, #4294967295
 800c46c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c46e:	69bb      	ldr	r3, [r7, #24]
	}
 800c470:	4618      	mov	r0, r3
 800c472:	3720      	adds	r7, #32
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b088      	sub	sp, #32
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
 800c484:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c48a:	6879      	ldr	r1, [r7, #4]
 800c48c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c490:	440b      	add	r3, r1
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	4413      	add	r3, r2
 800c496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	f023 0307 	bic.w	r3, r3, #7
 800c49e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	f003 0307 	and.w	r3, r3, #7
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00c      	beq.n	800c4c4 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800c4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ae:	b672      	cpsid	i
 800c4b0:	f383 8811 	msr	BASEPRI, r3
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	b662      	cpsie	i
 800c4be:	617b      	str	r3, [r7, #20]
}
 800c4c0:	bf00      	nop
 800c4c2:	e7fe      	b.n	800c4c2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d01f      	beq.n	800c50a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	61fb      	str	r3, [r7, #28]
 800c4ce:	e012      	b.n	800c4f6 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c4d0:	68ba      	ldr	r2, [r7, #8]
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	7819      	ldrb	r1, [r3, #0]
 800c4d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	4413      	add	r3, r2
 800c4de:	3334      	adds	r3, #52	; 0x34
 800c4e0:	460a      	mov	r2, r1
 800c4e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c4e4:	68ba      	ldr	r2, [r7, #8]
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d006      	beq.n	800c4fe <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	61fb      	str	r3, [r7, #28]
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	2b0f      	cmp	r3, #15
 800c4fa:	d9e9      	bls.n	800c4d0 <prvInitialiseNewTask+0x58>
 800c4fc:	e000      	b.n	800c500 <prvInitialiseNewTask+0x88>
			{
				break;
 800c4fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c502:	2200      	movs	r2, #0
 800c504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c508:	e003      	b.n	800c512 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	2200      	movs	r2, #0
 800c50e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c514:	2b06      	cmp	r3, #6
 800c516:	d901      	bls.n	800c51c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c518:	2306      	movs	r3, #6
 800c51a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c520:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c526:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52a:	2200      	movs	r2, #0
 800c52c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c530:	3304      	adds	r3, #4
 800c532:	4618      	mov	r0, r3
 800c534:	f7ff fe64 	bl	800c200 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	3318      	adds	r3, #24
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7ff fe5f 	bl	800c200 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c546:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54a:	f1c3 0207 	rsb	r2, r3, #7
 800c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c550:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c556:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	2200      	movs	r2, #0
 800c55c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c562:	2200      	movs	r2, #0
 800c564:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56a:	334c      	adds	r3, #76	; 0x4c
 800c56c:	2260      	movs	r2, #96	; 0x60
 800c56e:	2100      	movs	r1, #0
 800c570:	4618      	mov	r0, r3
 800c572:	f000 feb7 	bl	800d2e4 <memset>
 800c576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c578:	4a0c      	ldr	r2, [pc, #48]	; (800c5ac <prvInitialiseNewTask+0x134>)
 800c57a:	651a      	str	r2, [r3, #80]	; 0x50
 800c57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57e:	4a0c      	ldr	r2, [pc, #48]	; (800c5b0 <prvInitialiseNewTask+0x138>)
 800c580:	655a      	str	r2, [r3, #84]	; 0x54
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	4a0b      	ldr	r2, [pc, #44]	; (800c5b4 <prvInitialiseNewTask+0x13c>)
 800c586:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	68f9      	ldr	r1, [r7, #12]
 800c58c:	69b8      	ldr	r0, [r7, #24]
 800c58e:	f000 fb43 	bl	800cc18 <pxPortInitialiseStack>
 800c592:	4602      	mov	r2, r0
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d002      	beq.n	800c5a4 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5a4:	bf00      	nop
 800c5a6:	3720      	adds	r7, #32
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	0808f720 	.word	0x0808f720
 800c5b0:	0808f740 	.word	0x0808f740
 800c5b4:	0808f700 	.word	0x0808f700

0800c5b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c5c0:	f000 fba2 	bl	800cd08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c5c4:	4b2a      	ldr	r3, [pc, #168]	; (800c670 <prvAddNewTaskToReadyList+0xb8>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	4a29      	ldr	r2, [pc, #164]	; (800c670 <prvAddNewTaskToReadyList+0xb8>)
 800c5cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c5ce:	4b29      	ldr	r3, [pc, #164]	; (800c674 <prvAddNewTaskToReadyList+0xbc>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d109      	bne.n	800c5ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c5d6:	4a27      	ldr	r2, [pc, #156]	; (800c674 <prvAddNewTaskToReadyList+0xbc>)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c5dc:	4b24      	ldr	r3, [pc, #144]	; (800c670 <prvAddNewTaskToReadyList+0xb8>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d110      	bne.n	800c606 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c5e4:	f000 fa52 	bl	800ca8c <prvInitialiseTaskLists>
 800c5e8:	e00d      	b.n	800c606 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c5ea:	4b23      	ldr	r3, [pc, #140]	; (800c678 <prvAddNewTaskToReadyList+0xc0>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d109      	bne.n	800c606 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c5f2:	4b20      	ldr	r3, [pc, #128]	; (800c674 <prvAddNewTaskToReadyList+0xbc>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d802      	bhi.n	800c606 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c600:	4a1c      	ldr	r2, [pc, #112]	; (800c674 <prvAddNewTaskToReadyList+0xbc>)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c606:	4b1d      	ldr	r3, [pc, #116]	; (800c67c <prvAddNewTaskToReadyList+0xc4>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	3301      	adds	r3, #1
 800c60c:	4a1b      	ldr	r2, [pc, #108]	; (800c67c <prvAddNewTaskToReadyList+0xc4>)
 800c60e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c614:	2201      	movs	r2, #1
 800c616:	409a      	lsls	r2, r3
 800c618:	4b19      	ldr	r3, [pc, #100]	; (800c680 <prvAddNewTaskToReadyList+0xc8>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4313      	orrs	r3, r2
 800c61e:	4a18      	ldr	r2, [pc, #96]	; (800c680 <prvAddNewTaskToReadyList+0xc8>)
 800c620:	6013      	str	r3, [r2, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c626:	4613      	mov	r3, r2
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	4413      	add	r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	4a15      	ldr	r2, [pc, #84]	; (800c684 <prvAddNewTaskToReadyList+0xcc>)
 800c630:	441a      	add	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	3304      	adds	r3, #4
 800c636:	4619      	mov	r1, r3
 800c638:	4610      	mov	r0, r2
 800c63a:	f7ff fdee 	bl	800c21a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c63e:	f000 fb97 	bl	800cd70 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c642:	4b0d      	ldr	r3, [pc, #52]	; (800c678 <prvAddNewTaskToReadyList+0xc0>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00e      	beq.n	800c668 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c64a:	4b0a      	ldr	r3, [pc, #40]	; (800c674 <prvAddNewTaskToReadyList+0xbc>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c654:	429a      	cmp	r2, r3
 800c656:	d207      	bcs.n	800c668 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c658:	4b0b      	ldr	r3, [pc, #44]	; (800c688 <prvAddNewTaskToReadyList+0xd0>)
 800c65a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c65e:	601a      	str	r2, [r3, #0]
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c668:	bf00      	nop
 800c66a:	3708      	adds	r7, #8
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	2000040c 	.word	0x2000040c
 800c674:	20000310 	.word	0x20000310
 800c678:	20000418 	.word	0x20000418
 800c67c:	20000428 	.word	0x20000428
 800c680:	20000414 	.word	0x20000414
 800c684:	20000314 	.word	0x20000314
 800c688:	e000ed04 	.word	0xe000ed04

0800c68c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c694:	2300      	movs	r3, #0
 800c696:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d019      	beq.n	800c6d2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c69e:	4b14      	ldr	r3, [pc, #80]	; (800c6f0 <vTaskDelay+0x64>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00c      	beq.n	800c6c0 <vTaskDelay+0x34>
	__asm volatile
 800c6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6aa:	b672      	cpsid	i
 800c6ac:	f383 8811 	msr	BASEPRI, r3
 800c6b0:	f3bf 8f6f 	isb	sy
 800c6b4:	f3bf 8f4f 	dsb	sy
 800c6b8:	b662      	cpsie	i
 800c6ba:	60bb      	str	r3, [r7, #8]
}
 800c6bc:	bf00      	nop
 800c6be:	e7fe      	b.n	800c6be <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c6c0:	f000 f81a 	bl	800c6f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 fa40 	bl	800cb4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c6cc:	f000 f822 	bl	800c714 <xTaskResumeAll>
 800c6d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d107      	bne.n	800c6e8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c6d8:	4b06      	ldr	r3, [pc, #24]	; (800c6f4 <vTaskDelay+0x68>)
 800c6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6de:	601a      	str	r2, [r3, #0]
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6e8:	bf00      	nop
 800c6ea:	3710      	adds	r7, #16
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	20000430 	.word	0x20000430
 800c6f4:	e000ed04 	.word	0xe000ed04

0800c6f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c6fc:	4b04      	ldr	r3, [pc, #16]	; (800c710 <vTaskSuspendAll+0x18>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	3301      	adds	r3, #1
 800c702:	4a03      	ldr	r2, [pc, #12]	; (800c710 <vTaskSuspendAll+0x18>)
 800c704:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c706:	bf00      	nop
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr
 800c710:	20000430 	.word	0x20000430

0800c714 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c71a:	2300      	movs	r3, #0
 800c71c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c71e:	2300      	movs	r3, #0
 800c720:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c722:	4b42      	ldr	r3, [pc, #264]	; (800c82c <xTaskResumeAll+0x118>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10c      	bne.n	800c744 <xTaskResumeAll+0x30>
	__asm volatile
 800c72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72e:	b672      	cpsid	i
 800c730:	f383 8811 	msr	BASEPRI, r3
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	b662      	cpsie	i
 800c73e:	603b      	str	r3, [r7, #0]
}
 800c740:	bf00      	nop
 800c742:	e7fe      	b.n	800c742 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c744:	f000 fae0 	bl	800cd08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c748:	4b38      	ldr	r3, [pc, #224]	; (800c82c <xTaskResumeAll+0x118>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	3b01      	subs	r3, #1
 800c74e:	4a37      	ldr	r2, [pc, #220]	; (800c82c <xTaskResumeAll+0x118>)
 800c750:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c752:	4b36      	ldr	r3, [pc, #216]	; (800c82c <xTaskResumeAll+0x118>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d161      	bne.n	800c81e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c75a:	4b35      	ldr	r3, [pc, #212]	; (800c830 <xTaskResumeAll+0x11c>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d05d      	beq.n	800c81e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c762:	e02e      	b.n	800c7c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c764:	4b33      	ldr	r3, [pc, #204]	; (800c834 <xTaskResumeAll+0x120>)
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	3318      	adds	r3, #24
 800c770:	4618      	mov	r0, r3
 800c772:	f7ff fdaf 	bl	800c2d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	3304      	adds	r3, #4
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7ff fdaa 	bl	800c2d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c784:	2201      	movs	r2, #1
 800c786:	409a      	lsls	r2, r3
 800c788:	4b2b      	ldr	r3, [pc, #172]	; (800c838 <xTaskResumeAll+0x124>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4313      	orrs	r3, r2
 800c78e:	4a2a      	ldr	r2, [pc, #168]	; (800c838 <xTaskResumeAll+0x124>)
 800c790:	6013      	str	r3, [r2, #0]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c796:	4613      	mov	r3, r2
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	4413      	add	r3, r2
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	4a27      	ldr	r2, [pc, #156]	; (800c83c <xTaskResumeAll+0x128>)
 800c7a0:	441a      	add	r2, r3
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	f7ff fd36 	bl	800c21a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b2:	4b23      	ldr	r3, [pc, #140]	; (800c840 <xTaskResumeAll+0x12c>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d302      	bcc.n	800c7c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c7bc:	4b21      	ldr	r3, [pc, #132]	; (800c844 <xTaskResumeAll+0x130>)
 800c7be:	2201      	movs	r2, #1
 800c7c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7c2:	4b1c      	ldr	r3, [pc, #112]	; (800c834 <xTaskResumeAll+0x120>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1cc      	bne.n	800c764 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d001      	beq.n	800c7d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c7d0:	f000 f99c 	bl	800cb0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c7d4:	4b1c      	ldr	r3, [pc, #112]	; (800c848 <xTaskResumeAll+0x134>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d010      	beq.n	800c802 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c7e0:	f000 f836 	bl	800c850 <xTaskIncrementTick>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d002      	beq.n	800c7f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c7ea:	4b16      	ldr	r3, [pc, #88]	; (800c844 <xTaskResumeAll+0x130>)
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1f1      	bne.n	800c7e0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800c7fc:	4b12      	ldr	r3, [pc, #72]	; (800c848 <xTaskResumeAll+0x134>)
 800c7fe:	2200      	movs	r2, #0
 800c800:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c802:	4b10      	ldr	r3, [pc, #64]	; (800c844 <xTaskResumeAll+0x130>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d009      	beq.n	800c81e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c80a:	2301      	movs	r3, #1
 800c80c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c80e:	4b0f      	ldr	r3, [pc, #60]	; (800c84c <xTaskResumeAll+0x138>)
 800c810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c814:	601a      	str	r2, [r3, #0]
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c81e:	f000 faa7 	bl	800cd70 <vPortExitCritical>

	return xAlreadyYielded;
 800c822:	68bb      	ldr	r3, [r7, #8]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3710      	adds	r7, #16
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	20000430 	.word	0x20000430
 800c830:	2000040c 	.word	0x2000040c
 800c834:	200003d0 	.word	0x200003d0
 800c838:	20000414 	.word	0x20000414
 800c83c:	20000314 	.word	0x20000314
 800c840:	20000310 	.word	0x20000310
 800c844:	20000420 	.word	0x20000420
 800c848:	2000041c 	.word	0x2000041c
 800c84c:	e000ed04 	.word	0xe000ed04

0800c850 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b086      	sub	sp, #24
 800c854:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c856:	2300      	movs	r3, #0
 800c858:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c85a:	4b4f      	ldr	r3, [pc, #316]	; (800c998 <xTaskIncrementTick+0x148>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f040 808a 	bne.w	800c978 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c864:	4b4d      	ldr	r3, [pc, #308]	; (800c99c <xTaskIncrementTick+0x14c>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	3301      	adds	r3, #1
 800c86a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c86c:	4a4b      	ldr	r2, [pc, #300]	; (800c99c <xTaskIncrementTick+0x14c>)
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d122      	bne.n	800c8be <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c878:	4b49      	ldr	r3, [pc, #292]	; (800c9a0 <xTaskIncrementTick+0x150>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00c      	beq.n	800c89c <xTaskIncrementTick+0x4c>
	__asm volatile
 800c882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c886:	b672      	cpsid	i
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	b662      	cpsie	i
 800c896:	603b      	str	r3, [r7, #0]
}
 800c898:	bf00      	nop
 800c89a:	e7fe      	b.n	800c89a <xTaskIncrementTick+0x4a>
 800c89c:	4b40      	ldr	r3, [pc, #256]	; (800c9a0 <xTaskIncrementTick+0x150>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	60fb      	str	r3, [r7, #12]
 800c8a2:	4b40      	ldr	r3, [pc, #256]	; (800c9a4 <xTaskIncrementTick+0x154>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a3e      	ldr	r2, [pc, #248]	; (800c9a0 <xTaskIncrementTick+0x150>)
 800c8a8:	6013      	str	r3, [r2, #0]
 800c8aa:	4a3e      	ldr	r2, [pc, #248]	; (800c9a4 <xTaskIncrementTick+0x154>)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6013      	str	r3, [r2, #0]
 800c8b0:	4b3d      	ldr	r3, [pc, #244]	; (800c9a8 <xTaskIncrementTick+0x158>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	4a3c      	ldr	r2, [pc, #240]	; (800c9a8 <xTaskIncrementTick+0x158>)
 800c8b8:	6013      	str	r3, [r2, #0]
 800c8ba:	f000 f927 	bl	800cb0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c8be:	4b3b      	ldr	r3, [pc, #236]	; (800c9ac <xTaskIncrementTick+0x15c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	693a      	ldr	r2, [r7, #16]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d348      	bcc.n	800c95a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8c8:	4b35      	ldr	r3, [pc, #212]	; (800c9a0 <xTaskIncrementTick+0x150>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d104      	bne.n	800c8dc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8d2:	4b36      	ldr	r3, [pc, #216]	; (800c9ac <xTaskIncrementTick+0x15c>)
 800c8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d8:	601a      	str	r2, [r3, #0]
					break;
 800c8da:	e03e      	b.n	800c95a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8dc:	4b30      	ldr	r3, [pc, #192]	; (800c9a0 <xTaskIncrementTick+0x150>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c8ec:	693a      	ldr	r2, [r7, #16]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d203      	bcs.n	800c8fc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c8f4:	4a2d      	ldr	r2, [pc, #180]	; (800c9ac <xTaskIncrementTick+0x15c>)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c8fa:	e02e      	b.n	800c95a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	3304      	adds	r3, #4
 800c900:	4618      	mov	r0, r3
 800c902:	f7ff fce7 	bl	800c2d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d004      	beq.n	800c918 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	3318      	adds	r3, #24
 800c912:	4618      	mov	r0, r3
 800c914:	f7ff fcde 	bl	800c2d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c91c:	2201      	movs	r2, #1
 800c91e:	409a      	lsls	r2, r3
 800c920:	4b23      	ldr	r3, [pc, #140]	; (800c9b0 <xTaskIncrementTick+0x160>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4313      	orrs	r3, r2
 800c926:	4a22      	ldr	r2, [pc, #136]	; (800c9b0 <xTaskIncrementTick+0x160>)
 800c928:	6013      	str	r3, [r2, #0]
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c92e:	4613      	mov	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	4413      	add	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4a1f      	ldr	r2, [pc, #124]	; (800c9b4 <xTaskIncrementTick+0x164>)
 800c938:	441a      	add	r2, r3
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	3304      	adds	r3, #4
 800c93e:	4619      	mov	r1, r3
 800c940:	4610      	mov	r0, r2
 800c942:	f7ff fc6a 	bl	800c21a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c94a:	4b1b      	ldr	r3, [pc, #108]	; (800c9b8 <xTaskIncrementTick+0x168>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c950:	429a      	cmp	r2, r3
 800c952:	d3b9      	bcc.n	800c8c8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c954:	2301      	movs	r3, #1
 800c956:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c958:	e7b6      	b.n	800c8c8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c95a:	4b17      	ldr	r3, [pc, #92]	; (800c9b8 <xTaskIncrementTick+0x168>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c960:	4914      	ldr	r1, [pc, #80]	; (800c9b4 <xTaskIncrementTick+0x164>)
 800c962:	4613      	mov	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	4413      	add	r3, r2
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	440b      	add	r3, r1
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d907      	bls.n	800c982 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800c972:	2301      	movs	r3, #1
 800c974:	617b      	str	r3, [r7, #20]
 800c976:	e004      	b.n	800c982 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c978:	4b10      	ldr	r3, [pc, #64]	; (800c9bc <xTaskIncrementTick+0x16c>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	3301      	adds	r3, #1
 800c97e:	4a0f      	ldr	r2, [pc, #60]	; (800c9bc <xTaskIncrementTick+0x16c>)
 800c980:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c982:	4b0f      	ldr	r3, [pc, #60]	; (800c9c0 <xTaskIncrementTick+0x170>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d001      	beq.n	800c98e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800c98a:	2301      	movs	r3, #1
 800c98c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c98e:	697b      	ldr	r3, [r7, #20]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3718      	adds	r7, #24
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	20000430 	.word	0x20000430
 800c99c:	20000410 	.word	0x20000410
 800c9a0:	200003c8 	.word	0x200003c8
 800c9a4:	200003cc 	.word	0x200003cc
 800c9a8:	20000424 	.word	0x20000424
 800c9ac:	2000042c 	.word	0x2000042c
 800c9b0:	20000414 	.word	0x20000414
 800c9b4:	20000314 	.word	0x20000314
 800c9b8:	20000310 	.word	0x20000310
 800c9bc:	2000041c 	.word	0x2000041c
 800c9c0:	20000420 	.word	0x20000420

0800c9c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b087      	sub	sp, #28
 800c9c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c9ca:	4b2a      	ldr	r3, [pc, #168]	; (800ca74 <vTaskSwitchContext+0xb0>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d003      	beq.n	800c9da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c9d2:	4b29      	ldr	r3, [pc, #164]	; (800ca78 <vTaskSwitchContext+0xb4>)
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c9d8:	e046      	b.n	800ca68 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c9da:	4b27      	ldr	r3, [pc, #156]	; (800ca78 <vTaskSwitchContext+0xb4>)
 800c9dc:	2200      	movs	r2, #0
 800c9de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9e0:	4b26      	ldr	r3, [pc, #152]	; (800ca7c <vTaskSwitchContext+0xb8>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	fab3 f383 	clz	r3, r3
 800c9ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c9ee:	7afb      	ldrb	r3, [r7, #11]
 800c9f0:	f1c3 031f 	rsb	r3, r3, #31
 800c9f4:	617b      	str	r3, [r7, #20]
 800c9f6:	4922      	ldr	r1, [pc, #136]	; (800ca80 <vTaskSwitchContext+0xbc>)
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	4413      	add	r3, r2
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	440b      	add	r3, r1
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d10c      	bne.n	800ca24 <vTaskSwitchContext+0x60>
	__asm volatile
 800ca0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0e:	b672      	cpsid	i
 800ca10:	f383 8811 	msr	BASEPRI, r3
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	b662      	cpsie	i
 800ca1e:	607b      	str	r3, [r7, #4]
}
 800ca20:	bf00      	nop
 800ca22:	e7fe      	b.n	800ca22 <vTaskSwitchContext+0x5e>
 800ca24:	697a      	ldr	r2, [r7, #20]
 800ca26:	4613      	mov	r3, r2
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	4413      	add	r3, r2
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	4a14      	ldr	r2, [pc, #80]	; (800ca80 <vTaskSwitchContext+0xbc>)
 800ca30:	4413      	add	r3, r2
 800ca32:	613b      	str	r3, [r7, #16]
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	685a      	ldr	r2, [r3, #4]
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	605a      	str	r2, [r3, #4]
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	3308      	adds	r3, #8
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d104      	bne.n	800ca54 <vTaskSwitchContext+0x90>
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	685a      	ldr	r2, [r3, #4]
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	605a      	str	r2, [r3, #4]
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	4a0a      	ldr	r2, [pc, #40]	; (800ca84 <vTaskSwitchContext+0xc0>)
 800ca5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ca5e:	4b09      	ldr	r3, [pc, #36]	; (800ca84 <vTaskSwitchContext+0xc0>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	334c      	adds	r3, #76	; 0x4c
 800ca64:	4a08      	ldr	r2, [pc, #32]	; (800ca88 <vTaskSwitchContext+0xc4>)
 800ca66:	6013      	str	r3, [r2, #0]
}
 800ca68:	bf00      	nop
 800ca6a:	371c      	adds	r7, #28
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr
 800ca74:	20000430 	.word	0x20000430
 800ca78:	20000420 	.word	0x20000420
 800ca7c:	20000414 	.word	0x20000414
 800ca80:	20000314 	.word	0x20000314
 800ca84:	20000310 	.word	0x20000310
 800ca88:	20000050 	.word	0x20000050

0800ca8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca92:	2300      	movs	r3, #0
 800ca94:	607b      	str	r3, [r7, #4]
 800ca96:	e00c      	b.n	800cab2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4413      	add	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	4a12      	ldr	r2, [pc, #72]	; (800caec <prvInitialiseTaskLists+0x60>)
 800caa4:	4413      	add	r3, r2
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7ff fb8a 	bl	800c1c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	3301      	adds	r3, #1
 800cab0:	607b      	str	r3, [r7, #4]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2b06      	cmp	r3, #6
 800cab6:	d9ef      	bls.n	800ca98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cab8:	480d      	ldr	r0, [pc, #52]	; (800caf0 <prvInitialiseTaskLists+0x64>)
 800caba:	f7ff fb81 	bl	800c1c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cabe:	480d      	ldr	r0, [pc, #52]	; (800caf4 <prvInitialiseTaskLists+0x68>)
 800cac0:	f7ff fb7e 	bl	800c1c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cac4:	480c      	ldr	r0, [pc, #48]	; (800caf8 <prvInitialiseTaskLists+0x6c>)
 800cac6:	f7ff fb7b 	bl	800c1c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800caca:	480c      	ldr	r0, [pc, #48]	; (800cafc <prvInitialiseTaskLists+0x70>)
 800cacc:	f7ff fb78 	bl	800c1c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cad0:	480b      	ldr	r0, [pc, #44]	; (800cb00 <prvInitialiseTaskLists+0x74>)
 800cad2:	f7ff fb75 	bl	800c1c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cad6:	4b0b      	ldr	r3, [pc, #44]	; (800cb04 <prvInitialiseTaskLists+0x78>)
 800cad8:	4a05      	ldr	r2, [pc, #20]	; (800caf0 <prvInitialiseTaskLists+0x64>)
 800cada:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cadc:	4b0a      	ldr	r3, [pc, #40]	; (800cb08 <prvInitialiseTaskLists+0x7c>)
 800cade:	4a05      	ldr	r2, [pc, #20]	; (800caf4 <prvInitialiseTaskLists+0x68>)
 800cae0:	601a      	str	r2, [r3, #0]
}
 800cae2:	bf00      	nop
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	20000314 	.word	0x20000314
 800caf0:	200003a0 	.word	0x200003a0
 800caf4:	200003b4 	.word	0x200003b4
 800caf8:	200003d0 	.word	0x200003d0
 800cafc:	200003e4 	.word	0x200003e4
 800cb00:	200003f8 	.word	0x200003f8
 800cb04:	200003c8 	.word	0x200003c8
 800cb08:	200003cc 	.word	0x200003cc

0800cb0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb12:	4b0c      	ldr	r3, [pc, #48]	; (800cb44 <prvResetNextTaskUnblockTime+0x38>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d104      	bne.n	800cb26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb1c:	4b0a      	ldr	r3, [pc, #40]	; (800cb48 <prvResetNextTaskUnblockTime+0x3c>)
 800cb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb24:	e008      	b.n	800cb38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb26:	4b07      	ldr	r3, [pc, #28]	; (800cb44 <prvResetNextTaskUnblockTime+0x38>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	4a04      	ldr	r2, [pc, #16]	; (800cb48 <prvResetNextTaskUnblockTime+0x3c>)
 800cb36:	6013      	str	r3, [r2, #0]
}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr
 800cb44:	200003c8 	.word	0x200003c8
 800cb48:	2000042c 	.word	0x2000042c

0800cb4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb56:	4b29      	ldr	r3, [pc, #164]	; (800cbfc <prvAddCurrentTaskToDelayedList+0xb0>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb5c:	4b28      	ldr	r3, [pc, #160]	; (800cc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3304      	adds	r3, #4
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7ff fbb6 	bl	800c2d4 <uxListRemove>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10b      	bne.n	800cb86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cb6e:	4b24      	ldr	r3, [pc, #144]	; (800cc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb74:	2201      	movs	r2, #1
 800cb76:	fa02 f303 	lsl.w	r3, r2, r3
 800cb7a:	43da      	mvns	r2, r3
 800cb7c:	4b21      	ldr	r3, [pc, #132]	; (800cc04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4013      	ands	r3, r2
 800cb82:	4a20      	ldr	r2, [pc, #128]	; (800cc04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cb84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb8c:	d10a      	bne.n	800cba4 <prvAddCurrentTaskToDelayedList+0x58>
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d007      	beq.n	800cba4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb94:	4b1a      	ldr	r3, [pc, #104]	; (800cc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	3304      	adds	r3, #4
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	481a      	ldr	r0, [pc, #104]	; (800cc08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cb9e:	f7ff fb3c 	bl	800c21a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cba2:	e026      	b.n	800cbf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4413      	add	r3, r2
 800cbaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cbac:	4b14      	ldr	r3, [pc, #80]	; (800cc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d209      	bcs.n	800cbd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbbc:	4b13      	ldr	r3, [pc, #76]	; (800cc0c <prvAddCurrentTaskToDelayedList+0xc0>)
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	4b0f      	ldr	r3, [pc, #60]	; (800cc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	4610      	mov	r0, r2
 800cbca:	f7ff fb4a 	bl	800c262 <vListInsert>
}
 800cbce:	e010      	b.n	800cbf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbd0:	4b0f      	ldr	r3, [pc, #60]	; (800cc10 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	4b0a      	ldr	r3, [pc, #40]	; (800cc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3304      	adds	r3, #4
 800cbda:	4619      	mov	r1, r3
 800cbdc:	4610      	mov	r0, r2
 800cbde:	f7ff fb40 	bl	800c262 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cbe2:	4b0c      	ldr	r3, [pc, #48]	; (800cc14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d202      	bcs.n	800cbf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cbec:	4a09      	ldr	r2, [pc, #36]	; (800cc14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	6013      	str	r3, [r2, #0]
}
 800cbf2:	bf00      	nop
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	20000410 	.word	0x20000410
 800cc00:	20000310 	.word	0x20000310
 800cc04:	20000414 	.word	0x20000414
 800cc08:	200003f8 	.word	0x200003f8
 800cc0c:	200003cc 	.word	0x200003cc
 800cc10:	200003c8 	.word	0x200003c8
 800cc14:	2000042c 	.word	0x2000042c

0800cc18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	3b04      	subs	r3, #4
 800cc28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	3b04      	subs	r3, #4
 800cc36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	f023 0201 	bic.w	r2, r3, #1
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	3b04      	subs	r3, #4
 800cc46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc48:	4a0c      	ldr	r2, [pc, #48]	; (800cc7c <pxPortInitialiseStack+0x64>)
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	3b14      	subs	r3, #20
 800cc52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	3b04      	subs	r3, #4
 800cc5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f06f 0202 	mvn.w	r2, #2
 800cc66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	3b20      	subs	r3, #32
 800cc6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3714      	adds	r7, #20
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr
 800cc7c:	0800cc81 	.word	0x0800cc81

0800cc80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc80:	b480      	push	{r7}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc8a:	4b14      	ldr	r3, [pc, #80]	; (800ccdc <prvTaskExitError+0x5c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc92:	d00c      	beq.n	800ccae <prvTaskExitError+0x2e>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	b672      	cpsid	i
 800cc9a:	f383 8811 	msr	BASEPRI, r3
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	f3bf 8f4f 	dsb	sy
 800cca6:	b662      	cpsie	i
 800cca8:	60fb      	str	r3, [r7, #12]
}
 800ccaa:	bf00      	nop
 800ccac:	e7fe      	b.n	800ccac <prvTaskExitError+0x2c>
	__asm volatile
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	b672      	cpsid	i
 800ccb4:	f383 8811 	msr	BASEPRI, r3
 800ccb8:	f3bf 8f6f 	isb	sy
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	b662      	cpsie	i
 800ccc2:	60bb      	str	r3, [r7, #8]
}
 800ccc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ccc6:	bf00      	nop
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d0fc      	beq.n	800ccc8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ccce:	bf00      	nop
 800ccd0:	bf00      	nop
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr
 800ccdc:	2000004c 	.word	0x2000004c

0800cce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cce0:	4b07      	ldr	r3, [pc, #28]	; (800cd00 <pxCurrentTCBConst2>)
 800cce2:	6819      	ldr	r1, [r3, #0]
 800cce4:	6808      	ldr	r0, [r1, #0]
 800cce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccea:	f380 8809 	msr	PSP, r0
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f04f 0000 	mov.w	r0, #0
 800ccf6:	f380 8811 	msr	BASEPRI, r0
 800ccfa:	4770      	bx	lr
 800ccfc:	f3af 8000 	nop.w

0800cd00 <pxCurrentTCBConst2>:
 800cd00:	20000310 	.word	0x20000310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd04:	bf00      	nop
 800cd06:	bf00      	nop

0800cd08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	b672      	cpsid	i
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	b662      	cpsie	i
 800cd22:	607b      	str	r3, [r7, #4]
}
 800cd24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd26:	4b10      	ldr	r3, [pc, #64]	; (800cd68 <vPortEnterCritical+0x60>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	4a0e      	ldr	r2, [pc, #56]	; (800cd68 <vPortEnterCritical+0x60>)
 800cd2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd30:	4b0d      	ldr	r3, [pc, #52]	; (800cd68 <vPortEnterCritical+0x60>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d111      	bne.n	800cd5c <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd38:	4b0c      	ldr	r3, [pc, #48]	; (800cd6c <vPortEnterCritical+0x64>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d00c      	beq.n	800cd5c <vPortEnterCritical+0x54>
	__asm volatile
 800cd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd46:	b672      	cpsid	i
 800cd48:	f383 8811 	msr	BASEPRI, r3
 800cd4c:	f3bf 8f6f 	isb	sy
 800cd50:	f3bf 8f4f 	dsb	sy
 800cd54:	b662      	cpsie	i
 800cd56:	603b      	str	r3, [r7, #0]
}
 800cd58:	bf00      	nop
 800cd5a:	e7fe      	b.n	800cd5a <vPortEnterCritical+0x52>
	}
}
 800cd5c:	bf00      	nop
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr
 800cd68:	2000004c 	.word	0x2000004c
 800cd6c:	e000ed04 	.word	0xe000ed04

0800cd70 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd76:	4b13      	ldr	r3, [pc, #76]	; (800cdc4 <vPortExitCritical+0x54>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d10c      	bne.n	800cd98 <vPortExitCritical+0x28>
	__asm volatile
 800cd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd82:	b672      	cpsid	i
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	b662      	cpsie	i
 800cd92:	607b      	str	r3, [r7, #4]
}
 800cd94:	bf00      	nop
 800cd96:	e7fe      	b.n	800cd96 <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800cd98:	4b0a      	ldr	r3, [pc, #40]	; (800cdc4 <vPortExitCritical+0x54>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	3b01      	subs	r3, #1
 800cd9e:	4a09      	ldr	r2, [pc, #36]	; (800cdc4 <vPortExitCritical+0x54>)
 800cda0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cda2:	4b08      	ldr	r3, [pc, #32]	; (800cdc4 <vPortExitCritical+0x54>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d105      	bne.n	800cdb6 <vPortExitCritical+0x46>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cdb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cdb6:	bf00      	nop
 800cdb8:	370c      	adds	r7, #12
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	2000004c 	.word	0x2000004c
	...

0800cdd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cdd0:	f3ef 8009 	mrs	r0, PSP
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	4b15      	ldr	r3, [pc, #84]	; (800ce30 <pxCurrentTCBConst>)
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	f01e 0f10 	tst.w	lr, #16
 800cde0:	bf08      	it	eq
 800cde2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cde6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdea:	6010      	str	r0, [r2, #0]
 800cdec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cdf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cdf4:	b672      	cpsid	i
 800cdf6:	f380 8811 	msr	BASEPRI, r0
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	f3bf 8f6f 	isb	sy
 800ce02:	b662      	cpsie	i
 800ce04:	f7ff fdde 	bl	800c9c4 <vTaskSwitchContext>
 800ce08:	f04f 0000 	mov.w	r0, #0
 800ce0c:	f380 8811 	msr	BASEPRI, r0
 800ce10:	bc09      	pop	{r0, r3}
 800ce12:	6819      	ldr	r1, [r3, #0]
 800ce14:	6808      	ldr	r0, [r1, #0]
 800ce16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1a:	f01e 0f10 	tst.w	lr, #16
 800ce1e:	bf08      	it	eq
 800ce20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce24:	f380 8809 	msr	PSP, r0
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop

0800ce30 <pxCurrentTCBConst>:
 800ce30:	20000310 	.word	0x20000310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop

0800ce38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce42:	b672      	cpsid	i
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	b662      	cpsie	i
 800ce52:	607b      	str	r3, [r7, #4]
}
 800ce54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce56:	f7ff fcfb 	bl	800c850 <xTaskIncrementTick>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce60:	4b06      	ldr	r3, [pc, #24]	; (800ce7c <SysTick_Handler+0x44>)
 800ce62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce66:	601a      	str	r2, [r3, #0]
 800ce68:	2300      	movs	r3, #0
 800ce6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	f383 8811 	msr	BASEPRI, r3
}
 800ce72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce74:	bf00      	nop
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	e000ed04 	.word	0xe000ed04

0800ce80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b08a      	sub	sp, #40	; 0x28
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce8c:	f7ff fc34 	bl	800c6f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce90:	4b5b      	ldr	r3, [pc, #364]	; (800d000 <pvPortMalloc+0x180>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d101      	bne.n	800ce9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce98:	f000 f91a 	bl	800d0d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce9c:	4b59      	ldr	r3, [pc, #356]	; (800d004 <pvPortMalloc+0x184>)
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4013      	ands	r3, r2
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f040 8092 	bne.w	800cfce <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d01f      	beq.n	800cef0 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ceb0:	2208      	movs	r2, #8
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f003 0307 	and.w	r3, r3, #7
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d016      	beq.n	800cef0 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f023 0307 	bic.w	r3, r3, #7
 800cec8:	3308      	adds	r3, #8
 800ceca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f003 0307 	and.w	r3, r3, #7
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00c      	beq.n	800cef0 <pvPortMalloc+0x70>
	__asm volatile
 800ced6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceda:	b672      	cpsid	i
 800cedc:	f383 8811 	msr	BASEPRI, r3
 800cee0:	f3bf 8f6f 	isb	sy
 800cee4:	f3bf 8f4f 	dsb	sy
 800cee8:	b662      	cpsie	i
 800ceea:	617b      	str	r3, [r7, #20]
}
 800ceec:	bf00      	nop
 800ceee:	e7fe      	b.n	800ceee <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d06b      	beq.n	800cfce <pvPortMalloc+0x14e>
 800cef6:	4b44      	ldr	r3, [pc, #272]	; (800d008 <pvPortMalloc+0x188>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d866      	bhi.n	800cfce <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf00:	4b42      	ldr	r3, [pc, #264]	; (800d00c <pvPortMalloc+0x18c>)
 800cf02:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf04:	4b41      	ldr	r3, [pc, #260]	; (800d00c <pvPortMalloc+0x18c>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf0a:	e004      	b.n	800cf16 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d903      	bls.n	800cf28 <pvPortMalloc+0xa8>
 800cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1f1      	bne.n	800cf0c <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf28:	4b35      	ldr	r3, [pc, #212]	; (800d000 <pvPortMalloc+0x180>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d04d      	beq.n	800cfce <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2208      	movs	r2, #8
 800cf38:	4413      	add	r3, r2
 800cf3a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	6a3b      	ldr	r3, [r7, #32]
 800cf42:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf46:	685a      	ldr	r2, [r3, #4]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	1ad2      	subs	r2, r2, r3
 800cf4c:	2308      	movs	r3, #8
 800cf4e:	005b      	lsls	r3, r3, #1
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d921      	bls.n	800cf98 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4413      	add	r3, r2
 800cf5a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	f003 0307 	and.w	r3, r3, #7
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00c      	beq.n	800cf80 <pvPortMalloc+0x100>
	__asm volatile
 800cf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6a:	b672      	cpsid	i
 800cf6c:	f383 8811 	msr	BASEPRI, r3
 800cf70:	f3bf 8f6f 	isb	sy
 800cf74:	f3bf 8f4f 	dsb	sy
 800cf78:	b662      	cpsie	i
 800cf7a:	613b      	str	r3, [r7, #16]
}
 800cf7c:	bf00      	nop
 800cf7e:	e7fe      	b.n	800cf7e <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	1ad2      	subs	r2, r2, r3
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf92:	69b8      	ldr	r0, [r7, #24]
 800cf94:	f000 f8fe 	bl	800d194 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf98:	4b1b      	ldr	r3, [pc, #108]	; (800d008 <pvPortMalloc+0x188>)
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	4a19      	ldr	r2, [pc, #100]	; (800d008 <pvPortMalloc+0x188>)
 800cfa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cfa6:	4b18      	ldr	r3, [pc, #96]	; (800d008 <pvPortMalloc+0x188>)
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	4b19      	ldr	r3, [pc, #100]	; (800d010 <pvPortMalloc+0x190>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d203      	bcs.n	800cfba <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cfb2:	4b15      	ldr	r3, [pc, #84]	; (800d008 <pvPortMalloc+0x188>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a16      	ldr	r2, [pc, #88]	; (800d010 <pvPortMalloc+0x190>)
 800cfb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbc:	685a      	ldr	r2, [r3, #4]
 800cfbe:	4b11      	ldr	r3, [pc, #68]	; (800d004 <pvPortMalloc+0x184>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	431a      	orrs	r2, r3
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfca:	2200      	movs	r2, #0
 800cfcc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cfce:	f7ff fba1 	bl	800c714 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	f003 0307 	and.w	r3, r3, #7
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00c      	beq.n	800cff6 <pvPortMalloc+0x176>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe0:	b672      	cpsid	i
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	b662      	cpsie	i
 800cff0:	60fb      	str	r3, [r7, #12]
}
 800cff2:	bf00      	nop
 800cff4:	e7fe      	b.n	800cff4 <pvPortMalloc+0x174>
	return pvReturn;
 800cff6:	69fb      	ldr	r3, [r7, #28]
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3728      	adds	r7, #40	; 0x28
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	2000403c 	.word	0x2000403c
 800d004:	20004048 	.word	0x20004048
 800d008:	20004040 	.word	0x20004040
 800d00c:	20004034 	.word	0x20004034
 800d010:	20004044 	.word	0x20004044

0800d014 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b086      	sub	sp, #24
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d04c      	beq.n	800d0c0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d026:	2308      	movs	r3, #8
 800d028:	425b      	negs	r3, r3
 800d02a:	697a      	ldr	r2, [r7, #20]
 800d02c:	4413      	add	r3, r2
 800d02e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	685a      	ldr	r2, [r3, #4]
 800d038:	4b23      	ldr	r3, [pc, #140]	; (800d0c8 <vPortFree+0xb4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4013      	ands	r3, r2
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d10c      	bne.n	800d05c <vPortFree+0x48>
	__asm volatile
 800d042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d046:	b672      	cpsid	i
 800d048:	f383 8811 	msr	BASEPRI, r3
 800d04c:	f3bf 8f6f 	isb	sy
 800d050:	f3bf 8f4f 	dsb	sy
 800d054:	b662      	cpsie	i
 800d056:	60fb      	str	r3, [r7, #12]
}
 800d058:	bf00      	nop
 800d05a:	e7fe      	b.n	800d05a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00c      	beq.n	800d07e <vPortFree+0x6a>
	__asm volatile
 800d064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d068:	b672      	cpsid	i
 800d06a:	f383 8811 	msr	BASEPRI, r3
 800d06e:	f3bf 8f6f 	isb	sy
 800d072:	f3bf 8f4f 	dsb	sy
 800d076:	b662      	cpsie	i
 800d078:	60bb      	str	r3, [r7, #8]
}
 800d07a:	bf00      	nop
 800d07c:	e7fe      	b.n	800d07c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	685a      	ldr	r2, [r3, #4]
 800d082:	4b11      	ldr	r3, [pc, #68]	; (800d0c8 <vPortFree+0xb4>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4013      	ands	r3, r2
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d019      	beq.n	800d0c0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d115      	bne.n	800d0c0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	685a      	ldr	r2, [r3, #4]
 800d098:	4b0b      	ldr	r3, [pc, #44]	; (800d0c8 <vPortFree+0xb4>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	43db      	mvns	r3, r3
 800d09e:	401a      	ands	r2, r3
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d0a4:	f7ff fb28 	bl	800c6f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	685a      	ldr	r2, [r3, #4]
 800d0ac:	4b07      	ldr	r3, [pc, #28]	; (800d0cc <vPortFree+0xb8>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	4a06      	ldr	r2, [pc, #24]	; (800d0cc <vPortFree+0xb8>)
 800d0b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d0b6:	6938      	ldr	r0, [r7, #16]
 800d0b8:	f000 f86c 	bl	800d194 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d0bc:	f7ff fb2a 	bl	800c714 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d0c0:	bf00      	nop
 800d0c2:	3718      	adds	r7, #24
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	20004048 	.word	0x20004048
 800d0cc:	20004040 	.word	0x20004040

0800d0d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d0d6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d0da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d0dc:	4b27      	ldr	r3, [pc, #156]	; (800d17c <prvHeapInit+0xac>)
 800d0de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f003 0307 	and.w	r3, r3, #7
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d00c      	beq.n	800d104 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	3307      	adds	r3, #7
 800d0ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f023 0307 	bic.w	r3, r3, #7
 800d0f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	1ad3      	subs	r3, r2, r3
 800d0fe:	4a1f      	ldr	r2, [pc, #124]	; (800d17c <prvHeapInit+0xac>)
 800d100:	4413      	add	r3, r2
 800d102:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d108:	4a1d      	ldr	r2, [pc, #116]	; (800d180 <prvHeapInit+0xb0>)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d10e:	4b1c      	ldr	r3, [pc, #112]	; (800d180 <prvHeapInit+0xb0>)
 800d110:	2200      	movs	r2, #0
 800d112:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	68ba      	ldr	r2, [r7, #8]
 800d118:	4413      	add	r3, r2
 800d11a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d11c:	2208      	movs	r2, #8
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	1a9b      	subs	r3, r3, r2
 800d122:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f023 0307 	bic.w	r3, r3, #7
 800d12a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	4a15      	ldr	r2, [pc, #84]	; (800d184 <prvHeapInit+0xb4>)
 800d130:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d132:	4b14      	ldr	r3, [pc, #80]	; (800d184 <prvHeapInit+0xb4>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2200      	movs	r2, #0
 800d138:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d13a:	4b12      	ldr	r3, [pc, #72]	; (800d184 <prvHeapInit+0xb4>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2200      	movs	r2, #0
 800d140:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	68fa      	ldr	r2, [r7, #12]
 800d14a:	1ad2      	subs	r2, r2, r3
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d150:	4b0c      	ldr	r3, [pc, #48]	; (800d184 <prvHeapInit+0xb4>)
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	4a0a      	ldr	r2, [pc, #40]	; (800d188 <prvHeapInit+0xb8>)
 800d15e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	4a09      	ldr	r2, [pc, #36]	; (800d18c <prvHeapInit+0xbc>)
 800d166:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d168:	4b09      	ldr	r3, [pc, #36]	; (800d190 <prvHeapInit+0xc0>)
 800d16a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d16e:	601a      	str	r2, [r3, #0]
}
 800d170:	bf00      	nop
 800d172:	3714      	adds	r7, #20
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr
 800d17c:	20000434 	.word	0x20000434
 800d180:	20004034 	.word	0x20004034
 800d184:	2000403c 	.word	0x2000403c
 800d188:	20004044 	.word	0x20004044
 800d18c:	20004040 	.word	0x20004040
 800d190:	20004048 	.word	0x20004048

0800d194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d19c:	4b28      	ldr	r3, [pc, #160]	; (800d240 <prvInsertBlockIntoFreeList+0xac>)
 800d19e:	60fb      	str	r3, [r7, #12]
 800d1a0:	e002      	b.n	800d1a8 <prvInsertBlockIntoFreeList+0x14>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	60fb      	str	r3, [r7, #12]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d8f7      	bhi.n	800d1a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	68ba      	ldr	r2, [r7, #8]
 800d1bc:	4413      	add	r3, r2
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d108      	bne.n	800d1d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	685a      	ldr	r2, [r3, #4]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	441a      	add	r2, r3
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	68ba      	ldr	r2, [r7, #8]
 800d1e0:	441a      	add	r2, r3
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d118      	bne.n	800d21c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	4b15      	ldr	r3, [pc, #84]	; (800d244 <prvInsertBlockIntoFreeList+0xb0>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d00d      	beq.n	800d212 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	685a      	ldr	r2, [r3, #4]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	441a      	add	r2, r3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	601a      	str	r2, [r3, #0]
 800d210:	e008      	b.n	800d224 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d212:	4b0c      	ldr	r3, [pc, #48]	; (800d244 <prvInsertBlockIntoFreeList+0xb0>)
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	601a      	str	r2, [r3, #0]
 800d21a:	e003      	b.n	800d224 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d224:	68fa      	ldr	r2, [r7, #12]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d002      	beq.n	800d232 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d232:	bf00      	nop
 800d234:	3714      	adds	r7, #20
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	20004034 	.word	0x20004034
 800d244:	2000403c 	.word	0x2000403c

0800d248 <clock>:
 800d248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d24a:	4b08      	ldr	r3, [pc, #32]	; (800d26c <clock+0x24>)
 800d24c:	4669      	mov	r1, sp
 800d24e:	6818      	ldr	r0, [r3, #0]
 800d250:	f000 f8da 	bl	800d408 <_times_r>
 800d254:	1c43      	adds	r3, r0, #1
 800d256:	d006      	beq.n	800d266 <clock+0x1e>
 800d258:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d25c:	4418      	add	r0, r3
 800d25e:	9b02      	ldr	r3, [sp, #8]
 800d260:	4418      	add	r0, r3
 800d262:	9b03      	ldr	r3, [sp, #12]
 800d264:	4418      	add	r0, r3
 800d266:	b005      	add	sp, #20
 800d268:	f85d fb04 	ldr.w	pc, [sp], #4
 800d26c:	20000050 	.word	0x20000050

0800d270 <__errno>:
 800d270:	4b01      	ldr	r3, [pc, #4]	; (800d278 <__errno+0x8>)
 800d272:	6818      	ldr	r0, [r3, #0]
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop
 800d278:	20000050 	.word	0x20000050

0800d27c <__libc_init_array>:
 800d27c:	b570      	push	{r4, r5, r6, lr}
 800d27e:	4d0d      	ldr	r5, [pc, #52]	; (800d2b4 <__libc_init_array+0x38>)
 800d280:	4c0d      	ldr	r4, [pc, #52]	; (800d2b8 <__libc_init_array+0x3c>)
 800d282:	1b64      	subs	r4, r4, r5
 800d284:	10a4      	asrs	r4, r4, #2
 800d286:	2600      	movs	r6, #0
 800d288:	42a6      	cmp	r6, r4
 800d28a:	d109      	bne.n	800d2a0 <__libc_init_array+0x24>
 800d28c:	4d0b      	ldr	r5, [pc, #44]	; (800d2bc <__libc_init_array+0x40>)
 800d28e:	4c0c      	ldr	r4, [pc, #48]	; (800d2c0 <__libc_init_array+0x44>)
 800d290:	f001 fc08 	bl	800eaa4 <_init>
 800d294:	1b64      	subs	r4, r4, r5
 800d296:	10a4      	asrs	r4, r4, #2
 800d298:	2600      	movs	r6, #0
 800d29a:	42a6      	cmp	r6, r4
 800d29c:	d105      	bne.n	800d2aa <__libc_init_array+0x2e>
 800d29e:	bd70      	pop	{r4, r5, r6, pc}
 800d2a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2a4:	4798      	blx	r3
 800d2a6:	3601      	adds	r6, #1
 800d2a8:	e7ee      	b.n	800d288 <__libc_init_array+0xc>
 800d2aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2ae:	4798      	blx	r3
 800d2b0:	3601      	adds	r6, #1
 800d2b2:	e7f2      	b.n	800d29a <__libc_init_array+0x1e>
 800d2b4:	0808f7e0 	.word	0x0808f7e0
 800d2b8:	0808f7e0 	.word	0x0808f7e0
 800d2bc:	0808f7e0 	.word	0x0808f7e0
 800d2c0:	0808f7e4 	.word	0x0808f7e4

0800d2c4 <__retarget_lock_acquire_recursive>:
 800d2c4:	4770      	bx	lr

0800d2c6 <__retarget_lock_release_recursive>:
 800d2c6:	4770      	bx	lr

0800d2c8 <memcpy>:
 800d2c8:	440a      	add	r2, r1
 800d2ca:	4291      	cmp	r1, r2
 800d2cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2d0:	d100      	bne.n	800d2d4 <memcpy+0xc>
 800d2d2:	4770      	bx	lr
 800d2d4:	b510      	push	{r4, lr}
 800d2d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2de:	4291      	cmp	r1, r2
 800d2e0:	d1f9      	bne.n	800d2d6 <memcpy+0xe>
 800d2e2:	bd10      	pop	{r4, pc}

0800d2e4 <memset>:
 800d2e4:	4402      	add	r2, r0
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d100      	bne.n	800d2ee <memset+0xa>
 800d2ec:	4770      	bx	lr
 800d2ee:	f803 1b01 	strb.w	r1, [r3], #1
 800d2f2:	e7f9      	b.n	800d2e8 <memset+0x4>

0800d2f4 <_malloc_r>:
 800d2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f6:	1ccd      	adds	r5, r1, #3
 800d2f8:	f025 0503 	bic.w	r5, r5, #3
 800d2fc:	3508      	adds	r5, #8
 800d2fe:	2d0c      	cmp	r5, #12
 800d300:	bf38      	it	cc
 800d302:	250c      	movcc	r5, #12
 800d304:	2d00      	cmp	r5, #0
 800d306:	4606      	mov	r6, r0
 800d308:	db01      	blt.n	800d30e <_malloc_r+0x1a>
 800d30a:	42a9      	cmp	r1, r5
 800d30c:	d903      	bls.n	800d316 <_malloc_r+0x22>
 800d30e:	230c      	movs	r3, #12
 800d310:	6033      	str	r3, [r6, #0]
 800d312:	2000      	movs	r0, #0
 800d314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d316:	f000 f87b 	bl	800d410 <__malloc_lock>
 800d31a:	4921      	ldr	r1, [pc, #132]	; (800d3a0 <_malloc_r+0xac>)
 800d31c:	680a      	ldr	r2, [r1, #0]
 800d31e:	4614      	mov	r4, r2
 800d320:	b99c      	cbnz	r4, 800d34a <_malloc_r+0x56>
 800d322:	4f20      	ldr	r7, [pc, #128]	; (800d3a4 <_malloc_r+0xb0>)
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	b923      	cbnz	r3, 800d332 <_malloc_r+0x3e>
 800d328:	4621      	mov	r1, r4
 800d32a:	4630      	mov	r0, r6
 800d32c:	f000 f83c 	bl	800d3a8 <_sbrk_r>
 800d330:	6038      	str	r0, [r7, #0]
 800d332:	4629      	mov	r1, r5
 800d334:	4630      	mov	r0, r6
 800d336:	f000 f837 	bl	800d3a8 <_sbrk_r>
 800d33a:	1c43      	adds	r3, r0, #1
 800d33c:	d123      	bne.n	800d386 <_malloc_r+0x92>
 800d33e:	230c      	movs	r3, #12
 800d340:	6033      	str	r3, [r6, #0]
 800d342:	4630      	mov	r0, r6
 800d344:	f000 f86a 	bl	800d41c <__malloc_unlock>
 800d348:	e7e3      	b.n	800d312 <_malloc_r+0x1e>
 800d34a:	6823      	ldr	r3, [r4, #0]
 800d34c:	1b5b      	subs	r3, r3, r5
 800d34e:	d417      	bmi.n	800d380 <_malloc_r+0x8c>
 800d350:	2b0b      	cmp	r3, #11
 800d352:	d903      	bls.n	800d35c <_malloc_r+0x68>
 800d354:	6023      	str	r3, [r4, #0]
 800d356:	441c      	add	r4, r3
 800d358:	6025      	str	r5, [r4, #0]
 800d35a:	e004      	b.n	800d366 <_malloc_r+0x72>
 800d35c:	6863      	ldr	r3, [r4, #4]
 800d35e:	42a2      	cmp	r2, r4
 800d360:	bf0c      	ite	eq
 800d362:	600b      	streq	r3, [r1, #0]
 800d364:	6053      	strne	r3, [r2, #4]
 800d366:	4630      	mov	r0, r6
 800d368:	f000 f858 	bl	800d41c <__malloc_unlock>
 800d36c:	f104 000b 	add.w	r0, r4, #11
 800d370:	1d23      	adds	r3, r4, #4
 800d372:	f020 0007 	bic.w	r0, r0, #7
 800d376:	1ac2      	subs	r2, r0, r3
 800d378:	d0cc      	beq.n	800d314 <_malloc_r+0x20>
 800d37a:	1a1b      	subs	r3, r3, r0
 800d37c:	50a3      	str	r3, [r4, r2]
 800d37e:	e7c9      	b.n	800d314 <_malloc_r+0x20>
 800d380:	4622      	mov	r2, r4
 800d382:	6864      	ldr	r4, [r4, #4]
 800d384:	e7cc      	b.n	800d320 <_malloc_r+0x2c>
 800d386:	1cc4      	adds	r4, r0, #3
 800d388:	f024 0403 	bic.w	r4, r4, #3
 800d38c:	42a0      	cmp	r0, r4
 800d38e:	d0e3      	beq.n	800d358 <_malloc_r+0x64>
 800d390:	1a21      	subs	r1, r4, r0
 800d392:	4630      	mov	r0, r6
 800d394:	f000 f808 	bl	800d3a8 <_sbrk_r>
 800d398:	3001      	adds	r0, #1
 800d39a:	d1dd      	bne.n	800d358 <_malloc_r+0x64>
 800d39c:	e7cf      	b.n	800d33e <_malloc_r+0x4a>
 800d39e:	bf00      	nop
 800d3a0:	2000404c 	.word	0x2000404c
 800d3a4:	20004050 	.word	0x20004050

0800d3a8 <_sbrk_r>:
 800d3a8:	b538      	push	{r3, r4, r5, lr}
 800d3aa:	4d06      	ldr	r5, [pc, #24]	; (800d3c4 <_sbrk_r+0x1c>)
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	4608      	mov	r0, r1
 800d3b2:	602b      	str	r3, [r5, #0]
 800d3b4:	f7f8 fad8 	bl	8005968 <_sbrk>
 800d3b8:	1c43      	adds	r3, r0, #1
 800d3ba:	d102      	bne.n	800d3c2 <_sbrk_r+0x1a>
 800d3bc:	682b      	ldr	r3, [r5, #0]
 800d3be:	b103      	cbz	r3, 800d3c2 <_sbrk_r+0x1a>
 800d3c0:	6023      	str	r3, [r4, #0]
 800d3c2:	bd38      	pop	{r3, r4, r5, pc}
 800d3c4:	200048e4 	.word	0x200048e4

0800d3c8 <siprintf>:
 800d3c8:	b40e      	push	{r1, r2, r3}
 800d3ca:	b500      	push	{lr}
 800d3cc:	b09c      	sub	sp, #112	; 0x70
 800d3ce:	ab1d      	add	r3, sp, #116	; 0x74
 800d3d0:	9002      	str	r0, [sp, #8]
 800d3d2:	9006      	str	r0, [sp, #24]
 800d3d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d3d8:	4809      	ldr	r0, [pc, #36]	; (800d400 <siprintf+0x38>)
 800d3da:	9107      	str	r1, [sp, #28]
 800d3dc:	9104      	str	r1, [sp, #16]
 800d3de:	4909      	ldr	r1, [pc, #36]	; (800d404 <siprintf+0x3c>)
 800d3e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3e4:	9105      	str	r1, [sp, #20]
 800d3e6:	6800      	ldr	r0, [r0, #0]
 800d3e8:	9301      	str	r3, [sp, #4]
 800d3ea:	a902      	add	r1, sp, #8
 800d3ec:	f000 f8c8 	bl	800d580 <_svfiprintf_r>
 800d3f0:	9b02      	ldr	r3, [sp, #8]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	701a      	strb	r2, [r3, #0]
 800d3f6:	b01c      	add	sp, #112	; 0x70
 800d3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3fc:	b003      	add	sp, #12
 800d3fe:	4770      	bx	lr
 800d400:	20000050 	.word	0x20000050
 800d404:	ffff0208 	.word	0xffff0208

0800d408 <_times_r>:
 800d408:	4608      	mov	r0, r1
 800d40a:	f7f8 baa1 	b.w	8005950 <_times>
	...

0800d410 <__malloc_lock>:
 800d410:	4801      	ldr	r0, [pc, #4]	; (800d418 <__malloc_lock+0x8>)
 800d412:	f7ff bf57 	b.w	800d2c4 <__retarget_lock_acquire_recursive>
 800d416:	bf00      	nop
 800d418:	200048dc 	.word	0x200048dc

0800d41c <__malloc_unlock>:
 800d41c:	4801      	ldr	r0, [pc, #4]	; (800d424 <__malloc_unlock+0x8>)
 800d41e:	f7ff bf52 	b.w	800d2c6 <__retarget_lock_release_recursive>
 800d422:	bf00      	nop
 800d424:	200048dc 	.word	0x200048dc

0800d428 <_free_r>:
 800d428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d42a:	2900      	cmp	r1, #0
 800d42c:	d048      	beq.n	800d4c0 <_free_r+0x98>
 800d42e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d432:	9001      	str	r0, [sp, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	f1a1 0404 	sub.w	r4, r1, #4
 800d43a:	bfb8      	it	lt
 800d43c:	18e4      	addlt	r4, r4, r3
 800d43e:	f7ff ffe7 	bl	800d410 <__malloc_lock>
 800d442:	4a20      	ldr	r2, [pc, #128]	; (800d4c4 <_free_r+0x9c>)
 800d444:	9801      	ldr	r0, [sp, #4]
 800d446:	6813      	ldr	r3, [r2, #0]
 800d448:	4615      	mov	r5, r2
 800d44a:	b933      	cbnz	r3, 800d45a <_free_r+0x32>
 800d44c:	6063      	str	r3, [r4, #4]
 800d44e:	6014      	str	r4, [r2, #0]
 800d450:	b003      	add	sp, #12
 800d452:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d456:	f7ff bfe1 	b.w	800d41c <__malloc_unlock>
 800d45a:	42a3      	cmp	r3, r4
 800d45c:	d90b      	bls.n	800d476 <_free_r+0x4e>
 800d45e:	6821      	ldr	r1, [r4, #0]
 800d460:	1862      	adds	r2, r4, r1
 800d462:	4293      	cmp	r3, r2
 800d464:	bf04      	itt	eq
 800d466:	681a      	ldreq	r2, [r3, #0]
 800d468:	685b      	ldreq	r3, [r3, #4]
 800d46a:	6063      	str	r3, [r4, #4]
 800d46c:	bf04      	itt	eq
 800d46e:	1852      	addeq	r2, r2, r1
 800d470:	6022      	streq	r2, [r4, #0]
 800d472:	602c      	str	r4, [r5, #0]
 800d474:	e7ec      	b.n	800d450 <_free_r+0x28>
 800d476:	461a      	mov	r2, r3
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	b10b      	cbz	r3, 800d480 <_free_r+0x58>
 800d47c:	42a3      	cmp	r3, r4
 800d47e:	d9fa      	bls.n	800d476 <_free_r+0x4e>
 800d480:	6811      	ldr	r1, [r2, #0]
 800d482:	1855      	adds	r5, r2, r1
 800d484:	42a5      	cmp	r5, r4
 800d486:	d10b      	bne.n	800d4a0 <_free_r+0x78>
 800d488:	6824      	ldr	r4, [r4, #0]
 800d48a:	4421      	add	r1, r4
 800d48c:	1854      	adds	r4, r2, r1
 800d48e:	42a3      	cmp	r3, r4
 800d490:	6011      	str	r1, [r2, #0]
 800d492:	d1dd      	bne.n	800d450 <_free_r+0x28>
 800d494:	681c      	ldr	r4, [r3, #0]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	6053      	str	r3, [r2, #4]
 800d49a:	4421      	add	r1, r4
 800d49c:	6011      	str	r1, [r2, #0]
 800d49e:	e7d7      	b.n	800d450 <_free_r+0x28>
 800d4a0:	d902      	bls.n	800d4a8 <_free_r+0x80>
 800d4a2:	230c      	movs	r3, #12
 800d4a4:	6003      	str	r3, [r0, #0]
 800d4a6:	e7d3      	b.n	800d450 <_free_r+0x28>
 800d4a8:	6825      	ldr	r5, [r4, #0]
 800d4aa:	1961      	adds	r1, r4, r5
 800d4ac:	428b      	cmp	r3, r1
 800d4ae:	bf04      	itt	eq
 800d4b0:	6819      	ldreq	r1, [r3, #0]
 800d4b2:	685b      	ldreq	r3, [r3, #4]
 800d4b4:	6063      	str	r3, [r4, #4]
 800d4b6:	bf04      	itt	eq
 800d4b8:	1949      	addeq	r1, r1, r5
 800d4ba:	6021      	streq	r1, [r4, #0]
 800d4bc:	6054      	str	r4, [r2, #4]
 800d4be:	e7c7      	b.n	800d450 <_free_r+0x28>
 800d4c0:	b003      	add	sp, #12
 800d4c2:	bd30      	pop	{r4, r5, pc}
 800d4c4:	2000404c 	.word	0x2000404c

0800d4c8 <__ssputs_r>:
 800d4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4cc:	688e      	ldr	r6, [r1, #8]
 800d4ce:	429e      	cmp	r6, r3
 800d4d0:	4682      	mov	sl, r0
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	4690      	mov	r8, r2
 800d4d6:	461f      	mov	r7, r3
 800d4d8:	d838      	bhi.n	800d54c <__ssputs_r+0x84>
 800d4da:	898a      	ldrh	r2, [r1, #12]
 800d4dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d4e0:	d032      	beq.n	800d548 <__ssputs_r+0x80>
 800d4e2:	6825      	ldr	r5, [r4, #0]
 800d4e4:	6909      	ldr	r1, [r1, #16]
 800d4e6:	eba5 0901 	sub.w	r9, r5, r1
 800d4ea:	6965      	ldr	r5, [r4, #20]
 800d4ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	444b      	add	r3, r9
 800d4f8:	106d      	asrs	r5, r5, #1
 800d4fa:	429d      	cmp	r5, r3
 800d4fc:	bf38      	it	cc
 800d4fe:	461d      	movcc	r5, r3
 800d500:	0553      	lsls	r3, r2, #21
 800d502:	d531      	bpl.n	800d568 <__ssputs_r+0xa0>
 800d504:	4629      	mov	r1, r5
 800d506:	f7ff fef5 	bl	800d2f4 <_malloc_r>
 800d50a:	4606      	mov	r6, r0
 800d50c:	b950      	cbnz	r0, 800d524 <__ssputs_r+0x5c>
 800d50e:	230c      	movs	r3, #12
 800d510:	f8ca 3000 	str.w	r3, [sl]
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d51a:	81a3      	strh	r3, [r4, #12]
 800d51c:	f04f 30ff 	mov.w	r0, #4294967295
 800d520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d524:	6921      	ldr	r1, [r4, #16]
 800d526:	464a      	mov	r2, r9
 800d528:	f7ff fece 	bl	800d2c8 <memcpy>
 800d52c:	89a3      	ldrh	r3, [r4, #12]
 800d52e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d536:	81a3      	strh	r3, [r4, #12]
 800d538:	6126      	str	r6, [r4, #16]
 800d53a:	6165      	str	r5, [r4, #20]
 800d53c:	444e      	add	r6, r9
 800d53e:	eba5 0509 	sub.w	r5, r5, r9
 800d542:	6026      	str	r6, [r4, #0]
 800d544:	60a5      	str	r5, [r4, #8]
 800d546:	463e      	mov	r6, r7
 800d548:	42be      	cmp	r6, r7
 800d54a:	d900      	bls.n	800d54e <__ssputs_r+0x86>
 800d54c:	463e      	mov	r6, r7
 800d54e:	4632      	mov	r2, r6
 800d550:	6820      	ldr	r0, [r4, #0]
 800d552:	4641      	mov	r1, r8
 800d554:	f000 faa8 	bl	800daa8 <memmove>
 800d558:	68a3      	ldr	r3, [r4, #8]
 800d55a:	6822      	ldr	r2, [r4, #0]
 800d55c:	1b9b      	subs	r3, r3, r6
 800d55e:	4432      	add	r2, r6
 800d560:	60a3      	str	r3, [r4, #8]
 800d562:	6022      	str	r2, [r4, #0]
 800d564:	2000      	movs	r0, #0
 800d566:	e7db      	b.n	800d520 <__ssputs_r+0x58>
 800d568:	462a      	mov	r2, r5
 800d56a:	f000 fab7 	bl	800dadc <_realloc_r>
 800d56e:	4606      	mov	r6, r0
 800d570:	2800      	cmp	r0, #0
 800d572:	d1e1      	bne.n	800d538 <__ssputs_r+0x70>
 800d574:	6921      	ldr	r1, [r4, #16]
 800d576:	4650      	mov	r0, sl
 800d578:	f7ff ff56 	bl	800d428 <_free_r>
 800d57c:	e7c7      	b.n	800d50e <__ssputs_r+0x46>
	...

0800d580 <_svfiprintf_r>:
 800d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d584:	4698      	mov	r8, r3
 800d586:	898b      	ldrh	r3, [r1, #12]
 800d588:	061b      	lsls	r3, r3, #24
 800d58a:	b09d      	sub	sp, #116	; 0x74
 800d58c:	4607      	mov	r7, r0
 800d58e:	460d      	mov	r5, r1
 800d590:	4614      	mov	r4, r2
 800d592:	d50e      	bpl.n	800d5b2 <_svfiprintf_r+0x32>
 800d594:	690b      	ldr	r3, [r1, #16]
 800d596:	b963      	cbnz	r3, 800d5b2 <_svfiprintf_r+0x32>
 800d598:	2140      	movs	r1, #64	; 0x40
 800d59a:	f7ff feab 	bl	800d2f4 <_malloc_r>
 800d59e:	6028      	str	r0, [r5, #0]
 800d5a0:	6128      	str	r0, [r5, #16]
 800d5a2:	b920      	cbnz	r0, 800d5ae <_svfiprintf_r+0x2e>
 800d5a4:	230c      	movs	r3, #12
 800d5a6:	603b      	str	r3, [r7, #0]
 800d5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ac:	e0d1      	b.n	800d752 <_svfiprintf_r+0x1d2>
 800d5ae:	2340      	movs	r3, #64	; 0x40
 800d5b0:	616b      	str	r3, [r5, #20]
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d5b6:	2320      	movs	r3, #32
 800d5b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5c0:	2330      	movs	r3, #48	; 0x30
 800d5c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d76c <_svfiprintf_r+0x1ec>
 800d5c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5ca:	f04f 0901 	mov.w	r9, #1
 800d5ce:	4623      	mov	r3, r4
 800d5d0:	469a      	mov	sl, r3
 800d5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5d6:	b10a      	cbz	r2, 800d5dc <_svfiprintf_r+0x5c>
 800d5d8:	2a25      	cmp	r2, #37	; 0x25
 800d5da:	d1f9      	bne.n	800d5d0 <_svfiprintf_r+0x50>
 800d5dc:	ebba 0b04 	subs.w	fp, sl, r4
 800d5e0:	d00b      	beq.n	800d5fa <_svfiprintf_r+0x7a>
 800d5e2:	465b      	mov	r3, fp
 800d5e4:	4622      	mov	r2, r4
 800d5e6:	4629      	mov	r1, r5
 800d5e8:	4638      	mov	r0, r7
 800d5ea:	f7ff ff6d 	bl	800d4c8 <__ssputs_r>
 800d5ee:	3001      	adds	r0, #1
 800d5f0:	f000 80aa 	beq.w	800d748 <_svfiprintf_r+0x1c8>
 800d5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5f6:	445a      	add	r2, fp
 800d5f8:	9209      	str	r2, [sp, #36]	; 0x24
 800d5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f000 80a2 	beq.w	800d748 <_svfiprintf_r+0x1c8>
 800d604:	2300      	movs	r3, #0
 800d606:	f04f 32ff 	mov.w	r2, #4294967295
 800d60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d60e:	f10a 0a01 	add.w	sl, sl, #1
 800d612:	9304      	str	r3, [sp, #16]
 800d614:	9307      	str	r3, [sp, #28]
 800d616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d61a:	931a      	str	r3, [sp, #104]	; 0x68
 800d61c:	4654      	mov	r4, sl
 800d61e:	2205      	movs	r2, #5
 800d620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d624:	4851      	ldr	r0, [pc, #324]	; (800d76c <_svfiprintf_r+0x1ec>)
 800d626:	f7f2 fdf3 	bl	8000210 <memchr>
 800d62a:	9a04      	ldr	r2, [sp, #16]
 800d62c:	b9d8      	cbnz	r0, 800d666 <_svfiprintf_r+0xe6>
 800d62e:	06d0      	lsls	r0, r2, #27
 800d630:	bf44      	itt	mi
 800d632:	2320      	movmi	r3, #32
 800d634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d638:	0711      	lsls	r1, r2, #28
 800d63a:	bf44      	itt	mi
 800d63c:	232b      	movmi	r3, #43	; 0x2b
 800d63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d642:	f89a 3000 	ldrb.w	r3, [sl]
 800d646:	2b2a      	cmp	r3, #42	; 0x2a
 800d648:	d015      	beq.n	800d676 <_svfiprintf_r+0xf6>
 800d64a:	9a07      	ldr	r2, [sp, #28]
 800d64c:	4654      	mov	r4, sl
 800d64e:	2000      	movs	r0, #0
 800d650:	f04f 0c0a 	mov.w	ip, #10
 800d654:	4621      	mov	r1, r4
 800d656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d65a:	3b30      	subs	r3, #48	; 0x30
 800d65c:	2b09      	cmp	r3, #9
 800d65e:	d94e      	bls.n	800d6fe <_svfiprintf_r+0x17e>
 800d660:	b1b0      	cbz	r0, 800d690 <_svfiprintf_r+0x110>
 800d662:	9207      	str	r2, [sp, #28]
 800d664:	e014      	b.n	800d690 <_svfiprintf_r+0x110>
 800d666:	eba0 0308 	sub.w	r3, r0, r8
 800d66a:	fa09 f303 	lsl.w	r3, r9, r3
 800d66e:	4313      	orrs	r3, r2
 800d670:	9304      	str	r3, [sp, #16]
 800d672:	46a2      	mov	sl, r4
 800d674:	e7d2      	b.n	800d61c <_svfiprintf_r+0x9c>
 800d676:	9b03      	ldr	r3, [sp, #12]
 800d678:	1d19      	adds	r1, r3, #4
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	9103      	str	r1, [sp, #12]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	bfbb      	ittet	lt
 800d682:	425b      	neglt	r3, r3
 800d684:	f042 0202 	orrlt.w	r2, r2, #2
 800d688:	9307      	strge	r3, [sp, #28]
 800d68a:	9307      	strlt	r3, [sp, #28]
 800d68c:	bfb8      	it	lt
 800d68e:	9204      	strlt	r2, [sp, #16]
 800d690:	7823      	ldrb	r3, [r4, #0]
 800d692:	2b2e      	cmp	r3, #46	; 0x2e
 800d694:	d10c      	bne.n	800d6b0 <_svfiprintf_r+0x130>
 800d696:	7863      	ldrb	r3, [r4, #1]
 800d698:	2b2a      	cmp	r3, #42	; 0x2a
 800d69a:	d135      	bne.n	800d708 <_svfiprintf_r+0x188>
 800d69c:	9b03      	ldr	r3, [sp, #12]
 800d69e:	1d1a      	adds	r2, r3, #4
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	9203      	str	r2, [sp, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	bfb8      	it	lt
 800d6a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6ac:	3402      	adds	r4, #2
 800d6ae:	9305      	str	r3, [sp, #20]
 800d6b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d77c <_svfiprintf_r+0x1fc>
 800d6b4:	7821      	ldrb	r1, [r4, #0]
 800d6b6:	2203      	movs	r2, #3
 800d6b8:	4650      	mov	r0, sl
 800d6ba:	f7f2 fda9 	bl	8000210 <memchr>
 800d6be:	b140      	cbz	r0, 800d6d2 <_svfiprintf_r+0x152>
 800d6c0:	2340      	movs	r3, #64	; 0x40
 800d6c2:	eba0 000a 	sub.w	r0, r0, sl
 800d6c6:	fa03 f000 	lsl.w	r0, r3, r0
 800d6ca:	9b04      	ldr	r3, [sp, #16]
 800d6cc:	4303      	orrs	r3, r0
 800d6ce:	3401      	adds	r4, #1
 800d6d0:	9304      	str	r3, [sp, #16]
 800d6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6d6:	4826      	ldr	r0, [pc, #152]	; (800d770 <_svfiprintf_r+0x1f0>)
 800d6d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6dc:	2206      	movs	r2, #6
 800d6de:	f7f2 fd97 	bl	8000210 <memchr>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d038      	beq.n	800d758 <_svfiprintf_r+0x1d8>
 800d6e6:	4b23      	ldr	r3, [pc, #140]	; (800d774 <_svfiprintf_r+0x1f4>)
 800d6e8:	bb1b      	cbnz	r3, 800d732 <_svfiprintf_r+0x1b2>
 800d6ea:	9b03      	ldr	r3, [sp, #12]
 800d6ec:	3307      	adds	r3, #7
 800d6ee:	f023 0307 	bic.w	r3, r3, #7
 800d6f2:	3308      	adds	r3, #8
 800d6f4:	9303      	str	r3, [sp, #12]
 800d6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6f8:	4433      	add	r3, r6
 800d6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d6fc:	e767      	b.n	800d5ce <_svfiprintf_r+0x4e>
 800d6fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800d702:	460c      	mov	r4, r1
 800d704:	2001      	movs	r0, #1
 800d706:	e7a5      	b.n	800d654 <_svfiprintf_r+0xd4>
 800d708:	2300      	movs	r3, #0
 800d70a:	3401      	adds	r4, #1
 800d70c:	9305      	str	r3, [sp, #20]
 800d70e:	4619      	mov	r1, r3
 800d710:	f04f 0c0a 	mov.w	ip, #10
 800d714:	4620      	mov	r0, r4
 800d716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d71a:	3a30      	subs	r2, #48	; 0x30
 800d71c:	2a09      	cmp	r2, #9
 800d71e:	d903      	bls.n	800d728 <_svfiprintf_r+0x1a8>
 800d720:	2b00      	cmp	r3, #0
 800d722:	d0c5      	beq.n	800d6b0 <_svfiprintf_r+0x130>
 800d724:	9105      	str	r1, [sp, #20]
 800d726:	e7c3      	b.n	800d6b0 <_svfiprintf_r+0x130>
 800d728:	fb0c 2101 	mla	r1, ip, r1, r2
 800d72c:	4604      	mov	r4, r0
 800d72e:	2301      	movs	r3, #1
 800d730:	e7f0      	b.n	800d714 <_svfiprintf_r+0x194>
 800d732:	ab03      	add	r3, sp, #12
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	462a      	mov	r2, r5
 800d738:	4b0f      	ldr	r3, [pc, #60]	; (800d778 <_svfiprintf_r+0x1f8>)
 800d73a:	a904      	add	r1, sp, #16
 800d73c:	4638      	mov	r0, r7
 800d73e:	f3af 8000 	nop.w
 800d742:	1c42      	adds	r2, r0, #1
 800d744:	4606      	mov	r6, r0
 800d746:	d1d6      	bne.n	800d6f6 <_svfiprintf_r+0x176>
 800d748:	89ab      	ldrh	r3, [r5, #12]
 800d74a:	065b      	lsls	r3, r3, #25
 800d74c:	f53f af2c 	bmi.w	800d5a8 <_svfiprintf_r+0x28>
 800d750:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d752:	b01d      	add	sp, #116	; 0x74
 800d754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d758:	ab03      	add	r3, sp, #12
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	462a      	mov	r2, r5
 800d75e:	4b06      	ldr	r3, [pc, #24]	; (800d778 <_svfiprintf_r+0x1f8>)
 800d760:	a904      	add	r1, sp, #16
 800d762:	4638      	mov	r0, r7
 800d764:	f000 f87a 	bl	800d85c <_printf_i>
 800d768:	e7eb      	b.n	800d742 <_svfiprintf_r+0x1c2>
 800d76a:	bf00      	nop
 800d76c:	0808f760 	.word	0x0808f760
 800d770:	0808f76a 	.word	0x0808f76a
 800d774:	00000000 	.word	0x00000000
 800d778:	0800d4c9 	.word	0x0800d4c9
 800d77c:	0808f766 	.word	0x0808f766

0800d780 <_printf_common>:
 800d780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d784:	4616      	mov	r6, r2
 800d786:	4699      	mov	r9, r3
 800d788:	688a      	ldr	r2, [r1, #8]
 800d78a:	690b      	ldr	r3, [r1, #16]
 800d78c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d790:	4293      	cmp	r3, r2
 800d792:	bfb8      	it	lt
 800d794:	4613      	movlt	r3, r2
 800d796:	6033      	str	r3, [r6, #0]
 800d798:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d79c:	4607      	mov	r7, r0
 800d79e:	460c      	mov	r4, r1
 800d7a0:	b10a      	cbz	r2, 800d7a6 <_printf_common+0x26>
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	6033      	str	r3, [r6, #0]
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	0699      	lsls	r1, r3, #26
 800d7aa:	bf42      	ittt	mi
 800d7ac:	6833      	ldrmi	r3, [r6, #0]
 800d7ae:	3302      	addmi	r3, #2
 800d7b0:	6033      	strmi	r3, [r6, #0]
 800d7b2:	6825      	ldr	r5, [r4, #0]
 800d7b4:	f015 0506 	ands.w	r5, r5, #6
 800d7b8:	d106      	bne.n	800d7c8 <_printf_common+0x48>
 800d7ba:	f104 0a19 	add.w	sl, r4, #25
 800d7be:	68e3      	ldr	r3, [r4, #12]
 800d7c0:	6832      	ldr	r2, [r6, #0]
 800d7c2:	1a9b      	subs	r3, r3, r2
 800d7c4:	42ab      	cmp	r3, r5
 800d7c6:	dc26      	bgt.n	800d816 <_printf_common+0x96>
 800d7c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d7cc:	1e13      	subs	r3, r2, #0
 800d7ce:	6822      	ldr	r2, [r4, #0]
 800d7d0:	bf18      	it	ne
 800d7d2:	2301      	movne	r3, #1
 800d7d4:	0692      	lsls	r2, r2, #26
 800d7d6:	d42b      	bmi.n	800d830 <_printf_common+0xb0>
 800d7d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7dc:	4649      	mov	r1, r9
 800d7de:	4638      	mov	r0, r7
 800d7e0:	47c0      	blx	r8
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	d01e      	beq.n	800d824 <_printf_common+0xa4>
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	68e5      	ldr	r5, [r4, #12]
 800d7ea:	6832      	ldr	r2, [r6, #0]
 800d7ec:	f003 0306 	and.w	r3, r3, #6
 800d7f0:	2b04      	cmp	r3, #4
 800d7f2:	bf08      	it	eq
 800d7f4:	1aad      	subeq	r5, r5, r2
 800d7f6:	68a3      	ldr	r3, [r4, #8]
 800d7f8:	6922      	ldr	r2, [r4, #16]
 800d7fa:	bf0c      	ite	eq
 800d7fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d800:	2500      	movne	r5, #0
 800d802:	4293      	cmp	r3, r2
 800d804:	bfc4      	itt	gt
 800d806:	1a9b      	subgt	r3, r3, r2
 800d808:	18ed      	addgt	r5, r5, r3
 800d80a:	2600      	movs	r6, #0
 800d80c:	341a      	adds	r4, #26
 800d80e:	42b5      	cmp	r5, r6
 800d810:	d11a      	bne.n	800d848 <_printf_common+0xc8>
 800d812:	2000      	movs	r0, #0
 800d814:	e008      	b.n	800d828 <_printf_common+0xa8>
 800d816:	2301      	movs	r3, #1
 800d818:	4652      	mov	r2, sl
 800d81a:	4649      	mov	r1, r9
 800d81c:	4638      	mov	r0, r7
 800d81e:	47c0      	blx	r8
 800d820:	3001      	adds	r0, #1
 800d822:	d103      	bne.n	800d82c <_printf_common+0xac>
 800d824:	f04f 30ff 	mov.w	r0, #4294967295
 800d828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d82c:	3501      	adds	r5, #1
 800d82e:	e7c6      	b.n	800d7be <_printf_common+0x3e>
 800d830:	18e1      	adds	r1, r4, r3
 800d832:	1c5a      	adds	r2, r3, #1
 800d834:	2030      	movs	r0, #48	; 0x30
 800d836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d83a:	4422      	add	r2, r4
 800d83c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d840:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d844:	3302      	adds	r3, #2
 800d846:	e7c7      	b.n	800d7d8 <_printf_common+0x58>
 800d848:	2301      	movs	r3, #1
 800d84a:	4622      	mov	r2, r4
 800d84c:	4649      	mov	r1, r9
 800d84e:	4638      	mov	r0, r7
 800d850:	47c0      	blx	r8
 800d852:	3001      	adds	r0, #1
 800d854:	d0e6      	beq.n	800d824 <_printf_common+0xa4>
 800d856:	3601      	adds	r6, #1
 800d858:	e7d9      	b.n	800d80e <_printf_common+0x8e>
	...

0800d85c <_printf_i>:
 800d85c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d860:	460c      	mov	r4, r1
 800d862:	4691      	mov	r9, r2
 800d864:	7e27      	ldrb	r7, [r4, #24]
 800d866:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d868:	2f78      	cmp	r7, #120	; 0x78
 800d86a:	4680      	mov	r8, r0
 800d86c:	469a      	mov	sl, r3
 800d86e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d872:	d807      	bhi.n	800d884 <_printf_i+0x28>
 800d874:	2f62      	cmp	r7, #98	; 0x62
 800d876:	d80a      	bhi.n	800d88e <_printf_i+0x32>
 800d878:	2f00      	cmp	r7, #0
 800d87a:	f000 80d8 	beq.w	800da2e <_printf_i+0x1d2>
 800d87e:	2f58      	cmp	r7, #88	; 0x58
 800d880:	f000 80a3 	beq.w	800d9ca <_printf_i+0x16e>
 800d884:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d888:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d88c:	e03a      	b.n	800d904 <_printf_i+0xa8>
 800d88e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d892:	2b15      	cmp	r3, #21
 800d894:	d8f6      	bhi.n	800d884 <_printf_i+0x28>
 800d896:	a001      	add	r0, pc, #4	; (adr r0, 800d89c <_printf_i+0x40>)
 800d898:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d89c:	0800d8f5 	.word	0x0800d8f5
 800d8a0:	0800d909 	.word	0x0800d909
 800d8a4:	0800d885 	.word	0x0800d885
 800d8a8:	0800d885 	.word	0x0800d885
 800d8ac:	0800d885 	.word	0x0800d885
 800d8b0:	0800d885 	.word	0x0800d885
 800d8b4:	0800d909 	.word	0x0800d909
 800d8b8:	0800d885 	.word	0x0800d885
 800d8bc:	0800d885 	.word	0x0800d885
 800d8c0:	0800d885 	.word	0x0800d885
 800d8c4:	0800d885 	.word	0x0800d885
 800d8c8:	0800da15 	.word	0x0800da15
 800d8cc:	0800d939 	.word	0x0800d939
 800d8d0:	0800d9f7 	.word	0x0800d9f7
 800d8d4:	0800d885 	.word	0x0800d885
 800d8d8:	0800d885 	.word	0x0800d885
 800d8dc:	0800da37 	.word	0x0800da37
 800d8e0:	0800d885 	.word	0x0800d885
 800d8e4:	0800d939 	.word	0x0800d939
 800d8e8:	0800d885 	.word	0x0800d885
 800d8ec:	0800d885 	.word	0x0800d885
 800d8f0:	0800d9ff 	.word	0x0800d9ff
 800d8f4:	680b      	ldr	r3, [r1, #0]
 800d8f6:	1d1a      	adds	r2, r3, #4
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	600a      	str	r2, [r1, #0]
 800d8fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d904:	2301      	movs	r3, #1
 800d906:	e0a3      	b.n	800da50 <_printf_i+0x1f4>
 800d908:	6825      	ldr	r5, [r4, #0]
 800d90a:	6808      	ldr	r0, [r1, #0]
 800d90c:	062e      	lsls	r6, r5, #24
 800d90e:	f100 0304 	add.w	r3, r0, #4
 800d912:	d50a      	bpl.n	800d92a <_printf_i+0xce>
 800d914:	6805      	ldr	r5, [r0, #0]
 800d916:	600b      	str	r3, [r1, #0]
 800d918:	2d00      	cmp	r5, #0
 800d91a:	da03      	bge.n	800d924 <_printf_i+0xc8>
 800d91c:	232d      	movs	r3, #45	; 0x2d
 800d91e:	426d      	negs	r5, r5
 800d920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d924:	485e      	ldr	r0, [pc, #376]	; (800daa0 <_printf_i+0x244>)
 800d926:	230a      	movs	r3, #10
 800d928:	e019      	b.n	800d95e <_printf_i+0x102>
 800d92a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d92e:	6805      	ldr	r5, [r0, #0]
 800d930:	600b      	str	r3, [r1, #0]
 800d932:	bf18      	it	ne
 800d934:	b22d      	sxthne	r5, r5
 800d936:	e7ef      	b.n	800d918 <_printf_i+0xbc>
 800d938:	680b      	ldr	r3, [r1, #0]
 800d93a:	6825      	ldr	r5, [r4, #0]
 800d93c:	1d18      	adds	r0, r3, #4
 800d93e:	6008      	str	r0, [r1, #0]
 800d940:	0628      	lsls	r0, r5, #24
 800d942:	d501      	bpl.n	800d948 <_printf_i+0xec>
 800d944:	681d      	ldr	r5, [r3, #0]
 800d946:	e002      	b.n	800d94e <_printf_i+0xf2>
 800d948:	0669      	lsls	r1, r5, #25
 800d94a:	d5fb      	bpl.n	800d944 <_printf_i+0xe8>
 800d94c:	881d      	ldrh	r5, [r3, #0]
 800d94e:	4854      	ldr	r0, [pc, #336]	; (800daa0 <_printf_i+0x244>)
 800d950:	2f6f      	cmp	r7, #111	; 0x6f
 800d952:	bf0c      	ite	eq
 800d954:	2308      	moveq	r3, #8
 800d956:	230a      	movne	r3, #10
 800d958:	2100      	movs	r1, #0
 800d95a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d95e:	6866      	ldr	r6, [r4, #4]
 800d960:	60a6      	str	r6, [r4, #8]
 800d962:	2e00      	cmp	r6, #0
 800d964:	bfa2      	ittt	ge
 800d966:	6821      	ldrge	r1, [r4, #0]
 800d968:	f021 0104 	bicge.w	r1, r1, #4
 800d96c:	6021      	strge	r1, [r4, #0]
 800d96e:	b90d      	cbnz	r5, 800d974 <_printf_i+0x118>
 800d970:	2e00      	cmp	r6, #0
 800d972:	d04d      	beq.n	800da10 <_printf_i+0x1b4>
 800d974:	4616      	mov	r6, r2
 800d976:	fbb5 f1f3 	udiv	r1, r5, r3
 800d97a:	fb03 5711 	mls	r7, r3, r1, r5
 800d97e:	5dc7      	ldrb	r7, [r0, r7]
 800d980:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d984:	462f      	mov	r7, r5
 800d986:	42bb      	cmp	r3, r7
 800d988:	460d      	mov	r5, r1
 800d98a:	d9f4      	bls.n	800d976 <_printf_i+0x11a>
 800d98c:	2b08      	cmp	r3, #8
 800d98e:	d10b      	bne.n	800d9a8 <_printf_i+0x14c>
 800d990:	6823      	ldr	r3, [r4, #0]
 800d992:	07df      	lsls	r7, r3, #31
 800d994:	d508      	bpl.n	800d9a8 <_printf_i+0x14c>
 800d996:	6923      	ldr	r3, [r4, #16]
 800d998:	6861      	ldr	r1, [r4, #4]
 800d99a:	4299      	cmp	r1, r3
 800d99c:	bfde      	ittt	le
 800d99e:	2330      	movle	r3, #48	; 0x30
 800d9a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d9a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d9a8:	1b92      	subs	r2, r2, r6
 800d9aa:	6122      	str	r2, [r4, #16]
 800d9ac:	f8cd a000 	str.w	sl, [sp]
 800d9b0:	464b      	mov	r3, r9
 800d9b2:	aa03      	add	r2, sp, #12
 800d9b4:	4621      	mov	r1, r4
 800d9b6:	4640      	mov	r0, r8
 800d9b8:	f7ff fee2 	bl	800d780 <_printf_common>
 800d9bc:	3001      	adds	r0, #1
 800d9be:	d14c      	bne.n	800da5a <_printf_i+0x1fe>
 800d9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c4:	b004      	add	sp, #16
 800d9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9ca:	4835      	ldr	r0, [pc, #212]	; (800daa0 <_printf_i+0x244>)
 800d9cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d9d0:	6823      	ldr	r3, [r4, #0]
 800d9d2:	680e      	ldr	r6, [r1, #0]
 800d9d4:	061f      	lsls	r7, r3, #24
 800d9d6:	f856 5b04 	ldr.w	r5, [r6], #4
 800d9da:	600e      	str	r6, [r1, #0]
 800d9dc:	d514      	bpl.n	800da08 <_printf_i+0x1ac>
 800d9de:	07d9      	lsls	r1, r3, #31
 800d9e0:	bf44      	itt	mi
 800d9e2:	f043 0320 	orrmi.w	r3, r3, #32
 800d9e6:	6023      	strmi	r3, [r4, #0]
 800d9e8:	b91d      	cbnz	r5, 800d9f2 <_printf_i+0x196>
 800d9ea:	6823      	ldr	r3, [r4, #0]
 800d9ec:	f023 0320 	bic.w	r3, r3, #32
 800d9f0:	6023      	str	r3, [r4, #0]
 800d9f2:	2310      	movs	r3, #16
 800d9f4:	e7b0      	b.n	800d958 <_printf_i+0xfc>
 800d9f6:	6823      	ldr	r3, [r4, #0]
 800d9f8:	f043 0320 	orr.w	r3, r3, #32
 800d9fc:	6023      	str	r3, [r4, #0]
 800d9fe:	2378      	movs	r3, #120	; 0x78
 800da00:	4828      	ldr	r0, [pc, #160]	; (800daa4 <_printf_i+0x248>)
 800da02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800da06:	e7e3      	b.n	800d9d0 <_printf_i+0x174>
 800da08:	065e      	lsls	r6, r3, #25
 800da0a:	bf48      	it	mi
 800da0c:	b2ad      	uxthmi	r5, r5
 800da0e:	e7e6      	b.n	800d9de <_printf_i+0x182>
 800da10:	4616      	mov	r6, r2
 800da12:	e7bb      	b.n	800d98c <_printf_i+0x130>
 800da14:	680b      	ldr	r3, [r1, #0]
 800da16:	6826      	ldr	r6, [r4, #0]
 800da18:	6960      	ldr	r0, [r4, #20]
 800da1a:	1d1d      	adds	r5, r3, #4
 800da1c:	600d      	str	r5, [r1, #0]
 800da1e:	0635      	lsls	r5, r6, #24
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	d501      	bpl.n	800da28 <_printf_i+0x1cc>
 800da24:	6018      	str	r0, [r3, #0]
 800da26:	e002      	b.n	800da2e <_printf_i+0x1d2>
 800da28:	0671      	lsls	r1, r6, #25
 800da2a:	d5fb      	bpl.n	800da24 <_printf_i+0x1c8>
 800da2c:	8018      	strh	r0, [r3, #0]
 800da2e:	2300      	movs	r3, #0
 800da30:	6123      	str	r3, [r4, #16]
 800da32:	4616      	mov	r6, r2
 800da34:	e7ba      	b.n	800d9ac <_printf_i+0x150>
 800da36:	680b      	ldr	r3, [r1, #0]
 800da38:	1d1a      	adds	r2, r3, #4
 800da3a:	600a      	str	r2, [r1, #0]
 800da3c:	681e      	ldr	r6, [r3, #0]
 800da3e:	6862      	ldr	r2, [r4, #4]
 800da40:	2100      	movs	r1, #0
 800da42:	4630      	mov	r0, r6
 800da44:	f7f2 fbe4 	bl	8000210 <memchr>
 800da48:	b108      	cbz	r0, 800da4e <_printf_i+0x1f2>
 800da4a:	1b80      	subs	r0, r0, r6
 800da4c:	6060      	str	r0, [r4, #4]
 800da4e:	6863      	ldr	r3, [r4, #4]
 800da50:	6123      	str	r3, [r4, #16]
 800da52:	2300      	movs	r3, #0
 800da54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da58:	e7a8      	b.n	800d9ac <_printf_i+0x150>
 800da5a:	6923      	ldr	r3, [r4, #16]
 800da5c:	4632      	mov	r2, r6
 800da5e:	4649      	mov	r1, r9
 800da60:	4640      	mov	r0, r8
 800da62:	47d0      	blx	sl
 800da64:	3001      	adds	r0, #1
 800da66:	d0ab      	beq.n	800d9c0 <_printf_i+0x164>
 800da68:	6823      	ldr	r3, [r4, #0]
 800da6a:	079b      	lsls	r3, r3, #30
 800da6c:	d413      	bmi.n	800da96 <_printf_i+0x23a>
 800da6e:	68e0      	ldr	r0, [r4, #12]
 800da70:	9b03      	ldr	r3, [sp, #12]
 800da72:	4298      	cmp	r0, r3
 800da74:	bfb8      	it	lt
 800da76:	4618      	movlt	r0, r3
 800da78:	e7a4      	b.n	800d9c4 <_printf_i+0x168>
 800da7a:	2301      	movs	r3, #1
 800da7c:	4632      	mov	r2, r6
 800da7e:	4649      	mov	r1, r9
 800da80:	4640      	mov	r0, r8
 800da82:	47d0      	blx	sl
 800da84:	3001      	adds	r0, #1
 800da86:	d09b      	beq.n	800d9c0 <_printf_i+0x164>
 800da88:	3501      	adds	r5, #1
 800da8a:	68e3      	ldr	r3, [r4, #12]
 800da8c:	9903      	ldr	r1, [sp, #12]
 800da8e:	1a5b      	subs	r3, r3, r1
 800da90:	42ab      	cmp	r3, r5
 800da92:	dcf2      	bgt.n	800da7a <_printf_i+0x21e>
 800da94:	e7eb      	b.n	800da6e <_printf_i+0x212>
 800da96:	2500      	movs	r5, #0
 800da98:	f104 0619 	add.w	r6, r4, #25
 800da9c:	e7f5      	b.n	800da8a <_printf_i+0x22e>
 800da9e:	bf00      	nop
 800daa0:	0808f771 	.word	0x0808f771
 800daa4:	0808f782 	.word	0x0808f782

0800daa8 <memmove>:
 800daa8:	4288      	cmp	r0, r1
 800daaa:	b510      	push	{r4, lr}
 800daac:	eb01 0402 	add.w	r4, r1, r2
 800dab0:	d902      	bls.n	800dab8 <memmove+0x10>
 800dab2:	4284      	cmp	r4, r0
 800dab4:	4623      	mov	r3, r4
 800dab6:	d807      	bhi.n	800dac8 <memmove+0x20>
 800dab8:	1e43      	subs	r3, r0, #1
 800daba:	42a1      	cmp	r1, r4
 800dabc:	d008      	beq.n	800dad0 <memmove+0x28>
 800dabe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dac6:	e7f8      	b.n	800daba <memmove+0x12>
 800dac8:	4402      	add	r2, r0
 800daca:	4601      	mov	r1, r0
 800dacc:	428a      	cmp	r2, r1
 800dace:	d100      	bne.n	800dad2 <memmove+0x2a>
 800dad0:	bd10      	pop	{r4, pc}
 800dad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dada:	e7f7      	b.n	800dacc <memmove+0x24>

0800dadc <_realloc_r>:
 800dadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dade:	4607      	mov	r7, r0
 800dae0:	4614      	mov	r4, r2
 800dae2:	460e      	mov	r6, r1
 800dae4:	b921      	cbnz	r1, 800daf0 <_realloc_r+0x14>
 800dae6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800daea:	4611      	mov	r1, r2
 800daec:	f7ff bc02 	b.w	800d2f4 <_malloc_r>
 800daf0:	b922      	cbnz	r2, 800dafc <_realloc_r+0x20>
 800daf2:	f7ff fc99 	bl	800d428 <_free_r>
 800daf6:	4625      	mov	r5, r4
 800daf8:	4628      	mov	r0, r5
 800dafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dafc:	f000 f814 	bl	800db28 <_malloc_usable_size_r>
 800db00:	42a0      	cmp	r0, r4
 800db02:	d20f      	bcs.n	800db24 <_realloc_r+0x48>
 800db04:	4621      	mov	r1, r4
 800db06:	4638      	mov	r0, r7
 800db08:	f7ff fbf4 	bl	800d2f4 <_malloc_r>
 800db0c:	4605      	mov	r5, r0
 800db0e:	2800      	cmp	r0, #0
 800db10:	d0f2      	beq.n	800daf8 <_realloc_r+0x1c>
 800db12:	4631      	mov	r1, r6
 800db14:	4622      	mov	r2, r4
 800db16:	f7ff fbd7 	bl	800d2c8 <memcpy>
 800db1a:	4631      	mov	r1, r6
 800db1c:	4638      	mov	r0, r7
 800db1e:	f7ff fc83 	bl	800d428 <_free_r>
 800db22:	e7e9      	b.n	800daf8 <_realloc_r+0x1c>
 800db24:	4635      	mov	r5, r6
 800db26:	e7e7      	b.n	800daf8 <_realloc_r+0x1c>

0800db28 <_malloc_usable_size_r>:
 800db28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db2c:	1f18      	subs	r0, r3, #4
 800db2e:	2b00      	cmp	r3, #0
 800db30:	bfbc      	itt	lt
 800db32:	580b      	ldrlt	r3, [r1, r0]
 800db34:	18c0      	addlt	r0, r0, r3
 800db36:	4770      	bx	lr

0800db38 <pow>:
 800db38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db3c:	ec59 8b10 	vmov	r8, r9, d0
 800db40:	ec57 6b11 	vmov	r6, r7, d1
 800db44:	f000 f8a8 	bl	800dc98 <__ieee754_pow>
 800db48:	4b4e      	ldr	r3, [pc, #312]	; (800dc84 <pow+0x14c>)
 800db4a:	f993 3000 	ldrsb.w	r3, [r3]
 800db4e:	3301      	adds	r3, #1
 800db50:	ec55 4b10 	vmov	r4, r5, d0
 800db54:	d015      	beq.n	800db82 <pow+0x4a>
 800db56:	4632      	mov	r2, r6
 800db58:	463b      	mov	r3, r7
 800db5a:	4630      	mov	r0, r6
 800db5c:	4639      	mov	r1, r7
 800db5e:	f7f2 fffd 	bl	8000b5c <__aeabi_dcmpun>
 800db62:	b970      	cbnz	r0, 800db82 <pow+0x4a>
 800db64:	4642      	mov	r2, r8
 800db66:	464b      	mov	r3, r9
 800db68:	4640      	mov	r0, r8
 800db6a:	4649      	mov	r1, r9
 800db6c:	f7f2 fff6 	bl	8000b5c <__aeabi_dcmpun>
 800db70:	2200      	movs	r2, #0
 800db72:	2300      	movs	r3, #0
 800db74:	b148      	cbz	r0, 800db8a <pow+0x52>
 800db76:	4630      	mov	r0, r6
 800db78:	4639      	mov	r1, r7
 800db7a:	f7f2 ffbd 	bl	8000af8 <__aeabi_dcmpeq>
 800db7e:	2800      	cmp	r0, #0
 800db80:	d17d      	bne.n	800dc7e <pow+0x146>
 800db82:	ec45 4b10 	vmov	d0, r4, r5
 800db86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db8a:	4640      	mov	r0, r8
 800db8c:	4649      	mov	r1, r9
 800db8e:	f7f2 ffb3 	bl	8000af8 <__aeabi_dcmpeq>
 800db92:	b1e0      	cbz	r0, 800dbce <pow+0x96>
 800db94:	2200      	movs	r2, #0
 800db96:	2300      	movs	r3, #0
 800db98:	4630      	mov	r0, r6
 800db9a:	4639      	mov	r1, r7
 800db9c:	f7f2 ffac 	bl	8000af8 <__aeabi_dcmpeq>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	d16c      	bne.n	800dc7e <pow+0x146>
 800dba4:	ec47 6b10 	vmov	d0, r6, r7
 800dba8:	f000 fe55 	bl	800e856 <finite>
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d0e8      	beq.n	800db82 <pow+0x4a>
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	4639      	mov	r1, r7
 800dbb8:	f7f2 ffa8 	bl	8000b0c <__aeabi_dcmplt>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d0e0      	beq.n	800db82 <pow+0x4a>
 800dbc0:	f7ff fb56 	bl	800d270 <__errno>
 800dbc4:	2321      	movs	r3, #33	; 0x21
 800dbc6:	6003      	str	r3, [r0, #0]
 800dbc8:	2400      	movs	r4, #0
 800dbca:	4d2f      	ldr	r5, [pc, #188]	; (800dc88 <pow+0x150>)
 800dbcc:	e7d9      	b.n	800db82 <pow+0x4a>
 800dbce:	ec45 4b10 	vmov	d0, r4, r5
 800dbd2:	f000 fe40 	bl	800e856 <finite>
 800dbd6:	bbb8      	cbnz	r0, 800dc48 <pow+0x110>
 800dbd8:	ec49 8b10 	vmov	d0, r8, r9
 800dbdc:	f000 fe3b 	bl	800e856 <finite>
 800dbe0:	b390      	cbz	r0, 800dc48 <pow+0x110>
 800dbe2:	ec47 6b10 	vmov	d0, r6, r7
 800dbe6:	f000 fe36 	bl	800e856 <finite>
 800dbea:	b368      	cbz	r0, 800dc48 <pow+0x110>
 800dbec:	4622      	mov	r2, r4
 800dbee:	462b      	mov	r3, r5
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	4629      	mov	r1, r5
 800dbf4:	f7f2 ffb2 	bl	8000b5c <__aeabi_dcmpun>
 800dbf8:	b160      	cbz	r0, 800dc14 <pow+0xdc>
 800dbfa:	f7ff fb39 	bl	800d270 <__errno>
 800dbfe:	2321      	movs	r3, #33	; 0x21
 800dc00:	6003      	str	r3, [r0, #0]
 800dc02:	2200      	movs	r2, #0
 800dc04:	2300      	movs	r3, #0
 800dc06:	4610      	mov	r0, r2
 800dc08:	4619      	mov	r1, r3
 800dc0a:	f7f2 fe37 	bl	800087c <__aeabi_ddiv>
 800dc0e:	4604      	mov	r4, r0
 800dc10:	460d      	mov	r5, r1
 800dc12:	e7b6      	b.n	800db82 <pow+0x4a>
 800dc14:	f7ff fb2c 	bl	800d270 <__errno>
 800dc18:	2322      	movs	r3, #34	; 0x22
 800dc1a:	6003      	str	r3, [r0, #0]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	2300      	movs	r3, #0
 800dc20:	4640      	mov	r0, r8
 800dc22:	4649      	mov	r1, r9
 800dc24:	f7f2 ff72 	bl	8000b0c <__aeabi_dcmplt>
 800dc28:	2400      	movs	r4, #0
 800dc2a:	b158      	cbz	r0, 800dc44 <pow+0x10c>
 800dc2c:	ec47 6b10 	vmov	d0, r6, r7
 800dc30:	f000 fe26 	bl	800e880 <rint>
 800dc34:	4632      	mov	r2, r6
 800dc36:	ec51 0b10 	vmov	r0, r1, d0
 800dc3a:	463b      	mov	r3, r7
 800dc3c:	f7f2 ff5c 	bl	8000af8 <__aeabi_dcmpeq>
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d0c2      	beq.n	800dbca <pow+0x92>
 800dc44:	4d11      	ldr	r5, [pc, #68]	; (800dc8c <pow+0x154>)
 800dc46:	e79c      	b.n	800db82 <pow+0x4a>
 800dc48:	2200      	movs	r2, #0
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	4629      	mov	r1, r5
 800dc50:	f7f2 ff52 	bl	8000af8 <__aeabi_dcmpeq>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d094      	beq.n	800db82 <pow+0x4a>
 800dc58:	ec49 8b10 	vmov	d0, r8, r9
 800dc5c:	f000 fdfb 	bl	800e856 <finite>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d08e      	beq.n	800db82 <pow+0x4a>
 800dc64:	ec47 6b10 	vmov	d0, r6, r7
 800dc68:	f000 fdf5 	bl	800e856 <finite>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d088      	beq.n	800db82 <pow+0x4a>
 800dc70:	f7ff fafe 	bl	800d270 <__errno>
 800dc74:	2322      	movs	r3, #34	; 0x22
 800dc76:	6003      	str	r3, [r0, #0]
 800dc78:	2400      	movs	r4, #0
 800dc7a:	2500      	movs	r5, #0
 800dc7c:	e781      	b.n	800db82 <pow+0x4a>
 800dc7e:	4d04      	ldr	r5, [pc, #16]	; (800dc90 <pow+0x158>)
 800dc80:	2400      	movs	r4, #0
 800dc82:	e77e      	b.n	800db82 <pow+0x4a>
 800dc84:	200000b4 	.word	0x200000b4
 800dc88:	fff00000 	.word	0xfff00000
 800dc8c:	7ff00000 	.word	0x7ff00000
 800dc90:	3ff00000 	.word	0x3ff00000
 800dc94:	00000000 	.word	0x00000000

0800dc98 <__ieee754_pow>:
 800dc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9c:	ed2d 8b06 	vpush	{d8-d10}
 800dca0:	b08d      	sub	sp, #52	; 0x34
 800dca2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800dca6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800dcaa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800dcae:	ea56 0100 	orrs.w	r1, r6, r0
 800dcb2:	ec53 2b10 	vmov	r2, r3, d0
 800dcb6:	f000 84d1 	beq.w	800e65c <__ieee754_pow+0x9c4>
 800dcba:	497f      	ldr	r1, [pc, #508]	; (800deb8 <__ieee754_pow+0x220>)
 800dcbc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800dcc0:	428c      	cmp	r4, r1
 800dcc2:	ee10 8a10 	vmov	r8, s0
 800dcc6:	4699      	mov	r9, r3
 800dcc8:	dc09      	bgt.n	800dcde <__ieee754_pow+0x46>
 800dcca:	d103      	bne.n	800dcd4 <__ieee754_pow+0x3c>
 800dccc:	b97a      	cbnz	r2, 800dcee <__ieee754_pow+0x56>
 800dcce:	42a6      	cmp	r6, r4
 800dcd0:	dd02      	ble.n	800dcd8 <__ieee754_pow+0x40>
 800dcd2:	e00c      	b.n	800dcee <__ieee754_pow+0x56>
 800dcd4:	428e      	cmp	r6, r1
 800dcd6:	dc02      	bgt.n	800dcde <__ieee754_pow+0x46>
 800dcd8:	428e      	cmp	r6, r1
 800dcda:	d110      	bne.n	800dcfe <__ieee754_pow+0x66>
 800dcdc:	b178      	cbz	r0, 800dcfe <__ieee754_pow+0x66>
 800dcde:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dce2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dce6:	ea54 0308 	orrs.w	r3, r4, r8
 800dcea:	f000 84b7 	beq.w	800e65c <__ieee754_pow+0x9c4>
 800dcee:	4873      	ldr	r0, [pc, #460]	; (800debc <__ieee754_pow+0x224>)
 800dcf0:	b00d      	add	sp, #52	; 0x34
 800dcf2:	ecbd 8b06 	vpop	{d8-d10}
 800dcf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfa:	f000 bdb9 	b.w	800e870 <nan>
 800dcfe:	f1b9 0f00 	cmp.w	r9, #0
 800dd02:	da36      	bge.n	800dd72 <__ieee754_pow+0xda>
 800dd04:	496e      	ldr	r1, [pc, #440]	; (800dec0 <__ieee754_pow+0x228>)
 800dd06:	428e      	cmp	r6, r1
 800dd08:	dc51      	bgt.n	800ddae <__ieee754_pow+0x116>
 800dd0a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800dd0e:	428e      	cmp	r6, r1
 800dd10:	f340 84af 	ble.w	800e672 <__ieee754_pow+0x9da>
 800dd14:	1531      	asrs	r1, r6, #20
 800dd16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dd1a:	2914      	cmp	r1, #20
 800dd1c:	dd0f      	ble.n	800dd3e <__ieee754_pow+0xa6>
 800dd1e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800dd22:	fa20 fc01 	lsr.w	ip, r0, r1
 800dd26:	fa0c f101 	lsl.w	r1, ip, r1
 800dd2a:	4281      	cmp	r1, r0
 800dd2c:	f040 84a1 	bne.w	800e672 <__ieee754_pow+0x9da>
 800dd30:	f00c 0c01 	and.w	ip, ip, #1
 800dd34:	f1cc 0102 	rsb	r1, ip, #2
 800dd38:	9100      	str	r1, [sp, #0]
 800dd3a:	b180      	cbz	r0, 800dd5e <__ieee754_pow+0xc6>
 800dd3c:	e059      	b.n	800ddf2 <__ieee754_pow+0x15a>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d155      	bne.n	800ddee <__ieee754_pow+0x156>
 800dd42:	f1c1 0114 	rsb	r1, r1, #20
 800dd46:	fa46 fc01 	asr.w	ip, r6, r1
 800dd4a:	fa0c f101 	lsl.w	r1, ip, r1
 800dd4e:	42b1      	cmp	r1, r6
 800dd50:	f040 848c 	bne.w	800e66c <__ieee754_pow+0x9d4>
 800dd54:	f00c 0c01 	and.w	ip, ip, #1
 800dd58:	f1cc 0102 	rsb	r1, ip, #2
 800dd5c:	9100      	str	r1, [sp, #0]
 800dd5e:	4959      	ldr	r1, [pc, #356]	; (800dec4 <__ieee754_pow+0x22c>)
 800dd60:	428e      	cmp	r6, r1
 800dd62:	d12d      	bne.n	800ddc0 <__ieee754_pow+0x128>
 800dd64:	2f00      	cmp	r7, #0
 800dd66:	da79      	bge.n	800de5c <__ieee754_pow+0x1c4>
 800dd68:	4956      	ldr	r1, [pc, #344]	; (800dec4 <__ieee754_pow+0x22c>)
 800dd6a:	2000      	movs	r0, #0
 800dd6c:	f7f2 fd86 	bl	800087c <__aeabi_ddiv>
 800dd70:	e016      	b.n	800dda0 <__ieee754_pow+0x108>
 800dd72:	2100      	movs	r1, #0
 800dd74:	9100      	str	r1, [sp, #0]
 800dd76:	2800      	cmp	r0, #0
 800dd78:	d13b      	bne.n	800ddf2 <__ieee754_pow+0x15a>
 800dd7a:	494f      	ldr	r1, [pc, #316]	; (800deb8 <__ieee754_pow+0x220>)
 800dd7c:	428e      	cmp	r6, r1
 800dd7e:	d1ee      	bne.n	800dd5e <__ieee754_pow+0xc6>
 800dd80:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dd84:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dd88:	ea53 0308 	orrs.w	r3, r3, r8
 800dd8c:	f000 8466 	beq.w	800e65c <__ieee754_pow+0x9c4>
 800dd90:	4b4d      	ldr	r3, [pc, #308]	; (800dec8 <__ieee754_pow+0x230>)
 800dd92:	429c      	cmp	r4, r3
 800dd94:	dd0d      	ble.n	800ddb2 <__ieee754_pow+0x11a>
 800dd96:	2f00      	cmp	r7, #0
 800dd98:	f280 8464 	bge.w	800e664 <__ieee754_pow+0x9cc>
 800dd9c:	2000      	movs	r0, #0
 800dd9e:	2100      	movs	r1, #0
 800dda0:	ec41 0b10 	vmov	d0, r0, r1
 800dda4:	b00d      	add	sp, #52	; 0x34
 800dda6:	ecbd 8b06 	vpop	{d8-d10}
 800ddaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddae:	2102      	movs	r1, #2
 800ddb0:	e7e0      	b.n	800dd74 <__ieee754_pow+0xdc>
 800ddb2:	2f00      	cmp	r7, #0
 800ddb4:	daf2      	bge.n	800dd9c <__ieee754_pow+0x104>
 800ddb6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800ddba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ddbe:	e7ef      	b.n	800dda0 <__ieee754_pow+0x108>
 800ddc0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ddc4:	d104      	bne.n	800ddd0 <__ieee754_pow+0x138>
 800ddc6:	4610      	mov	r0, r2
 800ddc8:	4619      	mov	r1, r3
 800ddca:	f7f2 fc2d 	bl	8000628 <__aeabi_dmul>
 800ddce:	e7e7      	b.n	800dda0 <__ieee754_pow+0x108>
 800ddd0:	493e      	ldr	r1, [pc, #248]	; (800decc <__ieee754_pow+0x234>)
 800ddd2:	428f      	cmp	r7, r1
 800ddd4:	d10d      	bne.n	800ddf2 <__ieee754_pow+0x15a>
 800ddd6:	f1b9 0f00 	cmp.w	r9, #0
 800ddda:	db0a      	blt.n	800ddf2 <__ieee754_pow+0x15a>
 800dddc:	ec43 2b10 	vmov	d0, r2, r3
 800dde0:	b00d      	add	sp, #52	; 0x34
 800dde2:	ecbd 8b06 	vpop	{d8-d10}
 800dde6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddea:	f000 bc77 	b.w	800e6dc <__ieee754_sqrt>
 800ddee:	2100      	movs	r1, #0
 800ddf0:	9100      	str	r1, [sp, #0]
 800ddf2:	ec43 2b10 	vmov	d0, r2, r3
 800ddf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ddfa:	f000 fd23 	bl	800e844 <fabs>
 800ddfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de02:	ec51 0b10 	vmov	r0, r1, d0
 800de06:	f1b8 0f00 	cmp.w	r8, #0
 800de0a:	d12a      	bne.n	800de62 <__ieee754_pow+0x1ca>
 800de0c:	b12c      	cbz	r4, 800de1a <__ieee754_pow+0x182>
 800de0e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800dec4 <__ieee754_pow+0x22c>
 800de12:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800de16:	45e6      	cmp	lr, ip
 800de18:	d123      	bne.n	800de62 <__ieee754_pow+0x1ca>
 800de1a:	2f00      	cmp	r7, #0
 800de1c:	da05      	bge.n	800de2a <__ieee754_pow+0x192>
 800de1e:	4602      	mov	r2, r0
 800de20:	460b      	mov	r3, r1
 800de22:	2000      	movs	r0, #0
 800de24:	4927      	ldr	r1, [pc, #156]	; (800dec4 <__ieee754_pow+0x22c>)
 800de26:	f7f2 fd29 	bl	800087c <__aeabi_ddiv>
 800de2a:	f1b9 0f00 	cmp.w	r9, #0
 800de2e:	dab7      	bge.n	800dda0 <__ieee754_pow+0x108>
 800de30:	9b00      	ldr	r3, [sp, #0]
 800de32:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800de36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800de3a:	4323      	orrs	r3, r4
 800de3c:	d108      	bne.n	800de50 <__ieee754_pow+0x1b8>
 800de3e:	4602      	mov	r2, r0
 800de40:	460b      	mov	r3, r1
 800de42:	4610      	mov	r0, r2
 800de44:	4619      	mov	r1, r3
 800de46:	f7f2 fa37 	bl	80002b8 <__aeabi_dsub>
 800de4a:	4602      	mov	r2, r0
 800de4c:	460b      	mov	r3, r1
 800de4e:	e78d      	b.n	800dd6c <__ieee754_pow+0xd4>
 800de50:	9b00      	ldr	r3, [sp, #0]
 800de52:	2b01      	cmp	r3, #1
 800de54:	d1a4      	bne.n	800dda0 <__ieee754_pow+0x108>
 800de56:	4602      	mov	r2, r0
 800de58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de5c:	4610      	mov	r0, r2
 800de5e:	4619      	mov	r1, r3
 800de60:	e79e      	b.n	800dda0 <__ieee754_pow+0x108>
 800de62:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800de66:	f10c 35ff 	add.w	r5, ip, #4294967295
 800de6a:	950a      	str	r5, [sp, #40]	; 0x28
 800de6c:	9d00      	ldr	r5, [sp, #0]
 800de6e:	46ac      	mov	ip, r5
 800de70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800de72:	ea5c 0505 	orrs.w	r5, ip, r5
 800de76:	d0e4      	beq.n	800de42 <__ieee754_pow+0x1aa>
 800de78:	4b15      	ldr	r3, [pc, #84]	; (800ded0 <__ieee754_pow+0x238>)
 800de7a:	429e      	cmp	r6, r3
 800de7c:	f340 80fc 	ble.w	800e078 <__ieee754_pow+0x3e0>
 800de80:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800de84:	429e      	cmp	r6, r3
 800de86:	4b10      	ldr	r3, [pc, #64]	; (800dec8 <__ieee754_pow+0x230>)
 800de88:	dd07      	ble.n	800de9a <__ieee754_pow+0x202>
 800de8a:	429c      	cmp	r4, r3
 800de8c:	dc0a      	bgt.n	800dea4 <__ieee754_pow+0x20c>
 800de8e:	2f00      	cmp	r7, #0
 800de90:	da84      	bge.n	800dd9c <__ieee754_pow+0x104>
 800de92:	a307      	add	r3, pc, #28	; (adr r3, 800deb0 <__ieee754_pow+0x218>)
 800de94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de98:	e795      	b.n	800ddc6 <__ieee754_pow+0x12e>
 800de9a:	429c      	cmp	r4, r3
 800de9c:	dbf7      	blt.n	800de8e <__ieee754_pow+0x1f6>
 800de9e:	4b09      	ldr	r3, [pc, #36]	; (800dec4 <__ieee754_pow+0x22c>)
 800dea0:	429c      	cmp	r4, r3
 800dea2:	dd17      	ble.n	800ded4 <__ieee754_pow+0x23c>
 800dea4:	2f00      	cmp	r7, #0
 800dea6:	dcf4      	bgt.n	800de92 <__ieee754_pow+0x1fa>
 800dea8:	e778      	b.n	800dd9c <__ieee754_pow+0x104>
 800deaa:	bf00      	nop
 800deac:	f3af 8000 	nop.w
 800deb0:	8800759c 	.word	0x8800759c
 800deb4:	7e37e43c 	.word	0x7e37e43c
 800deb8:	7ff00000 	.word	0x7ff00000
 800debc:	0808f765 	.word	0x0808f765
 800dec0:	433fffff 	.word	0x433fffff
 800dec4:	3ff00000 	.word	0x3ff00000
 800dec8:	3fefffff 	.word	0x3fefffff
 800decc:	3fe00000 	.word	0x3fe00000
 800ded0:	41e00000 	.word	0x41e00000
 800ded4:	4b64      	ldr	r3, [pc, #400]	; (800e068 <__ieee754_pow+0x3d0>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	f7f2 f9ee 	bl	80002b8 <__aeabi_dsub>
 800dedc:	a356      	add	r3, pc, #344	; (adr r3, 800e038 <__ieee754_pow+0x3a0>)
 800dede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee2:	4604      	mov	r4, r0
 800dee4:	460d      	mov	r5, r1
 800dee6:	f7f2 fb9f 	bl	8000628 <__aeabi_dmul>
 800deea:	a355      	add	r3, pc, #340	; (adr r3, 800e040 <__ieee754_pow+0x3a8>)
 800deec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def0:	4606      	mov	r6, r0
 800def2:	460f      	mov	r7, r1
 800def4:	4620      	mov	r0, r4
 800def6:	4629      	mov	r1, r5
 800def8:	f7f2 fb96 	bl	8000628 <__aeabi_dmul>
 800defc:	4b5b      	ldr	r3, [pc, #364]	; (800e06c <__ieee754_pow+0x3d4>)
 800defe:	4682      	mov	sl, r0
 800df00:	468b      	mov	fp, r1
 800df02:	2200      	movs	r2, #0
 800df04:	4620      	mov	r0, r4
 800df06:	4629      	mov	r1, r5
 800df08:	f7f2 fb8e 	bl	8000628 <__aeabi_dmul>
 800df0c:	4602      	mov	r2, r0
 800df0e:	460b      	mov	r3, r1
 800df10:	a14d      	add	r1, pc, #308	; (adr r1, 800e048 <__ieee754_pow+0x3b0>)
 800df12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df16:	f7f2 f9cf 	bl	80002b8 <__aeabi_dsub>
 800df1a:	4622      	mov	r2, r4
 800df1c:	462b      	mov	r3, r5
 800df1e:	f7f2 fb83 	bl	8000628 <__aeabi_dmul>
 800df22:	4602      	mov	r2, r0
 800df24:	460b      	mov	r3, r1
 800df26:	2000      	movs	r0, #0
 800df28:	4951      	ldr	r1, [pc, #324]	; (800e070 <__ieee754_pow+0x3d8>)
 800df2a:	f7f2 f9c5 	bl	80002b8 <__aeabi_dsub>
 800df2e:	4622      	mov	r2, r4
 800df30:	4680      	mov	r8, r0
 800df32:	4689      	mov	r9, r1
 800df34:	462b      	mov	r3, r5
 800df36:	4620      	mov	r0, r4
 800df38:	4629      	mov	r1, r5
 800df3a:	f7f2 fb75 	bl	8000628 <__aeabi_dmul>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	4640      	mov	r0, r8
 800df44:	4649      	mov	r1, r9
 800df46:	f7f2 fb6f 	bl	8000628 <__aeabi_dmul>
 800df4a:	a341      	add	r3, pc, #260	; (adr r3, 800e050 <__ieee754_pow+0x3b8>)
 800df4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df50:	f7f2 fb6a 	bl	8000628 <__aeabi_dmul>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	4650      	mov	r0, sl
 800df5a:	4659      	mov	r1, fp
 800df5c:	f7f2 f9ac 	bl	80002b8 <__aeabi_dsub>
 800df60:	4602      	mov	r2, r0
 800df62:	460b      	mov	r3, r1
 800df64:	4680      	mov	r8, r0
 800df66:	4689      	mov	r9, r1
 800df68:	4630      	mov	r0, r6
 800df6a:	4639      	mov	r1, r7
 800df6c:	f7f2 f9a6 	bl	80002bc <__adddf3>
 800df70:	2400      	movs	r4, #0
 800df72:	4632      	mov	r2, r6
 800df74:	463b      	mov	r3, r7
 800df76:	4620      	mov	r0, r4
 800df78:	460d      	mov	r5, r1
 800df7a:	f7f2 f99d 	bl	80002b8 <__aeabi_dsub>
 800df7e:	4602      	mov	r2, r0
 800df80:	460b      	mov	r3, r1
 800df82:	4640      	mov	r0, r8
 800df84:	4649      	mov	r1, r9
 800df86:	f7f2 f997 	bl	80002b8 <__aeabi_dsub>
 800df8a:	9b00      	ldr	r3, [sp, #0]
 800df8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df8e:	3b01      	subs	r3, #1
 800df90:	4313      	orrs	r3, r2
 800df92:	4682      	mov	sl, r0
 800df94:	468b      	mov	fp, r1
 800df96:	f040 81f1 	bne.w	800e37c <__ieee754_pow+0x6e4>
 800df9a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e058 <__ieee754_pow+0x3c0>
 800df9e:	eeb0 8a47 	vmov.f32	s16, s14
 800dfa2:	eef0 8a67 	vmov.f32	s17, s15
 800dfa6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dfaa:	2600      	movs	r6, #0
 800dfac:	4632      	mov	r2, r6
 800dfae:	463b      	mov	r3, r7
 800dfb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfb4:	f7f2 f980 	bl	80002b8 <__aeabi_dsub>
 800dfb8:	4622      	mov	r2, r4
 800dfba:	462b      	mov	r3, r5
 800dfbc:	f7f2 fb34 	bl	8000628 <__aeabi_dmul>
 800dfc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfc4:	4680      	mov	r8, r0
 800dfc6:	4689      	mov	r9, r1
 800dfc8:	4650      	mov	r0, sl
 800dfca:	4659      	mov	r1, fp
 800dfcc:	f7f2 fb2c 	bl	8000628 <__aeabi_dmul>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	4640      	mov	r0, r8
 800dfd6:	4649      	mov	r1, r9
 800dfd8:	f7f2 f970 	bl	80002bc <__adddf3>
 800dfdc:	4632      	mov	r2, r6
 800dfde:	463b      	mov	r3, r7
 800dfe0:	4680      	mov	r8, r0
 800dfe2:	4689      	mov	r9, r1
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	f7f2 fb1e 	bl	8000628 <__aeabi_dmul>
 800dfec:	460b      	mov	r3, r1
 800dfee:	4604      	mov	r4, r0
 800dff0:	460d      	mov	r5, r1
 800dff2:	4602      	mov	r2, r0
 800dff4:	4649      	mov	r1, r9
 800dff6:	4640      	mov	r0, r8
 800dff8:	f7f2 f960 	bl	80002bc <__adddf3>
 800dffc:	4b1d      	ldr	r3, [pc, #116]	; (800e074 <__ieee754_pow+0x3dc>)
 800dffe:	4299      	cmp	r1, r3
 800e000:	ec45 4b19 	vmov	d9, r4, r5
 800e004:	4606      	mov	r6, r0
 800e006:	460f      	mov	r7, r1
 800e008:	468b      	mov	fp, r1
 800e00a:	f340 82fe 	ble.w	800e60a <__ieee754_pow+0x972>
 800e00e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e012:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e016:	4303      	orrs	r3, r0
 800e018:	f000 81f0 	beq.w	800e3fc <__ieee754_pow+0x764>
 800e01c:	a310      	add	r3, pc, #64	; (adr r3, 800e060 <__ieee754_pow+0x3c8>)
 800e01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e022:	ec51 0b18 	vmov	r0, r1, d8
 800e026:	f7f2 faff 	bl	8000628 <__aeabi_dmul>
 800e02a:	a30d      	add	r3, pc, #52	; (adr r3, 800e060 <__ieee754_pow+0x3c8>)
 800e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e030:	e6cb      	b.n	800ddca <__ieee754_pow+0x132>
 800e032:	bf00      	nop
 800e034:	f3af 8000 	nop.w
 800e038:	60000000 	.word	0x60000000
 800e03c:	3ff71547 	.word	0x3ff71547
 800e040:	f85ddf44 	.word	0xf85ddf44
 800e044:	3e54ae0b 	.word	0x3e54ae0b
 800e048:	55555555 	.word	0x55555555
 800e04c:	3fd55555 	.word	0x3fd55555
 800e050:	652b82fe 	.word	0x652b82fe
 800e054:	3ff71547 	.word	0x3ff71547
 800e058:	00000000 	.word	0x00000000
 800e05c:	bff00000 	.word	0xbff00000
 800e060:	8800759c 	.word	0x8800759c
 800e064:	7e37e43c 	.word	0x7e37e43c
 800e068:	3ff00000 	.word	0x3ff00000
 800e06c:	3fd00000 	.word	0x3fd00000
 800e070:	3fe00000 	.word	0x3fe00000
 800e074:	408fffff 	.word	0x408fffff
 800e078:	4bd7      	ldr	r3, [pc, #860]	; (800e3d8 <__ieee754_pow+0x740>)
 800e07a:	ea03 0309 	and.w	r3, r3, r9
 800e07e:	2200      	movs	r2, #0
 800e080:	b92b      	cbnz	r3, 800e08e <__ieee754_pow+0x3f6>
 800e082:	4bd6      	ldr	r3, [pc, #856]	; (800e3dc <__ieee754_pow+0x744>)
 800e084:	f7f2 fad0 	bl	8000628 <__aeabi_dmul>
 800e088:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e08c:	460c      	mov	r4, r1
 800e08e:	1523      	asrs	r3, r4, #20
 800e090:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e094:	4413      	add	r3, r2
 800e096:	9309      	str	r3, [sp, #36]	; 0x24
 800e098:	4bd1      	ldr	r3, [pc, #836]	; (800e3e0 <__ieee754_pow+0x748>)
 800e09a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e09e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e0a2:	429c      	cmp	r4, r3
 800e0a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e0a8:	dd08      	ble.n	800e0bc <__ieee754_pow+0x424>
 800e0aa:	4bce      	ldr	r3, [pc, #824]	; (800e3e4 <__ieee754_pow+0x74c>)
 800e0ac:	429c      	cmp	r4, r3
 800e0ae:	f340 8163 	ble.w	800e378 <__ieee754_pow+0x6e0>
 800e0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e0bc:	2400      	movs	r4, #0
 800e0be:	00e3      	lsls	r3, r4, #3
 800e0c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0c2:	4bc9      	ldr	r3, [pc, #804]	; (800e3e8 <__ieee754_pow+0x750>)
 800e0c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e0c8:	ed93 7b00 	vldr	d7, [r3]
 800e0cc:	4629      	mov	r1, r5
 800e0ce:	ec53 2b17 	vmov	r2, r3, d7
 800e0d2:	eeb0 8a47 	vmov.f32	s16, s14
 800e0d6:	eef0 8a67 	vmov.f32	s17, s15
 800e0da:	4682      	mov	sl, r0
 800e0dc:	f7f2 f8ec 	bl	80002b8 <__aeabi_dsub>
 800e0e0:	4652      	mov	r2, sl
 800e0e2:	4606      	mov	r6, r0
 800e0e4:	460f      	mov	r7, r1
 800e0e6:	462b      	mov	r3, r5
 800e0e8:	ec51 0b18 	vmov	r0, r1, d8
 800e0ec:	f7f2 f8e6 	bl	80002bc <__adddf3>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	49bd      	ldr	r1, [pc, #756]	; (800e3ec <__ieee754_pow+0x754>)
 800e0f8:	f7f2 fbc0 	bl	800087c <__aeabi_ddiv>
 800e0fc:	ec41 0b19 	vmov	d9, r0, r1
 800e100:	4602      	mov	r2, r0
 800e102:	460b      	mov	r3, r1
 800e104:	4630      	mov	r0, r6
 800e106:	4639      	mov	r1, r7
 800e108:	f7f2 fa8e 	bl	8000628 <__aeabi_dmul>
 800e10c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e110:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e114:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e118:	2300      	movs	r3, #0
 800e11a:	9304      	str	r3, [sp, #16]
 800e11c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e120:	46ab      	mov	fp, r5
 800e122:	106d      	asrs	r5, r5, #1
 800e124:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e128:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e12c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e130:	2200      	movs	r2, #0
 800e132:	4640      	mov	r0, r8
 800e134:	4649      	mov	r1, r9
 800e136:	4614      	mov	r4, r2
 800e138:	461d      	mov	r5, r3
 800e13a:	f7f2 fa75 	bl	8000628 <__aeabi_dmul>
 800e13e:	4602      	mov	r2, r0
 800e140:	460b      	mov	r3, r1
 800e142:	4630      	mov	r0, r6
 800e144:	4639      	mov	r1, r7
 800e146:	f7f2 f8b7 	bl	80002b8 <__aeabi_dsub>
 800e14a:	ec53 2b18 	vmov	r2, r3, d8
 800e14e:	4606      	mov	r6, r0
 800e150:	460f      	mov	r7, r1
 800e152:	4620      	mov	r0, r4
 800e154:	4629      	mov	r1, r5
 800e156:	f7f2 f8af 	bl	80002b8 <__aeabi_dsub>
 800e15a:	4602      	mov	r2, r0
 800e15c:	460b      	mov	r3, r1
 800e15e:	4650      	mov	r0, sl
 800e160:	4659      	mov	r1, fp
 800e162:	f7f2 f8a9 	bl	80002b8 <__aeabi_dsub>
 800e166:	4642      	mov	r2, r8
 800e168:	464b      	mov	r3, r9
 800e16a:	f7f2 fa5d 	bl	8000628 <__aeabi_dmul>
 800e16e:	4602      	mov	r2, r0
 800e170:	460b      	mov	r3, r1
 800e172:	4630      	mov	r0, r6
 800e174:	4639      	mov	r1, r7
 800e176:	f7f2 f89f 	bl	80002b8 <__aeabi_dsub>
 800e17a:	ec53 2b19 	vmov	r2, r3, d9
 800e17e:	f7f2 fa53 	bl	8000628 <__aeabi_dmul>
 800e182:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e186:	ec41 0b18 	vmov	d8, r0, r1
 800e18a:	4610      	mov	r0, r2
 800e18c:	4619      	mov	r1, r3
 800e18e:	f7f2 fa4b 	bl	8000628 <__aeabi_dmul>
 800e192:	a37d      	add	r3, pc, #500	; (adr r3, 800e388 <__ieee754_pow+0x6f0>)
 800e194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e198:	4604      	mov	r4, r0
 800e19a:	460d      	mov	r5, r1
 800e19c:	f7f2 fa44 	bl	8000628 <__aeabi_dmul>
 800e1a0:	a37b      	add	r3, pc, #492	; (adr r3, 800e390 <__ieee754_pow+0x6f8>)
 800e1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a6:	f7f2 f889 	bl	80002bc <__adddf3>
 800e1aa:	4622      	mov	r2, r4
 800e1ac:	462b      	mov	r3, r5
 800e1ae:	f7f2 fa3b 	bl	8000628 <__aeabi_dmul>
 800e1b2:	a379      	add	r3, pc, #484	; (adr r3, 800e398 <__ieee754_pow+0x700>)
 800e1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b8:	f7f2 f880 	bl	80002bc <__adddf3>
 800e1bc:	4622      	mov	r2, r4
 800e1be:	462b      	mov	r3, r5
 800e1c0:	f7f2 fa32 	bl	8000628 <__aeabi_dmul>
 800e1c4:	a376      	add	r3, pc, #472	; (adr r3, 800e3a0 <__ieee754_pow+0x708>)
 800e1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ca:	f7f2 f877 	bl	80002bc <__adddf3>
 800e1ce:	4622      	mov	r2, r4
 800e1d0:	462b      	mov	r3, r5
 800e1d2:	f7f2 fa29 	bl	8000628 <__aeabi_dmul>
 800e1d6:	a374      	add	r3, pc, #464	; (adr r3, 800e3a8 <__ieee754_pow+0x710>)
 800e1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1dc:	f7f2 f86e 	bl	80002bc <__adddf3>
 800e1e0:	4622      	mov	r2, r4
 800e1e2:	462b      	mov	r3, r5
 800e1e4:	f7f2 fa20 	bl	8000628 <__aeabi_dmul>
 800e1e8:	a371      	add	r3, pc, #452	; (adr r3, 800e3b0 <__ieee754_pow+0x718>)
 800e1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ee:	f7f2 f865 	bl	80002bc <__adddf3>
 800e1f2:	4622      	mov	r2, r4
 800e1f4:	4606      	mov	r6, r0
 800e1f6:	460f      	mov	r7, r1
 800e1f8:	462b      	mov	r3, r5
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	4629      	mov	r1, r5
 800e1fe:	f7f2 fa13 	bl	8000628 <__aeabi_dmul>
 800e202:	4602      	mov	r2, r0
 800e204:	460b      	mov	r3, r1
 800e206:	4630      	mov	r0, r6
 800e208:	4639      	mov	r1, r7
 800e20a:	f7f2 fa0d 	bl	8000628 <__aeabi_dmul>
 800e20e:	4642      	mov	r2, r8
 800e210:	4604      	mov	r4, r0
 800e212:	460d      	mov	r5, r1
 800e214:	464b      	mov	r3, r9
 800e216:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e21a:	f7f2 f84f 	bl	80002bc <__adddf3>
 800e21e:	ec53 2b18 	vmov	r2, r3, d8
 800e222:	f7f2 fa01 	bl	8000628 <__aeabi_dmul>
 800e226:	4622      	mov	r2, r4
 800e228:	462b      	mov	r3, r5
 800e22a:	f7f2 f847 	bl	80002bc <__adddf3>
 800e22e:	4642      	mov	r2, r8
 800e230:	4682      	mov	sl, r0
 800e232:	468b      	mov	fp, r1
 800e234:	464b      	mov	r3, r9
 800e236:	4640      	mov	r0, r8
 800e238:	4649      	mov	r1, r9
 800e23a:	f7f2 f9f5 	bl	8000628 <__aeabi_dmul>
 800e23e:	4b6c      	ldr	r3, [pc, #432]	; (800e3f0 <__ieee754_pow+0x758>)
 800e240:	2200      	movs	r2, #0
 800e242:	4606      	mov	r6, r0
 800e244:	460f      	mov	r7, r1
 800e246:	f7f2 f839 	bl	80002bc <__adddf3>
 800e24a:	4652      	mov	r2, sl
 800e24c:	465b      	mov	r3, fp
 800e24e:	f7f2 f835 	bl	80002bc <__adddf3>
 800e252:	9c04      	ldr	r4, [sp, #16]
 800e254:	460d      	mov	r5, r1
 800e256:	4622      	mov	r2, r4
 800e258:	460b      	mov	r3, r1
 800e25a:	4640      	mov	r0, r8
 800e25c:	4649      	mov	r1, r9
 800e25e:	f7f2 f9e3 	bl	8000628 <__aeabi_dmul>
 800e262:	4b63      	ldr	r3, [pc, #396]	; (800e3f0 <__ieee754_pow+0x758>)
 800e264:	4680      	mov	r8, r0
 800e266:	4689      	mov	r9, r1
 800e268:	2200      	movs	r2, #0
 800e26a:	4620      	mov	r0, r4
 800e26c:	4629      	mov	r1, r5
 800e26e:	f7f2 f823 	bl	80002b8 <__aeabi_dsub>
 800e272:	4632      	mov	r2, r6
 800e274:	463b      	mov	r3, r7
 800e276:	f7f2 f81f 	bl	80002b8 <__aeabi_dsub>
 800e27a:	4602      	mov	r2, r0
 800e27c:	460b      	mov	r3, r1
 800e27e:	4650      	mov	r0, sl
 800e280:	4659      	mov	r1, fp
 800e282:	f7f2 f819 	bl	80002b8 <__aeabi_dsub>
 800e286:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e28a:	f7f2 f9cd 	bl	8000628 <__aeabi_dmul>
 800e28e:	4622      	mov	r2, r4
 800e290:	4606      	mov	r6, r0
 800e292:	460f      	mov	r7, r1
 800e294:	462b      	mov	r3, r5
 800e296:	ec51 0b18 	vmov	r0, r1, d8
 800e29a:	f7f2 f9c5 	bl	8000628 <__aeabi_dmul>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	4639      	mov	r1, r7
 800e2a6:	f7f2 f809 	bl	80002bc <__adddf3>
 800e2aa:	4606      	mov	r6, r0
 800e2ac:	460f      	mov	r7, r1
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4640      	mov	r0, r8
 800e2b4:	4649      	mov	r1, r9
 800e2b6:	f7f2 f801 	bl	80002bc <__adddf3>
 800e2ba:	9c04      	ldr	r4, [sp, #16]
 800e2bc:	a33e      	add	r3, pc, #248	; (adr r3, 800e3b8 <__ieee754_pow+0x720>)
 800e2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	460d      	mov	r5, r1
 800e2c6:	f7f2 f9af 	bl	8000628 <__aeabi_dmul>
 800e2ca:	4642      	mov	r2, r8
 800e2cc:	ec41 0b18 	vmov	d8, r0, r1
 800e2d0:	464b      	mov	r3, r9
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	4629      	mov	r1, r5
 800e2d6:	f7f1 ffef 	bl	80002b8 <__aeabi_dsub>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	460b      	mov	r3, r1
 800e2de:	4630      	mov	r0, r6
 800e2e0:	4639      	mov	r1, r7
 800e2e2:	f7f1 ffe9 	bl	80002b8 <__aeabi_dsub>
 800e2e6:	a336      	add	r3, pc, #216	; (adr r3, 800e3c0 <__ieee754_pow+0x728>)
 800e2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ec:	f7f2 f99c 	bl	8000628 <__aeabi_dmul>
 800e2f0:	a335      	add	r3, pc, #212	; (adr r3, 800e3c8 <__ieee754_pow+0x730>)
 800e2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f6:	4606      	mov	r6, r0
 800e2f8:	460f      	mov	r7, r1
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	4629      	mov	r1, r5
 800e2fe:	f7f2 f993 	bl	8000628 <__aeabi_dmul>
 800e302:	4602      	mov	r2, r0
 800e304:	460b      	mov	r3, r1
 800e306:	4630      	mov	r0, r6
 800e308:	4639      	mov	r1, r7
 800e30a:	f7f1 ffd7 	bl	80002bc <__adddf3>
 800e30e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e310:	4b38      	ldr	r3, [pc, #224]	; (800e3f4 <__ieee754_pow+0x75c>)
 800e312:	4413      	add	r3, r2
 800e314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e318:	f7f1 ffd0 	bl	80002bc <__adddf3>
 800e31c:	4682      	mov	sl, r0
 800e31e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e320:	468b      	mov	fp, r1
 800e322:	f7f2 f917 	bl	8000554 <__aeabi_i2d>
 800e326:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e328:	4b33      	ldr	r3, [pc, #204]	; (800e3f8 <__ieee754_pow+0x760>)
 800e32a:	4413      	add	r3, r2
 800e32c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e330:	4606      	mov	r6, r0
 800e332:	460f      	mov	r7, r1
 800e334:	4652      	mov	r2, sl
 800e336:	465b      	mov	r3, fp
 800e338:	ec51 0b18 	vmov	r0, r1, d8
 800e33c:	f7f1 ffbe 	bl	80002bc <__adddf3>
 800e340:	4642      	mov	r2, r8
 800e342:	464b      	mov	r3, r9
 800e344:	f7f1 ffba 	bl	80002bc <__adddf3>
 800e348:	4632      	mov	r2, r6
 800e34a:	463b      	mov	r3, r7
 800e34c:	f7f1 ffb6 	bl	80002bc <__adddf3>
 800e350:	9c04      	ldr	r4, [sp, #16]
 800e352:	4632      	mov	r2, r6
 800e354:	463b      	mov	r3, r7
 800e356:	4620      	mov	r0, r4
 800e358:	460d      	mov	r5, r1
 800e35a:	f7f1 ffad 	bl	80002b8 <__aeabi_dsub>
 800e35e:	4642      	mov	r2, r8
 800e360:	464b      	mov	r3, r9
 800e362:	f7f1 ffa9 	bl	80002b8 <__aeabi_dsub>
 800e366:	ec53 2b18 	vmov	r2, r3, d8
 800e36a:	f7f1 ffa5 	bl	80002b8 <__aeabi_dsub>
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	4650      	mov	r0, sl
 800e374:	4659      	mov	r1, fp
 800e376:	e606      	b.n	800df86 <__ieee754_pow+0x2ee>
 800e378:	2401      	movs	r4, #1
 800e37a:	e6a0      	b.n	800e0be <__ieee754_pow+0x426>
 800e37c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e3d0 <__ieee754_pow+0x738>
 800e380:	e60d      	b.n	800df9e <__ieee754_pow+0x306>
 800e382:	bf00      	nop
 800e384:	f3af 8000 	nop.w
 800e388:	4a454eef 	.word	0x4a454eef
 800e38c:	3fca7e28 	.word	0x3fca7e28
 800e390:	93c9db65 	.word	0x93c9db65
 800e394:	3fcd864a 	.word	0x3fcd864a
 800e398:	a91d4101 	.word	0xa91d4101
 800e39c:	3fd17460 	.word	0x3fd17460
 800e3a0:	518f264d 	.word	0x518f264d
 800e3a4:	3fd55555 	.word	0x3fd55555
 800e3a8:	db6fabff 	.word	0xdb6fabff
 800e3ac:	3fdb6db6 	.word	0x3fdb6db6
 800e3b0:	33333303 	.word	0x33333303
 800e3b4:	3fe33333 	.word	0x3fe33333
 800e3b8:	e0000000 	.word	0xe0000000
 800e3bc:	3feec709 	.word	0x3feec709
 800e3c0:	dc3a03fd 	.word	0xdc3a03fd
 800e3c4:	3feec709 	.word	0x3feec709
 800e3c8:	145b01f5 	.word	0x145b01f5
 800e3cc:	be3e2fe0 	.word	0xbe3e2fe0
 800e3d0:	00000000 	.word	0x00000000
 800e3d4:	3ff00000 	.word	0x3ff00000
 800e3d8:	7ff00000 	.word	0x7ff00000
 800e3dc:	43400000 	.word	0x43400000
 800e3e0:	0003988e 	.word	0x0003988e
 800e3e4:	000bb679 	.word	0x000bb679
 800e3e8:	0808f798 	.word	0x0808f798
 800e3ec:	3ff00000 	.word	0x3ff00000
 800e3f0:	40080000 	.word	0x40080000
 800e3f4:	0808f7b8 	.word	0x0808f7b8
 800e3f8:	0808f7a8 	.word	0x0808f7a8
 800e3fc:	a3b5      	add	r3, pc, #724	; (adr r3, 800e6d4 <__ieee754_pow+0xa3c>)
 800e3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e402:	4640      	mov	r0, r8
 800e404:	4649      	mov	r1, r9
 800e406:	f7f1 ff59 	bl	80002bc <__adddf3>
 800e40a:	4622      	mov	r2, r4
 800e40c:	ec41 0b1a 	vmov	d10, r0, r1
 800e410:	462b      	mov	r3, r5
 800e412:	4630      	mov	r0, r6
 800e414:	4639      	mov	r1, r7
 800e416:	f7f1 ff4f 	bl	80002b8 <__aeabi_dsub>
 800e41a:	4602      	mov	r2, r0
 800e41c:	460b      	mov	r3, r1
 800e41e:	ec51 0b1a 	vmov	r0, r1, d10
 800e422:	f7f2 fb91 	bl	8000b48 <__aeabi_dcmpgt>
 800e426:	2800      	cmp	r0, #0
 800e428:	f47f adf8 	bne.w	800e01c <__ieee754_pow+0x384>
 800e42c:	4aa4      	ldr	r2, [pc, #656]	; (800e6c0 <__ieee754_pow+0xa28>)
 800e42e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e432:	4293      	cmp	r3, r2
 800e434:	f340 810b 	ble.w	800e64e <__ieee754_pow+0x9b6>
 800e438:	151b      	asrs	r3, r3, #20
 800e43a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e43e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e442:	fa4a f303 	asr.w	r3, sl, r3
 800e446:	445b      	add	r3, fp
 800e448:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e44c:	4e9d      	ldr	r6, [pc, #628]	; (800e6c4 <__ieee754_pow+0xa2c>)
 800e44e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e452:	4116      	asrs	r6, r2
 800e454:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e458:	2000      	movs	r0, #0
 800e45a:	ea23 0106 	bic.w	r1, r3, r6
 800e45e:	f1c2 0214 	rsb	r2, r2, #20
 800e462:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e466:	fa4a fa02 	asr.w	sl, sl, r2
 800e46a:	f1bb 0f00 	cmp.w	fp, #0
 800e46e:	4602      	mov	r2, r0
 800e470:	460b      	mov	r3, r1
 800e472:	4620      	mov	r0, r4
 800e474:	4629      	mov	r1, r5
 800e476:	bfb8      	it	lt
 800e478:	f1ca 0a00 	rsblt	sl, sl, #0
 800e47c:	f7f1 ff1c 	bl	80002b8 <__aeabi_dsub>
 800e480:	ec41 0b19 	vmov	d9, r0, r1
 800e484:	4642      	mov	r2, r8
 800e486:	464b      	mov	r3, r9
 800e488:	ec51 0b19 	vmov	r0, r1, d9
 800e48c:	f7f1 ff16 	bl	80002bc <__adddf3>
 800e490:	2400      	movs	r4, #0
 800e492:	a379      	add	r3, pc, #484	; (adr r3, 800e678 <__ieee754_pow+0x9e0>)
 800e494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e498:	4620      	mov	r0, r4
 800e49a:	460d      	mov	r5, r1
 800e49c:	f7f2 f8c4 	bl	8000628 <__aeabi_dmul>
 800e4a0:	ec53 2b19 	vmov	r2, r3, d9
 800e4a4:	4606      	mov	r6, r0
 800e4a6:	460f      	mov	r7, r1
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	4629      	mov	r1, r5
 800e4ac:	f7f1 ff04 	bl	80002b8 <__aeabi_dsub>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	4640      	mov	r0, r8
 800e4b6:	4649      	mov	r1, r9
 800e4b8:	f7f1 fefe 	bl	80002b8 <__aeabi_dsub>
 800e4bc:	a370      	add	r3, pc, #448	; (adr r3, 800e680 <__ieee754_pow+0x9e8>)
 800e4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c2:	f7f2 f8b1 	bl	8000628 <__aeabi_dmul>
 800e4c6:	a370      	add	r3, pc, #448	; (adr r3, 800e688 <__ieee754_pow+0x9f0>)
 800e4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4cc:	4680      	mov	r8, r0
 800e4ce:	4689      	mov	r9, r1
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	4629      	mov	r1, r5
 800e4d4:	f7f2 f8a8 	bl	8000628 <__aeabi_dmul>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	460b      	mov	r3, r1
 800e4dc:	4640      	mov	r0, r8
 800e4de:	4649      	mov	r1, r9
 800e4e0:	f7f1 feec 	bl	80002bc <__adddf3>
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	460d      	mov	r5, r1
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	4639      	mov	r1, r7
 800e4f0:	f7f1 fee4 	bl	80002bc <__adddf3>
 800e4f4:	4632      	mov	r2, r6
 800e4f6:	463b      	mov	r3, r7
 800e4f8:	4680      	mov	r8, r0
 800e4fa:	4689      	mov	r9, r1
 800e4fc:	f7f1 fedc 	bl	80002b8 <__aeabi_dsub>
 800e500:	4602      	mov	r2, r0
 800e502:	460b      	mov	r3, r1
 800e504:	4620      	mov	r0, r4
 800e506:	4629      	mov	r1, r5
 800e508:	f7f1 fed6 	bl	80002b8 <__aeabi_dsub>
 800e50c:	4642      	mov	r2, r8
 800e50e:	4606      	mov	r6, r0
 800e510:	460f      	mov	r7, r1
 800e512:	464b      	mov	r3, r9
 800e514:	4640      	mov	r0, r8
 800e516:	4649      	mov	r1, r9
 800e518:	f7f2 f886 	bl	8000628 <__aeabi_dmul>
 800e51c:	a35c      	add	r3, pc, #368	; (adr r3, 800e690 <__ieee754_pow+0x9f8>)
 800e51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e522:	4604      	mov	r4, r0
 800e524:	460d      	mov	r5, r1
 800e526:	f7f2 f87f 	bl	8000628 <__aeabi_dmul>
 800e52a:	a35b      	add	r3, pc, #364	; (adr r3, 800e698 <__ieee754_pow+0xa00>)
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	f7f1 fec2 	bl	80002b8 <__aeabi_dsub>
 800e534:	4622      	mov	r2, r4
 800e536:	462b      	mov	r3, r5
 800e538:	f7f2 f876 	bl	8000628 <__aeabi_dmul>
 800e53c:	a358      	add	r3, pc, #352	; (adr r3, 800e6a0 <__ieee754_pow+0xa08>)
 800e53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e542:	f7f1 febb 	bl	80002bc <__adddf3>
 800e546:	4622      	mov	r2, r4
 800e548:	462b      	mov	r3, r5
 800e54a:	f7f2 f86d 	bl	8000628 <__aeabi_dmul>
 800e54e:	a356      	add	r3, pc, #344	; (adr r3, 800e6a8 <__ieee754_pow+0xa10>)
 800e550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e554:	f7f1 feb0 	bl	80002b8 <__aeabi_dsub>
 800e558:	4622      	mov	r2, r4
 800e55a:	462b      	mov	r3, r5
 800e55c:	f7f2 f864 	bl	8000628 <__aeabi_dmul>
 800e560:	a353      	add	r3, pc, #332	; (adr r3, 800e6b0 <__ieee754_pow+0xa18>)
 800e562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e566:	f7f1 fea9 	bl	80002bc <__adddf3>
 800e56a:	4622      	mov	r2, r4
 800e56c:	462b      	mov	r3, r5
 800e56e:	f7f2 f85b 	bl	8000628 <__aeabi_dmul>
 800e572:	4602      	mov	r2, r0
 800e574:	460b      	mov	r3, r1
 800e576:	4640      	mov	r0, r8
 800e578:	4649      	mov	r1, r9
 800e57a:	f7f1 fe9d 	bl	80002b8 <__aeabi_dsub>
 800e57e:	4604      	mov	r4, r0
 800e580:	460d      	mov	r5, r1
 800e582:	4602      	mov	r2, r0
 800e584:	460b      	mov	r3, r1
 800e586:	4640      	mov	r0, r8
 800e588:	4649      	mov	r1, r9
 800e58a:	f7f2 f84d 	bl	8000628 <__aeabi_dmul>
 800e58e:	2200      	movs	r2, #0
 800e590:	ec41 0b19 	vmov	d9, r0, r1
 800e594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e598:	4620      	mov	r0, r4
 800e59a:	4629      	mov	r1, r5
 800e59c:	f7f1 fe8c 	bl	80002b8 <__aeabi_dsub>
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	460b      	mov	r3, r1
 800e5a4:	ec51 0b19 	vmov	r0, r1, d9
 800e5a8:	f7f2 f968 	bl	800087c <__aeabi_ddiv>
 800e5ac:	4632      	mov	r2, r6
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	460d      	mov	r5, r1
 800e5b2:	463b      	mov	r3, r7
 800e5b4:	4640      	mov	r0, r8
 800e5b6:	4649      	mov	r1, r9
 800e5b8:	f7f2 f836 	bl	8000628 <__aeabi_dmul>
 800e5bc:	4632      	mov	r2, r6
 800e5be:	463b      	mov	r3, r7
 800e5c0:	f7f1 fe7c 	bl	80002bc <__adddf3>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	f7f1 fe74 	bl	80002b8 <__aeabi_dsub>
 800e5d0:	4642      	mov	r2, r8
 800e5d2:	464b      	mov	r3, r9
 800e5d4:	f7f1 fe70 	bl	80002b8 <__aeabi_dsub>
 800e5d8:	460b      	mov	r3, r1
 800e5da:	4602      	mov	r2, r0
 800e5dc:	493a      	ldr	r1, [pc, #232]	; (800e6c8 <__ieee754_pow+0xa30>)
 800e5de:	2000      	movs	r0, #0
 800e5e0:	f7f1 fe6a 	bl	80002b8 <__aeabi_dsub>
 800e5e4:	e9cd 0100 	strd	r0, r1, [sp]
 800e5e8:	9b01      	ldr	r3, [sp, #4]
 800e5ea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e5ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5f2:	da2f      	bge.n	800e654 <__ieee754_pow+0x9bc>
 800e5f4:	4650      	mov	r0, sl
 800e5f6:	ed9d 0b00 	vldr	d0, [sp]
 800e5fa:	f000 f9cd 	bl	800e998 <scalbn>
 800e5fe:	ec51 0b10 	vmov	r0, r1, d0
 800e602:	ec53 2b18 	vmov	r2, r3, d8
 800e606:	f7ff bbe0 	b.w	800ddca <__ieee754_pow+0x132>
 800e60a:	4b30      	ldr	r3, [pc, #192]	; (800e6cc <__ieee754_pow+0xa34>)
 800e60c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e610:	429e      	cmp	r6, r3
 800e612:	f77f af0b 	ble.w	800e42c <__ieee754_pow+0x794>
 800e616:	4b2e      	ldr	r3, [pc, #184]	; (800e6d0 <__ieee754_pow+0xa38>)
 800e618:	440b      	add	r3, r1
 800e61a:	4303      	orrs	r3, r0
 800e61c:	d00b      	beq.n	800e636 <__ieee754_pow+0x99e>
 800e61e:	a326      	add	r3, pc, #152	; (adr r3, 800e6b8 <__ieee754_pow+0xa20>)
 800e620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e624:	ec51 0b18 	vmov	r0, r1, d8
 800e628:	f7f1 fffe 	bl	8000628 <__aeabi_dmul>
 800e62c:	a322      	add	r3, pc, #136	; (adr r3, 800e6b8 <__ieee754_pow+0xa20>)
 800e62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e632:	f7ff bbca 	b.w	800ddca <__ieee754_pow+0x132>
 800e636:	4622      	mov	r2, r4
 800e638:	462b      	mov	r3, r5
 800e63a:	f7f1 fe3d 	bl	80002b8 <__aeabi_dsub>
 800e63e:	4642      	mov	r2, r8
 800e640:	464b      	mov	r3, r9
 800e642:	f7f2 fa77 	bl	8000b34 <__aeabi_dcmpge>
 800e646:	2800      	cmp	r0, #0
 800e648:	f43f aef0 	beq.w	800e42c <__ieee754_pow+0x794>
 800e64c:	e7e7      	b.n	800e61e <__ieee754_pow+0x986>
 800e64e:	f04f 0a00 	mov.w	sl, #0
 800e652:	e717      	b.n	800e484 <__ieee754_pow+0x7ec>
 800e654:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e658:	4619      	mov	r1, r3
 800e65a:	e7d2      	b.n	800e602 <__ieee754_pow+0x96a>
 800e65c:	491a      	ldr	r1, [pc, #104]	; (800e6c8 <__ieee754_pow+0xa30>)
 800e65e:	2000      	movs	r0, #0
 800e660:	f7ff bb9e 	b.w	800dda0 <__ieee754_pow+0x108>
 800e664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e668:	f7ff bb9a 	b.w	800dda0 <__ieee754_pow+0x108>
 800e66c:	9000      	str	r0, [sp, #0]
 800e66e:	f7ff bb76 	b.w	800dd5e <__ieee754_pow+0xc6>
 800e672:	2100      	movs	r1, #0
 800e674:	f7ff bb60 	b.w	800dd38 <__ieee754_pow+0xa0>
 800e678:	00000000 	.word	0x00000000
 800e67c:	3fe62e43 	.word	0x3fe62e43
 800e680:	fefa39ef 	.word	0xfefa39ef
 800e684:	3fe62e42 	.word	0x3fe62e42
 800e688:	0ca86c39 	.word	0x0ca86c39
 800e68c:	be205c61 	.word	0xbe205c61
 800e690:	72bea4d0 	.word	0x72bea4d0
 800e694:	3e663769 	.word	0x3e663769
 800e698:	c5d26bf1 	.word	0xc5d26bf1
 800e69c:	3ebbbd41 	.word	0x3ebbbd41
 800e6a0:	af25de2c 	.word	0xaf25de2c
 800e6a4:	3f11566a 	.word	0x3f11566a
 800e6a8:	16bebd93 	.word	0x16bebd93
 800e6ac:	3f66c16c 	.word	0x3f66c16c
 800e6b0:	5555553e 	.word	0x5555553e
 800e6b4:	3fc55555 	.word	0x3fc55555
 800e6b8:	c2f8f359 	.word	0xc2f8f359
 800e6bc:	01a56e1f 	.word	0x01a56e1f
 800e6c0:	3fe00000 	.word	0x3fe00000
 800e6c4:	000fffff 	.word	0x000fffff
 800e6c8:	3ff00000 	.word	0x3ff00000
 800e6cc:	4090cbff 	.word	0x4090cbff
 800e6d0:	3f6f3400 	.word	0x3f6f3400
 800e6d4:	652b82fe 	.word	0x652b82fe
 800e6d8:	3c971547 	.word	0x3c971547

0800e6dc <__ieee754_sqrt>:
 800e6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e0:	ec55 4b10 	vmov	r4, r5, d0
 800e6e4:	4e56      	ldr	r6, [pc, #344]	; (800e840 <__ieee754_sqrt+0x164>)
 800e6e6:	43ae      	bics	r6, r5
 800e6e8:	ee10 0a10 	vmov	r0, s0
 800e6ec:	ee10 3a10 	vmov	r3, s0
 800e6f0:	4629      	mov	r1, r5
 800e6f2:	462a      	mov	r2, r5
 800e6f4:	d110      	bne.n	800e718 <__ieee754_sqrt+0x3c>
 800e6f6:	ee10 2a10 	vmov	r2, s0
 800e6fa:	462b      	mov	r3, r5
 800e6fc:	f7f1 ff94 	bl	8000628 <__aeabi_dmul>
 800e700:	4602      	mov	r2, r0
 800e702:	460b      	mov	r3, r1
 800e704:	4620      	mov	r0, r4
 800e706:	4629      	mov	r1, r5
 800e708:	f7f1 fdd8 	bl	80002bc <__adddf3>
 800e70c:	4604      	mov	r4, r0
 800e70e:	460d      	mov	r5, r1
 800e710:	ec45 4b10 	vmov	d0, r4, r5
 800e714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e718:	2d00      	cmp	r5, #0
 800e71a:	dc10      	bgt.n	800e73e <__ieee754_sqrt+0x62>
 800e71c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e720:	4330      	orrs	r0, r6
 800e722:	d0f5      	beq.n	800e710 <__ieee754_sqrt+0x34>
 800e724:	b15d      	cbz	r5, 800e73e <__ieee754_sqrt+0x62>
 800e726:	ee10 2a10 	vmov	r2, s0
 800e72a:	462b      	mov	r3, r5
 800e72c:	ee10 0a10 	vmov	r0, s0
 800e730:	f7f1 fdc2 	bl	80002b8 <__aeabi_dsub>
 800e734:	4602      	mov	r2, r0
 800e736:	460b      	mov	r3, r1
 800e738:	f7f2 f8a0 	bl	800087c <__aeabi_ddiv>
 800e73c:	e7e6      	b.n	800e70c <__ieee754_sqrt+0x30>
 800e73e:	1509      	asrs	r1, r1, #20
 800e740:	d076      	beq.n	800e830 <__ieee754_sqrt+0x154>
 800e742:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e746:	07ce      	lsls	r6, r1, #31
 800e748:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800e74c:	bf5e      	ittt	pl
 800e74e:	0fda      	lsrpl	r2, r3, #31
 800e750:	005b      	lslpl	r3, r3, #1
 800e752:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800e756:	0fda      	lsrs	r2, r3, #31
 800e758:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800e75c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800e760:	2000      	movs	r0, #0
 800e762:	106d      	asrs	r5, r5, #1
 800e764:	005b      	lsls	r3, r3, #1
 800e766:	f04f 0e16 	mov.w	lr, #22
 800e76a:	4684      	mov	ip, r0
 800e76c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e770:	eb0c 0401 	add.w	r4, ip, r1
 800e774:	4294      	cmp	r4, r2
 800e776:	bfde      	ittt	le
 800e778:	1b12      	suble	r2, r2, r4
 800e77a:	eb04 0c01 	addle.w	ip, r4, r1
 800e77e:	1840      	addle	r0, r0, r1
 800e780:	0052      	lsls	r2, r2, #1
 800e782:	f1be 0e01 	subs.w	lr, lr, #1
 800e786:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e78a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e78e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e792:	d1ed      	bne.n	800e770 <__ieee754_sqrt+0x94>
 800e794:	4671      	mov	r1, lr
 800e796:	2720      	movs	r7, #32
 800e798:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e79c:	4562      	cmp	r2, ip
 800e79e:	eb04 060e 	add.w	r6, r4, lr
 800e7a2:	dc02      	bgt.n	800e7aa <__ieee754_sqrt+0xce>
 800e7a4:	d113      	bne.n	800e7ce <__ieee754_sqrt+0xf2>
 800e7a6:	429e      	cmp	r6, r3
 800e7a8:	d811      	bhi.n	800e7ce <__ieee754_sqrt+0xf2>
 800e7aa:	2e00      	cmp	r6, #0
 800e7ac:	eb06 0e04 	add.w	lr, r6, r4
 800e7b0:	da43      	bge.n	800e83a <__ieee754_sqrt+0x15e>
 800e7b2:	f1be 0f00 	cmp.w	lr, #0
 800e7b6:	db40      	blt.n	800e83a <__ieee754_sqrt+0x15e>
 800e7b8:	f10c 0801 	add.w	r8, ip, #1
 800e7bc:	eba2 020c 	sub.w	r2, r2, ip
 800e7c0:	429e      	cmp	r6, r3
 800e7c2:	bf88      	it	hi
 800e7c4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e7c8:	1b9b      	subs	r3, r3, r6
 800e7ca:	4421      	add	r1, r4
 800e7cc:	46c4      	mov	ip, r8
 800e7ce:	0052      	lsls	r2, r2, #1
 800e7d0:	3f01      	subs	r7, #1
 800e7d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e7d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e7da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e7de:	d1dd      	bne.n	800e79c <__ieee754_sqrt+0xc0>
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	d006      	beq.n	800e7f2 <__ieee754_sqrt+0x116>
 800e7e4:	1c4c      	adds	r4, r1, #1
 800e7e6:	bf13      	iteet	ne
 800e7e8:	3101      	addne	r1, #1
 800e7ea:	3001      	addeq	r0, #1
 800e7ec:	4639      	moveq	r1, r7
 800e7ee:	f021 0101 	bicne.w	r1, r1, #1
 800e7f2:	1043      	asrs	r3, r0, #1
 800e7f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e7f8:	0849      	lsrs	r1, r1, #1
 800e7fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e7fe:	07c2      	lsls	r2, r0, #31
 800e800:	bf48      	it	mi
 800e802:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e806:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e80a:	460c      	mov	r4, r1
 800e80c:	463d      	mov	r5, r7
 800e80e:	e77f      	b.n	800e710 <__ieee754_sqrt+0x34>
 800e810:	0ada      	lsrs	r2, r3, #11
 800e812:	3815      	subs	r0, #21
 800e814:	055b      	lsls	r3, r3, #21
 800e816:	2a00      	cmp	r2, #0
 800e818:	d0fa      	beq.n	800e810 <__ieee754_sqrt+0x134>
 800e81a:	02d7      	lsls	r7, r2, #11
 800e81c:	d50a      	bpl.n	800e834 <__ieee754_sqrt+0x158>
 800e81e:	f1c1 0420 	rsb	r4, r1, #32
 800e822:	fa23 f404 	lsr.w	r4, r3, r4
 800e826:	1e4d      	subs	r5, r1, #1
 800e828:	408b      	lsls	r3, r1
 800e82a:	4322      	orrs	r2, r4
 800e82c:	1b41      	subs	r1, r0, r5
 800e82e:	e788      	b.n	800e742 <__ieee754_sqrt+0x66>
 800e830:	4608      	mov	r0, r1
 800e832:	e7f0      	b.n	800e816 <__ieee754_sqrt+0x13a>
 800e834:	0052      	lsls	r2, r2, #1
 800e836:	3101      	adds	r1, #1
 800e838:	e7ef      	b.n	800e81a <__ieee754_sqrt+0x13e>
 800e83a:	46e0      	mov	r8, ip
 800e83c:	e7be      	b.n	800e7bc <__ieee754_sqrt+0xe0>
 800e83e:	bf00      	nop
 800e840:	7ff00000 	.word	0x7ff00000

0800e844 <fabs>:
 800e844:	ec51 0b10 	vmov	r0, r1, d0
 800e848:	ee10 2a10 	vmov	r2, s0
 800e84c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e850:	ec43 2b10 	vmov	d0, r2, r3
 800e854:	4770      	bx	lr

0800e856 <finite>:
 800e856:	b082      	sub	sp, #8
 800e858:	ed8d 0b00 	vstr	d0, [sp]
 800e85c:	9801      	ldr	r0, [sp, #4]
 800e85e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e862:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e866:	0fc0      	lsrs	r0, r0, #31
 800e868:	b002      	add	sp, #8
 800e86a:	4770      	bx	lr
 800e86c:	0000      	movs	r0, r0
	...

0800e870 <nan>:
 800e870:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e878 <nan+0x8>
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	00000000 	.word	0x00000000
 800e87c:	7ff80000 	.word	0x7ff80000

0800e880 <rint>:
 800e880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e882:	ec51 0b10 	vmov	r0, r1, d0
 800e886:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e88a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e88e:	2e13      	cmp	r6, #19
 800e890:	ee10 4a10 	vmov	r4, s0
 800e894:	460b      	mov	r3, r1
 800e896:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e89a:	dc58      	bgt.n	800e94e <rint+0xce>
 800e89c:	2e00      	cmp	r6, #0
 800e89e:	da2b      	bge.n	800e8f8 <rint+0x78>
 800e8a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e8a4:	4302      	orrs	r2, r0
 800e8a6:	d023      	beq.n	800e8f0 <rint+0x70>
 800e8a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e8ac:	4302      	orrs	r2, r0
 800e8ae:	4254      	negs	r4, r2
 800e8b0:	4314      	orrs	r4, r2
 800e8b2:	0c4b      	lsrs	r3, r1, #17
 800e8b4:	0b24      	lsrs	r4, r4, #12
 800e8b6:	045b      	lsls	r3, r3, #17
 800e8b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e8bc:	ea44 0103 	orr.w	r1, r4, r3
 800e8c0:	4b32      	ldr	r3, [pc, #200]	; (800e98c <rint+0x10c>)
 800e8c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e8c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	4639      	mov	r1, r7
 800e8d2:	f7f1 fcf3 	bl	80002bc <__adddf3>
 800e8d6:	e9cd 0100 	strd	r0, r1, [sp]
 800e8da:	463b      	mov	r3, r7
 800e8dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8e0:	4632      	mov	r2, r6
 800e8e2:	f7f1 fce9 	bl	80002b8 <__aeabi_dsub>
 800e8e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e8ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e8ee:	4639      	mov	r1, r7
 800e8f0:	ec41 0b10 	vmov	d0, r0, r1
 800e8f4:	b003      	add	sp, #12
 800e8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8f8:	4a25      	ldr	r2, [pc, #148]	; (800e990 <rint+0x110>)
 800e8fa:	4132      	asrs	r2, r6
 800e8fc:	ea01 0702 	and.w	r7, r1, r2
 800e900:	4307      	orrs	r7, r0
 800e902:	d0f5      	beq.n	800e8f0 <rint+0x70>
 800e904:	0851      	lsrs	r1, r2, #1
 800e906:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800e90a:	4314      	orrs	r4, r2
 800e90c:	d00c      	beq.n	800e928 <rint+0xa8>
 800e90e:	ea23 0201 	bic.w	r2, r3, r1
 800e912:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e916:	2e13      	cmp	r6, #19
 800e918:	fa43 f606 	asr.w	r6, r3, r6
 800e91c:	bf0c      	ite	eq
 800e91e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e922:	2400      	movne	r4, #0
 800e924:	ea42 0306 	orr.w	r3, r2, r6
 800e928:	4918      	ldr	r1, [pc, #96]	; (800e98c <rint+0x10c>)
 800e92a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e92e:	4622      	mov	r2, r4
 800e930:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e934:	4620      	mov	r0, r4
 800e936:	4629      	mov	r1, r5
 800e938:	f7f1 fcc0 	bl	80002bc <__adddf3>
 800e93c:	e9cd 0100 	strd	r0, r1, [sp]
 800e940:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e944:	4622      	mov	r2, r4
 800e946:	462b      	mov	r3, r5
 800e948:	f7f1 fcb6 	bl	80002b8 <__aeabi_dsub>
 800e94c:	e7d0      	b.n	800e8f0 <rint+0x70>
 800e94e:	2e33      	cmp	r6, #51	; 0x33
 800e950:	dd07      	ble.n	800e962 <rint+0xe2>
 800e952:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e956:	d1cb      	bne.n	800e8f0 <rint+0x70>
 800e958:	ee10 2a10 	vmov	r2, s0
 800e95c:	f7f1 fcae 	bl	80002bc <__adddf3>
 800e960:	e7c6      	b.n	800e8f0 <rint+0x70>
 800e962:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e966:	f04f 36ff 	mov.w	r6, #4294967295
 800e96a:	40d6      	lsrs	r6, r2
 800e96c:	4230      	tst	r0, r6
 800e96e:	d0bf      	beq.n	800e8f0 <rint+0x70>
 800e970:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800e974:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800e978:	bf1f      	itttt	ne
 800e97a:	ea24 0101 	bicne.w	r1, r4, r1
 800e97e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e982:	fa44 f202 	asrne.w	r2, r4, r2
 800e986:	ea41 0402 	orrne.w	r4, r1, r2
 800e98a:	e7cd      	b.n	800e928 <rint+0xa8>
 800e98c:	0808f7c8 	.word	0x0808f7c8
 800e990:	000fffff 	.word	0x000fffff
 800e994:	00000000 	.word	0x00000000

0800e998 <scalbn>:
 800e998:	b570      	push	{r4, r5, r6, lr}
 800e99a:	ec55 4b10 	vmov	r4, r5, d0
 800e99e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e9a2:	4606      	mov	r6, r0
 800e9a4:	462b      	mov	r3, r5
 800e9a6:	b99a      	cbnz	r2, 800e9d0 <scalbn+0x38>
 800e9a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e9ac:	4323      	orrs	r3, r4
 800e9ae:	d036      	beq.n	800ea1e <scalbn+0x86>
 800e9b0:	4b39      	ldr	r3, [pc, #228]	; (800ea98 <scalbn+0x100>)
 800e9b2:	4629      	mov	r1, r5
 800e9b4:	ee10 0a10 	vmov	r0, s0
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	f7f1 fe35 	bl	8000628 <__aeabi_dmul>
 800e9be:	4b37      	ldr	r3, [pc, #220]	; (800ea9c <scalbn+0x104>)
 800e9c0:	429e      	cmp	r6, r3
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	460d      	mov	r5, r1
 800e9c6:	da10      	bge.n	800e9ea <scalbn+0x52>
 800e9c8:	a32b      	add	r3, pc, #172	; (adr r3, 800ea78 <scalbn+0xe0>)
 800e9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ce:	e03a      	b.n	800ea46 <scalbn+0xae>
 800e9d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e9d4:	428a      	cmp	r2, r1
 800e9d6:	d10c      	bne.n	800e9f2 <scalbn+0x5a>
 800e9d8:	ee10 2a10 	vmov	r2, s0
 800e9dc:	4620      	mov	r0, r4
 800e9de:	4629      	mov	r1, r5
 800e9e0:	f7f1 fc6c 	bl	80002bc <__adddf3>
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	460d      	mov	r5, r1
 800e9e8:	e019      	b.n	800ea1e <scalbn+0x86>
 800e9ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	3a36      	subs	r2, #54	; 0x36
 800e9f2:	4432      	add	r2, r6
 800e9f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e9f8:	428a      	cmp	r2, r1
 800e9fa:	dd08      	ble.n	800ea0e <scalbn+0x76>
 800e9fc:	2d00      	cmp	r5, #0
 800e9fe:	a120      	add	r1, pc, #128	; (adr r1, 800ea80 <scalbn+0xe8>)
 800ea00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea04:	da1c      	bge.n	800ea40 <scalbn+0xa8>
 800ea06:	a120      	add	r1, pc, #128	; (adr r1, 800ea88 <scalbn+0xf0>)
 800ea08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea0c:	e018      	b.n	800ea40 <scalbn+0xa8>
 800ea0e:	2a00      	cmp	r2, #0
 800ea10:	dd08      	ble.n	800ea24 <scalbn+0x8c>
 800ea12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ea1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ea1e:	ec45 4b10 	vmov	d0, r4, r5
 800ea22:	bd70      	pop	{r4, r5, r6, pc}
 800ea24:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ea28:	da19      	bge.n	800ea5e <scalbn+0xc6>
 800ea2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ea2e:	429e      	cmp	r6, r3
 800ea30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ea34:	dd0a      	ble.n	800ea4c <scalbn+0xb4>
 800ea36:	a112      	add	r1, pc, #72	; (adr r1, 800ea80 <scalbn+0xe8>)
 800ea38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1e2      	bne.n	800ea06 <scalbn+0x6e>
 800ea40:	a30f      	add	r3, pc, #60	; (adr r3, 800ea80 <scalbn+0xe8>)
 800ea42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea46:	f7f1 fdef 	bl	8000628 <__aeabi_dmul>
 800ea4a:	e7cb      	b.n	800e9e4 <scalbn+0x4c>
 800ea4c:	a10a      	add	r1, pc, #40	; (adr r1, 800ea78 <scalbn+0xe0>)
 800ea4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d0b8      	beq.n	800e9c8 <scalbn+0x30>
 800ea56:	a10e      	add	r1, pc, #56	; (adr r1, 800ea90 <scalbn+0xf8>)
 800ea58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea5c:	e7b4      	b.n	800e9c8 <scalbn+0x30>
 800ea5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea62:	3236      	adds	r2, #54	; 0x36
 800ea64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ea68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	4b0c      	ldr	r3, [pc, #48]	; (800eaa0 <scalbn+0x108>)
 800ea70:	2200      	movs	r2, #0
 800ea72:	e7e8      	b.n	800ea46 <scalbn+0xae>
 800ea74:	f3af 8000 	nop.w
 800ea78:	c2f8f359 	.word	0xc2f8f359
 800ea7c:	01a56e1f 	.word	0x01a56e1f
 800ea80:	8800759c 	.word	0x8800759c
 800ea84:	7e37e43c 	.word	0x7e37e43c
 800ea88:	8800759c 	.word	0x8800759c
 800ea8c:	fe37e43c 	.word	0xfe37e43c
 800ea90:	c2f8f359 	.word	0xc2f8f359
 800ea94:	81a56e1f 	.word	0x81a56e1f
 800ea98:	43500000 	.word	0x43500000
 800ea9c:	ffff3cb0 	.word	0xffff3cb0
 800eaa0:	3c900000 	.word	0x3c900000

0800eaa4 <_init>:
 800eaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaa6:	bf00      	nop
 800eaa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaaa:	bc08      	pop	{r3}
 800eaac:	469e      	mov	lr, r3
 800eaae:	4770      	bx	lr

0800eab0 <_fini>:
 800eab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eab2:	bf00      	nop
 800eab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eab6:	bc08      	pop	{r3}
 800eab8:	469e      	mov	lr, r3
 800eaba:	4770      	bx	lr
