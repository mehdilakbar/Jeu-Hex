
miniProjet2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00080d48  0800f590  0800f590  0001f590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080902d8  080902d8  000b00b8  2**0
                  CONTENTS
  4 .ARM          00000008  080902d8  080902d8  000a02d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080902e0  080902e0  000b00b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080902e0  080902e0  000a02e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080902e4  080902e4  000a02e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080902e8  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b50  200000b8  080903a0  000b00b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c08  080903a0  000b4c08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000b00b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000323dd  00000000  00000000  000b00e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e32  00000000  00000000  000e24c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002620  00000000  00000000  000e82f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023b8  00000000  00000000  000ea918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f48f  00000000  00000000  000eccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ce4b  00000000  00000000  0011c15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117eef  00000000  00000000  00148faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00260e99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aabc  00000000  00000000  00260eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f574 	.word	0x0800f574

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	0800f574 	.word	0x0800f574

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96e 	b.w	8000e7c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 8083 	bne.w	8000cce <__udivmoddi4+0x116>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d947      	bls.n	8000c5e <__udivmoddi4+0xa6>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b142      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd4:	f1c2 0020 	rsb	r0, r2, #32
 8000bd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4097      	lsls	r7, r2
 8000be0:	ea40 0c01 	orr.w	ip, r0, r1
 8000be4:	4094      	lsls	r4, r2
 8000be6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf0:	fa1f fe87 	uxth.w	lr, r7
 8000bf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x60>
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0a:	f080 8119 	bcs.w	8000e40 <__udivmoddi4+0x288>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 8116 	bls.w	8000e40 <__udivmoddi4+0x288>
 8000c14:	3e02      	subs	r6, #2
 8000c16:	443b      	add	r3, r7
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c20:	fb08 3310 	mls	r3, r8, r0, r3
 8000c24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x8c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	f080 8105 	bcs.w	8000e44 <__udivmoddi4+0x28c>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f240 8102 	bls.w	8000e44 <__udivmoddi4+0x28c>
 8000c40:	3802      	subs	r0, #2
 8000c42:	443c      	add	r4, r7
 8000c44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c48:	eba4 040e 	sub.w	r4, r4, lr
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	b11d      	cbz	r5, 8000c58 <__udivmoddi4+0xa0>
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	2300      	movs	r3, #0
 8000c54:	e9c5 4300 	strd	r4, r3, [r5]
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xaa>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d150      	bne.n	8000d0c <__udivmoddi4+0x154>
 8000c6a:	1bcb      	subs	r3, r1, r7
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f f887 	uxth.w	r8, r7
 8000c74:	2601      	movs	r6, #1
 8000c76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7a:	0c21      	lsrs	r1, r4, #16
 8000c7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb08 f30c 	mul.w	r3, r8, ip
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0xe4>
 8000c8c:	1879      	adds	r1, r7, r1
 8000c8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0xe2>
 8000c94:	428b      	cmp	r3, r1
 8000c96:	f200 80e9 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	1ac9      	subs	r1, r1, r3
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cac:	fb08 f800 	mul.w	r8, r8, r0
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x10c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x10a>
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	f200 80d9 	bhi.w	8000e74 <__udivmoddi4+0x2bc>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	eba4 0408 	sub.w	r4, r4, r8
 8000cc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ccc:	e7bf      	b.n	8000c4e <__udivmoddi4+0x96>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x12e>
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	f000 80b1 	beq.w	8000e3a <__udivmoddi4+0x282>
 8000cd8:	2600      	movs	r6, #0
 8000cda:	e9c5 0100 	strd	r0, r1, [r5]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f683 	clz	r6, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d14a      	bne.n	8000d84 <__udivmoddi4+0x1cc>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x140>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80b8 	bhi.w	8000e68 <__udivmoddi4+0x2b0>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	468c      	mov	ip, r1
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d0a8      	beq.n	8000c58 <__udivmoddi4+0xa0>
 8000d06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f603 	lsr.w	r6, r0, r3
 8000d14:	4097      	lsls	r7, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1e:	40d9      	lsrs	r1, r3
 8000d20:	4330      	orrs	r0, r6
 8000d22:	0c03      	lsrs	r3, r0, #16
 8000d24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d28:	fa1f f887 	uxth.w	r8, r7
 8000d2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb06 f108 	mul.w	r1, r6, r8
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x19c>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d46:	f080 808d 	bcs.w	8000e64 <__udivmoddi4+0x2ac>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 808a 	bls.w	8000e64 <__udivmoddi4+0x2ac>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	443b      	add	r3, r7
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	b281      	uxth	r1, r0
 8000d58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb00 f308 	mul.w	r3, r0, r8
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x1c4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d72:	d273      	bcs.n	8000e5c <__udivmoddi4+0x2a4>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d971      	bls.n	8000e5c <__udivmoddi4+0x2a4>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4439      	add	r1, r7
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d82:	e778      	b.n	8000c76 <__udivmoddi4+0xbe>
 8000d84:	f1c6 0c20 	rsb	ip, r6, #32
 8000d88:	fa03 f406 	lsl.w	r4, r3, r6
 8000d8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d90:	431c      	orrs	r4, r3
 8000d92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d96:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da2:	431f      	orrs	r7, r3
 8000da4:	0c3b      	lsrs	r3, r7, #16
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fa1f f884 	uxth.w	r8, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000db6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dba:	458a      	cmp	sl, r1
 8000dbc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x220>
 8000dc6:	1861      	adds	r1, r4, r1
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	d248      	bcs.n	8000e60 <__udivmoddi4+0x2a8>
 8000dce:	458a      	cmp	sl, r1
 8000dd0:	d946      	bls.n	8000e60 <__udivmoddi4+0x2a8>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4421      	add	r1, r4
 8000dd8:	eba1 010a 	sub.w	r1, r1, sl
 8000ddc:	b2bf      	uxth	r7, r7
 8000dde:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dea:	fb00 f808 	mul.w	r8, r0, r8
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x24a>
 8000df2:	19e7      	adds	r7, r4, r7
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d22e      	bcs.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d92c      	bls.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4427      	add	r7, r4
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	eba7 0708 	sub.w	r7, r7, r8
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	454f      	cmp	r7, r9
 8000e10:	46c6      	mov	lr, r8
 8000e12:	4649      	mov	r1, r9
 8000e14:	d31a      	bcc.n	8000e4c <__udivmoddi4+0x294>
 8000e16:	d017      	beq.n	8000e48 <__udivmoddi4+0x290>
 8000e18:	b15d      	cbz	r5, 8000e32 <__udivmoddi4+0x27a>
 8000e1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e26:	40f2      	lsrs	r2, r6
 8000e28:	ea4c 0202 	orr.w	r2, ip, r2
 8000e2c:	40f7      	lsrs	r7, r6
 8000e2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e32:	2600      	movs	r6, #0
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e70b      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e9      	b.n	8000c18 <__udivmoddi4+0x60>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6fd      	b.n	8000c44 <__udivmoddi4+0x8c>
 8000e48:	4543      	cmp	r3, r8
 8000e4a:	d2e5      	bcs.n	8000e18 <__udivmoddi4+0x260>
 8000e4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e50:	eb69 0104 	sbc.w	r1, r9, r4
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7df      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e7d2      	b.n	8000e02 <__udivmoddi4+0x24a>
 8000e5c:	4660      	mov	r0, ip
 8000e5e:	e78d      	b.n	8000d7c <__udivmoddi4+0x1c4>
 8000e60:	4681      	mov	r9, r0
 8000e62:	e7b9      	b.n	8000dd8 <__udivmoddi4+0x220>
 8000e64:	4666      	mov	r6, ip
 8000e66:	e775      	b.n	8000d54 <__udivmoddi4+0x19c>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e74a      	b.n	8000d02 <__udivmoddi4+0x14a>
 8000e6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e70:	4439      	add	r1, r7
 8000e72:	e713      	b.n	8000c9c <__udivmoddi4+0xe4>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	e724      	b.n	8000cc4 <__udivmoddi4+0x10c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4a07      	ldr	r2, [pc, #28]	; (8000eac <vApplicationGetIdleTaskMemory+0x2c>)
 8000e90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <vApplicationGetIdleTaskMemory+0x30>)
 8000e96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200000d4 	.word	0x200000d4
 8000eb0:	20000188 	.word	0x20000188

08000eb4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000ebe:	20c8      	movs	r0, #200	; 0xc8
 8000ec0:	f002 fb7c 	bl	80035bc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000ec4:	f000 fa7a 	bl	80013bc <ft5336_I2C_InitializeIfRequired>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000efc:	f000 fa5e 	bl	80013bc <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e010      	b.n	8000f28 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	21a8      	movs	r1, #168	; 0xa8
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 fb37 	bl	8003580 <TS_IO_Read>
 8000f12:	4603      	mov	r3, r0
 8000f14:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000f16:	7b7b      	ldrb	r3, [r7, #13]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b51      	cmp	r3, #81	; 0x51
 8000f1c:	d101      	bne.n	8000f22 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	3301      	adds	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d802      	bhi.n	8000f34 <ft5336_ReadID+0x4e>
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0e8      	beq.n	8000f06 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000f34:	7b7b      	ldrb	r3, [r7, #13]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	b29b      	uxth	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fa44 	bl	80013dc <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f932 	bl	80011c0 <ft5336_TS_DisableIT>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2102      	movs	r1, #2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 fb01 	bl	8003580 <TS_IO_Read>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b05      	cmp	r3, #5
 8000f94:	d901      	bls.n	8000f9a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <ft5336_TS_DetectTouch+0x50>)
 8000fa0:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <ft5336_TS_DetectTouch+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	b2db      	uxtb	r3, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000388 	.word	0x20000388

08000fb8 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000fda:	4b6d      	ldr	r3, [pc, #436]	; (8001190 <ft5336_TS_GetXY+0x1d8>)
 8000fdc:	789a      	ldrb	r2, [r3, #2]
 8000fde:	4b6c      	ldr	r3, [pc, #432]	; (8001190 <ft5336_TS_GetXY+0x1d8>)
 8000fe0:	785b      	ldrb	r3, [r3, #1]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	f080 80cf 	bcs.w	8001186 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000fe8:	4b69      	ldr	r3, [pc, #420]	; (8001190 <ft5336_TS_GetXY+0x1d8>)
 8000fea:	789b      	ldrb	r3, [r3, #2]
 8000fec:	2b09      	cmp	r3, #9
 8000fee:	d871      	bhi.n	80010d4 <ft5336_TS_GetXY+0x11c>
 8000ff0:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <ft5336_TS_GetXY+0x40>)
 8000ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff6:	bf00      	nop
 8000ff8:	08001021 	.word	0x08001021
 8000ffc:	08001033 	.word	0x08001033
 8001000:	08001045 	.word	0x08001045
 8001004:	08001057 	.word	0x08001057
 8001008:	08001069 	.word	0x08001069
 800100c:	0800107b 	.word	0x0800107b
 8001010:	0800108d 	.word	0x0800108d
 8001014:	0800109f 	.word	0x0800109f
 8001018:	080010b1 	.word	0x080010b1
 800101c:	080010c3 	.word	0x080010c3
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001020:	2304      	movs	r3, #4
 8001022:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001024:	2303      	movs	r3, #3
 8001026:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001028:	2306      	movs	r3, #6
 800102a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 800102c:	2305      	movs	r3, #5
 800102e:	753b      	strb	r3, [r7, #20]
      break;
 8001030:	e051      	b.n	80010d6 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8001032:	230a      	movs	r3, #10
 8001034:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001036:	2309      	movs	r3, #9
 8001038:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800103a:	230c      	movs	r3, #12
 800103c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800103e:	230b      	movs	r3, #11
 8001040:	753b      	strb	r3, [r7, #20]
      break;
 8001042:	e048      	b.n	80010d6 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001044:	2310      	movs	r3, #16
 8001046:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001048:	230f      	movs	r3, #15
 800104a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 800104c:	2312      	movs	r3, #18
 800104e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001050:	2311      	movs	r3, #17
 8001052:	753b      	strb	r3, [r7, #20]
      break;
 8001054:	e03f      	b.n	80010d6 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001056:	2316      	movs	r3, #22
 8001058:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800105a:	2315      	movs	r3, #21
 800105c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800105e:	2318      	movs	r3, #24
 8001060:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001062:	2317      	movs	r3, #23
 8001064:	753b      	strb	r3, [r7, #20]
      break;
 8001066:	e036      	b.n	80010d6 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001068:	231c      	movs	r3, #28
 800106a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 800106c:	231b      	movs	r3, #27
 800106e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001070:	231e      	movs	r3, #30
 8001072:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001074:	231d      	movs	r3, #29
 8001076:	753b      	strb	r3, [r7, #20]
      break;
 8001078:	e02d      	b.n	80010d6 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800107a:	2322      	movs	r3, #34	; 0x22
 800107c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800107e:	2321      	movs	r3, #33	; 0x21
 8001080:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001082:	2324      	movs	r3, #36	; 0x24
 8001084:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001086:	2323      	movs	r3, #35	; 0x23
 8001088:	753b      	strb	r3, [r7, #20]
      break;
 800108a:	e024      	b.n	80010d6 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 800108c:	2328      	movs	r3, #40	; 0x28
 800108e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001090:	2327      	movs	r3, #39	; 0x27
 8001092:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001094:	232a      	movs	r3, #42	; 0x2a
 8001096:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001098:	2329      	movs	r3, #41	; 0x29
 800109a:	753b      	strb	r3, [r7, #20]
      break;
 800109c:	e01b      	b.n	80010d6 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800109e:	232e      	movs	r3, #46	; 0x2e
 80010a0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80010a2:	232d      	movs	r3, #45	; 0x2d
 80010a4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80010a6:	2330      	movs	r3, #48	; 0x30
 80010a8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80010aa:	232f      	movs	r3, #47	; 0x2f
 80010ac:	753b      	strb	r3, [r7, #20]
      break;
 80010ae:	e012      	b.n	80010d6 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80010b0:	2334      	movs	r3, #52	; 0x34
 80010b2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80010b4:	2333      	movs	r3, #51	; 0x33
 80010b6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80010b8:	2336      	movs	r3, #54	; 0x36
 80010ba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80010bc:	2335      	movs	r3, #53	; 0x35
 80010be:	753b      	strb	r3, [r7, #20]
      break;
 80010c0:	e009      	b.n	80010d6 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80010c2:	233a      	movs	r3, #58	; 0x3a
 80010c4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80010c6:	2339      	movs	r3, #57	; 0x39
 80010c8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80010ca:	233c      	movs	r3, #60	; 0x3c
 80010cc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80010ce:	233b      	movs	r3, #59	; 0x3b
 80010d0:	753b      	strb	r3, [r7, #20]
      break;
 80010d2:	e000      	b.n	80010d6 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80010d4:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	7dfa      	ldrb	r2, [r7, #23]
 80010dc:	4611      	mov	r1, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 fa4e 	bl	8003580 <TS_IO_Read>
 80010e4:	4603      	mov	r3, r0
 80010e6:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80010e8:	7cfb      	ldrb	r3, [r7, #19]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <ft5336_TS_GetXY+0x1dc>)
 80010f0:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80010f2:	89fb      	ldrh	r3, [r7, #14]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	7dba      	ldrb	r2, [r7, #22]
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 fa40 	bl	8003580 <TS_IO_Read>
 8001100:	4603      	mov	r3, r0
 8001102:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001104:	7cfb      	ldrb	r3, [r7, #19]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800110e:	b21a      	sxth	r2, r3
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <ft5336_TS_GetXY+0x1dc>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21b      	sxth	r3, r3
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <ft5336_TS_GetXY+0x1dc>)
 800111e:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <ft5336_TS_GetXY+0x1dc>)
 8001122:	881a      	ldrh	r2, [r3, #0]
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001128:	89fb      	ldrh	r3, [r7, #14]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	7d7a      	ldrb	r2, [r7, #21]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fa25 	bl	8003580 <TS_IO_Read>
 8001136:	4603      	mov	r3, r0
 8001138:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800113a:	7cfb      	ldrb	r3, [r7, #19]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <ft5336_TS_GetXY+0x1dc>)
 8001142:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001144:	89fb      	ldrh	r3, [r7, #14]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	7d3a      	ldrb	r2, [r7, #20]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f002 fa17 	bl	8003580 <TS_IO_Read>
 8001152:	4603      	mov	r3, r0
 8001154:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001156:	7cfb      	ldrb	r3, [r7, #19]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <ft5336_TS_GetXY+0x1dc>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21b      	sxth	r3, r3
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <ft5336_TS_GetXY+0x1dc>)
 8001170:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <ft5336_TS_GetXY+0x1dc>)
 8001174:	881a      	ldrh	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <ft5336_TS_GetXY+0x1d8>)
 800117c:	789b      	ldrb	r3, [r3, #2]
 800117e:	3301      	adds	r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b03      	ldr	r3, [pc, #12]	; (8001190 <ft5336_TS_GetXY+0x1d8>)
 8001184:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000388 	.word	0x20000388
 8001194:	2000038c 	.word	0x2000038c

08001198 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80011a6:	2301      	movs	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	21a4      	movs	r1, #164	; 0xa4
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 f9ca 	bl	800354c <TS_IO_Write>
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80011ce:	2300      	movs	r3, #0
 80011d0:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	21a4      	movs	r1, #164	; 0xa4
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 f9b6 	bl	800354c <TS_IO_Write>
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	6039      	str	r1, [r7, #0]
 8001220:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2101      	movs	r1, #1
 800122c:	4618      	mov	r0, r3
 800122e:	f002 f9a7 	bl	8003580 <TS_IO_Read>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	4603      	mov	r3, r0
 8001256:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001268:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <ft5336_TS_GetTouchInfo+0x158>)
 800126a:	785b      	ldrb	r3, [r3, #1]
 800126c:	461a      	mov	r2, r3
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	4293      	cmp	r3, r2
 8001272:	f080 8090 	bcs.w	8001396 <ft5336_TS_GetTouchInfo+0x14e>
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	2b09      	cmp	r3, #9
 800127a:	d85d      	bhi.n	8001338 <ft5336_TS_GetTouchInfo+0xf0>
 800127c:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <ft5336_TS_GetTouchInfo+0x3c>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	080012ad 	.word	0x080012ad
 8001288:	080012bb 	.word	0x080012bb
 800128c:	080012c9 	.word	0x080012c9
 8001290:	080012d7 	.word	0x080012d7
 8001294:	080012e5 	.word	0x080012e5
 8001298:	080012f3 	.word	0x080012f3
 800129c:	08001301 	.word	0x08001301
 80012a0:	0800130f 	.word	0x0800130f
 80012a4:	0800131d 	.word	0x0800131d
 80012a8:	0800132b 	.word	0x0800132b
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80012ac:	2303      	movs	r3, #3
 80012ae:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80012b0:	2307      	movs	r3, #7
 80012b2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80012b4:	2308      	movs	r3, #8
 80012b6:	757b      	strb	r3, [r7, #21]
      break;
 80012b8:	e03f      	b.n	800133a <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80012ba:	2309      	movs	r3, #9
 80012bc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80012be:	230d      	movs	r3, #13
 80012c0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80012c2:	230e      	movs	r3, #14
 80012c4:	757b      	strb	r3, [r7, #21]
      break;
 80012c6:	e038      	b.n	800133a <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80012c8:	230f      	movs	r3, #15
 80012ca:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80012cc:	2313      	movs	r3, #19
 80012ce:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80012d0:	2314      	movs	r3, #20
 80012d2:	757b      	strb	r3, [r7, #21]
      break;
 80012d4:	e031      	b.n	800133a <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80012d6:	2315      	movs	r3, #21
 80012d8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80012da:	2319      	movs	r3, #25
 80012dc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80012de:	231a      	movs	r3, #26
 80012e0:	757b      	strb	r3, [r7, #21]
      break;
 80012e2:	e02a      	b.n	800133a <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80012e4:	231b      	movs	r3, #27
 80012e6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80012e8:	231f      	movs	r3, #31
 80012ea:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80012ec:	2320      	movs	r3, #32
 80012ee:	757b      	strb	r3, [r7, #21]
      break;
 80012f0:	e023      	b.n	800133a <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80012f2:	2321      	movs	r3, #33	; 0x21
 80012f4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80012f6:	2325      	movs	r3, #37	; 0x25
 80012f8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80012fa:	2326      	movs	r3, #38	; 0x26
 80012fc:	757b      	strb	r3, [r7, #21]
      break;
 80012fe:	e01c      	b.n	800133a <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001300:	2327      	movs	r3, #39	; 0x27
 8001302:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001304:	232b      	movs	r3, #43	; 0x2b
 8001306:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001308:	232c      	movs	r3, #44	; 0x2c
 800130a:	757b      	strb	r3, [r7, #21]
      break;
 800130c:	e015      	b.n	800133a <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800130e:	232d      	movs	r3, #45	; 0x2d
 8001310:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001312:	2331      	movs	r3, #49	; 0x31
 8001314:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001316:	2332      	movs	r3, #50	; 0x32
 8001318:	757b      	strb	r3, [r7, #21]
      break;
 800131a:	e00e      	b.n	800133a <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 800131c:	2333      	movs	r3, #51	; 0x33
 800131e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001320:	2337      	movs	r3, #55	; 0x37
 8001322:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001324:	2338      	movs	r3, #56	; 0x38
 8001326:	757b      	strb	r3, [r7, #21]
      break;
 8001328:	e007      	b.n	800133a <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800132a:	2339      	movs	r3, #57	; 0x39
 800132c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800132e:	233d      	movs	r3, #61	; 0x3d
 8001330:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001332:	233e      	movs	r3, #62	; 0x3e
 8001334:	757b      	strb	r3, [r7, #21]
      break;
 8001336:	e000      	b.n	800133a <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001338:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800133a:	89fb      	ldrh	r3, [r7, #14]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	7dfa      	ldrb	r2, [r7, #23]
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f002 f91c 	bl	8003580 <TS_IO_Read>
 8001348:	4603      	mov	r3, r0
 800134a:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800134c:	7d3b      	ldrb	r3, [r7, #20]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	119b      	asrs	r3, r3, #6
 8001352:	f003 0203 	and.w	r2, r3, #3
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800135a:	89fb      	ldrh	r3, [r7, #14]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	7dba      	ldrb	r2, [r7, #22]
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f002 f90c 	bl	8003580 <TS_IO_Read>
 8001368:	4603      	mov	r3, r0
 800136a:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 800136c:	7d3b      	ldrb	r3, [r7, #20]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	461a      	mov	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001376:	89fb      	ldrh	r3, [r7, #14]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	7d7a      	ldrb	r2, [r7, #21]
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f002 f8fe 	bl	8003580 <TS_IO_Read>
 8001384:	4603      	mov	r3, r0
 8001386:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001388:	7d3b      	ldrb	r3, [r7, #20]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	111b      	asrs	r3, r3, #4
 800138e:	f003 0204 	and.w	r2, r3, #4
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000388 	.word	0x20000388

080013a4 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000388 	.word	0x20000388

080013bc <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80013c0:	f7ff fff0 	bl	80013a4 <ft5336_Get_I2C_InitializedStatus>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d104      	bne.n	80013d4 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80013ca:	f002 f8b5 	bl	8003538 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80013ce:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
  }
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000388 	.word	0x20000388

080013dc <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	f5ad 7d68 	sub.w	sp, sp, #928	; 0x3a0
 80013fe:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	char text[50] = { };
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001406:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800140a:	222e      	movs	r2, #46	; 0x2e
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f00c fc66 	bl	800dce0 <memset>
	static TS_StateTypeDef TS_State;
	uint32_t potl, potr, joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001414:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001422:	2301      	movs	r3, #1
 8001424:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800142e:	f004 fd2c 	bl	8005e8a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001432:	f000 fc25 	bl	8001c80 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001436:	f001 fa4d 	bl	80028d4 <MX_GPIO_Init>
	MX_ADC3_Init();
 800143a:	f000 fce5 	bl	8001e08 <MX_ADC3_Init>
	MX_DMA2D_Init();
 800143e:	f000 fd69 	bl	8001f14 <MX_DMA2D_Init>
	MX_FMC_Init();
 8001442:	f001 f9f7 	bl	8002834 <MX_FMC_Init>
	MX_I2C1_Init();
 8001446:	f000 fd97 	bl	8001f78 <MX_I2C1_Init>
	MX_I2C3_Init();
 800144a:	f000 fdd5 	bl	8001ff8 <MX_I2C3_Init>
	MX_LTDC_Init();
 800144e:	f000 fe13 	bl	8002078 <MX_LTDC_Init>
	MX_RTC_Init();
 8001452:	f000 fe93 	bl	800217c <MX_RTC_Init>
	MX_SPI2_Init();
 8001456:	f000 ff37 	bl	80022c8 <MX_SPI2_Init>
	MX_TIM1_Init();
 800145a:	f000 ff73 	bl	8002344 <MX_TIM1_Init>
	MX_TIM2_Init();
 800145e:	f000 ffc5 	bl	80023ec <MX_TIM2_Init>
	MX_TIM3_Init();
 8001462:	f001 f811 	bl	8002488 <MX_TIM3_Init>
	MX_TIM5_Init();
 8001466:	f001 f85d 	bl	8002524 <MX_TIM5_Init>
	MX_TIM8_Init();
 800146a:	f001 f8e1 	bl	8002630 <MX_TIM8_Init>
	MX_USART1_UART_Init();
 800146e:	f001 f963 	bl	8002738 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 8001472:	f001 f991 	bl	8002798 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001476:	f000 fc75 	bl	8001d64 <MX_ADC1_Init>
	MX_DAC_Init();
 800147a:	f000 fd17 	bl	8001eac <MX_DAC_Init>
	MX_DMA_Init();
 800147e:	f001 f9bb 	bl	80027f8 <MX_DMA_Init>
	MX_UART7_Init();
 8001482:	f001 f929 	bl	80026d8 <MX_UART7_Init>
	MX_TIM7_Init();
 8001486:	f001 f89b 	bl	80025c0 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 800148a:	f002 f8a3 	bl	80035d4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800148e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001492:	2000      	movs	r0, #0
 8001494:	f002 f936 	bl	8003704 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
	LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8001498:	f002 f90c 	bl	80036b4 <BSP_LCD_GetXSize>
 800149c:	4604      	mov	r4, r0
 800149e:	f002 f91d 	bl	80036dc <BSP_LCD_GetYSize>
 80014a2:	4603      	mov	r3, r0
 80014a4:	fb03 f304 	mul.w	r3, r3, r4
 80014a8:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4619      	mov	r1, r3
 80014b0:	2001      	movs	r0, #1
 80014b2:	f002 f927 	bl	8003704 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80014b6:	f002 fe3d 	bl	8004134 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(0);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f002 f982 	bl	80037c4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_RED);
 80014c0:	487d      	ldr	r0, [pc, #500]	; (80016b8 <main+0x2c0>)
 80014c2:	f002 fa41 	bl	8003948 <BSP_LCD_Clear>
	BSP_LCD_DrawBitmap(0, 0, (uint8_t*) fondHexbmp_bmp);
 80014c6:	4a7d      	ldr	r2, [pc, #500]	; (80016bc <main+0x2c4>)
 80014c8:	2100      	movs	r1, #0
 80014ca:	2000      	movs	r0, #0
 80014cc:	f002 fc9c 	bl	8003e08 <BSP_LCD_DrawBitmap>
	BSP_LCD_SelectLayer(1);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f002 f977 	bl	80037c4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(00);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f002 fa36 	bl	8003948 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 80014dc:	4878      	ldr	r0, [pc, #480]	; (80016c0 <main+0x2c8>)
 80014de:	f002 fa03 	bl	80038e8 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80014e2:	4875      	ldr	r0, [pc, #468]	; (80016b8 <main+0x2c0>)
 80014e4:	f002 f9ce 	bl	8003884 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(00);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f002 f9e3 	bl	80038b4 <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80014ee:	f002 f8e1 	bl	80036b4 <BSP_LCD_GetXSize>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29c      	uxth	r4, r3
 80014f6:	f002 f8f1 	bl	80036dc <BSP_LCD_GetYSize>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4619      	mov	r1, r3
 8001500:	4620      	mov	r0, r4
 8001502:	f003 fae9 	bl	8004ad8 <BSP_TS_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001506:	4b6f      	ldr	r3, [pc, #444]	; (80016c4 <main+0x2cc>)
 8001508:	f507 7449 	add.w	r4, r7, #804	; 0x324
 800150c:	461d      	mov	r5, r3
 800150e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001512:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001516:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800151a:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f00b f814 	bl	800c54e <osThreadCreate>
 8001526:	4603      	mov	r3, r0
 8001528:	4a67      	ldr	r2, [pc, #412]	; (80016c8 <main+0x2d0>)
 800152a:	6013      	str	r3, [r2, #0]

	/* definition and creation of tacheJeu */
	osThreadDef(tacheJeu, codeTacheJeu, osPriorityNormal, 0, 500);
 800152c:	4b67      	ldr	r3, [pc, #412]	; (80016cc <main+0x2d4>)
 800152e:	f507 7442 	add.w	r4, r7, #776	; 0x308
 8001532:	461d      	mov	r5, r3
 8001534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001538:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800153c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	tacheJeuHandle = osThreadCreate(osThread(tacheJeu), NULL);
 8001540:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f00b f801 	bl	800c54e <osThreadCreate>
 800154c:	4603      	mov	r3, r0
 800154e:	4a60      	ldr	r2, [pc, #384]	; (80016d0 <main+0x2d8>)
 8001550:	6013      	str	r3, [r2, #0]

	/* definition and creation of tacheSon */
	osThreadDef(tacheSon, codeTacheSon, osPriorityNormal, 0, 2056);
 8001552:	4b60      	ldr	r3, [pc, #384]	; (80016d4 <main+0x2dc>)
 8001554:	f507 743b 	add.w	r4, r7, #748	; 0x2ec
 8001558:	461d      	mov	r5, r3
 800155a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800155c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800155e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	tacheSonHandle = osThreadCreate(osThread(tacheSon), NULL);
 8001566:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f00a ffee 	bl	800c54e <osThreadCreate>
 8001572:	4603      	mov	r3, r0
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <main+0x2e0>)
 8001576:	6013      	str	r3, [r2, #0]

	/* definition and creation of tachePause */
	osThreadDef(tachePause, codeTachePause, osPriorityHigh, 0, 1028);
 8001578:	4b58      	ldr	r3, [pc, #352]	; (80016dc <main+0x2e4>)
 800157a:	f507 7434 	add.w	r4, r7, #720	; 0x2d0
 800157e:	461d      	mov	r5, r3
 8001580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	tachePauseHandle = osThreadCreate(osThread(tachePause), NULL);
 800158c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f00a ffdb 	bl	800c54e <osThreadCreate>
 8001598:	4603      	mov	r3, r0
 800159a:	4a51      	ldr	r2, [pc, #324]	; (80016e0 <main+0x2e8>)
 800159c:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800159e:	f00a ffcf 	bl	800c540 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int bp1, bp2, bp1_old, bp2_old, i;

	const uint16_t sinus12bit[360] = { 512, 521, 530, 539, 548, 557, 566, 574,
 80015a2:	463b      	mov	r3, r7
 80015a4:	4a4f      	ldr	r2, [pc, #316]	; (80016e4 <main+0x2ec>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	4611      	mov	r1, r2
 80015aa:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 80015ae:	461a      	mov	r2, r3
 80015b0:	f00c fb88 	bl	800dcc4 <memcpy>
			120, 126, 131, 137, 144, 150, 156, 163, 169, 176, 183, 190, 197,
			204, 211, 218, 226, 233, 241, 248, 256, 264, 272, 279, 287, 295,
			304, 312, 320, 328, 337, 345, 354, 362, 371, 379, 388, 397, 405,
			414, 423, 432, 441, 449, 458, 467, 476, 485, 494, 503 };

	fillTabPositions(238, 37, compteurTab);
 80015b4:	4b4c      	ldr	r3, [pc, #304]	; (80016e8 <main+0x2f0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	2125      	movs	r1, #37	; 0x25
 80015bc:	20ee      	movs	r0, #238	; 0xee
 80015be:	f000 f9c3 	bl	8001948 <fillTabPositions>
	compteurTab++;
 80015c2:	4b49      	ldr	r3, [pc, #292]	; (80016e8 <main+0x2f0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4a47      	ldr	r2, [pc, #284]	; (80016e8 <main+0x2f0>)
 80015ca:	6013      	str	r3, [r2, #0]
	fillTabPositions(238, 70, compteurTab);
 80015cc:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <main+0x2f0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	2146      	movs	r1, #70	; 0x46
 80015d4:	20ee      	movs	r0, #238	; 0xee
 80015d6:	f000 f9b7 	bl	8001948 <fillTabPositions>
	compteurTab++;
 80015da:	4b43      	ldr	r3, [pc, #268]	; (80016e8 <main+0x2f0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	4a41      	ldr	r2, [pc, #260]	; (80016e8 <main+0x2f0>)
 80015e2:	6013      	str	r3, [r2, #0]

	fillTabPositions(238, 103, compteurTab);
 80015e4:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <main+0x2f0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	2167      	movs	r1, #103	; 0x67
 80015ec:	20ee      	movs	r0, #238	; 0xee
 80015ee:	f000 f9ab 	bl	8001948 <fillTabPositions>
	compteurTab++;
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <main+0x2f0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a3b      	ldr	r2, [pc, #236]	; (80016e8 <main+0x2f0>)
 80015fa:	6013      	str	r3, [r2, #0]
	fillTabPositions(238, 136, compteurTab);
 80015fc:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <main+0x2f0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	2188      	movs	r1, #136	; 0x88
 8001604:	20ee      	movs	r0, #238	; 0xee
 8001606:	f000 f99f 	bl	8001948 <fillTabPositions>
	compteurTab++;
 800160a:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <main+0x2f0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	4a35      	ldr	r2, [pc, #212]	; (80016e8 <main+0x2f0>)
 8001612:	6013      	str	r3, [r2, #0]
	fillTabPositions(238, 169, compteurTab);
 8001614:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <main+0x2f0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	21a9      	movs	r1, #169	; 0xa9
 800161c:	20ee      	movs	r0, #238	; 0xee
 800161e:	f000 f993 	bl	8001948 <fillTabPositions>
	compteurTab++;
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <main+0x2f0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	4a2f      	ldr	r2, [pc, #188]	; (80016e8 <main+0x2f0>)
 800162a:	6013      	str	r3, [r2, #0]
	fillTabPositions(238, 202, compteurTab);
 800162c:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <main+0x2f0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	21ca      	movs	r1, #202	; 0xca
 8001634:	20ee      	movs	r0, #238	; 0xee
 8001636:	f000 f987 	bl	8001948 <fillTabPositions>
	compteurTab++;
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <main+0x2f0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	4a29      	ldr	r2, [pc, #164]	; (80016e8 <main+0x2f0>)
 8001642:	6013      	str	r3, [r2, #0]
	fillTabPositions(238, 235, compteurTab);
 8001644:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <main+0x2f0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	21eb      	movs	r1, #235	; 0xeb
 800164c:	20ee      	movs	r0, #238	; 0xee
 800164e:	f000 f97b 	bl	8001948 <fillTabPositions>
	compteurTab++;
 8001652:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <main+0x2f0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <main+0x2f0>)
 800165a:	6013      	str	r3, [r2, #0]

	fillTabPositions(210, 218, 2);
 800165c:	2202      	movs	r2, #2
 800165e:	21da      	movs	r1, #218	; 0xda
 8001660:	20d2      	movs	r0, #210	; 0xd2
 8001662:	f000 f971 	bl	8001948 <fillTabPositions>
	for (i = 0; i < 6; i++) {
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800166c:	e01b      	b.n	80016a6 <main+0x2ae>
		fillTabPositions(295, 37 + 33 * i, 2);
 800166e:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 8001672:	4613      	mov	r3, r2
 8001674:	015b      	lsls	r3, r3, #5
 8001676:	4413      	add	r3, r2
 8001678:	3325      	adds	r3, #37	; 0x25
 800167a:	2202      	movs	r2, #2
 800167c:	4619      	mov	r1, r3
 800167e:	f240 1027 	movw	r0, #295	; 0x127
 8001682:	f000 f961 	bl	8001948 <fillTabPositions>
		fillTabPositions(181, 37 + 33 * i, 2);
 8001686:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 800168a:	4613      	mov	r3, r2
 800168c:	015b      	lsls	r3, r3, #5
 800168e:	4413      	add	r3, r2
 8001690:	3325      	adds	r3, #37	; 0x25
 8001692:	2202      	movs	r2, #2
 8001694:	4619      	mov	r1, r3
 8001696:	20b5      	movs	r0, #181	; 0xb5
 8001698:	f000 f956 	bl	8001948 <fillTabPositions>
	for (i = 0; i < 6; i++) {
 800169c:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80016a0:	3301      	adds	r3, #1
 80016a2:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 80016a6:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	dddf      	ble.n	800166e <main+0x276>
	}
	for (i = 0; i < 4; i++) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 80016b4:	e042      	b.n	800173c <main+0x344>
 80016b6:	bf00      	nop
 80016b8:	ffff0000 	.word	0xffff0000
 80016bc:	0800f924 	.word	0x0800f924
 80016c0:	20000034 	.word	0x20000034
 80016c4:	0800f5cc 	.word	0x0800f5cc
 80016c8:	20004374 	.word	0x20004374
 80016cc:	0800f5e8 	.word	0x0800f5e8
 80016d0:	20004428 	.word	0x20004428
 80016d4:	0800f604 	.word	0x0800f604
 80016d8:	2000478c 	.word	0x2000478c
 80016dc:	0800f620 	.word	0x0800f620
 80016e0:	20004370 	.word	0x20004370
 80016e4:	0800f63c 	.word	0x0800f63c
 80016e8:	20000390 	.word	0x20000390
		fillTabPositions(352, 70 + 33 * i, compteurTab);
 80016ec:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 80016f0:	4613      	mov	r3, r2
 80016f2:	015b      	lsls	r3, r3, #5
 80016f4:	4413      	add	r3, r2
 80016f6:	3346      	adds	r3, #70	; 0x46
 80016f8:	4a86      	ldr	r2, [pc, #536]	; (8001914 <main+0x51c>)
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 70b0 	mov.w	r0, #352	; 0x160
 8001702:	f000 f921 	bl	8001948 <fillTabPositions>
		compteurTab++;
 8001706:	4b83      	ldr	r3, [pc, #524]	; (8001914 <main+0x51c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	4a81      	ldr	r2, [pc, #516]	; (8001914 <main+0x51c>)
 800170e:	6013      	str	r3, [r2, #0]
		fillTabPositions(124, 70 + 33 * i, compteurTab);
 8001710:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 8001714:	4613      	mov	r3, r2
 8001716:	015b      	lsls	r3, r3, #5
 8001718:	4413      	add	r3, r2
 800171a:	3346      	adds	r3, #70	; 0x46
 800171c:	4a7d      	ldr	r2, [pc, #500]	; (8001914 <main+0x51c>)
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	207c      	movs	r0, #124	; 0x7c
 8001724:	f000 f910 	bl	8001948 <fillTabPositions>
		compteurTab++;
 8001728:	4b7a      	ldr	r3, [pc, #488]	; (8001914 <main+0x51c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	4a79      	ldr	r2, [pc, #484]	; (8001914 <main+0x51c>)
 8001730:	6013      	str	r3, [r2, #0]
	for (i = 0; i < 4; i++) {
 8001732:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8001736:	3301      	adds	r3, #1
 8001738:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800173c:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8001740:	2b03      	cmp	r3, #3
 8001742:	ddd3      	ble.n	80016ec <main+0x2f4>
	}
	fillTabPositions(409, 136, compteurTab);
 8001744:	4b73      	ldr	r3, [pc, #460]	; (8001914 <main+0x51c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	2188      	movs	r1, #136	; 0x88
 800174c:	f240 1099 	movw	r0, #409	; 0x199
 8001750:	f000 f8fa 	bl	8001948 <fillTabPositions>
	compteurTab++;
 8001754:	4b6f      	ldr	r3, [pc, #444]	; (8001914 <main+0x51c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	4a6e      	ldr	r2, [pc, #440]	; (8001914 <main+0x51c>)
 800175c:	6013      	str	r3, [r2, #0]
	fillTabPositions(67, 136, compteurTab);
 800175e:	4b6d      	ldr	r3, [pc, #436]	; (8001914 <main+0x51c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	2188      	movs	r1, #136	; 0x88
 8001766:	2043      	movs	r0, #67	; 0x43
 8001768:	f000 f8ee 	bl	8001948 <fillTabPositions>
	compteurTab++;
 800176c:	4b69      	ldr	r3, [pc, #420]	; (8001914 <main+0x51c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	4a68      	ldr	r2, [pc, #416]	; (8001914 <main+0x51c>)
 8001774:	6013      	str	r3, [r2, #0]
	sprintf(text, "valeur : %d", listePoints[9].X);
 8001776:	4b68      	ldr	r3, [pc, #416]	; (8001918 <main+0x520>)
 8001778:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800177c:	461a      	mov	r2, r3
 800177e:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8001782:	4966      	ldr	r1, [pc, #408]	; (800191c <main+0x524>)
 8001784:	4618      	mov	r0, r3
 8001786:	f00c fb87 	bl	800de98 <siprintf>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) text);
 800178a:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800178e:	4619      	mov	r1, r3
 8001790:	2005      	movs	r0, #5
 8001792:	f002 fa0d 	bl	8003bb0 <BSP_LCD_DisplayStringAtLine>

	while (1) {
		/*sprintf(text,"valeur : %d", j);
		 BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);*/
		bp1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8001796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179a:	4861      	ldr	r0, [pc, #388]	; (8001920 <main+0x528>)
 800179c:	f006 fc0a 	bl	8007fb4 <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
		bp2 = HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin);
 80017a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017aa:	485d      	ldr	r0, [pc, #372]	; (8001920 <main+0x528>)
 80017ac:	f006 fc02 	bl	8007fb4 <HAL_GPIO_ReadPin>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
		if (!bp1 && bp1_old) {
 80017b6:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d11c      	bne.n	80017f8 <main+0x400>
 80017be:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d018      	beq.n	80017f8 <main+0x400>
			/*##-2- Enable DAC selected channel and associated DMA */
			if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sinus12bit,
 80017c6:	463a      	mov	r2, r7
 80017c8:	2300      	movs	r3, #0
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80017d0:	2100      	movs	r1, #0
 80017d2:	4854      	ldr	r0, [pc, #336]	; (8001924 <main+0x52c>)
 80017d4:	f004 ff92 	bl	80066fc <HAL_DAC_Start_DMA>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <main+0x3ea>
					360, DAC_ALIGN_12B_R) != HAL_OK) {
				/* Start DMA Error */
				Error_Handler();
 80017de:	f001 fd4f 	bl	8003280 <Error_Handler>
			}
			htim7.Init.Period = 100;
 80017e2:	4b51      	ldr	r3, [pc, #324]	; (8001928 <main+0x530>)
 80017e4:	2264      	movs	r2, #100	; 0x64
 80017e6:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80017e8:	484f      	ldr	r0, [pc, #316]	; (8001928 <main+0x530>)
 80017ea:	f009 fc0d 	bl	800b008 <HAL_TIM_Base_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <main+0x400>
				Error_Handler();
 80017f4:	f001 fd44 	bl	8003280 <Error_Handler>
			}
		}
		if (!bp2 && bp2_old) {
 80017f8:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d11c      	bne.n	800183a <main+0x442>
 8001800:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8001804:	2b00      	cmp	r3, #0
 8001806:	d018      	beq.n	800183a <main+0x442>
			/*##-2- Enable DAC selected channel and associated DMA */
			if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sinus12bit,
 8001808:	463a      	mov	r2, r7
 800180a:	2300      	movs	r3, #0
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001812:	2100      	movs	r1, #0
 8001814:	4843      	ldr	r0, [pc, #268]	; (8001924 <main+0x52c>)
 8001816:	f004 ff71 	bl	80066fc <HAL_DAC_Start_DMA>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <main+0x42c>
					360, DAC_ALIGN_12B_R) != HAL_OK) {
				/* Start DMA Error */
				Error_Handler();
 8001820:	f001 fd2e 	bl	8003280 <Error_Handler>
			}
			htim7.Init.Period = 200;
 8001824:	4b40      	ldr	r3, [pc, #256]	; (8001928 <main+0x530>)
 8001826:	22c8      	movs	r2, #200	; 0xc8
 8001828:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 800182a:	483f      	ldr	r0, [pc, #252]	; (8001928 <main+0x530>)
 800182c:	f009 fbec 	bl	800b008 <HAL_TIM_Base_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <main+0x442>
				Error_Handler();
 8001836:	f001 fd23 	bl	8003280 <Error_Handler>
			}
		}
		bp1_old = bp1;
 800183a:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800183e:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
		bp2_old = bp2;
 8001842:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8001846:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390

		BSP_TS_GetState(&TS_State);
 800184a:	4838      	ldr	r0, [pc, #224]	; (800192c <main+0x534>)
 800184c:	f003 f984 	bl	8004b58 <BSP_TS_GetState>

		if (TS_State.touchDetected && TSold != TS_State.touchDetected) {
 8001850:	4b36      	ldr	r3, [pc, #216]	; (800192c <main+0x534>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d056      	beq.n	8001906 <main+0x50e>
 8001858:	4b34      	ldr	r3, [pc, #208]	; (800192c <main+0x534>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b34      	ldr	r3, [pc, #208]	; (8001930 <main+0x538>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d04f      	beq.n	8001906 <main+0x50e>
			drawHexagon(TS_State.touchX[0], TS_State.touchY[0]);
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <main+0x534>)
 8001868:	885b      	ldrh	r3, [r3, #2]
 800186a:	461a      	mov	r2, r3
 800186c:	4b2f      	ldr	r3, [pc, #188]	; (800192c <main+0x534>)
 800186e:	899b      	ldrh	r3, [r3, #12]
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f000 f884 	bl	8001980 <drawHexagon>
			//boutonPause(TS_State.touchX[0],TS_State.touchY[0]);
			if (TS_State.touchX[0] > 460 && TS_State.touchY[0] < 20
 8001878:	4b2c      	ldr	r3, [pc, #176]	; (800192c <main+0x534>)
 800187a:	885b      	ldrh	r3, [r3, #2]
 800187c:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001880:	d91a      	bls.n	80018b8 <main+0x4c0>
 8001882:	4b2a      	ldr	r3, [pc, #168]	; (800192c <main+0x534>)
 8001884:	899b      	ldrh	r3, [r3, #12]
 8001886:	2b13      	cmp	r3, #19
 8001888:	d816      	bhi.n	80018b8 <main+0x4c0>
					&& pause == 0) {
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <main+0x53c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d112      	bne.n	80018b8 <main+0x4c0>
				BSP_LCD_SetLayerVisible(1, ENABLE);
 8001892:	2101      	movs	r1, #1
 8001894:	2001      	movs	r0, #1
 8001896:	f001 ffa5 	bl	80037e4 <BSP_LCD_SetLayerVisible>
				BSP_LCD_DrawBitmap(0, 0, (uint8_t*) paused_bmp);
 800189a:	4a27      	ldr	r2, [pc, #156]	; (8001938 <main+0x540>)
 800189c:	2100      	movs	r1, #0
 800189e:	2000      	movs	r0, #0
 80018a0:	f002 fab2 	bl	8003e08 <BSP_LCD_DrawBitmap>
				BSP_LCD_SetTransparency(1, 0x6F);
 80018a4:	216f      	movs	r1, #111	; 0x6f
 80018a6:	2001      	movs	r0, #1
 80018a8:	f001 ffda 	bl	8003860 <BSP_LCD_SetTransparency>

				pause = 1;
 80018ac:	4b21      	ldr	r3, [pc, #132]	; (8001934 <main+0x53c>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]
				myDelay(1);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f000 f9ca 	bl	8001c4c <myDelay>

			}

			if (compteurJoueurs % 2 == 0) {
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <main+0x544>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <main+0x4d2>
				BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80018c4:	481e      	ldr	r0, [pc, #120]	; (8001940 <main+0x548>)
 80018c6:	f001 ffdd 	bl	8003884 <BSP_LCD_SetTextColor>

			}
			if (compteurJoueurs % 2 == 1) {
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <main+0x544>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	bfb8      	it	lt
 80018d6:	425b      	neglt	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d102      	bne.n	80018e2 <main+0x4ea>
				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80018dc:	4819      	ldr	r0, [pc, #100]	; (8001944 <main+0x54c>)
 80018de:	f001 ffd1 	bl	8003884 <BSP_LCD_SetTextColor>
			}
			compteurJoueurs++;
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <main+0x544>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <main+0x544>)
 80018ea:	6013      	str	r3, [r2, #0]
			//sprintf(text,"valeur : %d", compteurRemplissage);
			//BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);

			for (i = 0; i < 8; i++) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 80018f2:	e004      	b.n	80018fe <main+0x506>
 80018f4:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80018f8:	3301      	adds	r3, #1
 80018fa:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 80018fe:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8001902:	2b07      	cmp	r3, #7
 8001904:	ddf6      	ble.n	80018f4 <main+0x4fc>
				 listePoints[5]->Y= ydraw-14	; */
			}

		}

		TSold = TS_State.touchDetected;
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <main+0x534>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <main+0x538>)
 800190e:	601a      	str	r2, [r3, #0]
		bp1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8001910:	e741      	b.n	8001796 <main+0x39e>
 8001912:	bf00      	nop
 8001914:	20000390 	.word	0x20000390
 8001918:	2000454c 	.word	0x2000454c
 800191c:	0800f5c0 	.word	0x0800f5c0
 8001920:	40020000 	.word	0x40020000
 8001924:	200048a4 	.word	0x200048a4
 8001928:	20004a68 	.word	0x20004a68
 800192c:	200003a4 	.word	0x200003a4
 8001930:	200003a0 	.word	0x200003a0
 8001934:	2000039c 	.word	0x2000039c
 8001938:	0804edec 	.word	0x0804edec
 800193c:	20000398 	.word	0x20000398
 8001940:	ff0000ff 	.word	0xff0000ff
 8001944:	ffff0000 	.word	0xffff0000

08001948 <fillTabPositions>:

	}

}

void fillTabPositions(int x, int y, int j) {
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
	(listePoints[j]).X = x;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	b219      	sxth	r1, r3
 8001958:	4a08      	ldr	r2, [pc, #32]	; (800197c <fillTabPositions+0x34>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	(listePoints[j]).Y = y;
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	b219      	sxth	r1, r3
 8001964:	4a05      	ldr	r2, [pc, #20]	; (800197c <fillTabPositions+0x34>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	460a      	mov	r2, r1
 800196e:	805a      	strh	r2, [r3, #2]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	2000454c 	.word	0x2000454c

08001980 <drawHexagon>:

void drawHexagon(int x, int y) {
 8001980:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001984:	b092      	sub	sp, #72	; 0x48
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
	int xdraw = 1000;
 800198c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001990:	647b      	str	r3, [r7, #68]	; 0x44
	int ydraw = 1000;
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
	char txt[50];
	while (compteurRemplissage < 16) {
 8001998:	e080      	b.n	8001a9c <drawHexagon+0x11c>

		if (pow((x - listePoints[compteurRemplissage].X), 2)
 800199a:	4ba7      	ldr	r3, [pc, #668]	; (8001c38 <drawHexagon+0x2b8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4aa7      	ldr	r2, [pc, #668]	; (8001c3c <drawHexagon+0x2bc>)
 80019a0:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 80019a4:	461a      	mov	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdd2 	bl	8000554 <__aeabi_i2d>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8001c30 <drawHexagon+0x2b0>
 80019b8:	ec43 2b10 	vmov	d0, r2, r3
 80019bc:	f00c fe24 	bl	800e608 <pow>
 80019c0:	ec55 4b10 	vmov	r4, r5, d0
				+ pow((y - listePoints[compteurRemplissage].Y), 2)
 80019c4:	4b9c      	ldr	r3, [pc, #624]	; (8001c38 <drawHexagon+0x2b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a9c      	ldr	r2, [pc, #624]	; (8001c3c <drawHexagon+0x2bc>)
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019d2:	461a      	mov	r2, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fdbb 	bl	8000554 <__aeabi_i2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	ed9f 1b93 	vldr	d1, [pc, #588]	; 8001c30 <drawHexagon+0x2b0>
 80019e6:	ec43 2b10 	vmov	d0, r2, r3
 80019ea:	f00c fe0d 	bl	800e608 <pow>
 80019ee:	ec53 2b10 	vmov	r2, r3, d0
 80019f2:	4620      	mov	r0, r4
 80019f4:	4629      	mov	r1, r5
 80019f6:	f7fe fc61 	bl	80002bc <__adddf3>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4614      	mov	r4, r2
 8001a00:	461d      	mov	r5, r3
				< (pow((x - xdraw), 2) + pow((y - ydraw), 2))) {
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fda3 	bl	8000554 <__aeabi_i2d>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8001c30 <drawHexagon+0x2b0>
 8001a16:	ec43 2b10 	vmov	d0, r2, r3
 8001a1a:	f00c fdf5 	bl	800e608 <pow>
 8001a1e:	ec59 8b10 	vmov	r8, r9, d0
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd93 	bl	8000554 <__aeabi_i2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8001c30 <drawHexagon+0x2b0>
 8001a36:	ec43 2b10 	vmov	d0, r2, r3
 8001a3a:	f00c fde5 	bl	800e608 <pow>
 8001a3e:	ec53 2b10 	vmov	r2, r3, d0
 8001a42:	4640      	mov	r0, r8
 8001a44:	4649      	mov	r1, r9
 8001a46:	f7fe fc39 	bl	80002bc <__adddf3>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
		if (pow((x - listePoints[compteurRemplissage].X), 2)
 8001a4e:	4620      	mov	r0, r4
 8001a50:	4629      	mov	r1, r5
 8001a52:	f7ff f85b 	bl	8000b0c <__aeabi_dcmplt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d01a      	beq.n	8001a92 <drawHexagon+0x112>

			xdraw = listePoints[compteurRemplissage].X;
 8001a5c:	4b76      	ldr	r3, [pc, #472]	; (8001c38 <drawHexagon+0x2b8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a76      	ldr	r2, [pc, #472]	; (8001c3c <drawHexagon+0x2bc>)
 8001a62:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
			ydraw = listePoints[compteurRemplissage].Y;
 8001a68:	4b73      	ldr	r3, [pc, #460]	; (8001c38 <drawHexagon+0x2b8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a73      	ldr	r2, [pc, #460]	; (8001c3c <drawHexagon+0x2bc>)
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a76:	643b      	str	r3, [r7, #64]	; 0x40
			sprintf(txt, "valeur : %d %d", xdraw, ydraw);
 8001a78:	f107 000c 	add.w	r0, r7, #12
 8001a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a80:	496f      	ldr	r1, [pc, #444]	; (8001c40 <drawHexagon+0x2c0>)
 8001a82:	f00c fa09 	bl	800de98 <siprintf>
			BSP_LCD_DisplayStringAtLine(5, (uint8_t*) txt);
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	2005      	movs	r0, #5
 8001a8e:	f002 f88f 	bl	8003bb0 <BSP_LCD_DisplayStringAtLine>

		}
		compteurRemplissage++;
 8001a92:	4b69      	ldr	r3, [pc, #420]	; (8001c38 <drawHexagon+0x2b8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	4a67      	ldr	r2, [pc, #412]	; (8001c38 <drawHexagon+0x2b8>)
 8001a9a:	6013      	str	r3, [r2, #0]
	while (compteurRemplissage < 16) {
 8001a9c:	4b66      	ldr	r3, [pc, #408]	; (8001c38 <drawHexagon+0x2b8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b0f      	cmp	r3, #15
 8001aa2:	f77f af7a 	ble.w	800199a <drawHexagon+0x1a>

	}
	BSP_LCD_DrawLine(xdraw + 16, ydraw, xdraw + 9, ydraw + 14);
 8001aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3310      	adds	r3, #16
 8001aac:	b298      	uxth	r0, r3
 8001aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ab0:	b299      	uxth	r1, r3
 8001ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	3309      	adds	r3, #9
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	330e      	adds	r3, #14
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	f002 f88d 	bl	8003be0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(xdraw + 9, ydraw + 14, xdraw - 9, ydraw + 14);
 8001ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3309      	adds	r3, #9
 8001acc:	b298      	uxth	r0, r3
 8001ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	330e      	adds	r3, #14
 8001ad4:	b299      	uxth	r1, r3
 8001ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b09      	subs	r3, #9
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	330e      	adds	r3, #14
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f002 f87b 	bl	8003be0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(xdraw - 9, ydraw + 14, xdraw - 16, ydraw);
 8001aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3b09      	subs	r3, #9
 8001af0:	b298      	uxth	r0, r3
 8001af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	330e      	adds	r3, #14
 8001af8:	b299      	uxth	r1, r3
 8001afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b10      	subs	r3, #16
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f002 f86b 	bl	8003be0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(xdraw - 16, ydraw, xdraw - 9, ydraw - 14);
 8001b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	3b10      	subs	r3, #16
 8001b10:	b298      	uxth	r0, r3
 8001b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b14:	b299      	uxth	r1, r3
 8001b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b09      	subs	r3, #9
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	3b0e      	subs	r3, #14
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	f002 f85b 	bl	8003be0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(xdraw - 9, ydraw - 14, xdraw + 9, ydraw - 14);
 8001b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b09      	subs	r3, #9
 8001b30:	b298      	uxth	r0, r3
 8001b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b0e      	subs	r3, #14
 8001b38:	b299      	uxth	r1, r3
 8001b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	3309      	adds	r3, #9
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b0e      	subs	r3, #14
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	f002 f849 	bl	8003be0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(xdraw + 9, ydraw - 14, xdraw + 16, ydraw);
 8001b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3309      	adds	r3, #9
 8001b54:	b298      	uxth	r0, r3
 8001b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b0e      	subs	r3, #14
 8001b5c:	b299      	uxth	r1, r3
 8001b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3310      	adds	r3, #16
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	f002 f839 	bl	8003be0 <BSP_LCD_DrawLine>
	(fillPoly[0]).X = xdraw + 16;
 8001b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3310      	adds	r3, #16
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <drawHexagon+0x2c4>)
 8001b7a:	801a      	strh	r2, [r3, #0]
	(fillPoly[0]).Y = ydraw;
 8001b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <drawHexagon+0x2c4>)
 8001b82:	805a      	strh	r2, [r3, #2]
	(fillPoly[1]).X = xdraw + 9;
 8001b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3309      	adds	r3, #9
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <drawHexagon+0x2c4>)
 8001b90:	809a      	strh	r2, [r3, #4]
	(fillPoly[1]).Y = ydraw + 14;
 8001b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	330e      	adds	r3, #14
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	b21a      	sxth	r2, r3
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <drawHexagon+0x2c4>)
 8001b9e:	80da      	strh	r2, [r3, #6]
	(fillPoly[2]).X = xdraw - 9;
 8001ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3b09      	subs	r3, #9
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <drawHexagon+0x2c4>)
 8001bac:	811a      	strh	r2, [r3, #8]
	(fillPoly[2]).Y = ydraw + 14;
 8001bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	330e      	adds	r3, #14
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <drawHexagon+0x2c4>)
 8001bba:	815a      	strh	r2, [r3, #10]
	(fillPoly[3]).X = xdraw - 16;
 8001bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b10      	subs	r3, #16
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <drawHexagon+0x2c4>)
 8001bc8:	819a      	strh	r2, [r3, #12]
	(fillPoly[3]).Y = ydraw;
 8001bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <drawHexagon+0x2c4>)
 8001bd0:	81da      	strh	r2, [r3, #14]
	(fillPoly[4]).X = xdraw - 9;
 8001bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b09      	subs	r3, #9
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b21a      	sxth	r2, r3
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <drawHexagon+0x2c4>)
 8001bde:	821a      	strh	r2, [r3, #16]
	(fillPoly[4]).Y = ydraw - 14;
 8001be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	3b0e      	subs	r3, #14
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <drawHexagon+0x2c4>)
 8001bec:	825a      	strh	r2, [r3, #18]
	(fillPoly[5]).X = xdraw + 9;
 8001bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3309      	adds	r3, #9
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <drawHexagon+0x2c4>)
 8001bfa:	829a      	strh	r2, [r3, #20]
	(fillPoly[5]).Y = ydraw - 14;
 8001bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b0e      	subs	r3, #14
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <drawHexagon+0x2c4>)
 8001c08:	82da      	strh	r2, [r3, #22]
	pfill = &fillPoly;
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <drawHexagon+0x2c8>)
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <drawHexagon+0x2c4>)
 8001c0e:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillPolygon(pfill, 6);
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <drawHexagon+0x2c8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2106      	movs	r1, #6
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 f9a8 	bl	8003f6c <BSP_LCD_FillPolygon>
	compteurRemplissage = 0;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <drawHexagon+0x2b8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

}
 8001c22:	bf00      	nop
 8001c24:	3748      	adds	r7, #72	; 0x48
 8001c26:	46bd      	mov	sp, r7
 8001c28:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c2c:	f3af 8000 	nop.w
 8001c30:	00000000 	.word	0x00000000
 8001c34:	40000000 	.word	0x40000000
 8001c38:	20000394 	.word	0x20000394
 8001c3c:	2000454c 	.word	0x2000454c
 8001c40:	0800f90c 	.word	0x0800f90c
 8001c44:	20004ab4 	.word	0x20004ab4
 8001c48:	20000028 	.word	0x20000028

08001c4c <myDelay>:

void myDelay(int i) /*Pause l'application pour i seconds*/
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	clock_t start, end;
	start = clock();
 8001c54:	f00b fff6 	bl	800dc44 <clock>
 8001c58:	60f8      	str	r0, [r7, #12]
	while (((end = clock()) - start) <= i * CLOCKS_PER_SEC){
 8001c5a:	bf00      	nop
 8001c5c:	f00b fff2 	bl	800dc44 <clock>
 8001c60:	60b8      	str	r0, [r7, #8]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	2164      	movs	r1, #100	; 0x64
 8001c6c:	fb01 f202 	mul.w	r2, r1, r2
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d9f3      	bls.n	8001c5c <myDelay+0x10>

	}

}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b094      	sub	sp, #80	; 0x50
 8001c84:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001c86:	f107 0320 	add.w	r3, r7, #32
 8001c8a:	2230      	movs	r2, #48	; 0x30
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f00c f826 	bl	800dce0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001ca4:	f007 fba0 	bl	80093e8 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001ca8:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <SystemClock_Config+0xdc>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	4a2b      	ldr	r2, [pc, #172]	; (8001d5c <SystemClock_Config+0xdc>)
 8001cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb4:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <SystemClock_Config+0xdc>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <SystemClock_Config+0xe0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <SystemClock_Config+0xe0>)
 8001cc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <SystemClock_Config+0xe0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001cd8:	2309      	movs	r3, #9
 8001cda:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001cf0:	2319      	movs	r3, #25
 8001cf2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001cf4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001cf8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001cfe:	2309      	movs	r3, #9
 8001d00:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	4618      	mov	r0, r3
 8001d08:	f007 fbce 	bl	80094a8 <HAL_RCC_OscConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <SystemClock_Config+0x96>
		Error_Handler();
 8001d12:	f001 fab5 	bl	8003280 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001d16:	f007 fb77 	bl	8009408 <HAL_PWREx_EnableOverDrive>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <SystemClock_Config+0xa4>
		Error_Handler();
 8001d20:	f001 faae 	bl	8003280 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001d24:	230f      	movs	r3, #15
 8001d26:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d34:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	2106      	movs	r1, #6
 8001d42:	4618      	mov	r0, r3
 8001d44:	f007 fe54 	bl	80099f0 <HAL_RCC_ClockConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <SystemClock_Config+0xd2>
		Error_Handler();
 8001d4e:	f001 fa97 	bl	8003280 <Error_Handler>
	}
}
 8001d52:	bf00      	nop
 8001d54:	3750      	adds	r7, #80	; 0x50
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40007000 	.word	0x40007000

08001d64 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d78:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <MX_ADC1_Init+0x9c>)
 8001d7a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d82:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001da4:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <MX_ADC1_Init+0xa0>)
 8001da8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001dc4:	480d      	ldr	r0, [pc, #52]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001dc6:	f004 f8b1 	bl	8005f2c <HAL_ADC_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001dd0:	f001 fa56 	bl	8003280 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001de0:	463b      	mov	r3, r7
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001de6:	f004 f8e5 	bl	8005fb4 <HAL_ADC_ConfigChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001df0:	f001 fa46 	bl	8003280 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20004790 	.word	0x20004790
 8001e00:	40012000 	.word	0x40012000
 8001e04:	0f000001 	.word	0x0f000001

08001e08 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001e0e:	463b      	mov	r3, r7
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e1c:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <MX_ADC3_Init+0x9c>)
 8001e1e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e26:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e4a:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <MX_ADC3_Init+0xa0>)
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e6a:	f004 f85f 	bl	8005f2c <HAL_ADC_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_ADC3_Init+0x70>
		Error_Handler();
 8001e74:	f001 fa04 	bl	8003280 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8001e78:	2306      	movs	r3, #6
 8001e7a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001e84:	463b      	mov	r3, r7
 8001e86:	4619      	mov	r1, r3
 8001e88:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_ADC3_Init+0x98>)
 8001e8a:	f004 f893 	bl	8005fb4 <HAL_ADC_ConfigChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_ADC3_Init+0x90>
		Error_Handler();
 8001e94:	f001 f9f4 	bl	8003280 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200047d8 	.word	0x200047d8
 8001ea4:	40012200 	.word	0x40012200
 8001ea8:	0f000001 	.word	0x0f000001

08001eac <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */
	{
		/* USER CODE BEGIN DAC_Init 0 */
		hdac.Instance = DAC;
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <MX_DAC_Init+0x60>)
 8001eb4:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <MX_DAC_Init+0x64>)
 8001eb6:	601a      	str	r2, [r3, #0]
		if (HAL_DAC_DeInit(&hdac) != HAL_OK) {
 8001eb8:	4814      	ldr	r0, [pc, #80]	; (8001f0c <MX_DAC_Init+0x60>)
 8001eba:	f004 fc01 	bl	80066c0 <HAL_DAC_DeInit>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_DAC_Init+0x1c>
			Error_Handler();
 8001ec4:	f001 f9dc 	bl	8003280 <Error_Handler>
		}
		/* USER CODE END DAC_Init 0 */

		DAC_ChannelConfTypeDef sConfig = { 0 };
 8001ec8:	463b      	mov	r3, r7
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
		/* USER CODE BEGIN DAC_Init 1 */

		/* USER CODE END DAC_Init 1 */
		/** DAC Initialization
		 */
		hdac.Instance = DAC;
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <MX_DAC_Init+0x60>)
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <MX_DAC_Init+0x64>)
 8001ed4:	601a      	str	r2, [r3, #0]
		if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8001ed6:	480d      	ldr	r0, [pc, #52]	; (8001f0c <MX_DAC_Init+0x60>)
 8001ed8:	f004 fbd0 	bl	800667c <HAL_DAC_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_DAC_Init+0x3a>
			Error_Handler();
 8001ee2:	f001 f9cd 	bl	8003280 <Error_Handler>
		}
		/** DAC channel OUT1 config
		 */
		sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001ee6:	2314      	movs	r3, #20
 8001ee8:	603b      	str	r3, [r7, #0]
		sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
		if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001eee:	463b      	mov	r3, r7
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4805      	ldr	r0, [pc, #20]	; (8001f0c <MX_DAC_Init+0x60>)
 8001ef6:	f004 fd4f 	bl	8006998 <HAL_DAC_ConfigChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_DAC_Init+0x58>
			Error_Handler();
 8001f00:	f001 f9be 	bl	8003280 <Error_Handler>
		/* USER CODE BEGIN DAC_Init 2 */

		/* USER CODE END DAC_Init 2 */

	}
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200048a4 	.word	0x200048a4
 8001f10:	40007400 	.word	0x40007400

08001f14 <MX_DMA2D_Init>:
	/**
	 * @brief DMA2D Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_DMA2D_Init(void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
		/* USER CODE END DMA2D_Init 0 */

		/* USER CODE BEGIN DMA2D_Init 1 */

		/* USER CODE END DMA2D_Init 1 */
		hdma2d.Instance = DMA2D;
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <MX_DMA2D_Init+0x5c>)
 8001f1a:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <MX_DMA2D_Init+0x60>)
 8001f1c:	601a      	str	r2, [r3, #0]
		hdma2d.Init.Mode = DMA2D_M2M;
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <MX_DMA2D_Init+0x5c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	605a      	str	r2, [r3, #4]
		hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <MX_DMA2D_Init+0x5c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
		hdma2d.Init.OutputOffset = 0;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <MX_DMA2D_Init+0x5c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]
		hdma2d.LayerCfg[1].InputOffset = 0;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <MX_DMA2D_Init+0x5c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28
		hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <MX_DMA2D_Init+0x5c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <MX_DMA2D_Init+0x5c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
		hdma2d.LayerCfg[1].InputAlpha = 0;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <MX_DMA2D_Init+0x5c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	635a      	str	r2, [r3, #52]	; 0x34
		if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8001f48:	4809      	ldr	r0, [pc, #36]	; (8001f70 <MX_DMA2D_Init+0x5c>)
 8001f4a:	f005 f9df 	bl	800730c <HAL_DMA2D_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_DMA2D_Init+0x44>
			Error_Handler();
 8001f54:	f001 f994 	bl	8003280 <Error_Handler>
		}
		if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <MX_DMA2D_Init+0x5c>)
 8001f5c:	f005 fc44 	bl	80077e8 <HAL_DMA2D_ConfigLayer>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_DMA2D_Init+0x56>
			Error_Handler();
 8001f66:	f001 f98b 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN DMA2D_Init 2 */

		/* USER CODE END DMA2D_Init 2 */

	}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200049a8 	.word	0x200049a8
 8001f74:	4002b000 	.word	0x4002b000

08001f78 <MX_I2C1_Init>:
	/**
	 * @brief I2C1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C1_Init(void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
		/* USER CODE END I2C1_Init 0 */

		/* USER CODE BEGIN I2C1_Init 1 */

		/* USER CODE END I2C1_Init 1 */
		hi2c1.Instance = I2C1;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <MX_I2C1_Init+0x74>)
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <MX_I2C1_Init+0x78>)
 8001f80:	601a      	str	r2, [r3, #0]
		hi2c1.Init.Timing = 0x00C0EAFF;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <MX_I2C1_Init+0x74>)
 8001f84:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <MX_I2C1_Init+0x7c>)
 8001f86:	605a      	str	r2, [r3, #4]
		hi2c1.Init.OwnAddress1 = 0;
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <MX_I2C1_Init+0x74>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
		hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <MX_I2C1_Init+0x74>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	60da      	str	r2, [r3, #12]
		hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <MX_I2C1_Init+0x74>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
		hi2c1.Init.OwnAddress2 = 0;
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <MX_I2C1_Init+0x74>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	615a      	str	r2, [r3, #20]
		hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <MX_I2C1_Init+0x74>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
		hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_I2C1_Init+0x74>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	61da      	str	r2, [r3, #28]
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <MX_I2C1_Init+0x74>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001fb2:	480e      	ldr	r0, [pc, #56]	; (8001fec <MX_I2C1_Init+0x74>)
 8001fb4:	f006 f830 	bl	8008018 <HAL_I2C_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_I2C1_Init+0x4a>
			Error_Handler();
 8001fbe:	f001 f95f 	bl	8003280 <Error_Handler>
		}
		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4809      	ldr	r0, [pc, #36]	; (8001fec <MX_I2C1_Init+0x74>)
 8001fc6:	f006 fdc9 	bl	8008b5c <HAL_I2CEx_ConfigAnalogFilter>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_I2C1_Init+0x5c>
				!= HAL_OK) {
			Error_Handler();
 8001fd0:	f001 f956 	bl	8003280 <Error_Handler>
		}
		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_I2C1_Init+0x74>)
 8001fd8:	f006 fe0b 	bl	8008bf2 <HAL_I2CEx_ConfigDigitalFilter>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_I2C1_Init+0x6e>
			Error_Handler();
 8001fe2:	f001 f94d 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN I2C1_Init 2 */

		/* USER CODE END I2C1_Init 2 */

	}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20004500 	.word	0x20004500
 8001ff0:	40005400 	.word	0x40005400
 8001ff4:	00c0eaff 	.word	0x00c0eaff

08001ff8 <MX_I2C3_Init>:
	/**
	 * @brief I2C3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C3_Init(void) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
		/* USER CODE END I2C3_Init 0 */

		/* USER CODE BEGIN I2C3_Init 1 */

		/* USER CODE END I2C3_Init 1 */
		hi2c3.Instance = I2C3;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <MX_I2C3_Init+0x74>)
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <MX_I2C3_Init+0x78>)
 8002000:	601a      	str	r2, [r3, #0]
		hi2c3.Init.Timing = 0x00C0EAFF;
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <MX_I2C3_Init+0x74>)
 8002004:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <MX_I2C3_Init+0x7c>)
 8002006:	605a      	str	r2, [r3, #4]
		hi2c3.Init.OwnAddress1 = 0;
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <MX_I2C3_Init+0x74>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
		hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <MX_I2C3_Init+0x74>)
 8002010:	2201      	movs	r2, #1
 8002012:	60da      	str	r2, [r3, #12]
		hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <MX_I2C3_Init+0x74>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
		hi2c3.Init.OwnAddress2 = 0;
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <MX_I2C3_Init+0x74>)
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
		hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <MX_I2C3_Init+0x74>)
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
		hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_I2C3_Init+0x74>)
 8002028:	2200      	movs	r2, #0
 800202a:	61da      	str	r2, [r3, #28]
		hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_I2C3_Init+0x74>)
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8002032:	480e      	ldr	r0, [pc, #56]	; (800206c <MX_I2C3_Init+0x74>)
 8002034:	f005 fff0 	bl	8008018 <HAL_I2C_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_I2C3_Init+0x4a>
			Error_Handler();
 800203e:	f001 f91f 	bl	8003280 <Error_Handler>
		}
		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 8002042:	2100      	movs	r1, #0
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <MX_I2C3_Init+0x74>)
 8002046:	f006 fd89 	bl	8008b5c <HAL_I2CEx_ConfigAnalogFilter>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_I2C3_Init+0x5c>
				!= HAL_OK) {
			Error_Handler();
 8002050:	f001 f916 	bl	8003280 <Error_Handler>
		}
		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8002054:	2100      	movs	r1, #0
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_I2C3_Init+0x74>)
 8002058:	f006 fdcb 	bl	8008bf2 <HAL_I2CEx_ConfigDigitalFilter>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_I2C3_Init+0x6e>
			Error_Handler();
 8002062:	f001 f90d 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN I2C3_Init 2 */

		/* USER CODE END I2C3_Init 2 */

	}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20004378 	.word	0x20004378
 8002070:	40005c00 	.word	0x40005c00
 8002074:	00c0eaff 	.word	0x00c0eaff

08002078 <MX_LTDC_Init>:
	/**
	 * @brief LTDC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_LTDC_Init(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b08e      	sub	sp, #56	; 0x38
 800207c:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN LTDC_Init 0 */

		/* USER CODE END LTDC_Init 0 */

		LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2234      	movs	r2, #52	; 0x34
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f00b fe2b 	bl	800dce0 <memset>

		/* USER CODE BEGIN LTDC_Init 1 */

		/* USER CODE END LTDC_Init 1 */
		hltdc.Instance = LTDC;
 800208a:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <MX_LTDC_Init+0xfc>)
 800208c:	4a3a      	ldr	r2, [pc, #232]	; (8002178 <MX_LTDC_Init+0x100>)
 800208e:	601a      	str	r2, [r3, #0]
		hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002090:	4b38      	ldr	r3, [pc, #224]	; (8002174 <MX_LTDC_Init+0xfc>)
 8002092:	2200      	movs	r2, #0
 8002094:	605a      	str	r2, [r3, #4]
		hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002096:	4b37      	ldr	r3, [pc, #220]	; (8002174 <MX_LTDC_Init+0xfc>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
		hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800209c:	4b35      	ldr	r3, [pc, #212]	; (8002174 <MX_LTDC_Init+0xfc>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
		hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80020a2:	4b34      	ldr	r3, [pc, #208]	; (8002174 <MX_LTDC_Init+0xfc>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
		hltdc.Init.HorizontalSync = 40;
 80020a8:	4b32      	ldr	r3, [pc, #200]	; (8002174 <MX_LTDC_Init+0xfc>)
 80020aa:	2228      	movs	r2, #40	; 0x28
 80020ac:	615a      	str	r2, [r3, #20]
		hltdc.Init.VerticalSync = 9;
 80020ae:	4b31      	ldr	r3, [pc, #196]	; (8002174 <MX_LTDC_Init+0xfc>)
 80020b0:	2209      	movs	r2, #9
 80020b2:	619a      	str	r2, [r3, #24]
		hltdc.Init.AccumulatedHBP = 53;
 80020b4:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <MX_LTDC_Init+0xfc>)
 80020b6:	2235      	movs	r2, #53	; 0x35
 80020b8:	61da      	str	r2, [r3, #28]
		hltdc.Init.AccumulatedVBP = 11;
 80020ba:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <MX_LTDC_Init+0xfc>)
 80020bc:	220b      	movs	r2, #11
 80020be:	621a      	str	r2, [r3, #32]
		hltdc.Init.AccumulatedActiveW = 533;
 80020c0:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <MX_LTDC_Init+0xfc>)
 80020c2:	f240 2215 	movw	r2, #533	; 0x215
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24
		hltdc.Init.AccumulatedActiveH = 283;
 80020c8:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <MX_LTDC_Init+0xfc>)
 80020ca:	f240 121b 	movw	r2, #283	; 0x11b
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
		hltdc.Init.TotalWidth = 565;
 80020d0:	4b28      	ldr	r3, [pc, #160]	; (8002174 <MX_LTDC_Init+0xfc>)
 80020d2:	f240 2235 	movw	r2, #565	; 0x235
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
		hltdc.Init.TotalHeigh = 285;
 80020d8:	4b26      	ldr	r3, [pc, #152]	; (8002174 <MX_LTDC_Init+0xfc>)
 80020da:	f240 121d 	movw	r2, #285	; 0x11d
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
		hltdc.Init.Backcolor.Blue = 0;
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <MX_LTDC_Init+0xfc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		hltdc.Init.Backcolor.Green = 0;
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <MX_LTDC_Init+0xfc>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		hltdc.Init.Backcolor.Red = 0;
 80020f0:	4b20      	ldr	r3, [pc, #128]	; (8002174 <MX_LTDC_Init+0xfc>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 80020f8:	481e      	ldr	r0, [pc, #120]	; (8002174 <MX_LTDC_Init+0xfc>)
 80020fa:	f006 fdc7 	bl	8008c8c <HAL_LTDC_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_LTDC_Init+0x90>
			Error_Handler();
 8002104:	f001 f8bc 	bl	8003280 <Error_Handler>
		}
		pLayerCfg.WindowX0 = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
		pLayerCfg.WindowX1 = 480;
 800210c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002110:	60bb      	str	r3, [r7, #8]
		pLayerCfg.WindowY0 = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
		pLayerCfg.WindowY1 = 272;
 8002116:	f44f 7388 	mov.w	r3, #272	; 0x110
 800211a:	613b      	str	r3, [r7, #16]
		pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800211c:	2302      	movs	r3, #2
 800211e:	617b      	str	r3, [r7, #20]
		pLayerCfg.Alpha = 255;
 8002120:	23ff      	movs	r3, #255	; 0xff
 8002122:	61bb      	str	r3, [r7, #24]
		pLayerCfg.Alpha0 = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
		pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002128:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800212c:	623b      	str	r3, [r7, #32]
		pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800212e:	2307      	movs	r3, #7
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
		pLayerCfg.FBStartAdress = 0xC0000000;
 8002132:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
		pLayerCfg.ImageWidth = 480;
 8002138:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
		pLayerCfg.ImageHeight = 272;
 800213e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002142:	633b      	str	r3, [r7, #48]	; 0x30
		pLayerCfg.Backcolor.Blue = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		pLayerCfg.Backcolor.Green = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		pLayerCfg.Backcolor.Red = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	2200      	movs	r2, #0
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_LTDC_Init+0xfc>)
 800215e:	f006 ff27 	bl	8008fb0 <HAL_LTDC_ConfigLayer>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_LTDC_Init+0xf4>
			Error_Handler();
 8002168:	f001 f88a 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN LTDC_Init 2 */

		/* USER CODE END LTDC_Init 2 */

	}
 800216c:	bf00      	nop
 800216e:	3738      	adds	r7, #56	; 0x38
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20004684 	.word	0x20004684
 8002178:	40016800 	.word	0x40016800

0800217c <MX_RTC_Init>:
	/**
	 * @brief RTC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_RTC_Init(void) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b092      	sub	sp, #72	; 0x48
 8002180:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN RTC_Init 0 */

		/* USER CODE END RTC_Init 0 */

		RTC_TimeTypeDef sTime = { 0 };
 8002182:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	611a      	str	r2, [r3, #16]
 8002192:	615a      	str	r2, [r3, #20]
		RTC_DateTypeDef sDate = { 0 };
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
		RTC_AlarmTypeDef sAlarm = { 0 };
 8002198:	463b      	mov	r3, r7
 800219a:	222c      	movs	r2, #44	; 0x2c
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f00b fd9e 	bl	800dce0 <memset>
		/* USER CODE BEGIN RTC_Init 1 */

		/* USER CODE END RTC_Init 1 */
		/** Initialize RTC Only
		 */
		hrtc.Instance = RTC;
 80021a4:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <MX_RTC_Init+0x144>)
 80021a6:	4a47      	ldr	r2, [pc, #284]	; (80022c4 <MX_RTC_Init+0x148>)
 80021a8:	601a      	str	r2, [r3, #0]
		hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021aa:	4b45      	ldr	r3, [pc, #276]	; (80022c0 <MX_RTC_Init+0x144>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	605a      	str	r2, [r3, #4]
		hrtc.Init.AsynchPrediv = 127;
 80021b0:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <MX_RTC_Init+0x144>)
 80021b2:	227f      	movs	r2, #127	; 0x7f
 80021b4:	609a      	str	r2, [r3, #8]
		hrtc.Init.SynchPrediv = 255;
 80021b6:	4b42      	ldr	r3, [pc, #264]	; (80022c0 <MX_RTC_Init+0x144>)
 80021b8:	22ff      	movs	r2, #255	; 0xff
 80021ba:	60da      	str	r2, [r3, #12]
		hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021bc:	4b40      	ldr	r3, [pc, #256]	; (80022c0 <MX_RTC_Init+0x144>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
		hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021c2:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <MX_RTC_Init+0x144>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	615a      	str	r2, [r3, #20]
		hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021c8:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <MX_RTC_Init+0x144>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	619a      	str	r2, [r3, #24]
		if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80021ce:	483c      	ldr	r0, [pc, #240]	; (80022c0 <MX_RTC_Init+0x144>)
 80021d0:	f008 fa06 	bl	800a5e0 <HAL_RTC_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_RTC_Init+0x62>
			Error_Handler();
 80021da:	f001 f851 	bl	8003280 <Error_Handler>

		/* USER CODE END Check_RTC_BKUP */

		/** Initialize RTC and set the Time and Date
		 */
		sTime.Hours = 0x0;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		sTime.Minutes = 0x0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		sTime.Seconds = 0x0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021f4:	2300      	movs	r3, #0
 80021f6:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80021f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021fc:	2201      	movs	r2, #1
 80021fe:	4619      	mov	r1, r3
 8002200:	482f      	ldr	r0, [pc, #188]	; (80022c0 <MX_RTC_Init+0x144>)
 8002202:	f008 fa7f 	bl	800a704 <HAL_RTC_SetTime>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_RTC_Init+0x94>
			Error_Handler();
 800220c:	f001 f838 	bl	8003280 <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002210:	2301      	movs	r3, #1
 8002212:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		sDate.Month = RTC_MONTH_JANUARY;
 8002216:	2301      	movs	r3, #1
 8002218:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		sDate.Date = 0x1;
 800221c:	2301      	movs	r3, #1
 800221e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		sDate.Year = 0x0;
 8002222:	2300      	movs	r3, #0
 8002224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8002228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222c:	2201      	movs	r2, #1
 800222e:	4619      	mov	r1, r3
 8002230:	4823      	ldr	r0, [pc, #140]	; (80022c0 <MX_RTC_Init+0x144>)
 8002232:	f008 fb25 	bl	800a880 <HAL_RTC_SetDate>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_RTC_Init+0xc4>
			Error_Handler();
 800223c:	f001 f820 	bl	8003280 <Error_Handler>
		}
		/** Enable the Alarm A
		 */
		sAlarm.AlarmTime.Hours = 0x0;
 8002240:	2300      	movs	r3, #0
 8002242:	703b      	strb	r3, [r7, #0]
		sAlarm.AlarmTime.Minutes = 0x0;
 8002244:	2300      	movs	r3, #0
 8002246:	707b      	strb	r3, [r7, #1]
		sAlarm.AlarmTime.Seconds = 0x0;
 8002248:	2300      	movs	r3, #0
 800224a:	70bb      	strb	r3, [r7, #2]
		sAlarm.AlarmTime.SubSeconds = 0x0;
 800224c:	2300      	movs	r3, #0
 800224e:	607b      	str	r3, [r7, #4]
		sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
		sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
		sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
		sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
		sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
		sAlarm.AlarmDateWeekDay = 0x1;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		sAlarm.Alarm = RTC_ALARM_A;
 800226a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8002270:	463b      	mov	r3, r7
 8002272:	2201      	movs	r2, #1
 8002274:	4619      	mov	r1, r3
 8002276:	4812      	ldr	r0, [pc, #72]	; (80022c0 <MX_RTC_Init+0x144>)
 8002278:	f008 fbaa 	bl	800a9d0 <HAL_RTC_SetAlarm>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_RTC_Init+0x10a>
			Error_Handler();
 8002282:	f000 fffd 	bl	8003280 <Error_Handler>
		}
		/** Enable the Alarm B
		 */
		sAlarm.Alarm = RTC_ALARM_B;
 8002286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 800228c:	463b      	mov	r3, r7
 800228e:	2201      	movs	r2, #1
 8002290:	4619      	mov	r1, r3
 8002292:	480b      	ldr	r0, [pc, #44]	; (80022c0 <MX_RTC_Init+0x144>)
 8002294:	f008 fb9c 	bl	800a9d0 <HAL_RTC_SetAlarm>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_RTC_Init+0x126>
			Error_Handler();
 800229e:	f000 ffef 	bl	8003280 <Error_Handler>
		}
		/** Enable the TimeStamp
		 */
		if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING,
 80022a2:	2202      	movs	r2, #2
 80022a4:	2100      	movs	r1, #0
 80022a6:	4806      	ldr	r0, [pc, #24]	; (80022c0 <MX_RTC_Init+0x144>)
 80022a8:	f008 fd1c 	bl	800ace4 <HAL_RTCEx_SetTimeStamp>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_RTC_Init+0x13a>
				RTC_TIMESTAMPPIN_POS1) != HAL_OK) {
			Error_Handler();
 80022b2:	f000 ffe5 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN RTC_Init 2 */

		/* USER CODE END RTC_Init 2 */

	}
 80022b6:	bf00      	nop
 80022b8:	3748      	adds	r7, #72	; 0x48
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200048b8 	.word	0x200048b8
 80022c4:	40002800 	.word	0x40002800

080022c8 <MX_SPI2_Init>:
	/**
	 * @brief SPI2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI2_Init(void) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI2_Init 1 */

		/* USER CODE END SPI2_Init 1 */
		/* SPI2 parameter configuration*/
		hspi2.Instance = SPI2;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <MX_SPI2_Init+0x74>)
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <MX_SPI2_Init+0x78>)
 80022d0:	601a      	str	r2, [r3, #0]
		hspi2.Init.Mode = SPI_MODE_MASTER;
 80022d2:	4b1a      	ldr	r3, [pc, #104]	; (800233c <MX_SPI2_Init+0x74>)
 80022d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022d8:	605a      	str	r2, [r3, #4]
		hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <MX_SPI2_Init+0x74>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
		hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80022e0:	4b16      	ldr	r3, [pc, #88]	; (800233c <MX_SPI2_Init+0x74>)
 80022e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80022e6:	60da      	str	r2, [r3, #12]
		hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <MX_SPI2_Init+0x74>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
		hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <MX_SPI2_Init+0x74>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	615a      	str	r2, [r3, #20]
		hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_SPI2_Init+0x74>)
 80022f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80022fa:	619a      	str	r2, [r3, #24]
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <MX_SPI2_Init+0x74>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
		hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_SPI2_Init+0x74>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
		hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <MX_SPI2_Init+0x74>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
		hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <MX_SPI2_Init+0x74>)
 8002310:	2200      	movs	r2, #0
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
		hspi2.Init.CRCPolynomial = 7;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_SPI2_Init+0x74>)
 8002316:	2207      	movs	r2, #7
 8002318:	62da      	str	r2, [r3, #44]	; 0x2c
		hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <MX_SPI2_Init+0x74>)
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
		hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_SPI2_Init+0x74>)
 8002322:	2208      	movs	r2, #8
 8002324:	635a      	str	r2, [r3, #52]	; 0x34
		if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_SPI2_Init+0x74>)
 8002328:	f008 fdc3 	bl	800aeb2 <HAL_SPI_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_SPI2_Init+0x6e>
			Error_Handler();
 8002332:	f000 ffa5 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN SPI2_Init 2 */

		/* USER CODE END SPI2_Init 2 */

	}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200043c4 	.word	0x200043c4
 8002340:	40003800 	.word	0x40003800

08002344 <MX_TIM1_Init>:
	/**
	 * @brief TIM1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM1_Init(void) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM1_Init 0 */

		/* USER CODE END TIM1_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800234a:	f107 0310 	add.w	r3, r7, #16
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM1_Init 1 */

		/* USER CODE END TIM1_Init 1 */
		htim1.Instance = TIM1;
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <MX_TIM1_Init+0xa0>)
 8002364:	4a20      	ldr	r2, [pc, #128]	; (80023e8 <MX_TIM1_Init+0xa4>)
 8002366:	601a      	str	r2, [r3, #0]
		htim1.Init.Prescaler = 0;
 8002368:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <MX_TIM1_Init+0xa0>)
 800236a:	2200      	movs	r2, #0
 800236c:	605a      	str	r2, [r3, #4]
		htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236e:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <MX_TIM1_Init+0xa0>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
		htim1.Init.Period = 65535;
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <MX_TIM1_Init+0xa0>)
 8002376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800237a:	60da      	str	r2, [r3, #12]
		htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <MX_TIM1_Init+0xa0>)
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
		htim1.Init.RepetitionCounter = 0;
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <MX_TIM1_Init+0xa0>)
 8002384:	2200      	movs	r2, #0
 8002386:	615a      	str	r2, [r3, #20]
		htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002388:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <MX_TIM1_Init+0xa0>)
 800238a:	2200      	movs	r2, #0
 800238c:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800238e:	4815      	ldr	r0, [pc, #84]	; (80023e4 <MX_TIM1_Init+0xa0>)
 8002390:	f008 fe3a 	bl	800b008 <HAL_TIM_Base_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM1_Init+0x5a>
			Error_Handler();
 800239a:	f000 ff71 	bl	8003280 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800239e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a2:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	4619      	mov	r1, r3
 80023aa:	480e      	ldr	r0, [pc, #56]	; (80023e4 <MX_TIM1_Init+0xa0>)
 80023ac:	f009 f88c 	bl	800b4c8 <HAL_TIM_ConfigClockSource>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM1_Init+0x76>
			Error_Handler();
 80023b6:	f000 ff63 	bl	8003280 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	4806      	ldr	r0, [pc, #24]	; (80023e4 <MX_TIM1_Init+0xa0>)
 80023cc:	f009 faa8 	bl	800b920 <HAL_TIMEx_MasterConfigSynchronization>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM1_Init+0x96>
				!= HAL_OK) {
			Error_Handler();
 80023d6:	f000 ff53 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN TIM1_Init 2 */

		/* USER CODE END TIM1_Init 2 */

	}
 80023da:	bf00      	nop
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200048d8 	.word	0x200048d8
 80023e8:	40010000 	.word	0x40010000

080023ec <MX_TIM2_Init>:
	/**
	 * @brief TIM2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM2_Init(void) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM2_Init 0 */

		/* USER CODE END TIM2_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80023f2:	f107 0310 	add.w	r3, r7, #16
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM2_Init 1 */

		/* USER CODE END TIM2_Init 1 */
		htim2.Instance = TIM2;
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <MX_TIM2_Init+0x98>)
 800240c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002410:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 0;
 8002412:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <MX_TIM2_Init+0x98>)
 8002414:	2200      	movs	r2, #0
 8002416:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <MX_TIM2_Init+0x98>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 4294967295;
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <MX_TIM2_Init+0x98>)
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <MX_TIM2_Init+0x98>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <MX_TIM2_Init+0x98>)
 800242e:	2200      	movs	r2, #0
 8002430:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002432:	4814      	ldr	r0, [pc, #80]	; (8002484 <MX_TIM2_Init+0x98>)
 8002434:	f008 fde8 	bl	800b008 <HAL_TIM_Base_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM2_Init+0x56>
			Error_Handler();
 800243e:	f000 ff1f 	bl	8003280 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002446:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	4619      	mov	r1, r3
 800244e:	480d      	ldr	r0, [pc, #52]	; (8002484 <MX_TIM2_Init+0x98>)
 8002450:	f009 f83a 	bl	800b4c8 <HAL_TIM_ConfigClockSource>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM2_Init+0x72>
			Error_Handler();
 800245a:	f000 ff11 	bl	8003280 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4806      	ldr	r0, [pc, #24]	; (8002484 <MX_TIM2_Init+0x98>)
 800246c:	f009 fa58 	bl	800b920 <HAL_TIMEx_MasterConfigSynchronization>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM2_Init+0x8e>
				!= HAL_OK) {
			Error_Handler();
 8002476:	f000 ff03 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN TIM2_Init 2 */

		/* USER CODE END TIM2_Init 2 */

	}
 800247a:	bf00      	nop
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200049e8 	.word	0x200049e8

08002488 <MX_TIM3_Init>:
	/**
	 * @brief TIM3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM3_Init(void) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM3_Init 0 */

		/* USER CODE END TIM3_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800248e:	f107 0310 	add.w	r3, r7, #16
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM3_Init 1 */

		/* USER CODE END TIM3_Init 1 */
		htim3.Instance = TIM3;
 80024a6:	4b1d      	ldr	r3, [pc, #116]	; (800251c <MX_TIM3_Init+0x94>)
 80024a8:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <MX_TIM3_Init+0x98>)
 80024aa:	601a      	str	r2, [r3, #0]
		htim3.Init.Prescaler = 0;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <MX_TIM3_Init+0x94>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	605a      	str	r2, [r3, #4]
		htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b1a      	ldr	r3, [pc, #104]	; (800251c <MX_TIM3_Init+0x94>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
		htim3.Init.Period = 65535;
 80024b8:	4b18      	ldr	r3, [pc, #96]	; (800251c <MX_TIM3_Init+0x94>)
 80024ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024be:	60da      	str	r2, [r3, #12]
		htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <MX_TIM3_Init+0x94>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
		htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <MX_TIM3_Init+0x94>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80024cc:	4813      	ldr	r0, [pc, #76]	; (800251c <MX_TIM3_Init+0x94>)
 80024ce:	f008 fd9b 	bl	800b008 <HAL_TIM_Base_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM3_Init+0x54>
			Error_Handler();
 80024d8:	f000 fed2 	bl	8003280 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e0:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4619      	mov	r1, r3
 80024e8:	480c      	ldr	r0, [pc, #48]	; (800251c <MX_TIM3_Init+0x94>)
 80024ea:	f008 ffed 	bl	800b4c8 <HAL_TIM_ConfigClockSource>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM3_Init+0x70>
			Error_Handler();
 80024f4:	f000 fec4 	bl	8003280 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	4619      	mov	r1, r3
 8002504:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_TIM3_Init+0x94>)
 8002506:	f009 fa0b 	bl	800b920 <HAL_TIMEx_MasterConfigSynchronization>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM3_Init+0x8c>
				!= HAL_OK) {
			Error_Handler();
 8002510:	f000 feb6 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN TIM3_Init 2 */

		/* USER CODE END TIM3_Init 2 */

	}
 8002514:	bf00      	nop
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20004638 	.word	0x20004638
 8002520:	40000400 	.word	0x40000400

08002524 <MX_TIM5_Init>:
	/**
	 * @brief TIM5 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM5_Init(void) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM5_Init 0 */

		/* USER CODE END TIM5_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800252a:	f107 0310 	add.w	r3, r7, #16
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM5_Init 1 */

		/* USER CODE END TIM5_Init 1 */
		htim5.Instance = TIM5;
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <MX_TIM5_Init+0x94>)
 8002544:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <MX_TIM5_Init+0x98>)
 8002546:	601a      	str	r2, [r3, #0]
		htim5.Init.Prescaler = 0;
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <MX_TIM5_Init+0x94>)
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
		htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <MX_TIM5_Init+0x94>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
		htim5.Init.Period = 4294967295;
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <MX_TIM5_Init+0x94>)
 8002556:	f04f 32ff 	mov.w	r2, #4294967295
 800255a:	60da      	str	r2, [r3, #12]
		htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <MX_TIM5_Init+0x94>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
		htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <MX_TIM5_Init+0x94>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8002568:	4813      	ldr	r0, [pc, #76]	; (80025b8 <MX_TIM5_Init+0x94>)
 800256a:	f008 fd4d 	bl	800b008 <HAL_TIM_Base_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM5_Init+0x54>
			Error_Handler();
 8002574:	f000 fe84 	bl	8003280 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800257c:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 800257e:	f107 0310 	add.w	r3, r7, #16
 8002582:	4619      	mov	r1, r3
 8002584:	480c      	ldr	r0, [pc, #48]	; (80025b8 <MX_TIM5_Init+0x94>)
 8002586:	f008 ff9f 	bl	800b4c8 <HAL_TIM_ConfigClockSource>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM5_Init+0x70>
			Error_Handler();
 8002590:	f000 fe76 	bl	8003280 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002594:	2300      	movs	r3, #0
 8002596:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	4619      	mov	r1, r3
 80025a0:	4805      	ldr	r0, [pc, #20]	; (80025b8 <MX_TIM5_Init+0x94>)
 80025a2:	f009 f9bd 	bl	800b920 <HAL_TIMEx_MasterConfigSynchronization>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM5_Init+0x8c>
				!= HAL_OK) {
			Error_Handler();
 80025ac:	f000 fe68 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN TIM5_Init 2 */

		/* USER CODE END TIM5_Init 2 */

	}
 80025b0:	bf00      	nop
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200045ec 	.word	0x200045ec
 80025bc:	40000c00 	.word	0x40000c00

080025c0 <MX_TIM7_Init>:
	/**
	 * @brief TIM7 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM7_Init(void) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM7_Init 0 */

		/* USER CODE END TIM7_Init 0 */

		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM7_Init 1 */

		/* USER CODE END TIM7_Init 1 */
		htim7.Instance = TIM7;
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <MX_TIM7_Init+0x68>)
 80025d2:	4a16      	ldr	r2, [pc, #88]	; (800262c <MX_TIM7_Init+0x6c>)
 80025d4:	601a      	str	r2, [r3, #0]
		htim7.Init.Prescaler = 0;
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <MX_TIM7_Init+0x68>)
 80025d8:	2200      	movs	r2, #0
 80025da:	605a      	str	r2, [r3, #4]
		htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <MX_TIM7_Init+0x68>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
		htim7.Init.Period = 100;
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <MX_TIM7_Init+0x68>)
 80025e4:	2264      	movs	r2, #100	; 0x64
 80025e6:	60da      	str	r2, [r3, #12]
		htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <MX_TIM7_Init+0x68>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80025ee:	480e      	ldr	r0, [pc, #56]	; (8002628 <MX_TIM7_Init+0x68>)
 80025f0:	f008 fd0a 	bl	800b008 <HAL_TIM_Base_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM7_Init+0x3e>
			Error_Handler();
 80025fa:	f000 fe41 	bl	8003280 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025fe:	2320      	movs	r3, #32
 8002600:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	4619      	mov	r1, r3
 800260a:	4807      	ldr	r0, [pc, #28]	; (8002628 <MX_TIM7_Init+0x68>)
 800260c:	f009 f988 	bl	800b920 <HAL_TIMEx_MasterConfigSynchronization>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM7_Init+0x5a>
				!= HAL_OK) {
			Error_Handler();
 8002616:	f000 fe33 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN TIM7_Init 2 */
		HAL_TIM_Base_Start(&htim7);
 800261a:	4803      	ldr	r0, [pc, #12]	; (8002628 <MX_TIM7_Init+0x68>)
 800261c:	f008 fd4c 	bl	800b0b8 <HAL_TIM_Base_Start>

		/* USER CODE END TIM7_Init 2 */

	}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20004a68 	.word	0x20004a68
 800262c:	40001400 	.word	0x40001400

08002630 <MX_TIM8_Init>:
	/**
	 * @brief TIM8 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM8_Init(void) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM8_Init 0 */

		/* USER CODE END TIM8_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002636:	f107 0310 	add.w	r3, r7, #16
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM8_Init 1 */

		/* USER CODE END TIM8_Init 1 */
		htim8.Instance = TIM8;
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <MX_TIM8_Init+0xa0>)
 8002650:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <MX_TIM8_Init+0xa4>)
 8002652:	601a      	str	r2, [r3, #0]
		htim8.Init.Prescaler = 0;
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <MX_TIM8_Init+0xa0>)
 8002656:	2200      	movs	r2, #0
 8002658:	605a      	str	r2, [r3, #4]
		htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265a:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <MX_TIM8_Init+0xa0>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
		htim8.Init.Period = 65535;
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <MX_TIM8_Init+0xa0>)
 8002662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002666:	60da      	str	r2, [r3, #12]
		htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <MX_TIM8_Init+0xa0>)
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
		htim8.Init.RepetitionCounter = 0;
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <MX_TIM8_Init+0xa0>)
 8002670:	2200      	movs	r2, #0
 8002672:	615a      	str	r2, [r3, #20]
		htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002674:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <MX_TIM8_Init+0xa0>)
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 800267a:	4815      	ldr	r0, [pc, #84]	; (80026d0 <MX_TIM8_Init+0xa0>)
 800267c:	f008 fcc4 	bl	800b008 <HAL_TIM_Base_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM8_Init+0x5a>
			Error_Handler();
 8002686:	f000 fdfb 	bl	8003280 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800268a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800268e:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	4619      	mov	r1, r3
 8002696:	480e      	ldr	r0, [pc, #56]	; (80026d0 <MX_TIM8_Init+0xa0>)
 8002698:	f008 ff16 	bl	800b4c8 <HAL_TIM_ConfigClockSource>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM8_Init+0x76>
			Error_Handler();
 80026a2:	f000 fded 	bl	8003280 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4806      	ldr	r0, [pc, #24]	; (80026d0 <MX_TIM8_Init+0xa0>)
 80026b8:	f009 f932 	bl	800b920 <HAL_TIMEx_MasterConfigSynchronization>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM8_Init+0x96>
				!= HAL_OK) {
			Error_Handler();
 80026c2:	f000 fddd 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN TIM8_Init 2 */

		/* USER CODE END TIM8_Init 2 */

	}
 80026c6:	bf00      	nop
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200044b0 	.word	0x200044b0
 80026d4:	40010400 	.word	0x40010400

080026d8 <MX_UART7_Init>:
	/**
	 * @brief UART7 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_UART7_Init(void) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
		/* USER CODE END UART7_Init 0 */

		/* USER CODE BEGIN UART7_Init 1 */

		/* USER CODE END UART7_Init 1 */
		huart7.Instance = UART7;
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <MX_UART7_Init+0x58>)
 80026de:	4a15      	ldr	r2, [pc, #84]	; (8002734 <MX_UART7_Init+0x5c>)
 80026e0:	601a      	str	r2, [r3, #0]
		huart7.Init.BaudRate = 115200;
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <MX_UART7_Init+0x58>)
 80026e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e8:	605a      	str	r2, [r3, #4]
		huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <MX_UART7_Init+0x58>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
		huart7.Init.StopBits = UART_STOPBITS_1;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <MX_UART7_Init+0x58>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
		huart7.Init.Parity = UART_PARITY_NONE;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <MX_UART7_Init+0x58>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
		huart7.Init.Mode = UART_MODE_TX_RX;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <MX_UART7_Init+0x58>)
 80026fe:	220c      	movs	r2, #12
 8002700:	615a      	str	r2, [r3, #20]
		huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <MX_UART7_Init+0x58>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
		huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <MX_UART7_Init+0x58>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
		huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <MX_UART7_Init+0x58>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
		huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <MX_UART7_Init+0x58>)
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_UART_Init(&huart7) != HAL_OK) {
 800271a:	4805      	ldr	r0, [pc, #20]	; (8002730 <MX_UART7_Init+0x58>)
 800271c:	f009 f9ac 	bl	800ba78 <HAL_UART_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_UART7_Init+0x52>
			Error_Handler();
 8002726:	f000 fdab 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN UART7_Init 2 */

		/* USER CODE END UART7_Init 2 */

	}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000442c 	.word	0x2000442c
 8002734:	40007800 	.word	0x40007800

08002738 <MX_USART1_UART_Init>:
	/**
	 * @brief USART1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART1_UART_Init(void) {
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
		/* USER CODE END USART1_Init 0 */

		/* USER CODE BEGIN USART1_Init 1 */

		/* USER CODE END USART1_Init 1 */
		huart1.Instance = USART1;
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <MX_USART1_UART_Init+0x58>)
 800273e:	4a15      	ldr	r2, [pc, #84]	; (8002794 <MX_USART1_UART_Init+0x5c>)
 8002740:	601a      	str	r2, [r3, #0]
		huart1.Init.BaudRate = 115200;
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <MX_USART1_UART_Init+0x58>)
 8002744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002748:	605a      	str	r2, [r3, #4]
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <MX_USART1_UART_Init+0x58>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <MX_USART1_UART_Init+0x58>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <MX_USART1_UART_Init+0x58>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <MX_USART1_UART_Init+0x58>)
 800275e:	220c      	movs	r2, #12
 8002760:	615a      	str	r2, [r3, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <MX_USART1_UART_Init+0x58>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <MX_USART1_UART_Init+0x58>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
		huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <MX_USART1_UART_Init+0x58>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <MX_USART1_UART_Init+0x58>)
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_UART_Init(&huart1) != HAL_OK) {
 800277a:	4805      	ldr	r0, [pc, #20]	; (8002790 <MX_USART1_UART_Init+0x58>)
 800277c:	f009 f97c 	bl	800ba78 <HAL_UART_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_USART1_UART_Init+0x52>
			Error_Handler();
 8002786:	f000 fd7b 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN USART1_Init 2 */

		/* USER CODE END USART1_Init 2 */

	}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20004820 	.word	0x20004820
 8002794:	40011000 	.word	0x40011000

08002798 <MX_USART6_UART_Init>:
	/**
	 * @brief USART6 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART6_UART_Init(void) {
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
		/* USER CODE END USART6_Init 0 */

		/* USER CODE BEGIN USART6_Init 1 */

		/* USER CODE END USART6_Init 1 */
		huart6.Instance = USART6;
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <MX_USART6_UART_Init+0x58>)
 800279e:	4a15      	ldr	r2, [pc, #84]	; (80027f4 <MX_USART6_UART_Init+0x5c>)
 80027a0:	601a      	str	r2, [r3, #0]
		huart6.Init.BaudRate = 115200;
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <MX_USART6_UART_Init+0x58>)
 80027a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027a8:	605a      	str	r2, [r3, #4]
		huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <MX_USART6_UART_Init+0x58>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
		huart6.Init.StopBits = UART_STOPBITS_1;
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <MX_USART6_UART_Init+0x58>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
		huart6.Init.Parity = UART_PARITY_NONE;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <MX_USART6_UART_Init+0x58>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
		huart6.Init.Mode = UART_MODE_TX_RX;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <MX_USART6_UART_Init+0x58>)
 80027be:	220c      	movs	r2, #12
 80027c0:	615a      	str	r2, [r3, #20]
		huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <MX_USART6_UART_Init+0x58>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
		huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <MX_USART6_UART_Init+0x58>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
		huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <MX_USART6_UART_Init+0x58>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <MX_USART6_UART_Init+0x58>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_UART_Init(&huart6) != HAL_OK) {
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_USART6_UART_Init+0x58>)
 80027dc:	f009 f94c 	bl	800ba78 <HAL_UART_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_USART6_UART_Init+0x52>
			Error_Handler();
 80027e6:	f000 fd4b 	bl	8003280 <Error_Handler>
		}
		/* USER CODE BEGIN USART6_Init 2 */

		/* USER CODE END USART6_Init 2 */

	}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20004924 	.word	0x20004924
 80027f4:	40011400 	.word	0x40011400

080027f8 <MX_DMA_Init>:

	/**
	 * Enable DMA controller clock
	 */
	static void MX_DMA_Init(void) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0

		/* DMA controller clock enable */
		__HAL_RCC_DMA1_CLK_ENABLE();
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <MX_DMA_Init+0x38>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <MX_DMA_Init+0x38>)
 8002804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <MX_DMA_Init+0x38>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]

		/* DMA interrupt init */
		/* DMA1_Stream5_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2105      	movs	r1, #5
 800281a:	2010      	movs	r0, #16
 800281c:	f003 fef6 	bl	800660c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002820:	2010      	movs	r0, #16
 8002822:	f003 ff0f 	bl	8006644 <HAL_NVIC_EnableIRQ>

	}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800

08002834 <MX_FMC_Init>:

	/* FMC initialization function */
	static void MX_FMC_Init(void) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN FMC_Init 0 */

		/* USER CODE END FMC_Init 0 */

		FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
 8002848:	615a      	str	r2, [r3, #20]
 800284a:	619a      	str	r2, [r3, #24]

		/* USER CODE END FMC_Init 1 */

		/** Perform the SDRAM1 memory initialization sequence
		 */
		hsdram1.Instance = FMC_SDRAM_DEVICE;
 800284c:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <MX_FMC_Init+0x98>)
 800284e:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <MX_FMC_Init+0x9c>)
 8002850:	601a      	str	r2, [r3, #0]
		/* hsdram1.Init */
		hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <MX_FMC_Init+0x98>)
 8002854:	2200      	movs	r2, #0
 8002856:	605a      	str	r2, [r3, #4]
		hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <MX_FMC_Init+0x98>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
		hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <MX_FMC_Init+0x98>)
 8002860:	2204      	movs	r2, #4
 8002862:	60da      	str	r2, [r3, #12]
		hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <MX_FMC_Init+0x98>)
 8002866:	2210      	movs	r2, #16
 8002868:	611a      	str	r2, [r3, #16]
		hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <MX_FMC_Init+0x98>)
 800286c:	2240      	movs	r2, #64	; 0x40
 800286e:	615a      	str	r2, [r3, #20]
		hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <MX_FMC_Init+0x98>)
 8002872:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002876:	619a      	str	r2, [r3, #24]
		hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <MX_FMC_Init+0x98>)
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
		hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <MX_FMC_Init+0x98>)
 8002880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002884:	621a      	str	r2, [r3, #32]
		hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <MX_FMC_Init+0x98>)
 8002888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
		hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800288e:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <MX_FMC_Init+0x98>)
 8002890:	2200      	movs	r2, #0
 8002892:	629a      	str	r2, [r3, #40]	; 0x28
		/* SdramTiming */
		SdramTiming.LoadToActiveDelay = 2;
 8002894:	2302      	movs	r3, #2
 8002896:	607b      	str	r3, [r7, #4]
		SdramTiming.ExitSelfRefreshDelay = 7;
 8002898:	2307      	movs	r3, #7
 800289a:	60bb      	str	r3, [r7, #8]
		SdramTiming.SelfRefreshTime = 4;
 800289c:	2304      	movs	r3, #4
 800289e:	60fb      	str	r3, [r7, #12]
		SdramTiming.RowCycleDelay = 7;
 80028a0:	2307      	movs	r3, #7
 80028a2:	613b      	str	r3, [r7, #16]
		SdramTiming.WriteRecoveryTime = 3;
 80028a4:	2303      	movs	r3, #3
 80028a6:	617b      	str	r3, [r7, #20]
		SdramTiming.RPDelay = 2;
 80028a8:	2302      	movs	r3, #2
 80028aa:	61bb      	str	r3, [r7, #24]
		SdramTiming.RCDDelay = 2;
 80028ac:	2302      	movs	r3, #2
 80028ae:	61fb      	str	r3, [r7, #28]

		if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4805      	ldr	r0, [pc, #20]	; (80028cc <MX_FMC_Init+0x98>)
 80028b6:	f008 fa6b 	bl	800ad90 <HAL_SDRAM_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_FMC_Init+0x90>
			Error_Handler();
 80028c0:	f000 fcde 	bl	8003280 <Error_Handler>
		}

		/* USER CODE BEGIN FMC_Init 2 */

		/* USER CODE END FMC_Init 2 */
	}
 80028c4:	bf00      	nop
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20004a34 	.word	0x20004a34
 80028d0:	a0000140 	.word	0xa0000140

080028d4 <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b090      	sub	sp, #64	; 0x40
 80028d8:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80028da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	60da      	str	r2, [r3, #12]
 80028e8:	611a      	str	r2, [r3, #16]

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80028ea:	4baf      	ldr	r3, [pc, #700]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4aae      	ldr	r2, [pc, #696]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 80028f0:	f043 0310 	orr.w	r3, r3, #16
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4bac      	ldr	r3, [pc, #688]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8002902:	4ba9      	ldr	r3, [pc, #676]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4aa8      	ldr	r2, [pc, #672]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4ba6      	ldr	r3, [pc, #664]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	4ba3      	ldr	r3, [pc, #652]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4aa2      	ldr	r2, [pc, #648]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4ba0      	ldr	r3, [pc, #640]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	623b      	str	r3, [r7, #32]
 8002930:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8002932:	4b9d      	ldr	r3, [pc, #628]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a9c      	ldr	r2, [pc, #624]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b9a      	ldr	r3, [pc, #616]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800294a:	4b97      	ldr	r3, [pc, #604]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a96      	ldr	r2, [pc, #600]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b94      	ldr	r3, [pc, #592]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002962:	4b91      	ldr	r3, [pc, #580]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a90      	ldr	r2, [pc, #576]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b8e      	ldr	r3, [pc, #568]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOJ_CLK_ENABLE();
 800297a:	4b8b      	ldr	r3, [pc, #556]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a8a      	ldr	r2, [pc, #552]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b88      	ldr	r3, [pc, #544]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOI_CLK_ENABLE();
 8002992:	4b85      	ldr	r3, [pc, #532]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4a84      	ldr	r2, [pc, #528]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 8002998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b82      	ldr	r3, [pc, #520]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOK_CLK_ENABLE();
 80029aa:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	4a7e      	ldr	r2, [pc, #504]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 80029b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b4:	6313      	str	r3, [r2, #48]	; 0x30
 80029b6:	4b7c      	ldr	r3, [pc, #496]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80029c2:	4b79      	ldr	r3, [pc, #484]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a78      	ldr	r2, [pc, #480]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 80029c8:	f043 0320 	orr.w	r3, r3, #32
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b76      	ldr	r3, [pc, #472]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOH_CLK_ENABLE();
 80029da:	4b73      	ldr	r3, [pc, #460]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a72      	ldr	r2, [pc, #456]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 80029e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
 80029e6:	4b70      	ldr	r3, [pc, #448]	; (8002ba8 <MX_GPIO_Init+0x2d4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOE, LED14_Pin | LED15_Pin, GPIO_PIN_RESET);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2160      	movs	r1, #96	; 0x60
 80029f6:	486d      	ldr	r0, [pc, #436]	; (8002bac <MX_GPIO_Init+0x2d8>)
 80029f8:	f005 faf4 	bl	8007fe4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port,
 80029fc:	2201      	movs	r2, #1
 80029fe:	2120      	movs	r1, #32
 8002a00:	486b      	ldr	r0, [pc, #428]	; (8002bb0 <MX_GPIO_Init+0x2dc>)
 8002a02:	f005 faef 	bl	8007fe4 <HAL_GPIO_WritePin>
				OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2108      	movs	r1, #8
 8002a0a:	4869      	ldr	r0, [pc, #420]	; (8002bb0 <MX_GPIO_Init+0x2dc>)
 8002a0c:	f005 faea 	bl	8007fe4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002a10:	2201      	movs	r2, #1
 8002a12:	2108      	movs	r1, #8
 8002a14:	4867      	ldr	r0, [pc, #412]	; (8002bb4 <MX_GPIO_Init+0x2e0>)
 8002a16:	f005 fae5 	bl	8007fe4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a20:	4865      	ldr	r0, [pc, #404]	; (8002bb8 <MX_GPIO_Init+0x2e4>)
 8002a22:	f005 fadf 	bl	8007fe4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOH,
 8002a26:	2200      	movs	r2, #0
 8002a28:	f645 6140 	movw	r1, #24128	; 0x5e40
 8002a2c:	4863      	ldr	r0, [pc, #396]	; (8002bbc <MX_GPIO_Init+0x2e8>)
 8002a2e:	f005 fad9 	bl	8007fe4 <HAL_GPIO_WritePin>
				LED13_Pin | LED17_Pin | LED11_Pin | LED12_Pin | LED2_Pin
						| LED18_Pin, GPIO_PIN_RESET);

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 8002a32:	2200      	movs	r2, #0
 8002a34:	21c8      	movs	r1, #200	; 0xc8
 8002a36:	4862      	ldr	r0, [pc, #392]	; (8002bc0 <MX_GPIO_Init+0x2ec>)
 8002a38:	f005 fad4 	bl	8007fe4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);

		/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
		GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a40:	2300      	movs	r3, #0
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4857      	ldr	r0, [pc, #348]	; (8002bac <MX_GPIO_Init+0x2d8>)
 8002a50:	f004 fff8 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : QSPI_D2_Pin */
		GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002a54:	2304      	movs	r3, #4
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a64:	2309      	movs	r3, #9
 8002a66:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	484f      	ldr	r0, [pc, #316]	; (8002bac <MX_GPIO_Init+0x2d8>)
 8002a70:	f004 ffe8 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
		GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 8002a74:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a82:	2303      	movs	r3, #3
 8002a84:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a86:	230b      	movs	r3, #11
 8002a88:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a8e:	4619      	mov	r1, r3
 8002a90:	484b      	ldr	r0, [pc, #300]	; (8002bc0 <MX_GPIO_Init+0x2ec>)
 8002a92:	f004 ffd7 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
		 ULPI_D1_Pin ULPI_D4_Pin */
		GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin
 8002a96:	f643 0323 	movw	r3, #14371	; 0x3823
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
				| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002aa8:	230a      	movs	r3, #10
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4844      	ldr	r0, [pc, #272]	; (8002bc4 <MX_GPIO_Init+0x2f0>)
 8002ab4:	f004 ffc6 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : SPDIF_RX0_Pin */
		GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002ac8:	2308      	movs	r3, #8
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4837      	ldr	r0, [pc, #220]	; (8002bb0 <MX_GPIO_Init+0x2dc>)
 8002ad4:	f004 ffb6 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
		 PC8 */
		GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
 8002ad8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
				| GPIO_PIN_9 | GPIO_PIN_8;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002aea:	230c      	movs	r3, #12
 8002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af2:	4619      	mov	r1, r3
 8002af4:	4834      	ldr	r0, [pc, #208]	; (8002bc8 <MX_GPIO_Init+0x2f4>)
 8002af6:	f004 ffa5 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : BP2_Pin BP1_Pin PA6 */
		GPIO_InitStruct.Pin = BP2_Pin | BP1_Pin | GPIO_PIN_6;
 8002afa:	f248 1340 	movw	r3, #33088	; 0x8140
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b00:	2300      	movs	r3, #0
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	482f      	ldr	r0, [pc, #188]	; (8002bcc <MX_GPIO_Init+0x2f8>)
 8002b10:	f004 ff98 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : LED14_Pin LED15_Pin */
		GPIO_InitStruct.Pin = LED14_Pin | LED15_Pin;
 8002b14:	2360      	movs	r3, #96	; 0x60
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4820      	ldr	r0, [pc, #128]	; (8002bac <MX_GPIO_Init+0x2d8>)
 8002b2c:	f004 ff8a 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : QSPI_NCS_Pin */
		GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002b30:	2340      	movs	r3, #64	; 0x40
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b40:	230a      	movs	r3, #10
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b48:	4619      	mov	r1, r3
 8002b4a:	481e      	ldr	r0, [pc, #120]	; (8002bc4 <MX_GPIO_Init+0x2f0>)
 8002b4c:	f004 ff7a 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : OTG_FS_VBUS_Pin */
		GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b56:	2300      	movs	r3, #0
 8002b58:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b62:	4619      	mov	r1, r3
 8002b64:	481a      	ldr	r0, [pc, #104]	; (8002bd0 <MX_GPIO_Init+0x2fc>)
 8002b66:	f004 ff6d 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : Audio_INT_Pin */
		GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002b6a:	2340      	movs	r3, #64	; 0x40
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b6e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	480c      	ldr	r0, [pc, #48]	; (8002bb0 <MX_GPIO_Init+0x2dc>)
 8002b80:	f004 ff60 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
		GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin;
 8002b84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b96:	230a      	movs	r3, #10
 8002b98:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	480a      	ldr	r0, [pc, #40]	; (8002bcc <MX_GPIO_Init+0x2f8>)
 8002ba2:	f004 ff4f 	bl	8007a44 <HAL_GPIO_Init>
 8002ba6:	e015      	b.n	8002bd4 <MX_GPIO_Init+0x300>
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40020c00 	.word	0x40020c00
 8002bb4:	40022800 	.word	0x40022800
 8002bb8:	40022000 	.word	0x40022000
 8002bbc:	40021c00 	.word	0x40021c00
 8002bc0:	40021800 	.word	0x40021800
 8002bc4:	40020400 	.word	0x40020400
 8002bc8:	40020800 	.word	0x40020800
 8002bcc:	40020000 	.word	0x40020000
 8002bd0:	40022400 	.word	0x40022400

		/*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
		GPIO_InitStruct.Pin = SAI2_MCLKA_Pin | SAI2_SCKA_Pin | SAI2_FSA_Pin
 8002bd4:	23f0      	movs	r3, #240	; 0xf0
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
				| SAI2_SDA_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	2300      	movs	r3, #0
 8002be2:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002be4:	230a      	movs	r3, #10
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bec:	4619      	mov	r1, r3
 8002bee:	4891      	ldr	r0, [pc, #580]	; (8002e34 <MX_GPIO_Init+0x560>)
 8002bf0:	f004 ff28 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : SAI2_SDB_Pin */
		GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c02:	2300      	movs	r3, #0
 8002c04:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002c06:	230a      	movs	r3, #10
 8002c08:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4889      	ldr	r0, [pc, #548]	; (8002e38 <MX_GPIO_Init+0x564>)
 8002c12:	f004 ff17 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
		GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin | LED16_Pin;
 8002c16:	2328      	movs	r3, #40	; 0x28
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c22:	2300      	movs	r3, #0
 8002c24:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4883      	ldr	r0, [pc, #524]	; (8002e3c <MX_GPIO_Init+0x568>)
 8002c2e:	f004 ff09 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : uSD_Detect_Pin */
		GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c44:	4619      	mov	r1, r3
 8002c46:	487e      	ldr	r0, [pc, #504]	; (8002e40 <MX_GPIO_Init+0x56c>)
 8002c48:	f004 fefc 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : LCD_BL_CTRL_Pin */
		GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002c4c:	2308      	movs	r3, #8
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c50:	2301      	movs	r3, #1
 8002c52:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c60:	4619      	mov	r1, r3
 8002c62:	4878      	ldr	r0, [pc, #480]	; (8002e44 <MX_GPIO_Init+0x570>)
 8002c64:	f004 feee 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : PG9 RMII_RXER_Pin */
		GPIO_InitStruct.Pin = GPIO_PIN_9 | RMII_RXER_Pin;
 8002c68:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	486e      	ldr	r0, [pc, #440]	; (8002e38 <MX_GPIO_Init+0x564>)
 8002c7e:	f004 fee1 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
		GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002c82:	2310      	movs	r3, #16
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c86:	2300      	movs	r3, #0
 8002c88:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c92:	4619      	mov	r1, r3
 8002c94:	4869      	ldr	r0, [pc, #420]	; (8002e3c <MX_GPIO_Init+0x568>)
 8002c96:	f004 fed5 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : SDMMC_CMD_Pin */
		GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002caa:	230c      	movs	r3, #12
 8002cac:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4861      	ldr	r0, [pc, #388]	; (8002e3c <MX_GPIO_Init+0x568>)
 8002cb6:	f004 fec5 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
		GPIO_InitStruct.Pin = TP3_Pin | GPIO_PIN_13 | NC2_Pin;
 8002cba:	f24a 0304 	movw	r3, #40964	; 0xa004
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ccc:	4619      	mov	r1, r3
 8002cce:	485e      	ldr	r0, [pc, #376]	; (8002e48 <MX_GPIO_Init+0x574>)
 8002cd0:	f004 feb8 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : LCD_DISP_Pin */
		GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cea:	4619      	mov	r1, r3
 8002cec:	4851      	ldr	r0, [pc, #324]	; (8002e34 <MX_GPIO_Init+0x560>)
 8002cee:	f004 fea9 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
		 LED2_Pin LED18_Pin */
		GPIO_InitStruct.Pin = LED13_Pin | LED17_Pin | LED11_Pin | LED12_Pin
 8002cf2:	f645 6340 	movw	r3, #24128	; 0x5e40
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
				| LED2_Pin | LED18_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d00:	2300      	movs	r3, #0
 8002d02:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d08:	4619      	mov	r1, r3
 8002d0a:	484f      	ldr	r0, [pc, #316]	; (8002e48 <MX_GPIO_Init+0x574>)
 8002d0c:	f004 fe9a 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : LCD_INT_Pin */
		GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d16:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002d20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d24:	4619      	mov	r1, r3
 8002d26:	4843      	ldr	r0, [pc, #268]	; (8002e34 <MX_GPIO_Init+0x560>)
 8002d28:	f004 fe8c 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : ULPI_NXT_Pin */
		GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d3c:	230a      	movs	r3, #10
 8002d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d44:	4619      	mov	r1, r3
 8002d46:	4840      	ldr	r0, [pc, #256]	; (8002e48 <MX_GPIO_Init+0x574>)
 8002d48:	f004 fe7c 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
		GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8002d4c:	23c8      	movs	r3, #200	; 0xc8
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d50:	2301      	movs	r3, #1
 8002d52:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d60:	4619      	mov	r1, r3
 8002d62:	4835      	ldr	r0, [pc, #212]	; (8002e38 <MX_GPIO_Init+0x564>)
 8002d64:	f004 fe6e 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
		GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8002d68:	2305      	movs	r3, #5
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d74:	2303      	movs	r3, #3
 8002d76:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d78:	230a      	movs	r3, #10
 8002d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d80:	4619      	mov	r1, r3
 8002d82:	482f      	ldr	r0, [pc, #188]	; (8002e40 <MX_GPIO_Init+0x56c>)
 8002d84:	f004 fe5e 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
		GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8002d88:	2332      	movs	r3, #50	; 0x32
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d94:	2303      	movs	r3, #3
 8002d96:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d98:	230b      	movs	r3, #11
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da0:	4619      	mov	r1, r3
 8002da2:	4827      	ldr	r0, [pc, #156]	; (8002e40 <MX_GPIO_Init+0x56c>)
 8002da4:	f004 fe4e 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pin : PB2 */
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002da8:	2304      	movs	r3, #4
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db4:	2303      	movs	r3, #3
 8002db6:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002db8:	2309      	movs	r3, #9
 8002dba:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4822      	ldr	r0, [pc, #136]	; (8002e4c <MX_GPIO_Init+0x578>)
 8002dc4:	f004 fe3e 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
		GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 8002dc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002dda:	2309      	movs	r3, #9
 8002ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002de2:	4619      	mov	r1, r3
 8002de4:	4815      	ldr	r0, [pc, #84]	; (8002e3c <MX_GPIO_Init+0x568>)
 8002de6:	f004 fe2d 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
		GPIO_InitStruct.Pin =
 8002dea:	2386      	movs	r3, #134	; 0x86
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
				RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dee:	2302      	movs	r3, #2
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df6:	2303      	movs	r3, #3
 8002df8:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002dfa:	230b      	movs	r3, #11
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e02:	4619      	mov	r1, r3
 8002e04:	4812      	ldr	r0, [pc, #72]	; (8002e50 <MX_GPIO_Init+0x57c>)
 8002e06:	f004 fe1d 	bl	8007a44 <HAL_GPIO_Init>

		/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
		GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8002e0a:	2328      	movs	r3, #40	; 0x28
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e16:	2303      	movs	r3, #3
 8002e18:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002e1a:	230a      	movs	r3, #10
 8002e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e22:	4619      	mov	r1, r3
 8002e24:	480a      	ldr	r0, [pc, #40]	; (8002e50 <MX_GPIO_Init+0x57c>)
 8002e26:	f004 fe0d 	bl	8007a44 <HAL_GPIO_Init>

	}
 8002e2a:	bf00      	nop
 8002e2c:	3740      	adds	r7, #64	; 0x40
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40022000 	.word	0x40022000
 8002e38:	40021800 	.word	0x40021800
 8002e3c:	40020c00 	.word	0x40020c00
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40022800 	.word	0x40022800
 8002e48:	40021c00 	.word	0x40021c00
 8002e4c:	40020400 	.word	0x40020400
 8002e50:	40020000 	.word	0x40020000

08002e54 <StartDefaultTask>:
	 * @brief  Function implementing the defaultTask thread.
	 * @param  argument: Not used
	 * @retval None
	 */
	/* USER CODE END Header_StartDefaultTask */
	void StartDefaultTask(void const *argument) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
		/* USER CODE BEGIN 5 */
		/* Infinite loop */
		for (;;) {
			osDelay(1);
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f009 fbc2 	bl	800c5e6 <osDelay>
 8002e62:	e7fb      	b.n	8002e5c <StartDefaultTask+0x8>

08002e64 <codeTacheJeu>:
	 * @brief Function implementing the tacheJeu thread.
	 * @param argument: Not used
	 * @retval None
	 */
	/* USER CODE END Header_codeTacheJeu */
	void codeTacheJeu(void const *argument) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b090      	sub	sp, #64	; 0x40
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
		/* USER CODE BEGIN codeTacheJeu */
		static TS_StateTypeDef TS_State;
		int i;
		char text[50];
		/* Infinite loop */fillTabPositions(238, 37, compteurTab);
 8002e6c:	4b99      	ldr	r3, [pc, #612]	; (80030d4 <codeTacheJeu+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	2125      	movs	r1, #37	; 0x25
 8002e74:	20ee      	movs	r0, #238	; 0xee
 8002e76:	f7fe fd67 	bl	8001948 <fillTabPositions>
		compteurTab++;
 8002e7a:	4b96      	ldr	r3, [pc, #600]	; (80030d4 <codeTacheJeu+0x270>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	4a94      	ldr	r2, [pc, #592]	; (80030d4 <codeTacheJeu+0x270>)
 8002e82:	6013      	str	r3, [r2, #0]
		fillTabPositions(238, 70, compteurTab);
 8002e84:	4b93      	ldr	r3, [pc, #588]	; (80030d4 <codeTacheJeu+0x270>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2146      	movs	r1, #70	; 0x46
 8002e8c:	20ee      	movs	r0, #238	; 0xee
 8002e8e:	f7fe fd5b 	bl	8001948 <fillTabPositions>
		compteurTab++;
 8002e92:	4b90      	ldr	r3, [pc, #576]	; (80030d4 <codeTacheJeu+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3301      	adds	r3, #1
 8002e98:	4a8e      	ldr	r2, [pc, #568]	; (80030d4 <codeTacheJeu+0x270>)
 8002e9a:	6013      	str	r3, [r2, #0]

		fillTabPositions(238, 103, compteurTab);
 8002e9c:	4b8d      	ldr	r3, [pc, #564]	; (80030d4 <codeTacheJeu+0x270>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2167      	movs	r1, #103	; 0x67
 8002ea4:	20ee      	movs	r0, #238	; 0xee
 8002ea6:	f7fe fd4f 	bl	8001948 <fillTabPositions>
		compteurTab++;
 8002eaa:	4b8a      	ldr	r3, [pc, #552]	; (80030d4 <codeTacheJeu+0x270>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	4a88      	ldr	r2, [pc, #544]	; (80030d4 <codeTacheJeu+0x270>)
 8002eb2:	6013      	str	r3, [r2, #0]
		fillTabPositions(238, 136, compteurTab);
 8002eb4:	4b87      	ldr	r3, [pc, #540]	; (80030d4 <codeTacheJeu+0x270>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2188      	movs	r1, #136	; 0x88
 8002ebc:	20ee      	movs	r0, #238	; 0xee
 8002ebe:	f7fe fd43 	bl	8001948 <fillTabPositions>
		compteurTab++;
 8002ec2:	4b84      	ldr	r3, [pc, #528]	; (80030d4 <codeTacheJeu+0x270>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	4a82      	ldr	r2, [pc, #520]	; (80030d4 <codeTacheJeu+0x270>)
 8002eca:	6013      	str	r3, [r2, #0]
		fillTabPositions(238, 169, compteurTab);
 8002ecc:	4b81      	ldr	r3, [pc, #516]	; (80030d4 <codeTacheJeu+0x270>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	21a9      	movs	r1, #169	; 0xa9
 8002ed4:	20ee      	movs	r0, #238	; 0xee
 8002ed6:	f7fe fd37 	bl	8001948 <fillTabPositions>
		compteurTab++;
 8002eda:	4b7e      	ldr	r3, [pc, #504]	; (80030d4 <codeTacheJeu+0x270>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	4a7c      	ldr	r2, [pc, #496]	; (80030d4 <codeTacheJeu+0x270>)
 8002ee2:	6013      	str	r3, [r2, #0]
		fillTabPositions(238, 202, compteurTab);
 8002ee4:	4b7b      	ldr	r3, [pc, #492]	; (80030d4 <codeTacheJeu+0x270>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	21ca      	movs	r1, #202	; 0xca
 8002eec:	20ee      	movs	r0, #238	; 0xee
 8002eee:	f7fe fd2b 	bl	8001948 <fillTabPositions>
		compteurTab++;
 8002ef2:	4b78      	ldr	r3, [pc, #480]	; (80030d4 <codeTacheJeu+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	4a76      	ldr	r2, [pc, #472]	; (80030d4 <codeTacheJeu+0x270>)
 8002efa:	6013      	str	r3, [r2, #0]
		fillTabPositions(238, 235, compteurTab);
 8002efc:	4b75      	ldr	r3, [pc, #468]	; (80030d4 <codeTacheJeu+0x270>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	21eb      	movs	r1, #235	; 0xeb
 8002f04:	20ee      	movs	r0, #238	; 0xee
 8002f06:	f7fe fd1f 	bl	8001948 <fillTabPositions>
		compteurTab++;
 8002f0a:	4b72      	ldr	r3, [pc, #456]	; (80030d4 <codeTacheJeu+0x270>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	4a70      	ldr	r2, [pc, #448]	; (80030d4 <codeTacheJeu+0x270>)
 8002f12:	6013      	str	r3, [r2, #0]

		fillTabPositions(210, 218, 2);
 8002f14:	2202      	movs	r2, #2
 8002f16:	21da      	movs	r1, #218	; 0xda
 8002f18:	20d2      	movs	r0, #210	; 0xd2
 8002f1a:	f7fe fd15 	bl	8001948 <fillTabPositions>
		for (i = 0; i < 6; i++) {
 8002f1e:	2300      	movs	r3, #0
 8002f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f22:	e017      	b.n	8002f54 <codeTacheJeu+0xf0>
			fillTabPositions(295, 37 + 33 * i, 2);
 8002f24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f26:	4613      	mov	r3, r2
 8002f28:	015b      	lsls	r3, r3, #5
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3325      	adds	r3, #37	; 0x25
 8002f2e:	2202      	movs	r2, #2
 8002f30:	4619      	mov	r1, r3
 8002f32:	f240 1027 	movw	r0, #295	; 0x127
 8002f36:	f7fe fd07 	bl	8001948 <fillTabPositions>
			fillTabPositions(181, 37 + 33 * i, 2);
 8002f3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	015b      	lsls	r3, r3, #5
 8002f40:	4413      	add	r3, r2
 8002f42:	3325      	adds	r3, #37	; 0x25
 8002f44:	2202      	movs	r2, #2
 8002f46:	4619      	mov	r1, r3
 8002f48:	20b5      	movs	r0, #181	; 0xb5
 8002f4a:	f7fe fcfd 	bl	8001948 <fillTabPositions>
		for (i = 0; i < 6; i++) {
 8002f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f50:	3301      	adds	r3, #1
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	dde4      	ble.n	8002f24 <codeTacheJeu+0xc0>
		}
		for (i = 0; i < 4; i++) {
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f5e:	e023      	b.n	8002fa8 <codeTacheJeu+0x144>
			fillTabPositions(352, 70 + 33 * i, compteurTab);
 8002f60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f62:	4613      	mov	r3, r2
 8002f64:	015b      	lsls	r3, r3, #5
 8002f66:	4413      	add	r3, r2
 8002f68:	3346      	adds	r3, #70	; 0x46
 8002f6a:	4a5a      	ldr	r2, [pc, #360]	; (80030d4 <codeTacheJeu+0x270>)
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f44f 70b0 	mov.w	r0, #352	; 0x160
 8002f74:	f7fe fce8 	bl	8001948 <fillTabPositions>
			compteurTab++;
 8002f78:	4b56      	ldr	r3, [pc, #344]	; (80030d4 <codeTacheJeu+0x270>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	4a55      	ldr	r2, [pc, #340]	; (80030d4 <codeTacheJeu+0x270>)
 8002f80:	6013      	str	r3, [r2, #0]
			fillTabPositions(124, 70 + 33 * i, compteurTab);
 8002f82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f84:	4613      	mov	r3, r2
 8002f86:	015b      	lsls	r3, r3, #5
 8002f88:	4413      	add	r3, r2
 8002f8a:	3346      	adds	r3, #70	; 0x46
 8002f8c:	4a51      	ldr	r2, [pc, #324]	; (80030d4 <codeTacheJeu+0x270>)
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	4619      	mov	r1, r3
 8002f92:	207c      	movs	r0, #124	; 0x7c
 8002f94:	f7fe fcd8 	bl	8001948 <fillTabPositions>
			compteurTab++;
 8002f98:	4b4e      	ldr	r3, [pc, #312]	; (80030d4 <codeTacheJeu+0x270>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	4a4d      	ldr	r2, [pc, #308]	; (80030d4 <codeTacheJeu+0x270>)
 8002fa0:	6013      	str	r3, [r2, #0]
		for (i = 0; i < 4; i++) {
 8002fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	ddd8      	ble.n	8002f60 <codeTacheJeu+0xfc>
		}
		fillTabPositions(409, 136, compteurTab);
 8002fae:	4b49      	ldr	r3, [pc, #292]	; (80030d4 <codeTacheJeu+0x270>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2188      	movs	r1, #136	; 0x88
 8002fb6:	f240 1099 	movw	r0, #409	; 0x199
 8002fba:	f7fe fcc5 	bl	8001948 <fillTabPositions>
		compteurTab++;
 8002fbe:	4b45      	ldr	r3, [pc, #276]	; (80030d4 <codeTacheJeu+0x270>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	4a43      	ldr	r2, [pc, #268]	; (80030d4 <codeTacheJeu+0x270>)
 8002fc6:	6013      	str	r3, [r2, #0]
		fillTabPositions(67, 136, compteurTab);
 8002fc8:	4b42      	ldr	r3, [pc, #264]	; (80030d4 <codeTacheJeu+0x270>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2188      	movs	r1, #136	; 0x88
 8002fd0:	2043      	movs	r0, #67	; 0x43
 8002fd2:	f7fe fcb9 	bl	8001948 <fillTabPositions>
		compteurTab++;
 8002fd6:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <codeTacheJeu+0x270>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	4a3d      	ldr	r2, [pc, #244]	; (80030d4 <codeTacheJeu+0x270>)
 8002fde:	6013      	str	r3, [r2, #0]
		sprintf(text, "valeur : %d", listePoints[9].X);
 8002fe0:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <codeTacheJeu+0x274>)
 8002fe2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f107 0308 	add.w	r3, r7, #8
 8002fec:	493b      	ldr	r1, [pc, #236]	; (80030dc <codeTacheJeu+0x278>)
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f00a ff52 	bl	800de98 <siprintf>
		BSP_LCD_DisplayStringAtLine(5, (uint8_t*) text);
 8002ff4:	f107 0308 	add.w	r3, r7, #8
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	2005      	movs	r0, #5
 8002ffc:	f000 fdd8 	bl	8003bb0 <BSP_LCD_DisplayStringAtLine>
		for (;;) {
			BSP_TS_GetState(&TS_State);
 8003000:	4837      	ldr	r0, [pc, #220]	; (80030e0 <codeTacheJeu+0x27c>)
 8003002:	f001 fda9 	bl	8004b58 <BSP_TS_GetState>

			if (TS_State.touchDetected && TSold != TS_State.touchDetected) {
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <codeTacheJeu+0x27c>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d032      	beq.n	8003074 <codeTacheJeu+0x210>
 800300e:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <codeTacheJeu+0x27c>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	4b33      	ldr	r3, [pc, #204]	; (80030e4 <codeTacheJeu+0x280>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d02b      	beq.n	8003074 <codeTacheJeu+0x210>
				drawHexagon(TS_State.touchX[0], TS_State.touchY[0]);
 800301c:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <codeTacheJeu+0x27c>)
 800301e:	885b      	ldrh	r3, [r3, #2]
 8003020:	461a      	mov	r2, r3
 8003022:	4b2f      	ldr	r3, [pc, #188]	; (80030e0 <codeTacheJeu+0x27c>)
 8003024:	899b      	ldrh	r3, [r3, #12]
 8003026:	4619      	mov	r1, r3
 8003028:	4610      	mov	r0, r2
 800302a:	f7fe fca9 	bl	8001980 <drawHexagon>
				//boutonPause(TS_State.touchX[0],TS_State.touchY[0]);

				if (compteurJoueurs % 2 == 0) {
 800302e:	4b2e      	ldr	r3, [pc, #184]	; (80030e8 <codeTacheJeu+0x284>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <codeTacheJeu+0x1dc>
					BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800303a:	482c      	ldr	r0, [pc, #176]	; (80030ec <codeTacheJeu+0x288>)
 800303c:	f000 fc22 	bl	8003884 <BSP_LCD_SetTextColor>

				}
				if (compteurJoueurs % 2 == 1) {
 8003040:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <codeTacheJeu+0x284>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	bfb8      	it	lt
 800304c:	425b      	neglt	r3, r3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d102      	bne.n	8003058 <codeTacheJeu+0x1f4>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003052:	4827      	ldr	r0, [pc, #156]	; (80030f0 <codeTacheJeu+0x28c>)
 8003054:	f000 fc16 	bl	8003884 <BSP_LCD_SetTextColor>
				}
				compteurJoueurs++;
 8003058:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <codeTacheJeu+0x284>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <codeTacheJeu+0x284>)
 8003060:	6013      	str	r3, [r2, #0]
				//sprintf(text,"valeur : %d", compteurRemplissage);
				//BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);

				for (i = 0; i < 8; i++) {
 8003062:	2300      	movs	r3, #0
 8003064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003066:	e002      	b.n	800306e <codeTacheJeu+0x20a>
 8003068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306a:	3301      	adds	r3, #1
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003070:	2b07      	cmp	r3, #7
 8003072:	ddf9      	ble.n	8003068 <codeTacheJeu+0x204>
				}

			}


			if (TS_State.touchX[0] > 460 && TS_State.touchY[0] < 20
 8003074:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <codeTacheJeu+0x27c>)
 8003076:	885b      	ldrh	r3, [r3, #2]
 8003078:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800307c:	d921      	bls.n	80030c2 <codeTacheJeu+0x25e>
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <codeTacheJeu+0x27c>)
 8003080:	899b      	ldrh	r3, [r3, #12]
 8003082:	2b13      	cmp	r3, #19
 8003084:	d81d      	bhi.n	80030c2 <codeTacheJeu+0x25e>
					&& pause == 0) {
 8003086:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <codeTacheJeu+0x290>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d119      	bne.n	80030c2 <codeTacheJeu+0x25e>
				BSP_LCD_SetLayerVisible(1, ENABLE);
 800308e:	2101      	movs	r1, #1
 8003090:	2001      	movs	r0, #1
 8003092:	f000 fba7 	bl	80037e4 <BSP_LCD_SetLayerVisible>
				BSP_LCD_DrawBitmap(0, 0, (uint8_t*) paused_bmp);
 8003096:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <codeTacheJeu+0x294>)
 8003098:	2100      	movs	r1, #0
 800309a:	2000      	movs	r0, #0
 800309c:	f000 feb4 	bl	8003e08 <BSP_LCD_DrawBitmap>
				BSP_LCD_SetTransparency(1, 0x6F);
 80030a0:	216f      	movs	r1, #111	; 0x6f
 80030a2:	2001      	movs	r0, #1
 80030a4:	f000 fbdc 	bl	8003860 <BSP_LCD_SetTransparency>



				pause = 1;
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <codeTacheJeu+0x290>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
				myDelay(2);
 80030ae:	2002      	movs	r0, #2
 80030b0:	f7fe fdcc 	bl	8001c4c <myDelay>
				BSP_LCD_Clear(00);
 80030b4:	2000      	movs	r0, #0
 80030b6:	f000 fc47 	bl	8003948 <BSP_LCD_Clear>
				BSP_LCD_SetLayerVisible(1, DISABLE);
 80030ba:	2100      	movs	r1, #0
 80030bc:	2001      	movs	r0, #1
 80030be:	f000 fb91 	bl	80037e4 <BSP_LCD_SetLayerVisible>

			}



			TSold = TS_State.touchDetected;
 80030c2:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <codeTacheJeu+0x27c>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <codeTacheJeu+0x280>)
 80030ca:	601a      	str	r2, [r3, #0]
			vTaskDelay(50);
 80030cc:	2032      	movs	r0, #50	; 0x32
 80030ce:	f009 fd05 	bl	800cadc <vTaskDelay>
			BSP_TS_GetState(&TS_State);
 80030d2:	e795      	b.n	8003000 <codeTacheJeu+0x19c>
 80030d4:	20000390 	.word	0x20000390
 80030d8:	2000454c 	.word	0x2000454c
 80030dc:	0800f5c0 	.word	0x0800f5c0
 80030e0:	200003d0 	.word	0x200003d0
 80030e4:	200003a0 	.word	0x200003a0
 80030e8:	20000398 	.word	0x20000398
 80030ec:	ff0000ff 	.word	0xff0000ff
 80030f0:	ffff0000 	.word	0xffff0000
 80030f4:	2000039c 	.word	0x2000039c
 80030f8:	0804edec 	.word	0x0804edec

080030fc <codeTacheSon>:
 * @brief Function implementing the tacheSon thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_codeTacheSon */
void codeTacheSon(void const *argument) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 8003102:	af02      	add	r7, sp, #8
 8003104:	1d3b      	adds	r3, r7, #4
 8003106:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN codeTacheSon */
	/* Infinite loop */
	const uint16_t sinus12bit[360] = { 512, 521, 530, 539, 548, 557, 566, 574,
 8003108:	f107 0308 	add.w	r3, r7, #8
 800310c:	4a36      	ldr	r2, [pc, #216]	; (80031e8 <codeTacheSon+0xec>)
 800310e:	4618      	mov	r0, r3
 8003110:	4611      	mov	r1, r2
 8003112:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8003116:	461a      	mov	r2, r3
 8003118:	f00a fdd4 	bl	800dcc4 <memcpy>
			44, 48, 52, 56, 60, 64, 69, 73, 78, 83, 87, 93, 98, 103, 108, 114,
			120, 126, 131, 137, 144, 150, 156, 163, 169, 176, 183, 190, 197,
			204, 211, 218, 226, 233, 241, 248, 256, 264, 272, 279, 287, 295,
			304, 312, 320, 328, 337, 345, 354, 362, 371, 379, 388, 397, 405,
			414, 423, 432, 441, 449, 458, 467, 476, 485, 494, 503 };
	int bp1_old = 1;
 800311c:	2301      	movs	r3, #1
 800311e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
	int bp2_old = 1;
 8003122:	2301      	movs	r3, #1
 8003124:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
	int bp1, bp2;
	for (;;) {
		bp1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8003128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800312c:	482f      	ldr	r0, [pc, #188]	; (80031ec <codeTacheSon+0xf0>)
 800312e:	f004 ff41 	bl	8007fb4 <HAL_GPIO_ReadPin>
 8003132:	4603      	mov	r3, r0
 8003134:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
		bp2 = HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin);
 8003138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800313c:	482b      	ldr	r0, [pc, #172]	; (80031ec <codeTacheSon+0xf0>)
 800313e:	f004 ff39 	bl	8007fb4 <HAL_GPIO_ReadPin>
 8003142:	4603      	mov	r3, r0
 8003144:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
		if (!bp1 && bp1_old) {
 8003148:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800314c:	2b00      	cmp	r3, #0
 800314e:	d11d      	bne.n	800318c <codeTacheSon+0x90>
 8003150:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d019      	beq.n	800318c <codeTacheSon+0x90>
			/*##-2- Enable DAC selected channel and associated DMA */
			if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sinus12bit,
 8003158:	f107 0208 	add.w	r2, r7, #8
 800315c:	2300      	movs	r3, #0
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003164:	2100      	movs	r1, #0
 8003166:	4822      	ldr	r0, [pc, #136]	; (80031f0 <codeTacheSon+0xf4>)
 8003168:	f003 fac8 	bl	80066fc <HAL_DAC_Start_DMA>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <codeTacheSon+0x7a>
					360, DAC_ALIGN_12B_R) != HAL_OK) {
				/* Start DMA Error */
				Error_Handler();
 8003172:	f000 f885 	bl	8003280 <Error_Handler>
			}
			htim7.Init.Period = 100;
 8003176:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <codeTacheSon+0xf8>)
 8003178:	2264      	movs	r2, #100	; 0x64
 800317a:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 800317c:	481d      	ldr	r0, [pc, #116]	; (80031f4 <codeTacheSon+0xf8>)
 800317e:	f007 ff43 	bl	800b008 <HAL_TIM_Base_Init>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <codeTacheSon+0x90>
				Error_Handler();
 8003188:	f000 f87a 	bl	8003280 <Error_Handler>
			}
		}
		if (!bp2 && bp2_old) {
 800318c:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d11d      	bne.n	80031d0 <codeTacheSon+0xd4>
 8003194:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d019      	beq.n	80031d0 <codeTacheSon+0xd4>
			/*##-2- Enable DAC selected channel and associated DMA */
			if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sinus12bit,
 800319c:	f107 0208 	add.w	r2, r7, #8
 80031a0:	2300      	movs	r3, #0
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80031a8:	2100      	movs	r1, #0
 80031aa:	4811      	ldr	r0, [pc, #68]	; (80031f0 <codeTacheSon+0xf4>)
 80031ac:	f003 faa6 	bl	80066fc <HAL_DAC_Start_DMA>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <codeTacheSon+0xbe>
					360, DAC_ALIGN_12B_R) != HAL_OK) {
				/* Start DMA Error */
				Error_Handler();
 80031b6:	f000 f863 	bl	8003280 <Error_Handler>
			}
			htim7.Init.Period = 200;
 80031ba:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <codeTacheSon+0xf8>)
 80031bc:	22c8      	movs	r2, #200	; 0xc8
 80031be:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80031c0:	480c      	ldr	r0, [pc, #48]	; (80031f4 <codeTacheSon+0xf8>)
 80031c2:	f007 ff21 	bl	800b008 <HAL_TIM_Base_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <codeTacheSon+0xd4>
				Error_Handler();
 80031cc:	f000 f858 	bl	8003280 <Error_Handler>
			}
		}
		bp1_old = bp1;
 80031d0:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80031d4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
		bp2_old = bp2;
 80031d8:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80031dc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
		vTaskDelay(20);
 80031e0:	2014      	movs	r0, #20
 80031e2:	f009 fc7b 	bl	800cadc <vTaskDelay>
		bp1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 80031e6:	e79f      	b.n	8003128 <codeTacheSon+0x2c>
 80031e8:	0800f63c 	.word	0x0800f63c
 80031ec:	40020000 	.word	0x40020000
 80031f0:	200048a4 	.word	0x200048a4
 80031f4:	20004a68 	.word	0x20004a68

080031f8 <codeTachePause>:
 * @brief Function implementing the tachePause thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_codeTachePause */
void codeTachePause(void const *argument) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN codeTachePause */
	/* Infinite loop */

	static TS_StateTypeDef TS_State;
	for (;;) {
		myDelay(2);
 8003200:	2002      	movs	r0, #2
 8003202:	f7fe fd23 	bl	8001c4c <myDelay>
		if (pause==1){
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <codeTachePause+0x58>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d107      	bne.n	800321e <codeTachePause+0x26>
				vTaskSuspend(tacheJeuHandle);
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <codeTachePause+0x5c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f009 fc98 	bl	800cb48 <vTaskSuspend>
				myDelay(2);}
 8003218:	2002      	movs	r0, #2
 800321a:	f7fe fd17 	bl	8001c4c <myDelay>
		if (TS_State.touchDetected && pause==1) {
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <codeTachePause+0x60>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00f      	beq.n	8003246 <codeTachePause+0x4e>
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <codeTachePause+0x58>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d10b      	bne.n	8003246 <codeTachePause+0x4e>

			BSP_LCD_SetLayerVisible(1, DISABLE);
 800322e:	2100      	movs	r1, #0
 8003230:	2001      	movs	r0, #1
 8003232:	f000 fad7 	bl	80037e4 <BSP_LCD_SetLayerVisible>

			pause = 0;
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <codeTachePause+0x58>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

			vTaskResume(tacheJeuHandle);
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <codeTachePause+0x5c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f009 fd49 	bl	800ccd8 <vTaskResume>
		}
		vTaskDelay(20);
 8003246:	2014      	movs	r0, #20
 8003248:	f009 fc48 	bl	800cadc <vTaskDelay>
		myDelay(2);
 800324c:	e7d8      	b.n	8003200 <codeTachePause+0x8>
 800324e:	bf00      	nop
 8003250:	2000039c 	.word	0x2000039c
 8003254:	20004428 	.word	0x20004428
 8003258:	200003fc 	.word	0x200003fc

0800325c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a04      	ldr	r2, [pc, #16]	; (800327c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d101      	bne.n	8003272 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800326e:	f002 fe19 	bl	8005ea4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40001000 	.word	0x40001000

08003280 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003284:	b672      	cpsid	i
}
 8003286:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003288:	e7fe      	b.n	8003288 <Error_Handler+0x8>
	...

0800328c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08c      	sub	sp, #48	; 0x30
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a51      	ldr	r2, [pc, #324]	; (80033dc <I2Cx_MspInit+0x150>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d14d      	bne.n	8003338 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800329c:	4b50      	ldr	r3, [pc, #320]	; (80033e0 <I2Cx_MspInit+0x154>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	4a4f      	ldr	r2, [pc, #316]	; (80033e0 <I2Cx_MspInit+0x154>)
 80032a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a6:	6313      	str	r3, [r2, #48]	; 0x30
 80032a8:	4b4d      	ldr	r3, [pc, #308]	; (80033e0 <I2Cx_MspInit+0x154>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80032b8:	2312      	movs	r3, #18
 80032ba:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80032c0:	2302      	movs	r3, #2
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80032c4:	2304      	movs	r3, #4
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80032c8:	f107 031c 	add.w	r3, r7, #28
 80032cc:	4619      	mov	r1, r3
 80032ce:	4845      	ldr	r0, [pc, #276]	; (80033e4 <I2Cx_MspInit+0x158>)
 80032d0:	f004 fbb8 	bl	8007a44 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80032d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80032da:	f107 031c 	add.w	r3, r7, #28
 80032de:	4619      	mov	r1, r3
 80032e0:	4840      	ldr	r0, [pc, #256]	; (80033e4 <I2Cx_MspInit+0x158>)
 80032e2:	f004 fbaf 	bl	8007a44 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80032e6:	4b3e      	ldr	r3, [pc, #248]	; (80033e0 <I2Cx_MspInit+0x154>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a3d      	ldr	r2, [pc, #244]	; (80033e0 <I2Cx_MspInit+0x154>)
 80032ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <I2Cx_MspInit+0x154>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80032fe:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <I2Cx_MspInit+0x154>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4a37      	ldr	r2, [pc, #220]	; (80033e0 <I2Cx_MspInit+0x154>)
 8003304:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003308:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800330a:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <I2Cx_MspInit+0x154>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4a34      	ldr	r2, [pc, #208]	; (80033e0 <I2Cx_MspInit+0x154>)
 8003310:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003314:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003316:	2200      	movs	r2, #0
 8003318:	210f      	movs	r1, #15
 800331a:	2048      	movs	r0, #72	; 0x48
 800331c:	f003 f976 	bl	800660c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003320:	2048      	movs	r0, #72	; 0x48
 8003322:	f003 f98f 	bl	8006644 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003326:	2200      	movs	r2, #0
 8003328:	210f      	movs	r1, #15
 800332a:	2049      	movs	r0, #73	; 0x49
 800332c:	f003 f96e 	bl	800660c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003330:	2049      	movs	r0, #73	; 0x49
 8003332:	f003 f987 	bl	8006644 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003336:	e04d      	b.n	80033d4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <I2Cx_MspInit+0x154>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	4a28      	ldr	r2, [pc, #160]	; (80033e0 <I2Cx_MspInit+0x154>)
 800333e:	f043 0302 	orr.w	r3, r3, #2
 8003342:	6313      	str	r3, [r2, #48]	; 0x30
 8003344:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <I2Cx_MspInit+0x154>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003354:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003356:	2312      	movs	r3, #18
 8003358:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800335e:	2302      	movs	r3, #2
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003362:	2304      	movs	r3, #4
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003366:	f107 031c 	add.w	r3, r7, #28
 800336a:	4619      	mov	r1, r3
 800336c:	481e      	ldr	r0, [pc, #120]	; (80033e8 <I2Cx_MspInit+0x15c>)
 800336e:	f004 fb69 	bl	8007a44 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003378:	f107 031c 	add.w	r3, r7, #28
 800337c:	4619      	mov	r1, r3
 800337e:	481a      	ldr	r0, [pc, #104]	; (80033e8 <I2Cx_MspInit+0x15c>)
 8003380:	f004 fb60 	bl	8007a44 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003384:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <I2Cx_MspInit+0x154>)
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <I2Cx_MspInit+0x154>)
 800338a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800338e:	6413      	str	r3, [r2, #64]	; 0x40
 8003390:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <I2Cx_MspInit+0x154>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800339c:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <I2Cx_MspInit+0x154>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4a0f      	ldr	r2, [pc, #60]	; (80033e0 <I2Cx_MspInit+0x154>)
 80033a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033a6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <I2Cx_MspInit+0x154>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <I2Cx_MspInit+0x154>)
 80033ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033b2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80033b4:	2200      	movs	r2, #0
 80033b6:	210f      	movs	r1, #15
 80033b8:	201f      	movs	r0, #31
 80033ba:	f003 f927 	bl	800660c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80033be:	201f      	movs	r0, #31
 80033c0:	f003 f940 	bl	8006644 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80033c4:	2200      	movs	r2, #0
 80033c6:	210f      	movs	r1, #15
 80033c8:	2020      	movs	r0, #32
 80033ca:	f003 f91f 	bl	800660c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80033ce:	2020      	movs	r0, #32
 80033d0:	f003 f938 	bl	8006644 <HAL_NVIC_EnableIRQ>
}
 80033d4:	bf00      	nop
 80033d6:	3730      	adds	r7, #48	; 0x30
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000428 	.word	0x20000428
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40021c00 	.word	0x40021c00
 80033e8:	40020400 	.word	0x40020400

080033ec <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f005 f8fd 	bl	80085f4 <HAL_I2C_GetState>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d125      	bne.n	800344c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a14      	ldr	r2, [pc, #80]	; (8003454 <I2Cx_Init+0x68>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d103      	bne.n	8003410 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a13      	ldr	r2, [pc, #76]	; (8003458 <I2Cx_Init+0x6c>)
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	e002      	b.n	8003416 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <I2Cx_Init+0x70>)
 8003414:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a11      	ldr	r2, [pc, #68]	; (8003460 <I2Cx_Init+0x74>)
 800341a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff23 	bl	800328c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f004 fde6 	bl	8008018 <HAL_I2C_Init>
  }
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000428 	.word	0x20000428
 8003458:	40005c00 	.word	0x40005c00
 800345c:	40005400 	.word	0x40005400
 8003460:	40912732 	.word	0x40912732

08003464 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08a      	sub	sp, #40	; 0x28
 8003468:	af04      	add	r7, sp, #16
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	4608      	mov	r0, r1
 800346e:	4611      	mov	r1, r2
 8003470:	461a      	mov	r2, r3
 8003472:	4603      	mov	r3, r0
 8003474:	72fb      	strb	r3, [r7, #11]
 8003476:	460b      	mov	r3, r1
 8003478:	813b      	strh	r3, [r7, #8]
 800347a:	4613      	mov	r3, r2
 800347c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003482:	7afb      	ldrb	r3, [r7, #11]
 8003484:	b299      	uxth	r1, r3
 8003486:	88f8      	ldrh	r0, [r7, #6]
 8003488:	893a      	ldrh	r2, [r7, #8]
 800348a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800348e:	9302      	str	r3, [sp, #8]
 8003490:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	4603      	mov	r3, r0
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f004 ff90 	bl	80083c0 <HAL_I2C_Mem_Read>
 80034a0:	4603      	mov	r3, r0
 80034a2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d004      	beq.n	80034b4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80034aa:	7afb      	ldrb	r3, [r7, #11]
 80034ac:	4619      	mov	r1, r3
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f832 	bl	8003518 <I2Cx_Error>
  }
  return status;    
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b08a      	sub	sp, #40	; 0x28
 80034c2:	af04      	add	r7, sp, #16
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	4608      	mov	r0, r1
 80034c8:	4611      	mov	r1, r2
 80034ca:	461a      	mov	r2, r3
 80034cc:	4603      	mov	r3, r0
 80034ce:	72fb      	strb	r3, [r7, #11]
 80034d0:	460b      	mov	r3, r1
 80034d2:	813b      	strh	r3, [r7, #8]
 80034d4:	4613      	mov	r3, r2
 80034d6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80034dc:	7afb      	ldrb	r3, [r7, #11]
 80034de:	b299      	uxth	r1, r3
 80034e0:	88f8      	ldrh	r0, [r7, #6]
 80034e2:	893a      	ldrh	r2, [r7, #8]
 80034e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034e8:	9302      	str	r3, [sp, #8]
 80034ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	4603      	mov	r3, r0
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f004 fe4f 	bl	8008198 <HAL_I2C_Mem_Write>
 80034fa:	4603      	mov	r3, r0
 80034fc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003504:	7afb      	ldrb	r3, [r7, #11]
 8003506:	4619      	mov	r1, r3
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f805 	bl	8003518 <I2Cx_Error>
  }
  return status;
 800350e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f004 fe07 	bl	8008138 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ff5e 	bl	80033ec <I2Cx_Init>
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800353c:	4802      	ldr	r0, [pc, #8]	; (8003548 <TS_IO_Init+0x10>)
 800353e:	f7ff ff55 	bl	80033ec <I2Cx_Init>
}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000428 	.word	0x20000428

0800354c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af02      	add	r7, sp, #8
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
 8003556:	460b      	mov	r3, r1
 8003558:	71bb      	strb	r3, [r7, #6]
 800355a:	4613      	mov	r3, r2
 800355c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800355e:	79bb      	ldrb	r3, [r7, #6]
 8003560:	b29a      	uxth	r2, r3
 8003562:	79f9      	ldrb	r1, [r7, #7]
 8003564:	2301      	movs	r3, #1
 8003566:	9301      	str	r3, [sp, #4]
 8003568:	1d7b      	adds	r3, r7, #5
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2301      	movs	r3, #1
 800356e:	4803      	ldr	r0, [pc, #12]	; (800357c <TS_IO_Write+0x30>)
 8003570:	f7ff ffa5 	bl	80034be <I2Cx_WriteMultiple>
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000428 	.word	0x20000428

08003580 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af02      	add	r7, sp, #8
 8003586:	4603      	mov	r3, r0
 8003588:	460a      	mov	r2, r1
 800358a:	71fb      	strb	r3, [r7, #7]
 800358c:	4613      	mov	r3, r2
 800358e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003594:	79bb      	ldrb	r3, [r7, #6]
 8003596:	b29a      	uxth	r2, r3
 8003598:	79f9      	ldrb	r1, [r7, #7]
 800359a:	2301      	movs	r3, #1
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	f107 030f 	add.w	r3, r7, #15
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	2301      	movs	r3, #1
 80035a6:	4804      	ldr	r0, [pc, #16]	; (80035b8 <TS_IO_Read+0x38>)
 80035a8:	f7ff ff5c 	bl	8003464 <I2Cx_ReadMultiple>

  return read_value;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000428 	.word	0x20000428

080035bc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f002 fc8d 	bl	8005ee4 <HAL_Delay>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80035d8:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <BSP_LCD_Init+0xcc>)
 80035da:	2228      	movs	r2, #40	; 0x28
 80035dc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80035de:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <BSP_LCD_Init+0xcc>)
 80035e0:	2209      	movs	r2, #9
 80035e2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80035e4:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <BSP_LCD_Init+0xcc>)
 80035e6:	2235      	movs	r2, #53	; 0x35
 80035e8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80035ea:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <BSP_LCD_Init+0xcc>)
 80035ec:	220b      	movs	r2, #11
 80035ee:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80035f0:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <BSP_LCD_Init+0xcc>)
 80035f2:	f240 121b 	movw	r2, #283	; 0x11b
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80035f8:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <BSP_LCD_Init+0xcc>)
 80035fa:	f240 2215 	movw	r2, #533	; 0x215
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003600:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <BSP_LCD_Init+0xcc>)
 8003602:	f240 121d 	movw	r2, #285	; 0x11d
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <BSP_LCD_Init+0xcc>)
 800360a:	f240 2235 	movw	r2, #565	; 0x235
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003610:	2100      	movs	r1, #0
 8003612:	4823      	ldr	r0, [pc, #140]	; (80036a0 <BSP_LCD_Init+0xcc>)
 8003614:	f000 fe86 	bl	8004324 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <BSP_LCD_Init+0xcc>)
 800361a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800361e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003620:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <BSP_LCD_Init+0xcc>)
 8003622:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003626:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <BSP_LCD_Init+0xcc>)
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <BSP_LCD_Init+0xcc>)
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <BSP_LCD_Init+0xcc>)
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003640:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <BSP_LCD_Init+0xcc>)
 8003642:	2200      	movs	r2, #0
 8003644:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <BSP_LCD_Init+0xcc>)
 8003648:	2200      	movs	r2, #0
 800364a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800364c:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <BSP_LCD_Init+0xcc>)
 800364e:	2200      	movs	r2, #0
 8003650:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003652:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <BSP_LCD_Init+0xcc>)
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <BSP_LCD_Init+0xcc>)
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <BSP_LCD_Init+0xd0>)
 800365c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800365e:	4810      	ldr	r0, [pc, #64]	; (80036a0 <BSP_LCD_Init+0xcc>)
 8003660:	f005 fd1a 	bl	8009098 <HAL_LTDC_GetState>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800366a:	2100      	movs	r1, #0
 800366c:	480c      	ldr	r0, [pc, #48]	; (80036a0 <BSP_LCD_Init+0xcc>)
 800366e:	f000 fd7f 	bl	8004170 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003672:	480b      	ldr	r0, [pc, #44]	; (80036a0 <BSP_LCD_Init+0xcc>)
 8003674:	f005 fb0a 	bl	8008c8c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003678:	2201      	movs	r2, #1
 800367a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800367e:	480a      	ldr	r0, [pc, #40]	; (80036a8 <BSP_LCD_Init+0xd4>)
 8003680:	f004 fcb0 	bl	8007fe4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003684:	2201      	movs	r2, #1
 8003686:	2108      	movs	r1, #8
 8003688:	4808      	ldr	r0, [pc, #32]	; (80036ac <BSP_LCD_Init+0xd8>)
 800368a:	f004 fcab 	bl	8007fe4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800368e:	f001 f86d 	bl	800476c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003692:	4807      	ldr	r0, [pc, #28]	; (80036b0 <BSP_LCD_Init+0xdc>)
 8003694:	f000 f928 	bl	80038e8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20004acc 	.word	0x20004acc
 80036a4:	40016800 	.word	0x40016800
 80036a8:	40022000 	.word	0x40022000
 80036ac:	40022800 	.word	0x40022800
 80036b0:	2000002c 	.word	0x2000002c

080036b4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <BSP_LCD_GetXSize+0x20>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a06      	ldr	r2, [pc, #24]	; (80036d8 <BSP_LCD_GetXSize+0x24>)
 80036be:	2134      	movs	r1, #52	; 0x34
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	3360      	adds	r3, #96	; 0x60
 80036c8:	681b      	ldr	r3, [r3, #0]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	200004b4 	.word	0x200004b4
 80036d8:	20004acc 	.word	0x20004acc

080036dc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <BSP_LCD_GetYSize+0x20>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a06      	ldr	r2, [pc, #24]	; (8003700 <BSP_LCD_GetYSize+0x24>)
 80036e6:	2134      	movs	r1, #52	; 0x34
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3364      	adds	r3, #100	; 0x64
 80036f0:	681b      	ldr	r3, [r3, #0]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	200004b4 	.word	0x200004b4
 8003700:	20004acc 	.word	0x20004acc

08003704 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003704:	b580      	push	{r7, lr}
 8003706:	b090      	sub	sp, #64	; 0x40
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	6039      	str	r1, [r7, #0]
 800370e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003714:	f7ff ffce 	bl	80036b4 <BSP_LCD_GetXSize>
 8003718:	4603      	mov	r3, r0
 800371a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003720:	f7ff ffdc 	bl	80036dc <BSP_LCD_GetYSize>
 8003724:	4603      	mov	r3, r0
 8003726:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003728:	2300      	movs	r3, #0
 800372a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003730:	23ff      	movs	r3, #255	; 0xff
 8003732:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800374a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003750:	2307      	movs	r3, #7
 8003752:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003754:	f7ff ffae 	bl	80036b4 <BSP_LCD_GetXSize>
 8003758:	4603      	mov	r3, r0
 800375a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800375c:	f7ff ffbe 	bl	80036dc <BSP_LCD_GetYSize>
 8003760:	4603      	mov	r3, r0
 8003762:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003764:	88fa      	ldrh	r2, [r7, #6]
 8003766:	f107 030c 	add.w	r3, r7, #12
 800376a:	4619      	mov	r1, r3
 800376c:	4812      	ldr	r0, [pc, #72]	; (80037b8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800376e:	f005 fc1f 	bl	8008fb0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	4911      	ldr	r1, [pc, #68]	; (80037bc <BSP_LCD_LayerDefaultInit+0xb8>)
 8003776:	4613      	mov	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3304      	adds	r3, #4
 8003782:	f04f 32ff 	mov.w	r2, #4294967295
 8003786:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003788:	88fa      	ldrh	r2, [r7, #6]
 800378a:	490c      	ldr	r1, [pc, #48]	; (80037bc <BSP_LCD_LayerDefaultInit+0xb8>)
 800378c:	4613      	mov	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	3308      	adds	r3, #8
 8003798:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800379a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	4907      	ldr	r1, [pc, #28]	; (80037bc <BSP_LCD_LayerDefaultInit+0xb8>)
 80037a0:	4613      	mov	r3, r2
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80037ae:	601a      	str	r2, [r3, #0]
}
 80037b0:	bf00      	nop
 80037b2:	3740      	adds	r7, #64	; 0x40
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20004acc 	.word	0x20004acc
 80037bc:	200004b8 	.word	0x200004b8
 80037c0:	2000002c 	.word	0x2000002c

080037c4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <BSP_LCD_SelectLayer+0x1c>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6013      	str	r3, [r2, #0]
} 
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	200004b4 	.word	0x200004b4

080037e4 <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d112      	bne.n	800381c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 80037f6:	4b19      	ldr	r3, [pc, #100]	; (800385c <BSP_LCD_SetLayerVisible+0x78>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	01db      	lsls	r3, r3, #7
 8003800:	4413      	add	r3, r2
 8003802:	3384      	adds	r3, #132	; 0x84
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a15      	ldr	r2, [pc, #84]	; (800385c <BSP_LCD_SetLayerVisible+0x78>)
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	4611      	mov	r1, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	01d2      	lsls	r2, r2, #7
 8003810:	440a      	add	r2, r1
 8003812:	3284      	adds	r2, #132	; 0x84
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e011      	b.n	8003840 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <BSP_LCD_SetLayerVisible+0x78>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	01db      	lsls	r3, r3, #7
 8003826:	4413      	add	r3, r2
 8003828:	3384      	adds	r3, #132	; 0x84
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a0b      	ldr	r2, [pc, #44]	; (800385c <BSP_LCD_SetLayerVisible+0x78>)
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	4611      	mov	r1, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	01d2      	lsls	r2, r2, #7
 8003836:	440a      	add	r2, r1
 8003838:	3284      	adds	r2, #132	; 0x84
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <BSP_LCD_SetLayerVisible+0x78>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <BSP_LCD_SetLayerVisible+0x78>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	625a      	str	r2, [r3, #36]	; 0x24
} 
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	20004acc 	.word	0x20004acc

08003860 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4619      	mov	r1, r3
 8003872:	4803      	ldr	r0, [pc, #12]	; (8003880 <BSP_LCD_SetTransparency+0x20>)
 8003874:	f005 fbda 	bl	800902c <HAL_LTDC_SetAlpha>
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	20004acc 	.word	0x20004acc

08003884 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <BSP_LCD_SetTextColor+0x28>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4907      	ldr	r1, [pc, #28]	; (80038b0 <BSP_LCD_SetTextColor+0x2c>)
 8003892:	4613      	mov	r3, r2
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	601a      	str	r2, [r3, #0]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	200004b4 	.word	0x200004b4
 80038b0:	200004b8 	.word	0x200004b8

080038b4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80038bc:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <BSP_LCD_SetBackColor+0x2c>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4908      	ldr	r1, [pc, #32]	; (80038e4 <BSP_LCD_SetBackColor+0x30>)
 80038c2:	4613      	mov	r3, r2
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	3304      	adds	r3, #4
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	601a      	str	r2, [r3, #0]
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	200004b4 	.word	0x200004b4
 80038e4:	200004b8 	.word	0x200004b8

080038e8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <BSP_LCD_SetFont+0x2c>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4908      	ldr	r1, [pc, #32]	; (8003918 <BSP_LCD_SetFont+0x30>)
 80038f6:	4613      	mov	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	3308      	adds	r3, #8
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	601a      	str	r2, [r3, #0]
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	200004b4 	.word	0x200004b4
 8003918:	200004b8 	.word	0x200004b8

0800391c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <BSP_LCD_GetFont+0x24>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4907      	ldr	r1, [pc, #28]	; (8003944 <BSP_LCD_GetFont+0x28>)
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	3308      	adds	r3, #8
 8003932:	681b      	ldr	r3, [r3, #0]
}
 8003934:	4618      	mov	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	200004b4 	.word	0x200004b4
 8003944:	200004b8 	.word	0x200004b8

08003948 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394a:	b085      	sub	sp, #20
 800394c:	af02      	add	r7, sp, #8
 800394e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003950:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <BSP_LCD_Clear+0x48>)
 8003952:	681c      	ldr	r4, [r3, #0]
 8003954:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <BSP_LCD_Clear+0x48>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0e      	ldr	r2, [pc, #56]	; (8003994 <BSP_LCD_Clear+0x4c>)
 800395a:	2134      	movs	r1, #52	; 0x34
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	335c      	adds	r3, #92	; 0x5c
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461e      	mov	r6, r3
 8003968:	f7ff fea4 	bl	80036b4 <BSP_LCD_GetXSize>
 800396c:	4605      	mov	r5, r0
 800396e:	f7ff feb5 	bl	80036dc <BSP_LCD_GetYSize>
 8003972:	4602      	mov	r2, r0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	2300      	movs	r3, #0
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	4613      	mov	r3, r2
 800397e:	462a      	mov	r2, r5
 8003980:	4631      	mov	r1, r6
 8003982:	4620      	mov	r0, r4
 8003984:	f000 fe62 	bl	800464c <LL_FillBuffer>
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003990:	200004b4 	.word	0x200004b4
 8003994:	20004acc 	.word	0x20004acc

08003998 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	80fb      	strh	r3, [r7, #6]
 80039a2:	460b      	mov	r3, r1
 80039a4:	80bb      	strh	r3, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <BSP_LCD_DisplayChar+0x80>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	491b      	ldr	r1, [pc, #108]	; (8003a1c <BSP_LCD_DisplayChar+0x84>)
 80039b0:	4613      	mov	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	3308      	adds	r3, #8
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6819      	ldr	r1, [r3, #0]
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80039c6:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <BSP_LCD_DisplayChar+0x80>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4c14      	ldr	r4, [pc, #80]	; (8003a1c <BSP_LCD_DisplayChar+0x84>)
 80039cc:	4613      	mov	r3, r2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4423      	add	r3, r4
 80039d6:	3308      	adds	r3, #8
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80039dc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80039e0:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <BSP_LCD_DisplayChar+0x80>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4c0d      	ldr	r4, [pc, #52]	; (8003a1c <BSP_LCD_DisplayChar+0x84>)
 80039e6:	4613      	mov	r3, r2
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4423      	add	r3, r4
 80039f0:	3308      	adds	r3, #8
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	889b      	ldrh	r3, [r3, #4]
 80039f6:	3307      	adds	r3, #7
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	da00      	bge.n	80039fe <BSP_LCD_DisplayChar+0x66>
 80039fc:	3307      	adds	r3, #7
 80039fe:	10db      	asrs	r3, r3, #3
 8003a00:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003a04:	18ca      	adds	r2, r1, r3
 8003a06:	88b9      	ldrh	r1, [r7, #4]
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fca6 	bl	800435c <DrawChar>
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd90      	pop	{r4, r7, pc}
 8003a18:	200004b4 	.word	0x200004b4
 8003a1c:	200004b8 	.word	0x200004b8

08003a20 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003a20:	b5b0      	push	{r4, r5, r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60ba      	str	r2, [r7, #8]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	81fb      	strh	r3, [r7, #14]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	81bb      	strh	r3, [r7, #12]
 8003a32:	4613      	mov	r3, r2
 8003a34:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003a36:	2301      	movs	r3, #1
 8003a38:	83fb      	strh	r3, [r7, #30]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003a4a:	e002      	b.n	8003a52 <BSP_LCD_DisplayStringAt+0x32>
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	617a      	str	r2, [r7, #20]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f6      	bne.n	8003a4c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003a5e:	f7ff fe29 	bl	80036b4 <BSP_LCD_GetXSize>
 8003a62:	4601      	mov	r1, r0
 8003a64:	4b50      	ldr	r3, [pc, #320]	; (8003ba8 <BSP_LCD_DisplayStringAt+0x188>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4850      	ldr	r0, [pc, #320]	; (8003bac <BSP_LCD_DisplayStringAt+0x18c>)
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4403      	add	r3, r0
 8003a74:	3308      	adds	r3, #8
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	889b      	ldrh	r3, [r3, #4]
 8003a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d01c      	beq.n	8003ac0 <BSP_LCD_DisplayStringAt+0xa0>
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	dc33      	bgt.n	8003af2 <BSP_LCD_DisplayStringAt+0xd2>
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d002      	beq.n	8003a94 <BSP_LCD_DisplayStringAt+0x74>
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d019      	beq.n	8003ac6 <BSP_LCD_DisplayStringAt+0xa6>
 8003a92:	e02e      	b.n	8003af2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	1ad1      	subs	r1, r2, r3
 8003a9a:	4b43      	ldr	r3, [pc, #268]	; (8003ba8 <BSP_LCD_DisplayStringAt+0x188>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4843      	ldr	r0, [pc, #268]	; (8003bac <BSP_LCD_DisplayStringAt+0x18c>)
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4403      	add	r3, r0
 8003aaa:	3308      	adds	r3, #8
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	889b      	ldrh	r3, [r3, #4]
 8003ab0:	fb03 f301 	mul.w	r3, r3, r1
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	89fb      	ldrh	r3, [r7, #14]
 8003aba:	4413      	add	r3, r2
 8003abc:	83fb      	strh	r3, [r7, #30]
      break;
 8003abe:	e01b      	b.n	8003af8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003ac0:	89fb      	ldrh	r3, [r7, #14]
 8003ac2:	83fb      	strh	r3, [r7, #30]
      break;
 8003ac4:	e018      	b.n	8003af8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	b299      	uxth	r1, r3
 8003ace:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <BSP_LCD_DisplayStringAt+0x188>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4836      	ldr	r0, [pc, #216]	; (8003bac <BSP_LCD_DisplayStringAt+0x18c>)
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4403      	add	r3, r0
 8003ade:	3308      	adds	r3, #8
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	889b      	ldrh	r3, [r3, #4]
 8003ae4:	fb11 f303 	smulbb	r3, r1, r3
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	89fb      	ldrh	r3, [r7, #14]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	83fb      	strh	r3, [r7, #30]
      break;
 8003af0:	e002      	b.n	8003af8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003af2:	89fb      	ldrh	r3, [r7, #14]
 8003af4:	83fb      	strh	r3, [r7, #30]
      break;
 8003af6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003af8:	8bfb      	ldrh	r3, [r7, #30]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <BSP_LCD_DisplayStringAt+0xe6>
 8003afe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	da1d      	bge.n	8003b42 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003b0a:	e01a      	b.n	8003b42 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	781a      	ldrb	r2, [r3, #0]
 8003b10:	89b9      	ldrh	r1, [r7, #12]
 8003b12:	8bfb      	ldrh	r3, [r7, #30]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff ff3f 	bl	8003998 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003b1a:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <BSP_LCD_DisplayStringAt+0x188>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4923      	ldr	r1, [pc, #140]	; (8003bac <BSP_LCD_DisplayStringAt+0x18c>)
 8003b20:	4613      	mov	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	889a      	ldrh	r2, [r3, #4]
 8003b30:	8bfb      	ldrh	r3, [r7, #30]
 8003b32:	4413      	add	r3, r2
 8003b34:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
    i++;
 8003b3c:	8bbb      	ldrh	r3, [r7, #28]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bf14      	ite	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	2300      	moveq	r3, #0
 8003b4e:	b2dc      	uxtb	r4, r3
 8003b50:	f7ff fdb0 	bl	80036b4 <BSP_LCD_GetXSize>
 8003b54:	8bb9      	ldrh	r1, [r7, #28]
 8003b56:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <BSP_LCD_DisplayStringAt+0x188>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4d14      	ldr	r5, [pc, #80]	; (8003bac <BSP_LCD_DisplayStringAt+0x18c>)
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	442b      	add	r3, r5
 8003b66:	3308      	adds	r3, #8
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	889b      	ldrh	r3, [r3, #4]
 8003b6c:	fb03 f301 	mul.w	r3, r3, r1
 8003b70:	1ac3      	subs	r3, r0, r3
 8003b72:	b299      	uxth	r1, r3
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <BSP_LCD_DisplayStringAt+0x188>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	480c      	ldr	r0, [pc, #48]	; (8003bac <BSP_LCD_DisplayStringAt+0x18c>)
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4403      	add	r3, r0
 8003b84:	3308      	adds	r3, #8
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	889b      	ldrh	r3, [r3, #4]
 8003b8a:	4299      	cmp	r1, r3
 8003b8c:	bf2c      	ite	cs
 8003b8e:	2301      	movcs	r3, #1
 8003b90:	2300      	movcc	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	4023      	ands	r3, r4
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1b7      	bne.n	8003b0c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200004b4 	.word	0x200004b4
 8003bac:	200004b8 	.word	0x200004b8

08003bb0 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	6039      	str	r1, [r7, #0]
 8003bba:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003bbc:	f7ff feae 	bl	800391c <BSP_LCD_GetFont>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	88db      	ldrh	r3, [r3, #6]
 8003bc4:	88fa      	ldrh	r2, [r7, #6]
 8003bc6:	fb12 f303 	smulbb	r3, r2, r3
 8003bca:	b299      	uxth	r1, r3
 8003bcc:	2303      	movs	r3, #3
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	f7ff ff25 	bl	8003a20 <BSP_LCD_DisplayStringAt>
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003be0:	b590      	push	{r4, r7, lr}
 8003be2:	b08b      	sub	sp, #44	; 0x2c
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4604      	mov	r4, r0
 8003be8:	4608      	mov	r0, r1
 8003bea:	4611      	mov	r1, r2
 8003bec:	461a      	mov	r2, r3
 8003bee:	4623      	mov	r3, r4
 8003bf0:	80fb      	strh	r3, [r7, #6]
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	80bb      	strh	r3, [r7, #4]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	807b      	strh	r3, [r7, #2]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003bfe:	2300      	movs	r3, #0
 8003c00:	823b      	strh	r3, [r7, #16]
 8003c02:	2300      	movs	r3, #0
 8003c04:	81fb      	strh	r3, [r7, #14]
 8003c06:	2300      	movs	r3, #0
 8003c08:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c0e:	2300      	movs	r3, #0
 8003c10:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c12:	2300      	movs	r3, #0
 8003c14:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8003c16:	2300      	movs	r3, #0
 8003c18:	83fb      	strh	r3, [r7, #30]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	83bb      	strh	r3, [r7, #28]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	837b      	strh	r3, [r7, #26]
 8003c22:	2300      	movs	r3, #0
 8003c24:	833b      	strh	r3, [r7, #24]
 8003c26:	2300      	movs	r3, #0
 8003c28:	82fb      	strh	r3, [r7, #22]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bfb8      	it	lt
 8003c3c:	425b      	neglt	r3, r3
 8003c3e:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003c40:	883a      	ldrh	r2, [r7, #0]
 8003c42:	88bb      	ldrh	r3, [r7, #4]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bfb8      	it	lt
 8003c4a:	425b      	neglt	r3, r3
 8003c4c:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8003c52:	88bb      	ldrh	r3, [r7, #4]
 8003c54:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8003c56:	887a      	ldrh	r2, [r7, #2]
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d304      	bcc.n	8003c68 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003c62:	2301      	movs	r3, #1
 8003c64:	843b      	strh	r3, [r7, #32]
 8003c66:	e005      	b.n	8003c74 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c6c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003c6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c72:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8003c74:	883a      	ldrh	r2, [r7, #0]
 8003c76:	88bb      	ldrh	r3, [r7, #4]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d304      	bcc.n	8003c86 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003c80:	2301      	movs	r3, #1
 8003c82:	83bb      	strh	r3, [r7, #28]
 8003c84:	e005      	b.n	8003c92 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c8a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c90:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003c92:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003c96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	db11      	blt.n	8003cc2 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003ca6:	8a3b      	ldrh	r3, [r7, #16]
 8003ca8:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003caa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	da00      	bge.n	8003cb4 <BSP_LCD_DrawLine+0xd4>
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	105b      	asrs	r3, r3, #1
 8003cb6:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8003cb8:	89fb      	ldrh	r3, [r7, #14]
 8003cba:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8003cbc:	8a3b      	ldrh	r3, [r7, #16]
 8003cbe:	82bb      	strh	r3, [r7, #20]
 8003cc0:	e010      	b.n	8003ce4 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003cca:	89fb      	ldrh	r3, [r7, #14]
 8003ccc:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003cce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	da00      	bge.n	8003cd8 <BSP_LCD_DrawLine+0xf8>
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	105b      	asrs	r3, r3, #1
 8003cda:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8003cdc:	8a3b      	ldrh	r3, [r7, #16]
 8003cde:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8003ce0:	89fb      	ldrh	r3, [r7, #14]
 8003ce2:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	827b      	strh	r3, [r7, #18]
 8003ce8:	e037      	b.n	8003d5a <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003cea:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003cec:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <BSP_LCD_DrawLine+0x190>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4c20      	ldr	r4, [pc, #128]	; (8003d74 <BSP_LCD_DrawLine+0x194>)
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4423      	add	r3, r4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	f000 f839 	bl	8003d78 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8003d06:	8b3a      	ldrh	r2, [r7, #24]
 8003d08:	8afb      	ldrh	r3, [r7, #22]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003d10:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003d14:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	db0e      	blt.n	8003d3a <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003d1c:	8b3a      	ldrh	r2, [r7, #24]
 8003d1e:	8b7b      	ldrh	r3, [r7, #26]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003d26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d2a:	4413      	add	r3, r2
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003d30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d32:	8bfb      	ldrh	r3, [r7, #30]
 8003d34:	4413      	add	r3, r2
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003d3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d3c:	8c3b      	ldrh	r3, [r7, #32]
 8003d3e:	4413      	add	r3, r2
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003d44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d46:	8bbb      	ldrh	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003d4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3301      	adds	r3, #1
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	827b      	strh	r3, [r7, #18]
 8003d5a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003d5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	ddc1      	ble.n	8003cea <BSP_LCD_DrawLine+0x10a>
  }
}
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
 8003d6a:	372c      	adds	r7, #44	; 0x2c
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd90      	pop	{r4, r7, pc}
 8003d70:	200004b4 	.word	0x200004b4
 8003d74:	200004b8 	.word	0x200004b8

08003d78 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003d78:	b5b0      	push	{r4, r5, r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	603a      	str	r2, [r7, #0]
 8003d82:	80fb      	strh	r3, [r7, #6]
 8003d84:	460b      	mov	r3, r1
 8003d86:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003d88:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <BSP_LCD_DrawPixel+0x88>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <BSP_LCD_DrawPixel+0x8c>)
 8003d8e:	2134      	movs	r1, #52	; 0x34
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	3348      	adds	r3, #72	; 0x48
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d116      	bne.n	8003dcc <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <BSP_LCD_DrawPixel+0x88>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <BSP_LCD_DrawPixel+0x8c>)
 8003da4:	2134      	movs	r1, #52	; 0x34
 8003da6:	fb01 f303 	mul.w	r3, r1, r3
 8003daa:	4413      	add	r3, r2
 8003dac:	335c      	adds	r3, #92	; 0x5c
 8003dae:	681c      	ldr	r4, [r3, #0]
 8003db0:	88bd      	ldrh	r5, [r7, #4]
 8003db2:	f7ff fc7f 	bl	80036b4 <BSP_LCD_GetXSize>
 8003db6:	4603      	mov	r3, r0
 8003db8:	fb03 f205 	mul.w	r2, r3, r5
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4423      	add	r3, r4
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	b292      	uxth	r2, r2
 8003dc8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003dca:	e015      	b.n	8003df8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <BSP_LCD_DrawPixel+0x88>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0c      	ldr	r2, [pc, #48]	; (8003e04 <BSP_LCD_DrawPixel+0x8c>)
 8003dd2:	2134      	movs	r1, #52	; 0x34
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	335c      	adds	r3, #92	; 0x5c
 8003ddc:	681c      	ldr	r4, [r3, #0]
 8003dde:	88bd      	ldrh	r5, [r7, #4]
 8003de0:	f7ff fc68 	bl	80036b4 <BSP_LCD_GetXSize>
 8003de4:	4603      	mov	r3, r0
 8003de6:	fb03 f205 	mul.w	r2, r3, r5
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4423      	add	r3, r4
 8003df2:	461a      	mov	r2, r3
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6013      	str	r3, [r2, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8003e00:	200004b4 	.word	0x200004b4
 8003e04:	20004acc 	.word	0x20004acc

08003e08 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b08b      	sub	sp, #44	; 0x2c
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61bb      	str	r3, [r7, #24]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	2300      	movs	r3, #0
 8003e22:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	330a      	adds	r3, #10
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	330b      	adds	r3, #11
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	441a      	add	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	441a      	add	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	330d      	adds	r3, #13
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	061b      	lsls	r3, r3, #24
 8003e4c:	4413      	add	r3, r2
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3312      	adds	r3, #18
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3313      	adds	r3, #19
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	441a      	add	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3314      	adds	r3, #20
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	041b      	lsls	r3, r3, #16
 8003e6a:	441a      	add	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3315      	adds	r3, #21
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	061b      	lsls	r3, r3, #24
 8003e74:	4413      	add	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3316      	adds	r3, #22
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3317      	adds	r3, #23
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	441a      	add	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3318      	adds	r3, #24
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	041b      	lsls	r3, r3, #16
 8003e92:	441a      	add	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3319      	adds	r3, #25
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	061b      	lsls	r3, r3, #24
 8003e9c:	4413      	add	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	331c      	adds	r3, #28
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	331d      	adds	r3, #29
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	4413      	add	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003eb4:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <BSP_LCD_DrawBitmap+0x15c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2b      	ldr	r2, [pc, #172]	; (8003f68 <BSP_LCD_DrawBitmap+0x160>)
 8003eba:	2134      	movs	r1, #52	; 0x34
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	335c      	adds	r3, #92	; 0x5c
 8003ec4:	681c      	ldr	r4, [r3, #0]
 8003ec6:	f7ff fbf5 	bl	80036b4 <BSP_LCD_GetXSize>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	fb03 f202 	mul.w	r2, r3, r2
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4423      	add	r3, r4
 8003eda:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	3b20      	subs	r3, #32
 8003ee0:	2b07      	cmp	r3, #7
 8003ee2:	d802      	bhi.n	8003eea <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	e008      	b.n	8003efc <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	3b10      	subs	r3, #16
 8003eee:	2b07      	cmp	r3, #7
 8003ef0:	d802      	bhi.n	8003ef8 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	e001      	b.n	8003efc <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	08d2      	lsrs	r2, r2, #3
 8003f0a:	fb02 f203 	mul.w	r2, r2, r3
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	4413      	add	r3, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	4413      	add	r3, r2
 8003f16:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1c:	e018      	b.n	8003f50 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003f1e:	6a39      	ldr	r1, [r7, #32]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fbdd 	bl	80046e4 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003f2a:	f7ff fbc3 	bl	80036b4 <BSP_LCD_GetXSize>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	6a3a      	ldr	r2, [r7, #32]
 8003f34:	4413      	add	r3, r2
 8003f36:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	08db      	lsrs	r3, r3, #3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	425b      	negs	r3, r3
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	4413      	add	r3, r2
 8003f48:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d3e2      	bcc.n	8003f1e <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	372c      	adds	r7, #44	; 0x2c
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd90      	pop	{r4, r7, pc}
 8003f62:	bf00      	nop
 8003f64:	200004b4 	.word	0x200004b4
 8003f68:	20004acc 	.word	0x20004acc

08003f6c <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8003f6c:	b5b0      	push	{r4, r5, r7, lr}
 8003f6e:	b08c      	sub	sp, #48	; 0x30
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	833b      	strh	r3, [r7, #24]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	82fb      	strh	r3, [r7, #22]
 8003f80:	2300      	movs	r3, #0
 8003f82:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f84:	2300      	movs	r3, #0
 8003f86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003f88:	2300      	movs	r3, #0
 8003f8a:	82bb      	strh	r3, [r7, #20]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	827b      	strh	r3, [r7, #18]
 8003f90:	2300      	movs	r3, #0
 8003f92:	823b      	strh	r3, [r7, #16]
 8003f94:	2300      	movs	r3, #0
 8003f96:	81fb      	strh	r3, [r7, #14]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	81bb      	strh	r3, [r7, #12]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	817b      	strh	r3, [r7, #10]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	843b      	strh	r3, [r7, #32]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	83fb      	strh	r3, [r7, #30]
 8003fac:	2300      	movs	r3, #0
 8003fae:	83bb      	strh	r3, [r7, #28]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fba:	83fb      	strh	r3, [r7, #30]
 8003fbc:	8bfb      	ldrh	r3, [r7, #30]
 8003fbe:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003fc6:	837b      	strh	r3, [r7, #26]
 8003fc8:	8b7b      	ldrh	r3, [r7, #26]
 8003fca:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 8003fcc:	2301      	movs	r3, #1
 8003fce:	847b      	strh	r3, [r7, #34]	; 0x22
 8003fd0:	e02f      	b.n	8004032 <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 8003fd2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	4413      	add	r3, r2
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 8003fe0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003fe4:	8c3b      	ldrh	r3, [r7, #32]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	da01      	bge.n	8003fee <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 8003fea:	89bb      	ldrh	r3, [r7, #12]
 8003fec:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 8003fee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003ff2:	8bfb      	ldrh	r3, [r7, #30]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	dd01      	ble.n	8003ffc <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 8003ff8:	89bb      	ldrh	r3, [r7, #12]
 8003ffa:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 8003ffc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	885b      	ldrh	r3, [r3, #2]
 8004008:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 800400a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800400e:	8bbb      	ldrh	r3, [r7, #28]
 8004010:	429a      	cmp	r2, r3
 8004012:	da01      	bge.n	8004018 <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 8004014:	897b      	ldrh	r3, [r7, #10]
 8004016:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 8004018:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800401c:	8b7b      	ldrh	r3, [r7, #26]
 800401e:	429a      	cmp	r2, r3
 8004020:	dd01      	ble.n	8004026 <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 8004022:	897b      	ldrh	r3, [r7, #10]
 8004024:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 8004026:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800402a:	b29b      	uxth	r3, r3
 800402c:	3301      	adds	r3, #1
 800402e:	b29b      	uxth	r3, r3
 8004030:	847b      	strh	r3, [r7, #34]	; 0x22
 8004032:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8004036:	887b      	ldrh	r3, [r7, #2]
 8004038:	429a      	cmp	r2, r3
 800403a:	dbca      	blt.n	8003fd2 <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 800403c:	887b      	ldrh	r3, [r7, #2]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d974      	bls.n	800412c <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 8004042:	8c3a      	ldrh	r2, [r7, #32]
 8004044:	8bfb      	ldrh	r3, [r7, #30]
 8004046:	4413      	add	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	da00      	bge.n	800404e <BSP_LCD_FillPolygon+0xe2>
 800404c:	3301      	adds	r3, #1
 800404e:	105b      	asrs	r3, r3, #1
 8004050:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 8004052:	8b7a      	ldrh	r2, [r7, #26]
 8004054:	8bbb      	ldrh	r3, [r7, #28]
 8004056:	4413      	add	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	da00      	bge.n	800405e <BSP_LCD_FillPolygon+0xf2>
 800405c:	3301      	adds	r3, #1
 800405e:	105b      	asrs	r3, r3, #1
 8004060:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	885b      	ldrh	r3, [r3, #2]
 800406c:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 800406e:	e032      	b.n	80040d6 <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	885b      	ldrh	r3, [r3, #2]
 800407a:	82fb      	strh	r3, [r7, #22]
    Points++;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	885b      	ldrh	r3, [r3, #2]
 800408c:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 800408e:	8b38      	ldrh	r0, [r7, #24]
 8004090:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8004092:	8abc      	ldrh	r4, [r7, #20]
 8004094:	8afd      	ldrh	r5, [r7, #22]
 8004096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004098:	8a7a      	ldrh	r2, [r7, #18]
 800409a:	9201      	str	r2, [sp, #4]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	462b      	mov	r3, r5
 80040a0:	4622      	mov	r2, r4
 80040a2:	f000 fa13 	bl	80044cc <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 80040a6:	8b38      	ldrh	r0, [r7, #24]
 80040a8:	8ab9      	ldrh	r1, [r7, #20]
 80040aa:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80040ac:	8afd      	ldrh	r5, [r7, #22]
 80040ae:	8a7b      	ldrh	r3, [r7, #18]
 80040b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040b2:	9201      	str	r2, [sp, #4]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	462b      	mov	r3, r5
 80040b8:	4622      	mov	r2, r4
 80040ba:	f000 fa07 	bl	80044cc <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 80040be:	8ab8      	ldrh	r0, [r7, #20]
 80040c0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80040c2:	8b3c      	ldrh	r4, [r7, #24]
 80040c4:	8a7d      	ldrh	r5, [r7, #18]
 80040c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040c8:	8afa      	ldrh	r2, [r7, #22]
 80040ca:	9201      	str	r2, [sp, #4]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	462b      	mov	r3, r5
 80040d0:	4622      	mov	r2, r4
 80040d2:	f000 f9fb 	bl	80044cc <FillTriangle>
  while(--PointCount)
 80040d6:	887b      	ldrh	r3, [r7, #2]
 80040d8:	3b01      	subs	r3, #1
 80040da:	807b      	strh	r3, [r7, #2]
 80040dc:	887b      	ldrh	r3, [r7, #2]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1c6      	bne.n	8004070 <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 80040e2:	8a38      	ldrh	r0, [r7, #16]
 80040e4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80040e6:	8abc      	ldrh	r4, [r7, #20]
 80040e8:	89fd      	ldrh	r5, [r7, #14]
 80040ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040ec:	8a7a      	ldrh	r2, [r7, #18]
 80040ee:	9201      	str	r2, [sp, #4]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	462b      	mov	r3, r5
 80040f4:	4622      	mov	r2, r4
 80040f6:	f000 f9e9 	bl	80044cc <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 80040fa:	8a38      	ldrh	r0, [r7, #16]
 80040fc:	8ab9      	ldrh	r1, [r7, #20]
 80040fe:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8004100:	89fd      	ldrh	r5, [r7, #14]
 8004102:	8a7b      	ldrh	r3, [r7, #18]
 8004104:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004106:	9201      	str	r2, [sp, #4]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	462b      	mov	r3, r5
 800410c:	4622      	mov	r2, r4
 800410e:	f000 f9dd 	bl	80044cc <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 8004112:	8ab8      	ldrh	r0, [r7, #20]
 8004114:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8004116:	8a3c      	ldrh	r4, [r7, #16]
 8004118:	8a7d      	ldrh	r5, [r7, #18]
 800411a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800411c:	89fa      	ldrh	r2, [r7, #14]
 800411e:	9201      	str	r2, [sp, #4]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	462b      	mov	r3, r5
 8004124:	4622      	mov	r2, r4
 8004126:	f000 f9d1 	bl	80044cc <FillTriangle>
 800412a:	e000      	b.n	800412e <BSP_LCD_FillPolygon+0x1c2>
    return;
 800412c:	bf00      	nop
}
 800412e:	3728      	adds	r7, #40	; 0x28
 8004130:	46bd      	mov	sp, r7
 8004132:	bdb0      	pop	{r4, r5, r7, pc}

08004134 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <BSP_LCD_DisplayOn+0x30>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <BSP_LCD_DisplayOn+0x30>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004148:	2201      	movs	r2, #1
 800414a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800414e:	4806      	ldr	r0, [pc, #24]	; (8004168 <BSP_LCD_DisplayOn+0x34>)
 8004150:	f003 ff48 	bl	8007fe4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004154:	2201      	movs	r2, #1
 8004156:	2108      	movs	r1, #8
 8004158:	4804      	ldr	r0, [pc, #16]	; (800416c <BSP_LCD_DisplayOn+0x38>)
 800415a:	f003 ff43 	bl	8007fe4 <HAL_GPIO_WritePin>
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20004acc 	.word	0x20004acc
 8004168:	40022000 	.word	0x40022000
 800416c:	40022800 	.word	0x40022800

08004170 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b090      	sub	sp, #64	; 0x40
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800417a:	4b64      	ldr	r3, [pc, #400]	; (800430c <BSP_LCD_MspInit+0x19c>)
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	4a63      	ldr	r2, [pc, #396]	; (800430c <BSP_LCD_MspInit+0x19c>)
 8004180:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004184:	6453      	str	r3, [r2, #68]	; 0x44
 8004186:	4b61      	ldr	r3, [pc, #388]	; (800430c <BSP_LCD_MspInit+0x19c>)
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800418e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004192:	4b5e      	ldr	r3, [pc, #376]	; (800430c <BSP_LCD_MspInit+0x19c>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	4a5d      	ldr	r2, [pc, #372]	; (800430c <BSP_LCD_MspInit+0x19c>)
 8004198:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800419c:	6313      	str	r3, [r2, #48]	; 0x30
 800419e:	4b5b      	ldr	r3, [pc, #364]	; (800430c <BSP_LCD_MspInit+0x19c>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041aa:	4b58      	ldr	r3, [pc, #352]	; (800430c <BSP_LCD_MspInit+0x19c>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	4a57      	ldr	r2, [pc, #348]	; (800430c <BSP_LCD_MspInit+0x19c>)
 80041b0:	f043 0310 	orr.w	r3, r3, #16
 80041b4:	6313      	str	r3, [r2, #48]	; 0x30
 80041b6:	4b55      	ldr	r3, [pc, #340]	; (800430c <BSP_LCD_MspInit+0x19c>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	623b      	str	r3, [r7, #32]
 80041c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80041c2:	4b52      	ldr	r3, [pc, #328]	; (800430c <BSP_LCD_MspInit+0x19c>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	4a51      	ldr	r2, [pc, #324]	; (800430c <BSP_LCD_MspInit+0x19c>)
 80041c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041cc:	6313      	str	r3, [r2, #48]	; 0x30
 80041ce:	4b4f      	ldr	r3, [pc, #316]	; (800430c <BSP_LCD_MspInit+0x19c>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80041da:	4b4c      	ldr	r3, [pc, #304]	; (800430c <BSP_LCD_MspInit+0x19c>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	4a4b      	ldr	r2, [pc, #300]	; (800430c <BSP_LCD_MspInit+0x19c>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e4:	6313      	str	r3, [r2, #48]	; 0x30
 80041e6:	4b49      	ldr	r3, [pc, #292]	; (800430c <BSP_LCD_MspInit+0x19c>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80041f2:	4b46      	ldr	r3, [pc, #280]	; (800430c <BSP_LCD_MspInit+0x19c>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	4a45      	ldr	r2, [pc, #276]	; (800430c <BSP_LCD_MspInit+0x19c>)
 80041f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041fc:	6313      	str	r3, [r2, #48]	; 0x30
 80041fe:	4b43      	ldr	r3, [pc, #268]	; (800430c <BSP_LCD_MspInit+0x19c>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800420a:	4b40      	ldr	r3, [pc, #256]	; (800430c <BSP_LCD_MspInit+0x19c>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	4a3f      	ldr	r2, [pc, #252]	; (800430c <BSP_LCD_MspInit+0x19c>)
 8004210:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004214:	6313      	str	r3, [r2, #48]	; 0x30
 8004216:	4b3d      	ldr	r3, [pc, #244]	; (800430c <BSP_LCD_MspInit+0x19c>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8004222:	4b3a      	ldr	r3, [pc, #232]	; (800430c <BSP_LCD_MspInit+0x19c>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	4a39      	ldr	r2, [pc, #228]	; (800430c <BSP_LCD_MspInit+0x19c>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422c:	6313      	str	r3, [r2, #48]	; 0x30
 800422e:	4b37      	ldr	r3, [pc, #220]	; (800430c <BSP_LCD_MspInit+0x19c>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800423a:	4b34      	ldr	r3, [pc, #208]	; (800430c <BSP_LCD_MspInit+0x19c>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	4a33      	ldr	r2, [pc, #204]	; (800430c <BSP_LCD_MspInit+0x19c>)
 8004240:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004244:	6313      	str	r3, [r2, #48]	; 0x30
 8004246:	4b31      	ldr	r3, [pc, #196]	; (800430c <BSP_LCD_MspInit+0x19c>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004252:	2310      	movs	r3, #16
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004256:	2302      	movs	r3, #2
 8004258:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800425a:	2300      	movs	r3, #0
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800425e:	2302      	movs	r3, #2
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004262:	230e      	movs	r3, #14
 8004264:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004266:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800426a:	4619      	mov	r1, r3
 800426c:	4828      	ldr	r0, [pc, #160]	; (8004310 <BSP_LCD_MspInit+0x1a0>)
 800426e:	f003 fbe9 	bl	8007a44 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8004272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004276:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004278:	2302      	movs	r3, #2
 800427a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800427c:	2309      	movs	r3, #9
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004284:	4619      	mov	r1, r3
 8004286:	4823      	ldr	r0, [pc, #140]	; (8004314 <BSP_LCD_MspInit+0x1a4>)
 8004288:	f003 fbdc 	bl	8007a44 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800428c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004292:	2302      	movs	r3, #2
 8004294:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004296:	230e      	movs	r3, #14
 8004298:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800429a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800429e:	4619      	mov	r1, r3
 80042a0:	481d      	ldr	r0, [pc, #116]	; (8004318 <BSP_LCD_MspInit+0x1a8>)
 80042a2:	f003 fbcf 	bl	8007a44 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80042a6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80042ac:	2302      	movs	r3, #2
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80042b0:	230e      	movs	r3, #14
 80042b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80042b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042b8:	4619      	mov	r1, r3
 80042ba:	4818      	ldr	r0, [pc, #96]	; (800431c <BSP_LCD_MspInit+0x1ac>)
 80042bc:	f003 fbc2 	bl	8007a44 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80042c0:	23f7      	movs	r3, #247	; 0xf7
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80042c4:	2302      	movs	r3, #2
 80042c6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80042c8:	230e      	movs	r3, #14
 80042ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80042cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042d0:	4619      	mov	r1, r3
 80042d2:	4813      	ldr	r0, [pc, #76]	; (8004320 <BSP_LCD_MspInit+0x1b0>)
 80042d4:	f003 fbb6 	bl	8007a44 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80042d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80042de:	2301      	movs	r3, #1
 80042e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80042e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042e6:	4619      	mov	r1, r3
 80042e8:	480b      	ldr	r0, [pc, #44]	; (8004318 <BSP_LCD_MspInit+0x1a8>)
 80042ea:	f003 fbab 	bl	8007a44 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80042ee:	2308      	movs	r3, #8
 80042f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80042f2:	2301      	movs	r3, #1
 80042f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80042f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042fa:	4619      	mov	r1, r3
 80042fc:	4808      	ldr	r0, [pc, #32]	; (8004320 <BSP_LCD_MspInit+0x1b0>)
 80042fe:	f003 fba1 	bl	8007a44 <HAL_GPIO_Init>
}
 8004302:	bf00      	nop
 8004304:	3740      	adds	r7, #64	; 0x40
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800
 8004310:	40021000 	.word	0x40021000
 8004314:	40021800 	.word	0x40021800
 8004318:	40022000 	.word	0x40022000
 800431c:	40022400 	.word	0x40022400
 8004320:	40022800 	.word	0x40022800

08004324 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <BSP_LCD_ClockConfig+0x34>)
 8004330:	2208      	movs	r2, #8
 8004332:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004334:	4b08      	ldr	r3, [pc, #32]	; (8004358 <BSP_LCD_ClockConfig+0x34>)
 8004336:	22c0      	movs	r2, #192	; 0xc0
 8004338:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <BSP_LCD_ClockConfig+0x34>)
 800433c:	2205      	movs	r2, #5
 800433e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <BSP_LCD_ClockConfig+0x34>)
 8004342:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004348:	4803      	ldr	r0, [pc, #12]	; (8004358 <BSP_LCD_ClockConfig+0x34>)
 800434a:	f005 fd59 	bl	8009e00 <HAL_RCCEx_PeriphCLKConfig>
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	200004d0 	.word	0x200004d0

0800435c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	603a      	str	r2, [r7, #0]
 8004366:	80fb      	strh	r3, [r7, #6]
 8004368:	460b      	mov	r3, r1
 800436a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004374:	4b53      	ldr	r3, [pc, #332]	; (80044c4 <DrawChar+0x168>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4953      	ldr	r1, [pc, #332]	; (80044c8 <DrawChar+0x16c>)
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	3308      	adds	r3, #8
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	88db      	ldrh	r3, [r3, #6]
 800438a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800438c:	4b4d      	ldr	r3, [pc, #308]	; (80044c4 <DrawChar+0x168>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	494d      	ldr	r1, [pc, #308]	; (80044c8 <DrawChar+0x16c>)
 8004392:	4613      	mov	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	3308      	adds	r3, #8
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	889b      	ldrh	r3, [r3, #4]
 80043a2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80043a4:	8a3b      	ldrh	r3, [r7, #16]
 80043a6:	3307      	adds	r3, #7
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	da00      	bge.n	80043ae <DrawChar+0x52>
 80043ac:	3307      	adds	r3, #7
 80043ae:	10db      	asrs	r3, r3, #3
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	8a3b      	ldrh	r3, [r7, #16]
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	e076      	b.n	80044b2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80043c4:	8a3b      	ldrh	r3, [r7, #16]
 80043c6:	3307      	adds	r3, #7
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	da00      	bge.n	80043ce <DrawChar+0x72>
 80043cc:	3307      	adds	r3, #7
 80043ce:	10db      	asrs	r3, r3, #3
 80043d0:	461a      	mov	r2, r3
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	fb03 f302 	mul.w	r3, r3, r2
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	4413      	add	r3, r2
 80043dc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80043de:	8a3b      	ldrh	r3, [r7, #16]
 80043e0:	3307      	adds	r3, #7
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	da00      	bge.n	80043e8 <DrawChar+0x8c>
 80043e6:	3307      	adds	r3, #7
 80043e8:	10db      	asrs	r3, r3, #3
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d002      	beq.n	80043f4 <DrawChar+0x98>
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d004      	beq.n	80043fc <DrawChar+0xa0>
 80043f2:	e00c      	b.n	800440e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	617b      	str	r3, [r7, #20]
      break;
 80043fa:	e016      	b.n	800442a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	3201      	adds	r2, #1
 8004406:	7812      	ldrb	r2, [r2, #0]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
      break;
 800440c:	e00d      	b.n	800442a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	041a      	lsls	r2, r3, #16
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	3301      	adds	r3, #1
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	4313      	orrs	r3, r2
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	3202      	adds	r2, #2
 8004422:	7812      	ldrb	r2, [r2, #0]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
      break;
 8004428:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	e036      	b.n	800449e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004430:	8a3a      	ldrh	r2, [r7, #16]
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	1ad2      	subs	r2, r2, r3
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	4413      	add	r3, r2
 800443a:	3b01      	subs	r3, #1
 800443c:	2201      	movs	r2, #1
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	461a      	mov	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d012      	beq.n	8004472 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	b29a      	uxth	r2, r3
 8004450:	88fb      	ldrh	r3, [r7, #6]
 8004452:	4413      	add	r3, r2
 8004454:	b298      	uxth	r0, r3
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <DrawChar+0x168>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	491b      	ldr	r1, [pc, #108]	; (80044c8 <DrawChar+0x16c>)
 800445c:	4613      	mov	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	88bb      	ldrh	r3, [r7, #4]
 800446a:	4619      	mov	r1, r3
 800446c:	f7ff fc84 	bl	8003d78 <BSP_LCD_DrawPixel>
 8004470:	e012      	b.n	8004498 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	b29a      	uxth	r2, r3
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	4413      	add	r3, r2
 800447a:	b298      	uxth	r0, r3
 800447c:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <DrawChar+0x168>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4911      	ldr	r1, [pc, #68]	; (80044c8 <DrawChar+0x16c>)
 8004482:	4613      	mov	r3, r2
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	3304      	adds	r3, #4
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	88bb      	ldrh	r3, [r7, #4]
 8004492:	4619      	mov	r1, r3
 8004494:	f7ff fc70 	bl	8003d78 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	3301      	adds	r3, #1
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	8a3b      	ldrh	r3, [r7, #16]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d3c4      	bcc.n	8004430 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80044a6:	88bb      	ldrh	r3, [r7, #4]
 80044a8:	3301      	adds	r3, #1
 80044aa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3301      	adds	r3, #1
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	8a7b      	ldrh	r3, [r7, #18]
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d384      	bcc.n	80043c4 <DrawChar+0x68>
  }
}
 80044ba:	bf00      	nop
 80044bc:	bf00      	nop
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	200004b4 	.word	0x200004b4
 80044c8:	200004b8 	.word	0x200004b8

080044cc <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b08b      	sub	sp, #44	; 0x2c
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4604      	mov	r4, r0
 80044d4:	4608      	mov	r0, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	461a      	mov	r2, r3
 80044da:	4623      	mov	r3, r4
 80044dc:	80fb      	strh	r3, [r7, #6]
 80044de:	4603      	mov	r3, r0
 80044e0:	80bb      	strh	r3, [r7, #4]
 80044e2:	460b      	mov	r3, r1
 80044e4:	807b      	strh	r3, [r7, #2]
 80044e6:	4613      	mov	r3, r2
 80044e8:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80044ea:	2300      	movs	r3, #0
 80044ec:	823b      	strh	r3, [r7, #16]
 80044ee:	2300      	movs	r3, #0
 80044f0:	81fb      	strh	r3, [r7, #14]
 80044f2:	2300      	movs	r3, #0
 80044f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80044f6:	2300      	movs	r3, #0
 80044f8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80044fa:	2300      	movs	r3, #0
 80044fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80044fe:	2300      	movs	r3, #0
 8004500:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 8004502:	2300      	movs	r3, #0
 8004504:	83fb      	strh	r3, [r7, #30]
 8004506:	2300      	movs	r3, #0
 8004508:	83bb      	strh	r3, [r7, #28]
 800450a:	2300      	movs	r3, #0
 800450c:	837b      	strh	r3, [r7, #26]
 800450e:	2300      	movs	r3, #0
 8004510:	833b      	strh	r3, [r7, #24]
 8004512:	2300      	movs	r3, #0
 8004514:	82fb      	strh	r3, [r7, #22]
 8004516:	2300      	movs	r3, #0
 8004518:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800451e:	88ba      	ldrh	r2, [r7, #4]
 8004520:	88fb      	ldrh	r3, [r7, #6]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	bfb8      	it	lt
 8004528:	425b      	neglt	r3, r3
 800452a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800452c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800452e:	883b      	ldrh	r3, [r7, #0]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	bfb8      	it	lt
 8004536:	425b      	neglt	r3, r3
 8004538:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 800453a:	88fb      	ldrh	r3, [r7, #6]
 800453c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800453e:	883b      	ldrh	r3, [r7, #0]
 8004540:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8004542:	88ba      	ldrh	r2, [r7, #4]
 8004544:	88fb      	ldrh	r3, [r7, #6]
 8004546:	429a      	cmp	r2, r3
 8004548:	d304      	bcc.n	8004554 <FillTriangle+0x88>
  {
    xinc1 = 1;
 800454a:	2301      	movs	r3, #1
 800454c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800454e:	2301      	movs	r3, #1
 8004550:	843b      	strh	r3, [r7, #32]
 8004552:	e005      	b.n	8004560 <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8004554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004558:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800455a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800455e:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8004560:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004562:	883b      	ldrh	r3, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d304      	bcc.n	8004572 <FillTriangle+0xa6>
  {
    yinc1 = 1;
 8004568:	2301      	movs	r3, #1
 800456a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 800456c:	2301      	movs	r3, #1
 800456e:	83bb      	strh	r3, [r7, #28]
 8004570:	e005      	b.n	800457e <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8004572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004576:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8004578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800457c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800457e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004582:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004586:	429a      	cmp	r2, r3
 8004588:	db11      	blt.n	80045ae <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800458a:	2300      	movs	r3, #0
 800458c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800458e:	2300      	movs	r3, #0
 8004590:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8004592:	8a3b      	ldrh	r3, [r7, #16]
 8004594:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8004596:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	da00      	bge.n	80045a0 <FillTriangle+0xd4>
 800459e:	3301      	adds	r3, #1
 80045a0:	105b      	asrs	r3, r3, #1
 80045a2:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 80045a4:	89fb      	ldrh	r3, [r7, #14]
 80045a6:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 80045a8:	8a3b      	ldrh	r3, [r7, #16]
 80045aa:	82bb      	strh	r3, [r7, #20]
 80045ac:	e010      	b.n	80045d0 <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80045ae:	2300      	movs	r3, #0
 80045b0:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80045b2:	2300      	movs	r3, #0
 80045b4:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80045b6:	89fb      	ldrh	r3, [r7, #14]
 80045b8:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80045ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	da00      	bge.n	80045c4 <FillTriangle+0xf8>
 80045c2:	3301      	adds	r3, #1
 80045c4:	105b      	asrs	r3, r3, #1
 80045c6:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 80045c8:	8a3b      	ldrh	r3, [r7, #16]
 80045ca:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 80045cc:	89fb      	ldrh	r3, [r7, #14]
 80045ce:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80045d0:	2300      	movs	r3, #0
 80045d2:	827b      	strh	r3, [r7, #18]
 80045d4:	e02f      	b.n	8004636 <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 80045d6:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80045d8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80045da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80045dc:	887a      	ldrh	r2, [r7, #2]
 80045de:	f7ff faff 	bl	8003be0 <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 80045e2:	8b3a      	ldrh	r2, [r7, #24]
 80045e4:	8afb      	ldrh	r3, [r7, #22]
 80045e6:	4413      	add	r3, r2
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 80045ec:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80045f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	db0e      	blt.n	8004616 <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 80045f8:	8b3a      	ldrh	r2, [r7, #24]
 80045fa:	8b7b      	ldrh	r3, [r7, #26]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	b29b      	uxth	r3, r3
 8004600:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8004602:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004604:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004606:	4413      	add	r3, r2
 8004608:	b29b      	uxth	r3, r3
 800460a:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 800460c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800460e:	8bfb      	ldrh	r3, [r7, #30]
 8004610:	4413      	add	r3, r2
 8004612:	b29b      	uxth	r3, r3
 8004614:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8004616:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004618:	8c3b      	ldrh	r3, [r7, #32]
 800461a:	4413      	add	r3, r2
 800461c:	b29b      	uxth	r3, r3
 800461e:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8004620:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004622:	8bbb      	ldrh	r3, [r7, #28]
 8004624:	4413      	add	r3, r2
 8004626:	b29b      	uxth	r3, r3
 8004628:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800462a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800462e:	b29b      	uxth	r3, r3
 8004630:	3301      	adds	r3, #1
 8004632:	b29b      	uxth	r3, r3
 8004634:	827b      	strh	r3, [r7, #18]
 8004636:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800463a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800463e:	429a      	cmp	r2, r3
 8004640:	ddc9      	ble.n	80045d6 <FillTriangle+0x10a>
  } 
}
 8004642:	bf00      	nop
 8004644:	bf00      	nop
 8004646:	372c      	adds	r7, #44	; 0x2c
 8004648:	46bd      	mov	sp, r7
 800464a:	bd90      	pop	{r4, r7, pc}

0800464c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800465a:	4b1e      	ldr	r3, [pc, #120]	; (80046d4 <LL_FillBuffer+0x88>)
 800465c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004660:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004662:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <LL_FillBuffer+0x8c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <LL_FillBuffer+0x90>)
 8004668:	2134      	movs	r1, #52	; 0x34
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	3348      	adds	r3, #72	; 0x48
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d103      	bne.n	8004680 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004678:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <LL_FillBuffer+0x88>)
 800467a:	2202      	movs	r2, #2
 800467c:	609a      	str	r2, [r3, #8]
 800467e:	e002      	b.n	8004686 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004680:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <LL_FillBuffer+0x88>)
 8004682:	2200      	movs	r2, #0
 8004684:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004686:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <LL_FillBuffer+0x88>)
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800468c:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <LL_FillBuffer+0x88>)
 800468e:	4a14      	ldr	r2, [pc, #80]	; (80046e0 <LL_FillBuffer+0x94>)
 8004690:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004692:	4810      	ldr	r0, [pc, #64]	; (80046d4 <LL_FillBuffer+0x88>)
 8004694:	f002 fe3a 	bl	800730c <HAL_DMA2D_Init>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d115      	bne.n	80046ca <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	480c      	ldr	r0, [pc, #48]	; (80046d4 <LL_FillBuffer+0x88>)
 80046a2:	f003 f8a1 	bl	80077e8 <HAL_DMA2D_ConfigLayer>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10e      	bne.n	80046ca <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69f9      	ldr	r1, [r7, #28]
 80046b6:	4807      	ldr	r0, [pc, #28]	; (80046d4 <LL_FillBuffer+0x88>)
 80046b8:	f002 fe72 	bl	80073a0 <HAL_DMA2D_Start>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d103      	bne.n	80046ca <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80046c2:	210a      	movs	r1, #10
 80046c4:	4803      	ldr	r0, [pc, #12]	; (80046d4 <LL_FillBuffer+0x88>)
 80046c6:	f002 fe96 	bl	80073f6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000474 	.word	0x20000474
 80046d8:	200004b4 	.word	0x200004b4
 80046dc:	20004acc 	.word	0x20004acc
 80046e0:	4002b000 	.word	0x4002b000

080046e4 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80046f2:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <LL_ConvertLineToARGB8888+0x80>)
 80046f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046f8:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80046fa:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <LL_ConvertLineToARGB8888+0x80>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8004700:	4b18      	ldr	r3, [pc, #96]	; (8004764 <LL_ConvertLineToARGB8888+0x80>)
 8004702:	2200      	movs	r2, #0
 8004704:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004706:	4b17      	ldr	r3, [pc, #92]	; (8004764 <LL_ConvertLineToARGB8888+0x80>)
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 800470c:	4b15      	ldr	r3, [pc, #84]	; (8004764 <LL_ConvertLineToARGB8888+0x80>)
 800470e:	22ff      	movs	r2, #255	; 0xff
 8004710:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8004712:	4a14      	ldr	r2, [pc, #80]	; (8004764 <LL_ConvertLineToARGB8888+0x80>)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8004718:	4b12      	ldr	r3, [pc, #72]	; (8004764 <LL_ConvertLineToARGB8888+0x80>)
 800471a:	2200      	movs	r2, #0
 800471c:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800471e:	4b11      	ldr	r3, [pc, #68]	; (8004764 <LL_ConvertLineToARGB8888+0x80>)
 8004720:	4a11      	ldr	r2, [pc, #68]	; (8004768 <LL_ConvertLineToARGB8888+0x84>)
 8004722:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004724:	480f      	ldr	r0, [pc, #60]	; (8004764 <LL_ConvertLineToARGB8888+0x80>)
 8004726:	f002 fdf1 	bl	800730c <HAL_DMA2D_Init>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d115      	bne.n	800475c <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8004730:	2101      	movs	r1, #1
 8004732:	480c      	ldr	r0, [pc, #48]	; (8004764 <LL_ConvertLineToARGB8888+0x80>)
 8004734:	f003 f858 	bl	80077e8 <HAL_DMA2D_ConfigLayer>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10e      	bne.n	800475c <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	2301      	movs	r3, #1
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4806      	ldr	r0, [pc, #24]	; (8004764 <LL_ConvertLineToARGB8888+0x80>)
 800474a:	f002 fe29 	bl	80073a0 <HAL_DMA2D_Start>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004754:	210a      	movs	r1, #10
 8004756:	4803      	ldr	r0, [pc, #12]	; (8004764 <LL_ConvertLineToARGB8888+0x80>)
 8004758:	f002 fe4d 	bl	80073f6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800475c:	bf00      	nop
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000474 	.word	0x20000474
 8004768:	4002b000 	.word	0x4002b000

0800476c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004770:	4b29      	ldr	r3, [pc, #164]	; (8004818 <BSP_SDRAM_Init+0xac>)
 8004772:	4a2a      	ldr	r2, [pc, #168]	; (800481c <BSP_SDRAM_Init+0xb0>)
 8004774:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004776:	4b2a      	ldr	r3, [pc, #168]	; (8004820 <BSP_SDRAM_Init+0xb4>)
 8004778:	2202      	movs	r2, #2
 800477a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800477c:	4b28      	ldr	r3, [pc, #160]	; (8004820 <BSP_SDRAM_Init+0xb4>)
 800477e:	2207      	movs	r2, #7
 8004780:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004782:	4b27      	ldr	r3, [pc, #156]	; (8004820 <BSP_SDRAM_Init+0xb4>)
 8004784:	2204      	movs	r2, #4
 8004786:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004788:	4b25      	ldr	r3, [pc, #148]	; (8004820 <BSP_SDRAM_Init+0xb4>)
 800478a:	2207      	movs	r2, #7
 800478c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800478e:	4b24      	ldr	r3, [pc, #144]	; (8004820 <BSP_SDRAM_Init+0xb4>)
 8004790:	2202      	movs	r2, #2
 8004792:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004794:	4b22      	ldr	r3, [pc, #136]	; (8004820 <BSP_SDRAM_Init+0xb4>)
 8004796:	2202      	movs	r2, #2
 8004798:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800479a:	4b21      	ldr	r3, [pc, #132]	; (8004820 <BSP_SDRAM_Init+0xb4>)
 800479c:	2202      	movs	r2, #2
 800479e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80047a0:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <BSP_SDRAM_Init+0xac>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80047a6:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <BSP_SDRAM_Init+0xac>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80047ac:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <BSP_SDRAM_Init+0xac>)
 80047ae:	2204      	movs	r2, #4
 80047b0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80047b2:	4b19      	ldr	r3, [pc, #100]	; (8004818 <BSP_SDRAM_Init+0xac>)
 80047b4:	2210      	movs	r2, #16
 80047b6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80047b8:	4b17      	ldr	r3, [pc, #92]	; (8004818 <BSP_SDRAM_Init+0xac>)
 80047ba:	2240      	movs	r2, #64	; 0x40
 80047bc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80047be:	4b16      	ldr	r3, [pc, #88]	; (8004818 <BSP_SDRAM_Init+0xac>)
 80047c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047c4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80047c6:	4b14      	ldr	r3, [pc, #80]	; (8004818 <BSP_SDRAM_Init+0xac>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80047cc:	4b12      	ldr	r3, [pc, #72]	; (8004818 <BSP_SDRAM_Init+0xac>)
 80047ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047d2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80047d4:	4b10      	ldr	r3, [pc, #64]	; (8004818 <BSP_SDRAM_Init+0xac>)
 80047d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80047dc:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <BSP_SDRAM_Init+0xac>)
 80047de:	2200      	movs	r2, #0
 80047e0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80047e2:	2100      	movs	r1, #0
 80047e4:	480c      	ldr	r0, [pc, #48]	; (8004818 <BSP_SDRAM_Init+0xac>)
 80047e6:	f000 f87f 	bl	80048e8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80047ea:	490d      	ldr	r1, [pc, #52]	; (8004820 <BSP_SDRAM_Init+0xb4>)
 80047ec:	480a      	ldr	r0, [pc, #40]	; (8004818 <BSP_SDRAM_Init+0xac>)
 80047ee:	f006 facf 	bl	800ad90 <HAL_SDRAM_Init>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <BSP_SDRAM_Init+0xb8>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	e002      	b.n	8004806 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004800:	4b08      	ldr	r3, [pc, #32]	; (8004824 <BSP_SDRAM_Init+0xb8>)
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004806:	f240 6003 	movw	r0, #1539	; 0x603
 800480a:	f000 f80d 	bl	8004828 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <BSP_SDRAM_Init+0xb8>)
 8004810:	781b      	ldrb	r3, [r3, #0]
}
 8004812:	4618      	mov	r0, r3
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20004b74 	.word	0x20004b74
 800481c:	a0000140 	.word	0xa0000140
 8004820:	20000554 	.word	0x20000554
 8004824:	2000003c 	.word	0x2000003c

08004828 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004834:	4b2a      	ldr	r3, [pc, #168]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800483a:	4b29      	ldr	r3, [pc, #164]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800483c:	2210      	movs	r2, #16
 800483e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004840:	4b27      	ldr	r3, [pc, #156]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004842:	2201      	movs	r2, #1
 8004844:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004846:	4b26      	ldr	r3, [pc, #152]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004848:	2200      	movs	r2, #0
 800484a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800484c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004850:	4923      	ldr	r1, [pc, #140]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004852:	4824      	ldr	r0, [pc, #144]	; (80048e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004854:	f006 fad0 	bl	800adf8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004858:	2001      	movs	r0, #1
 800485a:	f001 fb43 	bl	8005ee4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800485e:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004860:	2202      	movs	r2, #2
 8004862:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004864:	4b1e      	ldr	r3, [pc, #120]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004866:	2210      	movs	r2, #16
 8004868:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800486a:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800486c:	2201      	movs	r2, #1
 800486e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004870:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004872:	2200      	movs	r2, #0
 8004874:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800487a:	4919      	ldr	r1, [pc, #100]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800487c:	4819      	ldr	r0, [pc, #100]	; (80048e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800487e:	f006 fabb 	bl	800adf8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004882:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004884:	2203      	movs	r2, #3
 8004886:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800488a:	2210      	movs	r2, #16
 800488c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800488e:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004890:	2208      	movs	r2, #8
 8004892:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004894:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004896:	2200      	movs	r2, #0
 8004898:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800489a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800489e:	4910      	ldr	r1, [pc, #64]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80048a0:	4810      	ldr	r0, [pc, #64]	; (80048e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80048a2:	f006 faa9 	bl	800adf8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80048a6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80048aa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80048ae:	2204      	movs	r2, #4
 80048b0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80048b4:	2210      	movs	r2, #16
 80048b6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80048b8:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4a07      	ldr	r2, [pc, #28]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80048c2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80048c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048c8:	4905      	ldr	r1, [pc, #20]	; (80048e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80048ca:	4806      	ldr	r0, [pc, #24]	; (80048e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80048cc:	f006 fa94 	bl	800adf8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4804      	ldr	r0, [pc, #16]	; (80048e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80048d4:	f006 fac5 	bl	800ae62 <HAL_SDRAM_ProgramRefreshRate>
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000570 	.word	0x20000570
 80048e4:	20004b74 	.word	0x20004b74

080048e8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b090      	sub	sp, #64	; 0x40
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80048f2:	4b70      	ldr	r3, [pc, #448]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	4a6f      	ldr	r2, [pc, #444]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	6393      	str	r3, [r2, #56]	; 0x38
 80048fe:	4b6d      	ldr	r3, [pc, #436]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800490a:	4b6a      	ldr	r3, [pc, #424]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	4a69      	ldr	r2, [pc, #420]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004910:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004914:	6313      	str	r3, [r2, #48]	; 0x30
 8004916:	4b67      	ldr	r3, [pc, #412]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004922:	4b64      	ldr	r3, [pc, #400]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	4a63      	ldr	r2, [pc, #396]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004928:	f043 0304 	orr.w	r3, r3, #4
 800492c:	6313      	str	r3, [r2, #48]	; 0x30
 800492e:	4b61      	ldr	r3, [pc, #388]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	623b      	str	r3, [r7, #32]
 8004938:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800493a:	4b5e      	ldr	r3, [pc, #376]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	4a5d      	ldr	r2, [pc, #372]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004940:	f043 0308 	orr.w	r3, r3, #8
 8004944:	6313      	str	r3, [r2, #48]	; 0x30
 8004946:	4b5b      	ldr	r3, [pc, #364]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004952:	4b58      	ldr	r3, [pc, #352]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	4a57      	ldr	r2, [pc, #348]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004958:	f043 0310 	orr.w	r3, r3, #16
 800495c:	6313      	str	r3, [r2, #48]	; 0x30
 800495e:	4b55      	ldr	r3, [pc, #340]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800496a:	4b52      	ldr	r3, [pc, #328]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	4a51      	ldr	r2, [pc, #324]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004970:	f043 0320 	orr.w	r3, r3, #32
 8004974:	6313      	str	r3, [r2, #48]	; 0x30
 8004976:	4b4f      	ldr	r3, [pc, #316]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004982:	4b4c      	ldr	r3, [pc, #304]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	4a4b      	ldr	r2, [pc, #300]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800498c:	6313      	str	r3, [r2, #48]	; 0x30
 800498e:	4b49      	ldr	r3, [pc, #292]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800499a:	4b46      	ldr	r3, [pc, #280]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	4a45      	ldr	r2, [pc, #276]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 80049a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a4:	6313      	str	r3, [r2, #48]	; 0x30
 80049a6:	4b43      	ldr	r3, [pc, #268]	; (8004ab4 <BSP_SDRAM_MspInit+0x1cc>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80049b2:	2302      	movs	r3, #2
 80049b4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80049b6:	2301      	movs	r3, #1
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80049ba:	2302      	movs	r3, #2
 80049bc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80049be:	230c      	movs	r3, #12
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80049c2:	2308      	movs	r3, #8
 80049c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80049c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049ca:	4619      	mov	r1, r3
 80049cc:	483a      	ldr	r0, [pc, #232]	; (8004ab8 <BSP_SDRAM_MspInit+0x1d0>)
 80049ce:	f003 f839 	bl	8007a44 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80049d2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80049d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80049d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049dc:	4619      	mov	r1, r3
 80049de:	4837      	ldr	r0, [pc, #220]	; (8004abc <BSP_SDRAM_MspInit+0x1d4>)
 80049e0:	f003 f830 	bl	8007a44 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80049e4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80049ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049ee:	4619      	mov	r1, r3
 80049f0:	4833      	ldr	r0, [pc, #204]	; (8004ac0 <BSP_SDRAM_MspInit+0x1d8>)
 80049f2:	f003 f827 	bl	8007a44 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80049f6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80049fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a00:	4619      	mov	r1, r3
 8004a02:	4830      	ldr	r0, [pc, #192]	; (8004ac4 <BSP_SDRAM_MspInit+0x1dc>)
 8004a04:	f003 f81e 	bl	8007a44 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004a08:	f248 1333 	movw	r3, #33075	; 0x8133
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a12:	4619      	mov	r1, r3
 8004a14:	482c      	ldr	r0, [pc, #176]	; (8004ac8 <BSP_SDRAM_MspInit+0x1e0>)
 8004a16:	f003 f815 	bl	8007a44 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004a1a:	2328      	movs	r3, #40	; 0x28
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a22:	4619      	mov	r1, r3
 8004a24:	4829      	ldr	r0, [pc, #164]	; (8004acc <BSP_SDRAM_MspInit+0x1e4>)
 8004a26:	f003 f80d 	bl	8007a44 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004a2a:	4b29      	ldr	r3, [pc, #164]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004a30:	4b27      	ldr	r3, [pc, #156]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a32:	2280      	movs	r2, #128	; 0x80
 8004a34:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004a36:	4b26      	ldr	r3, [pc, #152]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a3c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004a3e:	4b24      	ldr	r3, [pc, #144]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a44:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004a46:	4b22      	ldr	r3, [pc, #136]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a4c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004a4e:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a54:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004a56:	4b1e      	ldr	r3, [pc, #120]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004a5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a62:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004a64:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004a6a:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004a70:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004a76:	4b16      	ldr	r3, [pc, #88]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004a7c:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <BSP_SDRAM_MspInit+0x1ec>)
 8004a80:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a12      	ldr	r2, [pc, #72]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
 8004a88:	4a11      	ldr	r2, [pc, #68]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004a8e:	4810      	ldr	r0, [pc, #64]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a90:	f002 f914 	bl	8006cbc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004a94:	480e      	ldr	r0, [pc, #56]	; (8004ad0 <BSP_SDRAM_MspInit+0x1e8>)
 8004a96:	f002 f863 	bl	8006b60 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	210f      	movs	r1, #15
 8004a9e:	2038      	movs	r0, #56	; 0x38
 8004aa0:	f001 fdb4 	bl	800660c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004aa4:	2038      	movs	r0, #56	; 0x38
 8004aa6:	f001 fdcd 	bl	8006644 <HAL_NVIC_EnableIRQ>
}
 8004aaa:	bf00      	nop
 8004aac:	3740      	adds	r7, #64	; 0x40
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40020800 	.word	0x40020800
 8004abc:	40020c00 	.word	0x40020c00
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40021400 	.word	0x40021400
 8004ac8:	40021800 	.word	0x40021800
 8004acc:	40021c00 	.word	0x40021c00
 8004ad0:	20000580 	.word	0x20000580
 8004ad4:	40026410 	.word	0x40026410

08004ad8 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	460a      	mov	r2, r1
 8004ae2:	80fb      	strh	r3, [r7, #6]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004aec:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <BSP_TS_Init+0x68>)
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004af2:	4a14      	ldr	r2, [pc, #80]	; (8004b44 <BSP_TS_Init+0x6c>)
 8004af4:	88bb      	ldrh	r3, [r7, #4]
 8004af6:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004af8:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <BSP_TS_Init+0x70>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2070      	movs	r0, #112	; 0x70
 8004afe:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004b00:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <BSP_TS_Init+0x70>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2070      	movs	r0, #112	; 0x70
 8004b06:	4798      	blx	r3
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b51      	cmp	r3, #81	; 0x51
 8004b0c:	d111      	bne.n	8004b32 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004b0e:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <BSP_TS_Init+0x74>)
 8004b10:	4a0d      	ldr	r2, [pc, #52]	; (8004b48 <BSP_TS_Init+0x70>)
 8004b12:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004b14:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <BSP_TS_Init+0x78>)
 8004b16:	2270      	movs	r2, #112	; 0x70
 8004b18:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004b1a:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <BSP_TS_Init+0x7c>)
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004b20:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <BSP_TS_Init+0x74>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <BSP_TS_Init+0x78>)
 8004b28:	7812      	ldrb	r2, [r2, #0]
 8004b2a:	b292      	uxth	r2, r2
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4798      	blx	r3
 8004b30:	e001      	b.n	8004b36 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004b32:	2303      	movs	r3, #3
 8004b34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	200005e4 	.word	0x200005e4
 8004b44:	200005e6 	.word	0x200005e6
 8004b48:	20000000 	.word	0x20000000
 8004b4c:	200005e0 	.word	0x200005e0
 8004b50:	200005e9 	.word	0x200005e9
 8004b54:	200005e8 	.word	0x200005e8

08004b58 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b097      	sub	sp, #92	; 0x5c
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004b72:	4b97      	ldr	r3, [pc, #604]	; (8004dd0 <BSP_TS_GetState+0x278>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	4a96      	ldr	r2, [pc, #600]	; (8004dd4 <BSP_TS_GetState+0x27c>)
 8004b7a:	7812      	ldrb	r2, [r2, #0]
 8004b7c:	b292      	uxth	r2, r2
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4798      	blx	r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	461a      	mov	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 81a8 	beq.w	8004ee4 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004b94:	2300      	movs	r3, #0
 8004b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b98:	e197      	b.n	8004eca <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004b9a:	4b8d      	ldr	r3, [pc, #564]	; (8004dd0 <BSP_TS_GetState+0x278>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	4a8c      	ldr	r2, [pc, #560]	; (8004dd4 <BSP_TS_GetState+0x27c>)
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	b290      	uxth	r0, r2
 8004ba6:	f107 0120 	add.w	r1, r7, #32
 8004baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bac:	0052      	lsls	r2, r2, #1
 8004bae:	188c      	adds	r4, r1, r2
 8004bb0:	f107 0114 	add.w	r1, r7, #20
 8004bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bb6:	0052      	lsls	r2, r2, #1
 8004bb8:	440a      	add	r2, r1
 8004bba:	4621      	mov	r1, r4
 8004bbc:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004bbe:	4b86      	ldr	r3, [pc, #536]	; (8004dd8 <BSP_TS_GetState+0x280>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d11b      	bne.n	8004bfe <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8004bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004bce:	4413      	add	r3, r2
 8004bd0:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004bdc:	440b      	add	r3, r1
 8004bde:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004bea:	4413      	add	r3, r2
 8004bec:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004bf8:	440b      	add	r3, r1
 8004bfa:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004bfe:	4b76      	ldr	r3, [pc, #472]	; (8004dd8 <BSP_TS_GetState+0x280>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d010      	beq.n	8004c2c <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8004c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004c12:	4413      	add	r3, r2
 8004c14:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004c18:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004c26:	440b      	add	r3, r1
 8004c28:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004c2c:	4b6a      	ldr	r3, [pc, #424]	; (8004dd8 <BSP_TS_GetState+0x280>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d010      	beq.n	8004c5a <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8004c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004c40:	4413      	add	r3, r2
 8004c42:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004c46:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004c54:	440b      	add	r3, r1
 8004c56:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004c5a:	4b5f      	ldr	r3, [pc, #380]	; (8004dd8 <BSP_TS_GetState+0x280>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01b      	beq.n	8004c9e <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8004c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004c6e:	4413      	add	r3, r2
 8004c70:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004c7c:	440b      	add	r3, r1
 8004c7e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004c98:	440b      	add	r3, r1
 8004c9a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004cac:	4619      	mov	r1, r3
 8004cae:	4a4b      	ldr	r2, [pc, #300]	; (8004ddc <BSP_TS_GetState+0x284>)
 8004cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb6:	4299      	cmp	r1, r3
 8004cb8:	d90e      	bls.n	8004cd8 <BSP_TS_GetState+0x180>
 8004cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004cc8:	4944      	ldr	r1, [pc, #272]	; (8004ddc <BSP_TS_GetState+0x284>)
 8004cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ccc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	e00d      	b.n	8004cf4 <BSP_TS_GetState+0x19c>
 8004cd8:	4a40      	ldr	r2, [pc, #256]	; (8004ddc <BSP_TS_GetState+0x284>)
 8004cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004cea:	440b      	add	r3, r1
 8004cec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004d00:	4413      	add	r3, r2
 8004d02:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004d06:	4619      	mov	r1, r3
 8004d08:	4a35      	ldr	r2, [pc, #212]	; (8004de0 <BSP_TS_GetState+0x288>)
 8004d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d10:	4299      	cmp	r1, r3
 8004d12:	d90e      	bls.n	8004d32 <BSP_TS_GetState+0x1da>
 8004d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004d22:	492f      	ldr	r1, [pc, #188]	; (8004de0 <BSP_TS_GetState+0x288>)
 8004d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	e00d      	b.n	8004d4e <BSP_TS_GetState+0x1f6>
 8004d32:	4a2b      	ldr	r2, [pc, #172]	; (8004de0 <BSP_TS_GetState+0x288>)
 8004d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004d44:	440b      	add	r3, r1
 8004d46:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8004d52:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004d56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d5a:	4413      	add	r3, r2
 8004d5c:	2b05      	cmp	r3, #5
 8004d5e:	dd17      	ble.n	8004d90 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8004d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004d68:	4413      	add	r3, r2
 8004d6a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4a1a      	ldr	r2, [pc, #104]	; (8004ddc <BSP_TS_GetState+0x284>)
 8004d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004d80:	4413      	add	r3, r2
 8004d82:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004d86:	4619      	mov	r1, r3
 8004d88:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <BSP_TS_GetState+0x288>)
 8004d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004d90:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <BSP_TS_GetState+0x27c>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b70      	cmp	r3, #112	; 0x70
 8004d96:	d125      	bne.n	8004de4 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8004d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004da0:	4413      	add	r3, r2
 8004da2:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	4413      	add	r3, r2
 8004dae:	460a      	mov	r2, r1
 8004db0:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004dba:	4413      	add	r3, r2
 8004dbc:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	4413      	add	r3, r2
 8004dca:	460a      	mov	r2, r1
 8004dcc:	809a      	strh	r2, [r3, #4]
 8004dce:	e02c      	b.n	8004e2a <BSP_TS_GetState+0x2d2>
 8004dd0:	200005e0 	.word	0x200005e0
 8004dd4:	200005e9 	.word	0x200005e9
 8004dd8:	200005e8 	.word	0x200005e8
 8004ddc:	200005ec 	.word	0x200005ec
 8004de0:	20000600 	.word	0x20000600
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004de4:	4b42      	ldr	r3, [pc, #264]	; (8004ef0 <BSP_TS_GetState+0x398>)
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	4619      	mov	r1, r3
 8004dea:	4a42      	ldr	r2, [pc, #264]	; (8004ef4 <BSP_TS_GetState+0x39c>)
 8004dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df2:	fb03 f301 	mul.w	r3, r3, r1
 8004df6:	0b1b      	lsrs	r3, r3, #12
 8004df8:	b299      	uxth	r1, r3
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	4413      	add	r3, r2
 8004e02:	460a      	mov	r2, r1
 8004e04:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8004e06:	4b3c      	ldr	r3, [pc, #240]	; (8004ef8 <BSP_TS_GetState+0x3a0>)
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4a3b      	ldr	r2, [pc, #236]	; (8004efc <BSP_TS_GetState+0x3a4>)
 8004e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e14:	fb03 f301 	mul.w	r3, r3, r1
 8004e18:	0b1b      	lsrs	r3, r3, #12
 8004e1a:	b299      	uxth	r1, r3
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e20:	3304      	adds	r3, #4
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	4413      	add	r3, r2
 8004e26:	460a      	mov	r2, r1
 8004e28:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8004e2a:	4b35      	ldr	r3, [pc, #212]	; (8004f00 <BSP_TS_GetState+0x3a8>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	b298      	uxth	r0, r3
 8004e30:	f107 010c 	add.w	r1, r7, #12
 8004e34:	f107 0210 	add.w	r2, r7, #16
 8004e38:	f107 0308 	add.w	r3, r7, #8
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e42:	f7fc fa01 	bl	8001248 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	b2d9      	uxtb	r1, r3
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4e:	4413      	add	r3, r2
 8004e50:	3316      	adds	r3, #22
 8004e52:	460a      	mov	r2, r1
 8004e54:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	b2d9      	uxtb	r1, r3
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5e:	4413      	add	r3, r2
 8004e60:	3320      	adds	r3, #32
 8004e62:	460a      	mov	r2, r1
 8004e64:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d827      	bhi.n	8004ebc <BSP_TS_GetState+0x364>
 8004e6c:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <BSP_TS_GetState+0x31c>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e93 	.word	0x08004e93
 8004e7c:	08004ea1 	.word	0x08004ea1
 8004e80:	08004eaf 	.word	0x08004eaf
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e88:	4413      	add	r3, r2
 8004e8a:	331b      	adds	r3, #27
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	701a      	strb	r2, [r3, #0]
          break;
 8004e90:	e018      	b.n	8004ec4 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e96:	4413      	add	r3, r2
 8004e98:	331b      	adds	r3, #27
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	701a      	strb	r2, [r3, #0]
          break;
 8004e9e:	e011      	b.n	8004ec4 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea4:	4413      	add	r3, r2
 8004ea6:	331b      	adds	r3, #27
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	701a      	strb	r2, [r3, #0]
          break;
 8004eac:	e00a      	b.n	8004ec4 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb2:	4413      	add	r3, r2
 8004eb4:	331b      	adds	r3, #27
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
          break;
 8004eba:	e003      	b.n	8004ec4 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8004ec2:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	f4ff ae61 	bcc.w	8004b9a <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f813 	bl	8004f04 <BSP_TS_Get_GestureId>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004ee4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3754      	adds	r7, #84	; 0x54
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd90      	pop	{r4, r7, pc}
 8004ef0:	200005e4 	.word	0x200005e4
 8004ef4:	200005ec 	.word	0x200005ec
 8004ef8:	200005e6 	.word	0x200005e6
 8004efc:	20000600 	.word	0x20000600
 8004f00:	200005e9 	.word	0x200005e9

08004f04 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004f14:	4b3b      	ldr	r3, [pc, #236]	; (8005004 <BSP_TS_Get_GestureId+0x100>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f107 0208 	add.w	r2, r7, #8
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fc f978 	bl	8001216 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b49      	cmp	r3, #73	; 0x49
 8004f2a:	d05e      	beq.n	8004fea <BSP_TS_Get_GestureId+0xe6>
 8004f2c:	2b49      	cmp	r3, #73	; 0x49
 8004f2e:	d860      	bhi.n	8004ff2 <BSP_TS_Get_GestureId+0xee>
 8004f30:	2b1c      	cmp	r3, #28
 8004f32:	d83f      	bhi.n	8004fb4 <BSP_TS_Get_GestureId+0xb0>
 8004f34:	2b1c      	cmp	r3, #28
 8004f36:	d85c      	bhi.n	8004ff2 <BSP_TS_Get_GestureId+0xee>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <BSP_TS_Get_GestureId+0x3c>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004fbb 	.word	0x08004fbb
 8004f44:	08004ff3 	.word	0x08004ff3
 8004f48:	08004ff3 	.word	0x08004ff3
 8004f4c:	08004ff3 	.word	0x08004ff3
 8004f50:	08004ff3 	.word	0x08004ff3
 8004f54:	08004ff3 	.word	0x08004ff3
 8004f58:	08004ff3 	.word	0x08004ff3
 8004f5c:	08004ff3 	.word	0x08004ff3
 8004f60:	08004ff3 	.word	0x08004ff3
 8004f64:	08004ff3 	.word	0x08004ff3
 8004f68:	08004ff3 	.word	0x08004ff3
 8004f6c:	08004ff3 	.word	0x08004ff3
 8004f70:	08004ff3 	.word	0x08004ff3
 8004f74:	08004ff3 	.word	0x08004ff3
 8004f78:	08004ff3 	.word	0x08004ff3
 8004f7c:	08004ff3 	.word	0x08004ff3
 8004f80:	08004fc3 	.word	0x08004fc3
 8004f84:	08004ff3 	.word	0x08004ff3
 8004f88:	08004ff3 	.word	0x08004ff3
 8004f8c:	08004ff3 	.word	0x08004ff3
 8004f90:	08004fcb 	.word	0x08004fcb
 8004f94:	08004ff3 	.word	0x08004ff3
 8004f98:	08004ff3 	.word	0x08004ff3
 8004f9c:	08004ff3 	.word	0x08004ff3
 8004fa0:	08004fd3 	.word	0x08004fd3
 8004fa4:	08004ff3 	.word	0x08004ff3
 8004fa8:	08004ff3 	.word	0x08004ff3
 8004fac:	08004ff3 	.word	0x08004ff3
 8004fb0:	08004fdb 	.word	0x08004fdb
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d014      	beq.n	8004fe2 <BSP_TS_Get_GestureId+0xde>
 8004fb8:	e01b      	b.n	8004ff2 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004fc0:	e01a      	b.n	8004ff8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004fc8:	e016      	b.n	8004ff8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004fd0:	e012      	b.n	8004ff8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004fd8:	e00e      	b.n	8004ff8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2204      	movs	r2, #4
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004fe0:	e00a      	b.n	8004ff8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2205      	movs	r2, #5
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004fe8:	e006      	b.n	8004ff8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2206      	movs	r2, #6
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004ff0:	e002      	b.n	8004ff8 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff6:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	200005e9 	.word	0x200005e9

08005008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800500e:	4b11      	ldr	r3, [pc, #68]	; (8005054 <HAL_MspInit+0x4c>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	4a10      	ldr	r2, [pc, #64]	; (8005054 <HAL_MspInit+0x4c>)
 8005014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005018:	6413      	str	r3, [r2, #64]	; 0x40
 800501a:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <HAL_MspInit+0x4c>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005022:	607b      	str	r3, [r7, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005026:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <HAL_MspInit+0x4c>)
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	4a0a      	ldr	r2, [pc, #40]	; (8005054 <HAL_MspInit+0x4c>)
 800502c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005030:	6453      	str	r3, [r2, #68]	; 0x44
 8005032:	4b08      	ldr	r3, [pc, #32]	; (8005054 <HAL_MspInit+0x4c>)
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800503e:	2200      	movs	r2, #0
 8005040:	210f      	movs	r1, #15
 8005042:	f06f 0001 	mvn.w	r0, #1
 8005046:	f001 fae1 	bl	800660c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40023800 	.word	0x40023800

08005058 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08c      	sub	sp, #48	; 0x30
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005060:	f107 031c 	add.w	r3, r7, #28
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a2a      	ldr	r2, [pc, #168]	; (8005120 <HAL_ADC_MspInit+0xc8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d124      	bne.n	80050c4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800507a:	4b2a      	ldr	r3, [pc, #168]	; (8005124 <HAL_ADC_MspInit+0xcc>)
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	4a29      	ldr	r2, [pc, #164]	; (8005124 <HAL_ADC_MspInit+0xcc>)
 8005080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005084:	6453      	str	r3, [r2, #68]	; 0x44
 8005086:	4b27      	ldr	r3, [pc, #156]	; (8005124 <HAL_ADC_MspInit+0xcc>)
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005092:	4b24      	ldr	r3, [pc, #144]	; (8005124 <HAL_ADC_MspInit+0xcc>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	4a23      	ldr	r2, [pc, #140]	; (8005124 <HAL_ADC_MspInit+0xcc>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	6313      	str	r3, [r2, #48]	; 0x30
 800509e:	4b21      	ldr	r3, [pc, #132]	; (8005124 <HAL_ADC_MspInit+0xcc>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80050aa:	2301      	movs	r3, #1
 80050ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ae:	2303      	movs	r3, #3
 80050b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b6:	f107 031c 	add.w	r3, r7, #28
 80050ba:	4619      	mov	r1, r3
 80050bc:	481a      	ldr	r0, [pc, #104]	; (8005128 <HAL_ADC_MspInit+0xd0>)
 80050be:	f002 fcc1 	bl	8007a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80050c2:	e029      	b.n	8005118 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a18      	ldr	r2, [pc, #96]	; (800512c <HAL_ADC_MspInit+0xd4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d124      	bne.n	8005118 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80050ce:	4b15      	ldr	r3, [pc, #84]	; (8005124 <HAL_ADC_MspInit+0xcc>)
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	4a14      	ldr	r2, [pc, #80]	; (8005124 <HAL_ADC_MspInit+0xcc>)
 80050d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050d8:	6453      	str	r3, [r2, #68]	; 0x44
 80050da:	4b12      	ldr	r3, [pc, #72]	; (8005124 <HAL_ADC_MspInit+0xcc>)
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80050e6:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <HAL_ADC_MspInit+0xcc>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	4a0e      	ldr	r2, [pc, #56]	; (8005124 <HAL_ADC_MspInit+0xcc>)
 80050ec:	f043 0320 	orr.w	r3, r3, #32
 80050f0:	6313      	str	r3, [r2, #48]	; 0x30
 80050f2:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <HAL_ADC_MspInit+0xcc>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80050fe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005104:	2303      	movs	r3, #3
 8005106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005108:	2300      	movs	r3, #0
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800510c:	f107 031c 	add.w	r3, r7, #28
 8005110:	4619      	mov	r1, r3
 8005112:	4807      	ldr	r0, [pc, #28]	; (8005130 <HAL_ADC_MspInit+0xd8>)
 8005114:	f002 fc96 	bl	8007a44 <HAL_GPIO_Init>
}
 8005118:	bf00      	nop
 800511a:	3730      	adds	r7, #48	; 0x30
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40012000 	.word	0x40012000
 8005124:	40023800 	.word	0x40023800
 8005128:	40020000 	.word	0x40020000
 800512c:	40012200 	.word	0x40012200
 8005130:	40021400 	.word	0x40021400

08005134 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	; 0x28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800513c:	f107 0314 	add.w	r3, r7, #20
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	605a      	str	r2, [r3, #4]
 8005146:	609a      	str	r2, [r3, #8]
 8005148:	60da      	str	r2, [r3, #12]
 800514a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a31      	ldr	r2, [pc, #196]	; (8005218 <HAL_DAC_MspInit+0xe4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d15c      	bne.n	8005210 <HAL_DAC_MspInit+0xdc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8005156:	4b31      	ldr	r3, [pc, #196]	; (800521c <HAL_DAC_MspInit+0xe8>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	4a30      	ldr	r2, [pc, #192]	; (800521c <HAL_DAC_MspInit+0xe8>)
 800515c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005160:	6413      	str	r3, [r2, #64]	; 0x40
 8005162:	4b2e      	ldr	r3, [pc, #184]	; (800521c <HAL_DAC_MspInit+0xe8>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800516e:	4b2b      	ldr	r3, [pc, #172]	; (800521c <HAL_DAC_MspInit+0xe8>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	4a2a      	ldr	r2, [pc, #168]	; (800521c <HAL_DAC_MspInit+0xe8>)
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	6313      	str	r3, [r2, #48]	; 0x30
 800517a:	4b28      	ldr	r3, [pc, #160]	; (800521c <HAL_DAC_MspInit+0xe8>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005186:	2310      	movs	r3, #16
 8005188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800518a:	2303      	movs	r3, #3
 800518c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005192:	f107 0314 	add.w	r3, r7, #20
 8005196:	4619      	mov	r1, r3
 8005198:	4821      	ldr	r0, [pc, #132]	; (8005220 <HAL_DAC_MspInit+0xec>)
 800519a:	f002 fc53 	bl	8007a44 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800519e:	4b21      	ldr	r3, [pc, #132]	; (8005224 <HAL_DAC_MspInit+0xf0>)
 80051a0:	4a21      	ldr	r2, [pc, #132]	; (8005228 <HAL_DAC_MspInit+0xf4>)
 80051a2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80051a4:	4b1f      	ldr	r3, [pc, #124]	; (8005224 <HAL_DAC_MspInit+0xf0>)
 80051a6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80051aa:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051ac:	4b1d      	ldr	r3, [pc, #116]	; (8005224 <HAL_DAC_MspInit+0xf0>)
 80051ae:	2240      	movs	r2, #64	; 0x40
 80051b0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <HAL_DAC_MspInit+0xf0>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80051b8:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <HAL_DAC_MspInit+0xf0>)
 80051ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051be:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80051c0:	4b18      	ldr	r3, [pc, #96]	; (8005224 <HAL_DAC_MspInit+0xf0>)
 80051c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051c6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80051c8:	4b16      	ldr	r3, [pc, #88]	; (8005224 <HAL_DAC_MspInit+0xf0>)
 80051ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051ce:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80051d0:	4b14      	ldr	r3, [pc, #80]	; (8005224 <HAL_DAC_MspInit+0xf0>)
 80051d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051d6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80051d8:	4b12      	ldr	r3, [pc, #72]	; (8005224 <HAL_DAC_MspInit+0xf0>)
 80051da:	2200      	movs	r2, #0
 80051dc:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051de:	4b11      	ldr	r3, [pc, #68]	; (8005224 <HAL_DAC_MspInit+0xf0>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80051e4:	480f      	ldr	r0, [pc, #60]	; (8005224 <HAL_DAC_MspInit+0xf0>)
 80051e6:	f001 fcbb 	bl	8006b60 <HAL_DMA_Init>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 80051f0:	f7fe f846 	bl	8003280 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a0b      	ldr	r2, [pc, #44]	; (8005224 <HAL_DAC_MspInit+0xf0>)
 80051f8:	609a      	str	r2, [r3, #8]
 80051fa:	4a0a      	ldr	r2, [pc, #40]	; (8005224 <HAL_DAC_MspInit+0xf0>)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8005200:	2200      	movs	r2, #0
 8005202:	210f      	movs	r1, #15
 8005204:	2036      	movs	r0, #54	; 0x36
 8005206:	f001 fa01 	bl	800660c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800520a:	2036      	movs	r0, #54	; 0x36
 800520c:	f001 fa1a 	bl	8006644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005210:	bf00      	nop
 8005212:	3728      	adds	r7, #40	; 0x28
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40007400 	.word	0x40007400
 800521c:	40023800 	.word	0x40023800
 8005220:	40020000 	.word	0x40020000
 8005224:	2000472c 	.word	0x2000472c
 8005228:	40026088 	.word	0x40026088

0800522c <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a0c      	ldr	r2, [pc, #48]	; (800526c <HAL_DAC_MspDeInit+0x40>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d111      	bne.n	8005262 <HAL_DAC_MspDeInit+0x36>
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 800523e:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <HAL_DAC_MspDeInit+0x44>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	4a0b      	ldr	r2, [pc, #44]	; (8005270 <HAL_DAC_MspDeInit+0x44>)
 8005244:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005248:	6413      	str	r3, [r2, #64]	; 0x40

    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800524a:	2110      	movs	r1, #16
 800524c:	4809      	ldr	r0, [pc, #36]	; (8005274 <HAL_DAC_MspDeInit+0x48>)
 800524e:	f002 fda5 	bl	8007d9c <HAL_GPIO_DeInit>

    /* DAC DMA DeInit */
    HAL_DMA_DeInit(hdac->DMA_Handle1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	4618      	mov	r0, r3
 8005258:	f001 fd30 	bl	8006cbc <HAL_DMA_DeInit>

    /* DAC interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 800525c:	2036      	movs	r0, #54	; 0x36
 800525e:	f001 f9ff 	bl	8006660 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }

}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40007400 	.word	0x40007400
 8005270:	40023800 	.word	0x40023800
 8005274:	40020000 	.word	0x40020000

08005278 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a0d      	ldr	r2, [pc, #52]	; (80052bc <HAL_DMA2D_MspInit+0x44>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d113      	bne.n	80052b2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800528a:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <HAL_DMA2D_MspInit+0x48>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	4a0c      	ldr	r2, [pc, #48]	; (80052c0 <HAL_DMA2D_MspInit+0x48>)
 8005290:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005294:	6313      	str	r3, [r2, #48]	; 0x30
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <HAL_DMA2D_MspInit+0x48>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80052a2:	2200      	movs	r2, #0
 80052a4:	2105      	movs	r1, #5
 80052a6:	205a      	movs	r0, #90	; 0x5a
 80052a8:	f001 f9b0 	bl	800660c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80052ac:	205a      	movs	r0, #90	; 0x5a
 80052ae:	f001 f9c9 	bl	8006644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80052b2:	bf00      	nop
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	4002b000 	.word	0x4002b000
 80052c0:	40023800 	.word	0x40023800

080052c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b0ac      	sub	sp, #176	; 0xb0
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	605a      	str	r2, [r3, #4]
 80052d6:	609a      	str	r2, [r3, #8]
 80052d8:	60da      	str	r2, [r3, #12]
 80052da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052dc:	f107 0318 	add.w	r3, r7, #24
 80052e0:	2284      	movs	r2, #132	; 0x84
 80052e2:	2100      	movs	r1, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f008 fcfb 	bl	800dce0 <memset>
  if(hi2c->Instance==I2C1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a44      	ldr	r2, [pc, #272]	; (8005400 <HAL_I2C_MspInit+0x13c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d13d      	bne.n	8005370 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80052f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80052fa:	2300      	movs	r3, #0
 80052fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052fe:	f107 0318 	add.w	r3, r7, #24
 8005302:	4618      	mov	r0, r3
 8005304:	f004 fd7c 	bl	8009e00 <HAL_RCCEx_PeriphCLKConfig>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800530e:	f7fd ffb7 	bl	8003280 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005312:	4b3c      	ldr	r3, [pc, #240]	; (8005404 <HAL_I2C_MspInit+0x140>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	4a3b      	ldr	r2, [pc, #236]	; (8005404 <HAL_I2C_MspInit+0x140>)
 8005318:	f043 0302 	orr.w	r3, r3, #2
 800531c:	6313      	str	r3, [r2, #48]	; 0x30
 800531e:	4b39      	ldr	r3, [pc, #228]	; (8005404 <HAL_I2C_MspInit+0x140>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800532a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800532e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005332:	2312      	movs	r3, #18
 8005334:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005338:	2300      	movs	r3, #0
 800533a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800533e:	2303      	movs	r3, #3
 8005340:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005344:	2304      	movs	r3, #4
 8005346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800534a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800534e:	4619      	mov	r1, r3
 8005350:	482d      	ldr	r0, [pc, #180]	; (8005408 <HAL_I2C_MspInit+0x144>)
 8005352:	f002 fb77 	bl	8007a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005356:	4b2b      	ldr	r3, [pc, #172]	; (8005404 <HAL_I2C_MspInit+0x140>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	4a2a      	ldr	r2, [pc, #168]	; (8005404 <HAL_I2C_MspInit+0x140>)
 800535c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005360:	6413      	str	r3, [r2, #64]	; 0x40
 8005362:	4b28      	ldr	r3, [pc, #160]	; (8005404 <HAL_I2C_MspInit+0x140>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800536e:	e042      	b.n	80053f6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a25      	ldr	r2, [pc, #148]	; (800540c <HAL_I2C_MspInit+0x148>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d13d      	bne.n	80053f6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800537a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800537e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8005380:	2300      	movs	r3, #0
 8005382:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005386:	f107 0318 	add.w	r3, r7, #24
 800538a:	4618      	mov	r0, r3
 800538c:	f004 fd38 	bl	8009e00 <HAL_RCCEx_PeriphCLKConfig>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8005396:	f7fd ff73 	bl	8003280 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800539a:	4b1a      	ldr	r3, [pc, #104]	; (8005404 <HAL_I2C_MspInit+0x140>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	4a19      	ldr	r2, [pc, #100]	; (8005404 <HAL_I2C_MspInit+0x140>)
 80053a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a4:	6313      	str	r3, [r2, #48]	; 0x30
 80053a6:	4b17      	ldr	r3, [pc, #92]	; (8005404 <HAL_I2C_MspInit+0x140>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80053b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80053b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053ba:	2312      	movs	r3, #18
 80053bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c6:	2303      	movs	r3, #3
 80053c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80053cc:	2304      	movs	r3, #4
 80053ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80053d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80053d6:	4619      	mov	r1, r3
 80053d8:	480d      	ldr	r0, [pc, #52]	; (8005410 <HAL_I2C_MspInit+0x14c>)
 80053da:	f002 fb33 	bl	8007a44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80053de:	4b09      	ldr	r3, [pc, #36]	; (8005404 <HAL_I2C_MspInit+0x140>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	4a08      	ldr	r2, [pc, #32]	; (8005404 <HAL_I2C_MspInit+0x140>)
 80053e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053e8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <HAL_I2C_MspInit+0x140>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
}
 80053f6:	bf00      	nop
 80053f8:	37b0      	adds	r7, #176	; 0xb0
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40005400 	.word	0x40005400
 8005404:	40023800 	.word	0x40023800
 8005408:	40020400 	.word	0x40020400
 800540c:	40005c00 	.word	0x40005c00
 8005410:	40021c00 	.word	0x40021c00

08005414 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a15      	ldr	r2, [pc, #84]	; (8005478 <HAL_I2C_MspDeInit+0x64>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d110      	bne.n	8005448 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005426:	4b15      	ldr	r3, [pc, #84]	; (800547c <HAL_I2C_MspDeInit+0x68>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	4a14      	ldr	r2, [pc, #80]	; (800547c <HAL_I2C_MspDeInit+0x68>)
 800542c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005430:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8005432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005436:	4812      	ldr	r0, [pc, #72]	; (8005480 <HAL_I2C_MspDeInit+0x6c>)
 8005438:	f002 fcb0 	bl	8007d9c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800543c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005440:	480f      	ldr	r0, [pc, #60]	; (8005480 <HAL_I2C_MspDeInit+0x6c>)
 8005442:	f002 fcab 	bl	8007d9c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005446:	e013      	b.n	8005470 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a0d      	ldr	r2, [pc, #52]	; (8005484 <HAL_I2C_MspDeInit+0x70>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d10e      	bne.n	8005470 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <HAL_I2C_MspDeInit+0x68>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	4a09      	ldr	r2, [pc, #36]	; (800547c <HAL_I2C_MspDeInit+0x68>)
 8005458:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800545c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800545e:	2180      	movs	r1, #128	; 0x80
 8005460:	4809      	ldr	r0, [pc, #36]	; (8005488 <HAL_I2C_MspDeInit+0x74>)
 8005462:	f002 fc9b 	bl	8007d9c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8005466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800546a:	4807      	ldr	r0, [pc, #28]	; (8005488 <HAL_I2C_MspDeInit+0x74>)
 800546c:	f002 fc96 	bl	8007d9c <HAL_GPIO_DeInit>
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40005400 	.word	0x40005400
 800547c:	40023800 	.word	0x40023800
 8005480:	40020400 	.word	0x40020400
 8005484:	40005c00 	.word	0x40005c00
 8005488:	40021c00 	.word	0x40021c00

0800548c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b0ae      	sub	sp, #184	; 0xb8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005494:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	609a      	str	r2, [r3, #8]
 80054a0:	60da      	str	r2, [r3, #12]
 80054a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80054a4:	f107 0320 	add.w	r3, r7, #32
 80054a8:	2284      	movs	r2, #132	; 0x84
 80054aa:	2100      	movs	r1, #0
 80054ac:	4618      	mov	r0, r3
 80054ae:	f008 fc17 	bl	800dce0 <memset>
  if(hltdc->Instance==LTDC)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a6f      	ldr	r2, [pc, #444]	; (8005674 <HAL_LTDC_MspInit+0x1e8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	f040 80d6 	bne.w	800566a <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80054be:	2308      	movs	r3, #8
 80054c0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80054c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80054c6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80054c8:	2305      	movs	r3, #5
 80054ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80054cc:	2302      	movs	r3, #2
 80054ce:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80054d0:	2303      	movs	r3, #3
 80054d2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80054d4:	2301      	movs	r3, #1
 80054d6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80054d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054de:	f107 0320 	add.w	r3, r7, #32
 80054e2:	4618      	mov	r0, r3
 80054e4:	f004 fc8c 	bl	8009e00 <HAL_RCCEx_PeriphCLKConfig>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80054ee:	f7fd fec7 	bl	8003280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80054f2:	4b61      	ldr	r3, [pc, #388]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 80054f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f6:	4a60      	ldr	r2, [pc, #384]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 80054f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054fc:	6453      	str	r3, [r2, #68]	; 0x44
 80054fe:	4b5e      	ldr	r3, [pc, #376]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005502:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800550a:	4b5b      	ldr	r3, [pc, #364]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	4a5a      	ldr	r2, [pc, #360]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 8005510:	f043 0310 	orr.w	r3, r3, #16
 8005514:	6313      	str	r3, [r2, #48]	; 0x30
 8005516:	4b58      	ldr	r3, [pc, #352]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005522:	4b55      	ldr	r3, [pc, #340]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	4a54      	ldr	r2, [pc, #336]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 8005528:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800552c:	6313      	str	r3, [r2, #48]	; 0x30
 800552e:	4b52      	ldr	r3, [pc, #328]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800553a:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	4a4e      	ldr	r2, [pc, #312]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 8005540:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005544:	6313      	str	r3, [r2, #48]	; 0x30
 8005546:	4b4c      	ldr	r3, [pc, #304]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005552:	4b49      	ldr	r3, [pc, #292]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	4a48      	ldr	r2, [pc, #288]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 8005558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800555c:	6313      	str	r3, [r2, #48]	; 0x30
 800555e:	4b46      	ldr	r3, [pc, #280]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800556a:	4b43      	ldr	r3, [pc, #268]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	4a42      	ldr	r2, [pc, #264]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 8005570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005574:	6313      	str	r3, [r2, #48]	; 0x30
 8005576:	4b40      	ldr	r3, [pc, #256]	; (8005678 <HAL_LTDC_MspInit+0x1ec>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557e:	60bb      	str	r3, [r7, #8]
 8005580:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8005582:	2310      	movs	r3, #16
 8005584:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005588:	2302      	movs	r3, #2
 800558a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558e:	2300      	movs	r3, #0
 8005590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005594:	2300      	movs	r3, #0
 8005596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800559a:	230e      	movs	r3, #14
 800559c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80055a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4835      	ldr	r0, [pc, #212]	; (800567c <HAL_LTDC_MspInit+0x1f0>)
 80055a8:	f002 fa4c 	bl	8007a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80055ac:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80055b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b4:	2302      	movs	r3, #2
 80055b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80055c6:	230e      	movs	r3, #14
 80055c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80055cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80055d0:	4619      	mov	r1, r3
 80055d2:	482b      	ldr	r0, [pc, #172]	; (8005680 <HAL_LTDC_MspInit+0x1f4>)
 80055d4:	f002 fa36 	bl	8007a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80055d8:	23f7      	movs	r3, #247	; 0xf7
 80055da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055de:	2302      	movs	r3, #2
 80055e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ea:	2300      	movs	r3, #0
 80055ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80055f0:	230e      	movs	r3, #14
 80055f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80055f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80055fa:	4619      	mov	r1, r3
 80055fc:	4821      	ldr	r0, [pc, #132]	; (8005684 <HAL_LTDC_MspInit+0x1f8>)
 80055fe:	f002 fa21 	bl	8007a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8005602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560a:	2302      	movs	r3, #2
 800560c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005610:	2300      	movs	r3, #0
 8005612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005616:	2300      	movs	r3, #0
 8005618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800561c:	2309      	movs	r3, #9
 800561e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8005622:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005626:	4619      	mov	r1, r3
 8005628:	4817      	ldr	r0, [pc, #92]	; (8005688 <HAL_LTDC_MspInit+0x1fc>)
 800562a:	f002 fa0b 	bl	8007a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800562e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8005632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005636:	2302      	movs	r3, #2
 8005638:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563c:	2300      	movs	r3, #0
 800563e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005642:	2300      	movs	r3, #0
 8005644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005648:	230e      	movs	r3, #14
 800564a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800564e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005652:	4619      	mov	r1, r3
 8005654:	480d      	ldr	r0, [pc, #52]	; (800568c <HAL_LTDC_MspInit+0x200>)
 8005656:	f002 f9f5 	bl	8007a44 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800565a:	2200      	movs	r2, #0
 800565c:	2105      	movs	r1, #5
 800565e:	2058      	movs	r0, #88	; 0x58
 8005660:	f000 ffd4 	bl	800660c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005664:	2058      	movs	r0, #88	; 0x58
 8005666:	f000 ffed 	bl	8006644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800566a:	bf00      	nop
 800566c:	37b8      	adds	r7, #184	; 0xb8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40016800 	.word	0x40016800
 8005678:	40023800 	.word	0x40023800
 800567c:	40021000 	.word	0x40021000
 8005680:	40022400 	.word	0x40022400
 8005684:	40022800 	.word	0x40022800
 8005688:	40021800 	.word	0x40021800
 800568c:	40022000 	.word	0x40022000

08005690 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b0a4      	sub	sp, #144	; 0x90
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005698:	f107 030c 	add.w	r3, r7, #12
 800569c:	2284      	movs	r2, #132	; 0x84
 800569e:	2100      	movs	r1, #0
 80056a0:	4618      	mov	r0, r3
 80056a2:	f008 fb1d 	bl	800dce0 <memset>
  if(hrtc->Instance==RTC)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a0e      	ldr	r2, [pc, #56]	; (80056e4 <HAL_RTC_MspInit+0x54>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d114      	bne.n	80056da <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80056b0:	2320      	movs	r3, #32
 80056b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80056b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056ba:	f107 030c 	add.w	r3, r7, #12
 80056be:	4618      	mov	r0, r3
 80056c0:	f004 fb9e 	bl	8009e00 <HAL_RCCEx_PeriphCLKConfig>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80056ca:	f7fd fdd9 	bl	8003280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80056ce:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <HAL_RTC_MspInit+0x58>)
 80056d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d2:	4a05      	ldr	r2, [pc, #20]	; (80056e8 <HAL_RTC_MspInit+0x58>)
 80056d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80056da:	bf00      	nop
 80056dc:	3790      	adds	r7, #144	; 0x90
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40002800 	.word	0x40002800
 80056e8:	40023800 	.word	0x40023800

080056ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08a      	sub	sp, #40	; 0x28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f4:	f107 0314 	add.w	r3, r7, #20
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	605a      	str	r2, [r3, #4]
 80056fe:	609a      	str	r2, [r3, #8]
 8005700:	60da      	str	r2, [r3, #12]
 8005702:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a25      	ldr	r2, [pc, #148]	; (80057a0 <HAL_SPI_MspInit+0xb4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d144      	bne.n	8005798 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800570e:	4b25      	ldr	r3, [pc, #148]	; (80057a4 <HAL_SPI_MspInit+0xb8>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	4a24      	ldr	r2, [pc, #144]	; (80057a4 <HAL_SPI_MspInit+0xb8>)
 8005714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005718:	6413      	str	r3, [r2, #64]	; 0x40
 800571a:	4b22      	ldr	r3, [pc, #136]	; (80057a4 <HAL_SPI_MspInit+0xb8>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005722:	613b      	str	r3, [r7, #16]
 8005724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005726:	4b1f      	ldr	r3, [pc, #124]	; (80057a4 <HAL_SPI_MspInit+0xb8>)
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	4a1e      	ldr	r2, [pc, #120]	; (80057a4 <HAL_SPI_MspInit+0xb8>)
 800572c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005730:	6313      	str	r3, [r2, #48]	; 0x30
 8005732:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <HAL_SPI_MspInit+0xb8>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800573e:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <HAL_SPI_MspInit+0xb8>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <HAL_SPI_MspInit+0xb8>)
 8005744:	f043 0302 	orr.w	r3, r3, #2
 8005748:	6313      	str	r3, [r2, #48]	; 0x30
 800574a:	4b16      	ldr	r3, [pc, #88]	; (80057a4 <HAL_SPI_MspInit+0xb8>)
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8005756:	2303      	movs	r3, #3
 8005758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800575a:	2302      	movs	r3, #2
 800575c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005762:	2303      	movs	r3, #3
 8005764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005766:	2305      	movs	r3, #5
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800576a:	f107 0314 	add.w	r3, r7, #20
 800576e:	4619      	mov	r1, r3
 8005770:	480d      	ldr	r0, [pc, #52]	; (80057a8 <HAL_SPI_MspInit+0xbc>)
 8005772:	f002 f967 	bl	8007a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8005776:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800577a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577c:	2302      	movs	r3, #2
 800577e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005780:	2300      	movs	r3, #0
 8005782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005784:	2300      	movs	r3, #0
 8005786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005788:	2305      	movs	r3, #5
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	4619      	mov	r1, r3
 8005792:	4806      	ldr	r0, [pc, #24]	; (80057ac <HAL_SPI_MspInit+0xc0>)
 8005794:	f002 f956 	bl	8007a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005798:	bf00      	nop
 800579a:	3728      	adds	r7, #40	; 0x28
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40003800 	.word	0x40003800
 80057a4:	40023800 	.word	0x40023800
 80057a8:	40022000 	.word	0x40022000
 80057ac:	40020400 	.word	0x40020400

080057b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08e      	sub	sp, #56	; 0x38
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	605a      	str	r2, [r3, #4]
 80057c2:	609a      	str	r2, [r3, #8]
 80057c4:	60da      	str	r2, [r3, #12]
 80057c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a44      	ldr	r2, [pc, #272]	; (80058e0 <HAL_TIM_Base_MspInit+0x130>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d10c      	bne.n	80057ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80057d2:	4b44      	ldr	r3, [pc, #272]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	4a43      	ldr	r2, [pc, #268]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	6453      	str	r3, [r2, #68]	; 0x44
 80057de:	4b41      	ldr	r3, [pc, #260]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 80057e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	623b      	str	r3, [r7, #32]
 80057e8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80057ea:	e074      	b.n	80058d6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f4:	d10c      	bne.n	8005810 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80057f6:	4b3b      	ldr	r3, [pc, #236]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	4a3a      	ldr	r2, [pc, #232]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 80057fc:	f043 0301 	orr.w	r3, r3, #1
 8005800:	6413      	str	r3, [r2, #64]	; 0x40
 8005802:	4b38      	ldr	r3, [pc, #224]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	61fb      	str	r3, [r7, #28]
 800580c:	69fb      	ldr	r3, [r7, #28]
}
 800580e:	e062      	b.n	80058d6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a34      	ldr	r2, [pc, #208]	; (80058e8 <HAL_TIM_Base_MspInit+0x138>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d10c      	bne.n	8005834 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800581a:	4b32      	ldr	r3, [pc, #200]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	4a31      	ldr	r2, [pc, #196]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 8005820:	f043 0302 	orr.w	r3, r3, #2
 8005824:	6413      	str	r3, [r2, #64]	; 0x40
 8005826:	4b2f      	ldr	r3, [pc, #188]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	61bb      	str	r3, [r7, #24]
 8005830:	69bb      	ldr	r3, [r7, #24]
}
 8005832:	e050      	b.n	80058d6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2c      	ldr	r2, [pc, #176]	; (80058ec <HAL_TIM_Base_MspInit+0x13c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d10c      	bne.n	8005858 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800583e:	4b29      	ldr	r3, [pc, #164]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	4a28      	ldr	r2, [pc, #160]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 8005844:	f043 0308 	orr.w	r3, r3, #8
 8005848:	6413      	str	r3, [r2, #64]	; 0x40
 800584a:	4b26      	ldr	r3, [pc, #152]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	697b      	ldr	r3, [r7, #20]
}
 8005856:	e03e      	b.n	80058d6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM7)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a24      	ldr	r2, [pc, #144]	; (80058f0 <HAL_TIM_Base_MspInit+0x140>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d10c      	bne.n	800587c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005862:	4b20      	ldr	r3, [pc, #128]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	4a1f      	ldr	r2, [pc, #124]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 8005868:	f043 0320 	orr.w	r3, r3, #32
 800586c:	6413      	str	r3, [r2, #64]	; 0x40
 800586e:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	693b      	ldr	r3, [r7, #16]
}
 800587a:	e02c      	b.n	80058d6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM8)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <HAL_TIM_Base_MspInit+0x144>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d127      	bne.n	80058d6 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005886:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 8005888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588a:	4a16      	ldr	r2, [pc, #88]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 800588c:	f043 0302 	orr.w	r3, r3, #2
 8005890:	6453      	str	r3, [r2, #68]	; 0x44
 8005892:	4b14      	ldr	r3, [pc, #80]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 8005894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800589e:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	4a10      	ldr	r2, [pc, #64]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 80058a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a8:	6313      	str	r3, [r2, #48]	; 0x30
 80058aa:	4b0e      	ldr	r3, [pc, #56]	; (80058e4 <HAL_TIM_Base_MspInit+0x134>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	60bb      	str	r3, [r7, #8]
 80058b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80058b6:	2304      	movs	r3, #4
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ba:	2302      	movs	r3, #2
 80058bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058c2:	2300      	movs	r3, #0
 80058c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80058c6:	2303      	movs	r3, #3
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80058ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ce:	4619      	mov	r1, r3
 80058d0:	4809      	ldr	r0, [pc, #36]	; (80058f8 <HAL_TIM_Base_MspInit+0x148>)
 80058d2:	f002 f8b7 	bl	8007a44 <HAL_GPIO_Init>
}
 80058d6:	bf00      	nop
 80058d8:	3738      	adds	r7, #56	; 0x38
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40010000 	.word	0x40010000
 80058e4:	40023800 	.word	0x40023800
 80058e8:	40000400 	.word	0x40000400
 80058ec:	40000c00 	.word	0x40000c00
 80058f0:	40001400 	.word	0x40001400
 80058f4:	40010400 	.word	0x40010400
 80058f8:	40022000 	.word	0x40022000

080058fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b0b0      	sub	sp, #192	; 0xc0
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005904:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	60da      	str	r2, [r3, #12]
 8005912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005918:	2284      	movs	r2, #132	; 0x84
 800591a:	2100      	movs	r1, #0
 800591c:	4618      	mov	r0, r3
 800591e:	f008 f9df 	bl	800dce0 <memset>
  if(huart->Instance==UART7)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a75      	ldr	r2, [pc, #468]	; (8005afc <HAL_UART_MspInit+0x200>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d13d      	bne.n	80059a8 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800592c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8005932:	2300      	movs	r3, #0
 8005934:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800593c:	4618      	mov	r0, r3
 800593e:	f004 fa5f 	bl	8009e00 <HAL_RCCEx_PeriphCLKConfig>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005948:	f7fd fc9a 	bl	8003280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800594c:	4b6c      	ldr	r3, [pc, #432]	; (8005b00 <HAL_UART_MspInit+0x204>)
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	4a6b      	ldr	r2, [pc, #428]	; (8005b00 <HAL_UART_MspInit+0x204>)
 8005952:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005956:	6413      	str	r3, [r2, #64]	; 0x40
 8005958:	4b69      	ldr	r3, [pc, #420]	; (8005b00 <HAL_UART_MspInit+0x204>)
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005964:	4b66      	ldr	r3, [pc, #408]	; (8005b00 <HAL_UART_MspInit+0x204>)
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	4a65      	ldr	r2, [pc, #404]	; (8005b00 <HAL_UART_MspInit+0x204>)
 800596a:	f043 0320 	orr.w	r3, r3, #32
 800596e:	6313      	str	r3, [r2, #48]	; 0x30
 8005970:	4b63      	ldr	r3, [pc, #396]	; (8005b00 <HAL_UART_MspInit+0x204>)
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	623b      	str	r3, [r7, #32]
 800597a:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800597c:	23c0      	movs	r3, #192	; 0xc0
 800597e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005982:	2302      	movs	r3, #2
 8005984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005988:	2300      	movs	r3, #0
 800598a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800598e:	2303      	movs	r3, #3
 8005990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005994:	2308      	movs	r3, #8
 8005996:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800599a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800599e:	4619      	mov	r1, r3
 80059a0:	4858      	ldr	r0, [pc, #352]	; (8005b04 <HAL_UART_MspInit+0x208>)
 80059a2:	f002 f84f 	bl	8007a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80059a6:	e0a4      	b.n	8005af2 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a56      	ldr	r2, [pc, #344]	; (8005b08 <HAL_UART_MspInit+0x20c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d15d      	bne.n	8005a6e <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80059b2:	2340      	movs	r3, #64	; 0x40
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80059b6:	2300      	movs	r3, #0
 80059b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059be:	4618      	mov	r0, r3
 80059c0:	f004 fa1e 	bl	8009e00 <HAL_RCCEx_PeriphCLKConfig>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80059ca:	f7fd fc59 	bl	8003280 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80059ce:	4b4c      	ldr	r3, [pc, #304]	; (8005b00 <HAL_UART_MspInit+0x204>)
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	4a4b      	ldr	r2, [pc, #300]	; (8005b00 <HAL_UART_MspInit+0x204>)
 80059d4:	f043 0310 	orr.w	r3, r3, #16
 80059d8:	6453      	str	r3, [r2, #68]	; 0x44
 80059da:	4b49      	ldr	r3, [pc, #292]	; (8005b00 <HAL_UART_MspInit+0x204>)
 80059dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059de:	f003 0310 	and.w	r3, r3, #16
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059e6:	4b46      	ldr	r3, [pc, #280]	; (8005b00 <HAL_UART_MspInit+0x204>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	4a45      	ldr	r2, [pc, #276]	; (8005b00 <HAL_UART_MspInit+0x204>)
 80059ec:	f043 0302 	orr.w	r3, r3, #2
 80059f0:	6313      	str	r3, [r2, #48]	; 0x30
 80059f2:	4b43      	ldr	r3, [pc, #268]	; (8005b00 <HAL_UART_MspInit+0x204>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059fe:	4b40      	ldr	r3, [pc, #256]	; (8005b00 <HAL_UART_MspInit+0x204>)
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	4a3f      	ldr	r2, [pc, #252]	; (8005b00 <HAL_UART_MspInit+0x204>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	6313      	str	r3, [r2, #48]	; 0x30
 8005a0a:	4b3d      	ldr	r3, [pc, #244]	; (8005b00 <HAL_UART_MspInit+0x204>)
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005a16:	2380      	movs	r3, #128	; 0x80
 8005a18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a2e:	2307      	movs	r3, #7
 8005a30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005a34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4834      	ldr	r0, [pc, #208]	; (8005b0c <HAL_UART_MspInit+0x210>)
 8005a3c:	f002 f802 	bl	8007a44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a54:	2300      	movs	r3, #0
 8005a56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a5a:	2307      	movs	r3, #7
 8005a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005a60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005a64:	4619      	mov	r1, r3
 8005a66:	482a      	ldr	r0, [pc, #168]	; (8005b10 <HAL_UART_MspInit+0x214>)
 8005a68:	f001 ffec 	bl	8007a44 <HAL_GPIO_Init>
}
 8005a6c:	e041      	b.n	8005af2 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a28      	ldr	r2, [pc, #160]	; (8005b14 <HAL_UART_MspInit+0x218>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d13c      	bne.n	8005af2 <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005a78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f004 f9b9 	bl	8009e00 <HAL_RCCEx_PeriphCLKConfig>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8005a94:	f7fd fbf4 	bl	8003280 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005a98:	4b19      	ldr	r3, [pc, #100]	; (8005b00 <HAL_UART_MspInit+0x204>)
 8005a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9c:	4a18      	ldr	r2, [pc, #96]	; (8005b00 <HAL_UART_MspInit+0x204>)
 8005a9e:	f043 0320 	orr.w	r3, r3, #32
 8005aa2:	6453      	str	r3, [r2, #68]	; 0x44
 8005aa4:	4b16      	ldr	r3, [pc, #88]	; (8005b00 <HAL_UART_MspInit+0x204>)
 8005aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ab0:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <HAL_UART_MspInit+0x204>)
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	4a12      	ldr	r2, [pc, #72]	; (8005b00 <HAL_UART_MspInit+0x204>)
 8005ab6:	f043 0304 	orr.w	r3, r3, #4
 8005aba:	6313      	str	r3, [r2, #48]	; 0x30
 8005abc:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <HAL_UART_MspInit+0x204>)
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8005ac8:	23c0      	movs	r3, #192	; 0xc0
 8005aca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ada:	2303      	movs	r3, #3
 8005adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005ae0:	2308      	movs	r3, #8
 8005ae2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ae6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005aea:	4619      	mov	r1, r3
 8005aec:	480a      	ldr	r0, [pc, #40]	; (8005b18 <HAL_UART_MspInit+0x21c>)
 8005aee:	f001 ffa9 	bl	8007a44 <HAL_GPIO_Init>
}
 8005af2:	bf00      	nop
 8005af4:	37c0      	adds	r7, #192	; 0xc0
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40007800 	.word	0x40007800
 8005b00:	40023800 	.word	0x40023800
 8005b04:	40021400 	.word	0x40021400
 8005b08:	40011000 	.word	0x40011000
 8005b0c:	40020400 	.word	0x40020400
 8005b10:	40020000 	.word	0x40020000
 8005b14:	40011400 	.word	0x40011400
 8005b18:	40020800 	.word	0x40020800

08005b1c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005b22:	1d3b      	adds	r3, r7, #4
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	605a      	str	r2, [r3, #4]
 8005b2a:	609a      	str	r2, [r3, #8]
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005b30:	4b3a      	ldr	r3, [pc, #232]	; (8005c1c <HAL_FMC_MspInit+0x100>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d16d      	bne.n	8005c14 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8005b38:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <HAL_FMC_MspInit+0x100>)
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005b3e:	4b38      	ldr	r3, [pc, #224]	; (8005c20 <HAL_FMC_MspInit+0x104>)
 8005b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b42:	4a37      	ldr	r2, [pc, #220]	; (8005c20 <HAL_FMC_MspInit+0x104>)
 8005b44:	f043 0301 	orr.w	r3, r3, #1
 8005b48:	6393      	str	r3, [r2, #56]	; 0x38
 8005b4a:	4b35      	ldr	r3, [pc, #212]	; (8005c20 <HAL_FMC_MspInit+0x104>)
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8005b56:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005b5a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b64:	2303      	movs	r3, #3
 8005b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005b68:	230c      	movs	r3, #12
 8005b6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b6c:	1d3b      	adds	r3, r7, #4
 8005b6e:	4619      	mov	r1, r3
 8005b70:	482c      	ldr	r0, [pc, #176]	; (8005c24 <HAL_FMC_MspInit+0x108>)
 8005b72:	f001 ff67 	bl	8007a44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8005b76:	f248 1333 	movw	r3, #33075	; 0x8133
 8005b7a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b84:	2303      	movs	r3, #3
 8005b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005b88:	230c      	movs	r3, #12
 8005b8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4825      	ldr	r0, [pc, #148]	; (8005c28 <HAL_FMC_MspInit+0x10c>)
 8005b92:	f001 ff57 	bl	8007a44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8005b96:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005b9a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005ba8:	230c      	movs	r3, #12
 8005baa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005bac:	1d3b      	adds	r3, r7, #4
 8005bae:	4619      	mov	r1, r3
 8005bb0:	481e      	ldr	r0, [pc, #120]	; (8005c2c <HAL_FMC_MspInit+0x110>)
 8005bb2:	f001 ff47 	bl	8007a44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8005bb6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005bba:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005bc8:	230c      	movs	r3, #12
 8005bca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005bcc:	1d3b      	adds	r3, r7, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4817      	ldr	r0, [pc, #92]	; (8005c30 <HAL_FMC_MspInit+0x114>)
 8005bd2:	f001 ff37 	bl	8007a44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8005bd6:	2328      	movs	r3, #40	; 0x28
 8005bd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bda:	2302      	movs	r3, #2
 8005bdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be2:	2303      	movs	r3, #3
 8005be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005be6:	230c      	movs	r3, #12
 8005be8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005bea:	1d3b      	adds	r3, r7, #4
 8005bec:	4619      	mov	r1, r3
 8005bee:	4811      	ldr	r0, [pc, #68]	; (8005c34 <HAL_FMC_MspInit+0x118>)
 8005bf0:	f001 ff28 	bl	8007a44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c00:	2303      	movs	r3, #3
 8005c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005c04:	230c      	movs	r3, #12
 8005c06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8005c08:	1d3b      	adds	r3, r7, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	480a      	ldr	r0, [pc, #40]	; (8005c38 <HAL_FMC_MspInit+0x11c>)
 8005c0e:	f001 ff19 	bl	8007a44 <HAL_GPIO_Init>
 8005c12:	e000      	b.n	8005c16 <HAL_FMC_MspInit+0xfa>
    return;
 8005c14:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20000614 	.word	0x20000614
 8005c20:	40023800 	.word	0x40023800
 8005c24:	40021000 	.word	0x40021000
 8005c28:	40021800 	.word	0x40021800
 8005c2c:	40020c00 	.word	0x40020c00
 8005c30:	40021400 	.word	0x40021400
 8005c34:	40021c00 	.word	0x40021c00
 8005c38:	40020800 	.word	0x40020800

08005c3c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005c44:	f7ff ff6a 	bl	8005b1c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005c48:	bf00      	nop
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08c      	sub	sp, #48	; 0x30
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005c60:	2200      	movs	r2, #0
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	2036      	movs	r0, #54	; 0x36
 8005c66:	f000 fcd1 	bl	800660c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005c6a:	2036      	movs	r0, #54	; 0x36
 8005c6c:	f000 fcea 	bl	8006644 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005c70:	4b1f      	ldr	r3, [pc, #124]	; (8005cf0 <HAL_InitTick+0xa0>)
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	4a1e      	ldr	r2, [pc, #120]	; (8005cf0 <HAL_InitTick+0xa0>)
 8005c76:	f043 0310 	orr.w	r3, r3, #16
 8005c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c7c:	4b1c      	ldr	r3, [pc, #112]	; (8005cf0 <HAL_InitTick+0xa0>)
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005c88:	f107 0210 	add.w	r2, r7, #16
 8005c8c:	f107 0314 	add.w	r3, r7, #20
 8005c90:	4611      	mov	r1, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f004 f882 	bl	8009d9c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005c98:	f004 f858 	bl	8009d4c <HAL_RCC_GetPCLK1Freq>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <HAL_InitTick+0xa4>)
 8005ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8005caa:	0c9b      	lsrs	r3, r3, #18
 8005cac:	3b01      	subs	r3, #1
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005cb0:	4b11      	ldr	r3, [pc, #68]	; (8005cf8 <HAL_InitTick+0xa8>)
 8005cb2:	4a12      	ldr	r2, [pc, #72]	; (8005cfc <HAL_InitTick+0xac>)
 8005cb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005cb6:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <HAL_InitTick+0xa8>)
 8005cb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005cbc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005cbe:	4a0e      	ldr	r2, [pc, #56]	; (8005cf8 <HAL_InitTick+0xa8>)
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <HAL_InitTick+0xa8>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cca:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <HAL_InitTick+0xa8>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005cd0:	4809      	ldr	r0, [pc, #36]	; (8005cf8 <HAL_InitTick+0xa8>)
 8005cd2:	f005 f999 	bl	800b008 <HAL_TIM_Base_Init>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005cdc:	4806      	ldr	r0, [pc, #24]	; (8005cf8 <HAL_InitTick+0xa8>)
 8005cde:	f005 fa5b 	bl	800b198 <HAL_TIM_Base_Start_IT>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	e000      	b.n	8005ce8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3730      	adds	r7, #48	; 0x30
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40023800 	.word	0x40023800
 8005cf4:	431bde83 	.word	0x431bde83
 8005cf8:	20004ba8 	.word	0x20004ba8
 8005cfc:	40001000 	.word	0x40001000

08005d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d04:	e7fe      	b.n	8005d04 <NMI_Handler+0x4>

08005d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d06:	b480      	push	{r7}
 8005d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d0a:	e7fe      	b.n	8005d0a <HardFault_Handler+0x4>

08005d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d10:	e7fe      	b.n	8005d10 <MemManage_Handler+0x4>

08005d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d12:	b480      	push	{r7}
 8005d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d16:	e7fe      	b.n	8005d16 <BusFault_Handler+0x4>

08005d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d1c:	e7fe      	b.n	8005d1c <UsageFault_Handler+0x4>

08005d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d22:	bf00      	nop
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8005d30:	4802      	ldr	r0, [pc, #8]	; (8005d3c <DMA1_Stream5_IRQHandler+0x10>)
 8005d32:	f001 f881 	bl	8006e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005d36:	bf00      	nop
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	2000472c 	.word	0x2000472c

08005d40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <TIM6_DAC_IRQHandler+0x20>)
 8005d46:	791b      	ldrb	r3, [r3, #4]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8005d4e:	4804      	ldr	r0, [pc, #16]	; (8005d60 <TIM6_DAC_IRQHandler+0x20>)
 8005d50:	f000 fda0 	bl	8006894 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8005d54:	4803      	ldr	r0, [pc, #12]	; (8005d64 <TIM6_DAC_IRQHandler+0x24>)
 8005d56:	f005 fa97 	bl	800b288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005d5a:	bf00      	nop
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	200048a4 	.word	0x200048a4
 8005d64:	20004ba8 	.word	0x20004ba8

08005d68 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005d6c:	4802      	ldr	r0, [pc, #8]	; (8005d78 <LTDC_IRQHandler+0x10>)
 8005d6e:	f003 f85d 	bl	8008e2c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005d72:	bf00      	nop
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20004684 	.word	0x20004684

08005d7c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005d80:	4802      	ldr	r0, [pc, #8]	; (8005d8c <DMA2D_IRQHandler+0x10>)
 8005d82:	f001 fc21 	bl	80075c8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005d86:	bf00      	nop
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	200049a8 	.word	0x200049a8

08005d90 <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	return -1;
 8005d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005db0:	4a14      	ldr	r2, [pc, #80]	; (8005e04 <_sbrk+0x5c>)
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <_sbrk+0x60>)
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005dbc:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <_sbrk+0x64>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d102      	bne.n	8005dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005dc4:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <_sbrk+0x64>)
 8005dc6:	4a12      	ldr	r2, [pc, #72]	; (8005e10 <_sbrk+0x68>)
 8005dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005dca:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <_sbrk+0x64>)
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d207      	bcs.n	8005de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005dd8:	f007 ff48 	bl	800dc6c <__errno>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	220c      	movs	r2, #12
 8005de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005de2:	f04f 33ff 	mov.w	r3, #4294967295
 8005de6:	e009      	b.n	8005dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005de8:	4b08      	ldr	r3, [pc, #32]	; (8005e0c <_sbrk+0x64>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005dee:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <_sbrk+0x64>)
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4413      	add	r3, r2
 8005df6:	4a05      	ldr	r2, [pc, #20]	; (8005e0c <_sbrk+0x64>)
 8005df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20050000 	.word	0x20050000
 8005e08:	00000400 	.word	0x00000400
 8005e0c:	20000618 	.word	0x20000618
 8005e10:	20004c08 	.word	0x20004c08

08005e14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e18:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <SystemInit+0x20>)
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1e:	4a05      	ldr	r2, [pc, #20]	; (8005e34 <SystemInit+0x20>)
 8005e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e28:	bf00      	nop
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	e000ed00 	.word	0xe000ed00

08005e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e3c:	480d      	ldr	r0, [pc, #52]	; (8005e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005e3e:	490e      	ldr	r1, [pc, #56]	; (8005e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005e40:	4a0e      	ldr	r2, [pc, #56]	; (8005e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e44:	e002      	b.n	8005e4c <LoopCopyDataInit>

08005e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e4a:	3304      	adds	r3, #4

08005e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e50:	d3f9      	bcc.n	8005e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e52:	4a0b      	ldr	r2, [pc, #44]	; (8005e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005e54:	4c0b      	ldr	r4, [pc, #44]	; (8005e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e58:	e001      	b.n	8005e5e <LoopFillZerobss>

08005e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e5c:	3204      	adds	r2, #4

08005e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e60:	d3fb      	bcc.n	8005e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005e62:	f7ff ffd7 	bl	8005e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e66:	f007 ff07 	bl	800dc78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e6a:	f7fb fac5 	bl	80013f8 <main>
  bx  lr    
 8005e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005e70:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e78:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8005e7c:	080902e8 	.word	0x080902e8
  ldr r2, =_sbss
 8005e80:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8005e84:	20004c08 	.word	0x20004c08

08005e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e88:	e7fe      	b.n	8005e88 <ADC_IRQHandler>

08005e8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e8e:	2003      	movs	r0, #3
 8005e90:	f000 fbb1 	bl	80065f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e94:	200f      	movs	r0, #15
 8005e96:	f7ff fedb 	bl	8005c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e9a:	f7ff f8b5 	bl	8005008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ea8:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <HAL_IncTick+0x20>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <HAL_IncTick+0x24>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	4a04      	ldr	r2, [pc, #16]	; (8005ec8 <HAL_IncTick+0x24>)
 8005eb6:	6013      	str	r3, [r2, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20000048 	.word	0x20000048
 8005ec8:	20004bf4 	.word	0x20004bf4

08005ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
  return uwTick;
 8005ed0:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <HAL_GetTick+0x14>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	20004bf4 	.word	0x20004bf4

08005ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005eec:	f7ff ffee 	bl	8005ecc <HAL_GetTick>
 8005ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d005      	beq.n	8005f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005efe:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <HAL_Delay+0x44>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f0a:	bf00      	nop
 8005f0c:	f7ff ffde 	bl	8005ecc <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d8f7      	bhi.n	8005f0c <HAL_Delay+0x28>
  {
  }
}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000048 	.word	0x20000048

08005f2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e031      	b.n	8005fa6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff f884 	bl	8005058 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d116      	bne.n	8005f98 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f6e:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <HAL_ADC_Init+0x84>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	f043 0202 	orr.w	r2, r3, #2
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f970 	bl	8006260 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f023 0303 	bic.w	r3, r3, #3
 8005f8e:	f043 0201 	orr.w	r2, r3, #1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	641a      	str	r2, [r3, #64]	; 0x40
 8005f96:	e001      	b.n	8005f9c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	ffffeefd 	.word	0xffffeefd

08005fb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_ADC_ConfigChannel+0x1c>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e136      	b.n	800623e <HAL_ADC_ConfigChannel+0x28a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b09      	cmp	r3, #9
 8005fde:	d93a      	bls.n	8006056 <HAL_ADC_ConfigChannel+0xa2>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fe8:	d035      	beq.n	8006056 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68d9      	ldr	r1, [r3, #12]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	4413      	add	r3, r2
 8005ffe:	3b1e      	subs	r3, #30
 8006000:	2207      	movs	r2, #7
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	43da      	mvns	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	400a      	ands	r2, r1
 800600e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a8d      	ldr	r2, [pc, #564]	; (800624c <HAL_ADC_ConfigChannel+0x298>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d10a      	bne.n	8006030 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68d9      	ldr	r1, [r3, #12]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	061a      	lsls	r2, r3, #24
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800602e:	e035      	b.n	800609c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68d9      	ldr	r1, [r3, #12]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	4618      	mov	r0, r3
 8006042:	4603      	mov	r3, r0
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	4403      	add	r3, r0
 8006048:	3b1e      	subs	r3, #30
 800604a:	409a      	lsls	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006054:	e022      	b.n	800609c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6919      	ldr	r1, [r3, #16]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	461a      	mov	r2, r3
 8006064:	4613      	mov	r3, r2
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	4413      	add	r3, r2
 800606a:	2207      	movs	r2, #7
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	43da      	mvns	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	400a      	ands	r2, r1
 8006078:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6919      	ldr	r1, [r3, #16]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	b29b      	uxth	r3, r3
 800608a:	4618      	mov	r0, r3
 800608c:	4603      	mov	r3, r0
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	4403      	add	r3, r0
 8006092:	409a      	lsls	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b06      	cmp	r3, #6
 80060a2:	d824      	bhi.n	80060ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	3b05      	subs	r3, #5
 80060b6:	221f      	movs	r2, #31
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	43da      	mvns	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	400a      	ands	r2, r1
 80060c4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	4618      	mov	r0, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	3b05      	subs	r3, #5
 80060e0:	fa00 f203 	lsl.w	r2, r0, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	635a      	str	r2, [r3, #52]	; 0x34
 80060ec:	e04c      	b.n	8006188 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2b0c      	cmp	r3, #12
 80060f4:	d824      	bhi.n	8006140 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	3b23      	subs	r3, #35	; 0x23
 8006108:	221f      	movs	r2, #31
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	43da      	mvns	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	400a      	ands	r2, r1
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	4618      	mov	r0, r3
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	3b23      	subs	r3, #35	; 0x23
 8006132:	fa00 f203 	lsl.w	r2, r0, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	631a      	str	r2, [r3, #48]	; 0x30
 800613e:	e023      	b.n	8006188 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	3b41      	subs	r3, #65	; 0x41
 8006152:	221f      	movs	r2, #31
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	43da      	mvns	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	400a      	ands	r2, r1
 8006160:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	b29b      	uxth	r3, r3
 800616e:	4618      	mov	r0, r3
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	3b41      	subs	r3, #65	; 0x41
 800617c:	fa00 f203 	lsl.w	r2, r0, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a30      	ldr	r2, [pc, #192]	; (8006250 <HAL_ADC_ConfigChannel+0x29c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d10a      	bne.n	80061a8 <HAL_ADC_ConfigChannel+0x1f4>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800619a:	d105      	bne.n	80061a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800619c:	4b2d      	ldr	r3, [pc, #180]	; (8006254 <HAL_ADC_ConfigChannel+0x2a0>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4a2c      	ldr	r2, [pc, #176]	; (8006254 <HAL_ADC_ConfigChannel+0x2a0>)
 80061a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80061a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a28      	ldr	r2, [pc, #160]	; (8006250 <HAL_ADC_ConfigChannel+0x29c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d10f      	bne.n	80061d2 <HAL_ADC_ConfigChannel+0x21e>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b12      	cmp	r3, #18
 80061b8:	d10b      	bne.n	80061d2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80061ba:	4b26      	ldr	r3, [pc, #152]	; (8006254 <HAL_ADC_ConfigChannel+0x2a0>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	4a25      	ldr	r2, [pc, #148]	; (8006254 <HAL_ADC_ConfigChannel+0x2a0>)
 80061c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80061c4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80061c6:	4b23      	ldr	r3, [pc, #140]	; (8006254 <HAL_ADC_ConfigChannel+0x2a0>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	4a22      	ldr	r2, [pc, #136]	; (8006254 <HAL_ADC_ConfigChannel+0x2a0>)
 80061cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80061d0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a1e      	ldr	r2, [pc, #120]	; (8006250 <HAL_ADC_ConfigChannel+0x29c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d12b      	bne.n	8006234 <HAL_ADC_ConfigChannel+0x280>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1a      	ldr	r2, [pc, #104]	; (800624c <HAL_ADC_ConfigChannel+0x298>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d003      	beq.n	80061ee <HAL_ADC_ConfigChannel+0x23a>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b11      	cmp	r3, #17
 80061ec:	d122      	bne.n	8006234 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80061ee:	4b19      	ldr	r3, [pc, #100]	; (8006254 <HAL_ADC_ConfigChannel+0x2a0>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	4a18      	ldr	r2, [pc, #96]	; (8006254 <HAL_ADC_ConfigChannel+0x2a0>)
 80061f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80061f8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80061fa:	4b16      	ldr	r3, [pc, #88]	; (8006254 <HAL_ADC_ConfigChannel+0x2a0>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	4a15      	ldr	r2, [pc, #84]	; (8006254 <HAL_ADC_ConfigChannel+0x2a0>)
 8006200:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006204:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a10      	ldr	r2, [pc, #64]	; (800624c <HAL_ADC_ConfigChannel+0x298>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d111      	bne.n	8006234 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006210:	4b11      	ldr	r3, [pc, #68]	; (8006258 <HAL_ADC_ConfigChannel+0x2a4>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a11      	ldr	r2, [pc, #68]	; (800625c <HAL_ADC_ConfigChannel+0x2a8>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	0c9a      	lsrs	r2, r3, #18
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006226:	e002      	b.n	800622e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3b01      	subs	r3, #1
 800622c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f9      	bne.n	8006228 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	10000012 	.word	0x10000012
 8006250:	40012000 	.word	0x40012000
 8006254:	40012300 	.word	0x40012300
 8006258:	20000040 	.word	0x20000040
 800625c:	431bde83 	.word	0x431bde83

08006260 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006268:	4b78      	ldr	r3, [pc, #480]	; (800644c <ADC_Init+0x1ec>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	4a77      	ldr	r2, [pc, #476]	; (800644c <ADC_Init+0x1ec>)
 800626e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006272:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006274:	4b75      	ldr	r3, [pc, #468]	; (800644c <ADC_Init+0x1ec>)
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	4973      	ldr	r1, [pc, #460]	; (800644c <ADC_Init+0x1ec>)
 800627e:	4313      	orrs	r3, r2
 8006280:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6859      	ldr	r1, [r3, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	021a      	lsls	r2, r3, #8
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80062b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6899      	ldr	r1, [r3, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ee:	4a58      	ldr	r2, [pc, #352]	; (8006450 <ADC_Init+0x1f0>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d022      	beq.n	800633a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006302:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6899      	ldr	r1, [r3, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6899      	ldr	r1, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	609a      	str	r2, [r3, #8]
 8006338:	e00f      	b.n	800635a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006358:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0202 	bic.w	r2, r2, #2
 8006368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6899      	ldr	r1, [r3, #8]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	005a      	lsls	r2, r3, #1
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01b      	beq.n	80063c0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006396:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80063a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6859      	ldr	r1, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	3b01      	subs	r3, #1
 80063b4:	035a      	lsls	r2, r3, #13
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]
 80063be:	e007      	b.n	80063d0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80063de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	051a      	lsls	r2, r3, #20
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006404:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6899      	ldr	r1, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006412:	025a      	lsls	r2, r3, #9
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800642a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6899      	ldr	r1, [r3, #8]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	029a      	lsls	r2, r3, #10
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	609a      	str	r2, [r3, #8]
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	40012300 	.word	0x40012300
 8006450:	0f000001 	.word	0x0f000001

08006454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006464:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <__NVIC_SetPriorityGrouping+0x40>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006470:	4013      	ands	r3, r2
 8006472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800647c:	4b06      	ldr	r3, [pc, #24]	; (8006498 <__NVIC_SetPriorityGrouping+0x44>)
 800647e:	4313      	orrs	r3, r2
 8006480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006482:	4a04      	ldr	r2, [pc, #16]	; (8006494 <__NVIC_SetPriorityGrouping+0x40>)
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	60d3      	str	r3, [r2, #12]
}
 8006488:	bf00      	nop
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	e000ed00 	.word	0xe000ed00
 8006498:	05fa0000 	.word	0x05fa0000

0800649c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064a0:	4b04      	ldr	r3, [pc, #16]	; (80064b4 <__NVIC_GetPriorityGrouping+0x18>)
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	0a1b      	lsrs	r3, r3, #8
 80064a6:	f003 0307 	and.w	r3, r3, #7
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	e000ed00 	.word	0xe000ed00

080064b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	db0b      	blt.n	80064e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	f003 021f 	and.w	r2, r3, #31
 80064d0:	4907      	ldr	r1, [pc, #28]	; (80064f0 <__NVIC_EnableIRQ+0x38>)
 80064d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	2001      	movs	r0, #1
 80064da:	fa00 f202 	lsl.w	r2, r0, r2
 80064de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	e000e100 	.word	0xe000e100

080064f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	4603      	mov	r3, r0
 80064fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006502:	2b00      	cmp	r3, #0
 8006504:	db12      	blt.n	800652c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006506:	79fb      	ldrb	r3, [r7, #7]
 8006508:	f003 021f 	and.w	r2, r3, #31
 800650c:	490a      	ldr	r1, [pc, #40]	; (8006538 <__NVIC_DisableIRQ+0x44>)
 800650e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	2001      	movs	r0, #1
 8006516:	fa00 f202 	lsl.w	r2, r0, r2
 800651a:	3320      	adds	r3, #32
 800651c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006520:	f3bf 8f4f 	dsb	sy
}
 8006524:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006526:	f3bf 8f6f 	isb	sy
}
 800652a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	e000e100 	.word	0xe000e100

0800653c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	6039      	str	r1, [r7, #0]
 8006546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800654c:	2b00      	cmp	r3, #0
 800654e:	db0a      	blt.n	8006566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	b2da      	uxtb	r2, r3
 8006554:	490c      	ldr	r1, [pc, #48]	; (8006588 <__NVIC_SetPriority+0x4c>)
 8006556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800655a:	0112      	lsls	r2, r2, #4
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	440b      	add	r3, r1
 8006560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006564:	e00a      	b.n	800657c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	4908      	ldr	r1, [pc, #32]	; (800658c <__NVIC_SetPriority+0x50>)
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	3b04      	subs	r3, #4
 8006574:	0112      	lsls	r2, r2, #4
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	440b      	add	r3, r1
 800657a:	761a      	strb	r2, [r3, #24]
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	e000e100 	.word	0xe000e100
 800658c:	e000ed00 	.word	0xe000ed00

08006590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006590:	b480      	push	{r7}
 8006592:	b089      	sub	sp, #36	; 0x24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f1c3 0307 	rsb	r3, r3, #7
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	bf28      	it	cs
 80065ae:	2304      	movcs	r3, #4
 80065b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	3304      	adds	r3, #4
 80065b6:	2b06      	cmp	r3, #6
 80065b8:	d902      	bls.n	80065c0 <NVIC_EncodePriority+0x30>
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	3b03      	subs	r3, #3
 80065be:	e000      	b.n	80065c2 <NVIC_EncodePriority+0x32>
 80065c0:	2300      	movs	r3, #0
 80065c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065c4:	f04f 32ff 	mov.w	r2, #4294967295
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43da      	mvns	r2, r3
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	401a      	ands	r2, r3
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065d8:	f04f 31ff 	mov.w	r1, #4294967295
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	fa01 f303 	lsl.w	r3, r1, r3
 80065e2:	43d9      	mvns	r1, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065e8:	4313      	orrs	r3, r2
         );
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3724      	adds	r7, #36	; 0x24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff ff28 	bl	8006454 <__NVIC_SetPriorityGrouping>
}
 8006604:	bf00      	nop
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800661e:	f7ff ff3d 	bl	800649c <__NVIC_GetPriorityGrouping>
 8006622:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	6978      	ldr	r0, [r7, #20]
 800662a:	f7ff ffb1 	bl	8006590 <NVIC_EncodePriority>
 800662e:	4602      	mov	r2, r0
 8006630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006634:	4611      	mov	r1, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff ff80 	bl	800653c <__NVIC_SetPriority>
}
 800663c:	bf00      	nop
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800664e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff ff30 	bl	80064b8 <__NVIC_EnableIRQ>
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800666a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff ff40 	bl	80064f4 <__NVIC_DisableIRQ>
}
 8006674:	bf00      	nop
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e014      	b.n	80066b8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	791b      	ldrb	r3, [r3, #4]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d105      	bne.n	80066a4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fe fd48 	bl	8005134 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e00f      	b.n	80066f2 <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2202      	movs	r2, #2
 80066d6:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7fe fda7 	bl	800522c <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	795b      	ldrb	r3, [r3, #5]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d101      	bne.n	800671a <HAL_DAC_Start_DMA+0x1e>
 8006716:	2302      	movs	r3, #2
 8006718:	e0ab      	b.n	8006872 <HAL_DAC_Start_DMA+0x176>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2202      	movs	r2, #2
 8006724:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d12f      	bne.n	800678c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	4a52      	ldr	r2, [pc, #328]	; (800687c <HAL_DAC_Start_DMA+0x180>)
 8006732:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4a51      	ldr	r2, [pc, #324]	; (8006880 <HAL_DAC_Start_DMA+0x184>)
 800673a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	4a50      	ldr	r2, [pc, #320]	; (8006884 <HAL_DAC_Start_DMA+0x188>)
 8006742:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006752:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	2b08      	cmp	r3, #8
 8006758:	d013      	beq.n	8006782 <HAL_DAC_Start_DMA+0x86>
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	2b08      	cmp	r3, #8
 800675e:	d845      	bhi.n	80067ec <HAL_DAC_Start_DMA+0xf0>
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_DAC_Start_DMA+0x72>
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	2b04      	cmp	r3, #4
 800676a:	d005      	beq.n	8006778 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800676c:	e03e      	b.n	80067ec <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3308      	adds	r3, #8
 8006774:	613b      	str	r3, [r7, #16]
        break;
 8006776:	e03c      	b.n	80067f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	330c      	adds	r3, #12
 800677e:	613b      	str	r3, [r7, #16]
        break;
 8006780:	e037      	b.n	80067f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3310      	adds	r3, #16
 8006788:	613b      	str	r3, [r7, #16]
        break;
 800678a:	e032      	b.n	80067f2 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	4a3d      	ldr	r2, [pc, #244]	; (8006888 <HAL_DAC_Start_DMA+0x18c>)
 8006792:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	4a3c      	ldr	r2, [pc, #240]	; (800688c <HAL_DAC_Start_DMA+0x190>)
 800679a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	4a3b      	ldr	r2, [pc, #236]	; (8006890 <HAL_DAC_Start_DMA+0x194>)
 80067a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	2b08      	cmp	r3, #8
 80067b8:	d013      	beq.n	80067e2 <HAL_DAC_Start_DMA+0xe6>
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d817      	bhi.n	80067f0 <HAL_DAC_Start_DMA+0xf4>
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_DAC_Start_DMA+0xd2>
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	d005      	beq.n	80067d8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80067cc:	e010      	b.n	80067f0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3314      	adds	r3, #20
 80067d4:	613b      	str	r3, [r7, #16]
        break;
 80067d6:	e00c      	b.n	80067f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3318      	adds	r3, #24
 80067de:	613b      	str	r3, [r7, #16]
        break;
 80067e0:	e007      	b.n	80067f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	331c      	adds	r3, #28
 80067e8:	613b      	str	r3, [r7, #16]
        break;
 80067ea:	e002      	b.n	80067f2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80067ec:	bf00      	nop
 80067ee:	e000      	b.n	80067f2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80067f0:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d111      	bne.n	800681c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006806:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6898      	ldr	r0, [r3, #8]
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	f000 fab1 	bl	8006d78 <HAL_DMA_Start_IT>
 8006816:	4603      	mov	r3, r0
 8006818:	75fb      	strb	r3, [r7, #23]
 800681a:	e010      	b.n	800683e <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800682a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68d8      	ldr	r0, [r3, #12]
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	f000 fa9f 	bl	8006d78 <HAL_DMA_Start_IT>
 800683a:	4603      	mov	r3, r0
 800683c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10c      	bne.n	8006864 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6819      	ldr	r1, [r3, #0]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f003 0310 	and.w	r3, r3, #16
 8006856:	2201      	movs	r2, #1
 8006858:	409a      	lsls	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	e005      	b.n	8006870 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f043 0204 	orr.w	r2, r3, #4
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006870:	7dfb      	ldrb	r3, [r7, #23]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	08006a37 	.word	0x08006a37
 8006880:	08006a59 	.word	0x08006a59
 8006884:	08006a75 	.word	0x08006a75
 8006888:	08006af3 	.word	0x08006af3
 800688c:	08006b15 	.word	0x08006b15
 8006890:	08006b31 	.word	0x08006b31

08006894 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068aa:	d120      	bne.n	80068ee <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ba:	d118      	bne.n	80068ee <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2204      	movs	r2, #4
 80068c0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f043 0201 	orr.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068e6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f84b 	bl	8006984 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068fc:	d120      	bne.n	8006940 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800690c:	d118      	bne.n	8006940 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2204      	movs	r2, #4
 8006912:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f043 0202 	orr.w	r2, r3, #2
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006928:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006938:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f8cf 	bl	8006ade <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	795b      	ldrb	r3, [r3, #5]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_DAC_ConfigChannel+0x18>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e03c      	b.n	8006a2a <HAL_DAC_ConfigChannel+0x92>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2202      	movs	r2, #2
 80069ba:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	f640 72fe 	movw	r2, #4094	; 0xffe
 80069ce:	fa02 f303 	lsl.w	r3, r2, r3
 80069d2:	43db      	mvns	r3, r3
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	4013      	ands	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	fa02 f303 	lsl.w	r3, r2, r3
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6819      	ldr	r1, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	22c0      	movs	r2, #192	; 0xc0
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	43da      	mvns	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	400a      	ands	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a42:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff ff7f 	bl	8006948 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	711a      	strb	r2, [r3, #4]
}
 8006a50:	bf00      	nop
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7ff ff78 	bl	800695c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006a6c:	bf00      	nop
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f043 0204 	orr.w	r2, r3, #4
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff ff6e 	bl	8006970 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	711a      	strb	r2, [r3, #4]
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f7ff ffce 	bl	8006aa2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	711a      	strb	r2, [r3, #4]
}
 8006b0c:	bf00      	nop
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f7ff ffc7 	bl	8006ab6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006b28:	bf00      	nop
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f043 0204 	orr.w	r2, r3, #4
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f7ff ffbd 	bl	8006aca <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2201      	movs	r2, #1
 8006b54:	711a      	strb	r2, [r3, #4]
}
 8006b56:	bf00      	nop
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006b6c:	f7ff f9ae 	bl	8005ecc <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e099      	b.n	8006cb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0201 	bic.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b9c:	e00f      	b.n	8006bbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b9e:	f7ff f995 	bl	8005ecc <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b05      	cmp	r3, #5
 8006baa:	d908      	bls.n	8006bbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e078      	b.n	8006cb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e8      	bne.n	8006b9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	4b38      	ldr	r3, [pc, #224]	; (8006cb8 <HAL_DMA_Init+0x158>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d107      	bne.n	8006c28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c20:	4313      	orrs	r3, r2
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 0307 	bic.w	r3, r3, #7
 8006c3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d117      	bne.n	8006c82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00e      	beq.n	8006c82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fad5 	bl	8007214 <DMA_CheckFifoParam>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d008      	beq.n	8006c82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2240      	movs	r2, #64	; 0x40
 8006c74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e016      	b.n	8006cb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa8c 	bl	80071a8 <DMA_CalcBaseAndBitshift>
 8006c90:	4603      	mov	r3, r0
 8006c92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c98:	223f      	movs	r2, #63	; 0x3f
 8006c9a:	409a      	lsls	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	f010803f 	.word	0xf010803f

08006cbc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e050      	b.n	8006d70 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d101      	bne.n	8006cde <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006cda:	2302      	movs	r3, #2
 8006cdc:	e048      	b.n	8006d70 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2200      	movs	r2, #0
 8006d04:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2200      	movs	r2, #0
 8006d14:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2221      	movs	r2, #33	; 0x21
 8006d1c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa42 	bl	80071a8 <DMA_CalcBaseAndBitshift>
 8006d24:	4603      	mov	r3, r0
 8006d26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2c:	223f      	movs	r2, #63	; 0x3f
 8006d2e:	409a      	lsls	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d101      	bne.n	8006d9e <HAL_DMA_Start_IT+0x26>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e048      	b.n	8006e30 <HAL_DMA_Start_IT+0xb8>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d137      	bne.n	8006e22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2202      	movs	r2, #2
 8006db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 f9c0 	bl	800714c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd0:	223f      	movs	r2, #63	; 0x3f
 8006dd2:	409a      	lsls	r2, r3
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0216 	orr.w	r2, r2, #22
 8006de6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695a      	ldr	r2, [r3, #20]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006df6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d007      	beq.n	8006e10 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0208 	orr.w	r2, r2, #8
 8006e0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0201 	orr.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	e005      	b.n	8006e2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006e40:	2300      	movs	r3, #0
 8006e42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006e44:	4b92      	ldr	r3, [pc, #584]	; (8007090 <HAL_DMA_IRQHandler+0x258>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a92      	ldr	r2, [pc, #584]	; (8007094 <HAL_DMA_IRQHandler+0x25c>)
 8006e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4e:	0a9b      	lsrs	r3, r3, #10
 8006e50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e62:	2208      	movs	r2, #8
 8006e64:	409a      	lsls	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d01a      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d013      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0204 	bic.w	r2, r2, #4
 8006e8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e90:	2208      	movs	r2, #8
 8006e92:	409a      	lsls	r2, r3
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9c:	f043 0201 	orr.w	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	409a      	lsls	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d012      	beq.n	8006eda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00b      	beq.n	8006eda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	409a      	lsls	r2, r3
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed2:	f043 0202 	orr.w	r2, r3, #2
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ede:	2204      	movs	r2, #4
 8006ee0:	409a      	lsls	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d012      	beq.n	8006f10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efc:	2204      	movs	r2, #4
 8006efe:	409a      	lsls	r2, r3
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f08:	f043 0204 	orr.w	r2, r3, #4
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f14:	2210      	movs	r2, #16
 8006f16:	409a      	lsls	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d043      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d03c      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f32:	2210      	movs	r2, #16
 8006f34:	409a      	lsls	r2, r3
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d018      	beq.n	8006f7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d108      	bne.n	8006f68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d024      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
 8006f66:	e01f      	b.n	8006fa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01b      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
 8006f78:	e016      	b.n	8006fa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d107      	bne.n	8006f98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0208 	bic.w	r2, r2, #8
 8006f96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fac:	2220      	movs	r2, #32
 8006fae:	409a      	lsls	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 808e 	beq.w	80070d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0310 	and.w	r3, r3, #16
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8086 	beq.w	80070d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fce:	2220      	movs	r2, #32
 8006fd0:	409a      	lsls	r2, r3
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b05      	cmp	r3, #5
 8006fe0:	d136      	bne.n	8007050 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0216 	bic.w	r2, r2, #22
 8006ff0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695a      	ldr	r2, [r3, #20]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007000:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <HAL_DMA_IRQHandler+0x1da>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0208 	bic.w	r2, r2, #8
 8007020:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007026:	223f      	movs	r2, #63	; 0x3f
 8007028:	409a      	lsls	r2, r3
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007042:	2b00      	cmp	r3, #0
 8007044:	d07d      	beq.n	8007142 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	4798      	blx	r3
        }
        return;
 800704e:	e078      	b.n	8007142 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d01c      	beq.n	8007098 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d108      	bne.n	800707e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007070:	2b00      	cmp	r3, #0
 8007072:	d030      	beq.n	80070d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	4798      	blx	r3
 800707c:	e02b      	b.n	80070d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d027      	beq.n	80070d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	4798      	blx	r3
 800708e:	e022      	b.n	80070d6 <HAL_DMA_IRQHandler+0x29e>
 8007090:	20000040 	.word	0x20000040
 8007094:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10f      	bne.n	80070c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0210 	bic.w	r2, r2, #16
 80070b4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d032      	beq.n	8007144 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d022      	beq.n	8007130 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2205      	movs	r2, #5
 80070ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0201 	bic.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	3301      	adds	r3, #1
 8007106:	60bb      	str	r3, [r7, #8]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	429a      	cmp	r2, r3
 800710c:	d307      	bcc.n	800711e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1f2      	bne.n	8007102 <HAL_DMA_IRQHandler+0x2ca>
 800711c:	e000      	b.n	8007120 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800711e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
 8007140:	e000      	b.n	8007144 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007142:	bf00      	nop
    }
  }
}
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop

0800714c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007168:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b40      	cmp	r3, #64	; 0x40
 8007178:	d108      	bne.n	800718c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800718a:	e007      	b.n	800719c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	60da      	str	r2, [r3, #12]
}
 800719c:	bf00      	nop
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	3b10      	subs	r3, #16
 80071b8:	4a13      	ldr	r2, [pc, #76]	; (8007208 <DMA_CalcBaseAndBitshift+0x60>)
 80071ba:	fba2 2303 	umull	r2, r3, r2, r3
 80071be:	091b      	lsrs	r3, r3, #4
 80071c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80071c2:	4a12      	ldr	r2, [pc, #72]	; (800720c <DMA_CalcBaseAndBitshift+0x64>)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d908      	bls.n	80071e8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <DMA_CalcBaseAndBitshift+0x68>)
 80071de:	4013      	ands	r3, r2
 80071e0:	1d1a      	adds	r2, r3, #4
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	659a      	str	r2, [r3, #88]	; 0x58
 80071e6:	e006      	b.n	80071f6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	4b08      	ldr	r3, [pc, #32]	; (8007210 <DMA_CalcBaseAndBitshift+0x68>)
 80071f0:	4013      	ands	r3, r2
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	aaaaaaab 	.word	0xaaaaaaab
 800720c:	080901f8 	.word	0x080901f8
 8007210:	fffffc00 	.word	0xfffffc00

08007214 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007224:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d11f      	bne.n	800726e <DMA_CheckFifoParam+0x5a>
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b03      	cmp	r3, #3
 8007232:	d856      	bhi.n	80072e2 <DMA_CheckFifoParam+0xce>
 8007234:	a201      	add	r2, pc, #4	; (adr r2, 800723c <DMA_CheckFifoParam+0x28>)
 8007236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723a:	bf00      	nop
 800723c:	0800724d 	.word	0x0800724d
 8007240:	0800725f 	.word	0x0800725f
 8007244:	0800724d 	.word	0x0800724d
 8007248:	080072e3 	.word	0x080072e3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d046      	beq.n	80072e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800725c:	e043      	b.n	80072e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007262:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007266:	d140      	bne.n	80072ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800726c:	e03d      	b.n	80072ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007276:	d121      	bne.n	80072bc <DMA_CheckFifoParam+0xa8>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b03      	cmp	r3, #3
 800727c:	d837      	bhi.n	80072ee <DMA_CheckFifoParam+0xda>
 800727e:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <DMA_CheckFifoParam+0x70>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	08007295 	.word	0x08007295
 8007288:	0800729b 	.word	0x0800729b
 800728c:	08007295 	.word	0x08007295
 8007290:	080072ad 	.word	0x080072ad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	73fb      	strb	r3, [r7, #15]
      break;
 8007298:	e030      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d025      	beq.n	80072f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072aa:	e022      	b.n	80072f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072b4:	d11f      	bne.n	80072f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80072ba:	e01c      	b.n	80072f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d903      	bls.n	80072ca <DMA_CheckFifoParam+0xb6>
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d003      	beq.n	80072d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80072c8:	e018      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	73fb      	strb	r3, [r7, #15]
      break;
 80072ce:	e015      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00e      	beq.n	80072fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	73fb      	strb	r3, [r7, #15]
      break;
 80072e0:	e00b      	b.n	80072fa <DMA_CheckFifoParam+0xe6>
      break;
 80072e2:	bf00      	nop
 80072e4:	e00a      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      break;
 80072e6:	bf00      	nop
 80072e8:	e008      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      break;
 80072ea:	bf00      	nop
 80072ec:	e006      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      break;
 80072ee:	bf00      	nop
 80072f0:	e004      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      break;
 80072f2:	bf00      	nop
 80072f4:	e002      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      break;   
 80072f6:	bf00      	nop
 80072f8:	e000      	b.n	80072fc <DMA_CheckFifoParam+0xe8>
      break;
 80072fa:	bf00      	nop
    }
  } 
  
  return status; 
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop

0800730c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e039      	b.n	8007392 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7fd ffa0 	bl	8005278 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735c:	f023 0107 	bic.w	r1, r3, #7
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007372:	4b0a      	ldr	r3, [pc, #40]	; (800739c <HAL_DMA2D_Init+0x90>)
 8007374:	4013      	ands	r3, r2
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	68d1      	ldr	r1, [r2, #12]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6812      	ldr	r2, [r2, #0]
 800737e:	430b      	orrs	r3, r1
 8007380:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	ffffc000 	.word	0xffffc000

080073a0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d101      	bne.n	80073bc <HAL_DMA2D_Start+0x1c>
 80073b8:	2302      	movs	r3, #2
 80073ba:	e018      	b.n	80073ee <HAL_DMA2D_Start+0x4e>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 fa98 	bl	800790c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0201 	orr.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b086      	sub	sp, #24
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007400:	2300      	movs	r3, #0
 8007402:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d056      	beq.n	80074c0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007412:	f7fe fd5b 	bl	8005ecc <HAL_GetTick>
 8007416:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007418:	e04b      	b.n	80074b2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007428:	2b00      	cmp	r3, #0
 800742a:	d023      	beq.n	8007474 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	d005      	beq.n	8007442 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743a:	f043 0202 	orr.w	r2, r3, #2
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007450:	f043 0201 	orr.w	r2, r3, #1
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2221      	movs	r2, #33	; 0x21
 800745e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2204      	movs	r2, #4
 8007464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e0a5      	b.n	80075c0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747a:	d01a      	beq.n	80074b2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800747c:	f7fe fd26 	bl	8005ecc <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d302      	bcc.n	8007492 <HAL_DMA2D_PollForTransfer+0x9c>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10f      	bne.n	80074b2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007496:	f043 0220 	orr.w	r2, r3, #32
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2203      	movs	r2, #3
 80074a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e086      	b.n	80075c0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0ac      	beq.n	800741a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	4313      	orrs	r3, r2
 80074da:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d061      	beq.n	80075a6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80074e2:	f7fe fcf3 	bl	8005ecc <HAL_GetTick>
 80074e6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80074e8:	e056      	b.n	8007598 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d02e      	beq.n	800755a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750a:	f043 0204 	orr.w	r2, r3, #4
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f003 0320 	and.w	r3, r3, #32
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007520:	f043 0202 	orr.w	r2, r3, #2
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d005      	beq.n	800753e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007536:	f043 0201 	orr.w	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2229      	movs	r2, #41	; 0x29
 8007544:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2204      	movs	r2, #4
 800754a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e032      	b.n	80075c0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d01a      	beq.n	8007598 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007562:	f7fe fcb3 	bl	8005ecc <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d302      	bcc.n	8007578 <HAL_DMA2D_PollForTransfer+0x182>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10f      	bne.n	8007598 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757c:	f043 0220 	orr.w	r2, r3, #32
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2203      	movs	r2, #3
 8007588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e013      	b.n	80075c0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f003 0310 	and.w	r3, r3, #16
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0a1      	beq.n	80074ea <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2212      	movs	r2, #18
 80075ac:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d026      	beq.n	8007638 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d021      	beq.n	8007638 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007602:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007608:	f043 0201 	orr.w	r2, r3, #1
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2201      	movs	r2, #1
 8007616:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2204      	movs	r2, #4
 800761c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b00      	cmp	r3, #0
 8007640:	d026      	beq.n	8007690 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d021      	beq.n	8007690 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800765a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2220      	movs	r2, #32
 8007662:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007668:	f043 0202 	orr.w	r2, r3, #2
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2204      	movs	r2, #4
 8007674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f003 0308 	and.w	r3, r3, #8
 8007696:	2b00      	cmp	r3, #0
 8007698:	d026      	beq.n	80076e8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d021      	beq.n	80076e8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076b2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2208      	movs	r2, #8
 80076ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c0:	f043 0204 	orr.w	r2, r3, #4
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2204      	movs	r2, #4
 80076cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f003 0304 	and.w	r3, r3, #4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d013      	beq.n	800771a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00e      	beq.n	800771a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800770a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2204      	movs	r2, #4
 8007712:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f853 	bl	80077c0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d024      	beq.n	800776e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800772a:	2b00      	cmp	r3, #0
 800772c:	d01f      	beq.n	800776e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800773c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2202      	movs	r2, #2
 8007744:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b00      	cmp	r3, #0
 8007776:	d01f      	beq.n	80077b8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d01a      	beq.n	80077b8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007790:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2210      	movs	r2, #16
 8007798:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f80e 	bl	80077d4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80077b8:	bf00      	nop
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_DMA2D_ConfigLayer+0x20>
 8007804:	2302      	movs	r3, #2
 8007806:	e079      	b.n	80078fc <HAL_DMA2D_ConfigLayer+0x114>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	011b      	lsls	r3, r3, #4
 800781c:	3318      	adds	r3, #24
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	041b      	lsls	r3, r3, #16
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007832:	4b35      	ldr	r3, [pc, #212]	; (8007908 <HAL_DMA2D_ConfigLayer+0x120>)
 8007834:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2b0a      	cmp	r3, #10
 800783c:	d003      	beq.n	8007846 <HAL_DMA2D_ConfigLayer+0x5e>
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	2b09      	cmp	r3, #9
 8007844:	d107      	bne.n	8007856 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	4313      	orrs	r3, r2
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	e005      	b.n	8007862 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	061b      	lsls	r3, r3, #24
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	4313      	orrs	r3, r2
 8007860:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d120      	bne.n	80078aa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	43db      	mvns	r3, r3
 8007872:	ea02 0103 	and.w	r1, r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	430a      	orrs	r2, r1
 800787e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b0a      	cmp	r3, #10
 8007890:	d003      	beq.n	800789a <HAL_DMA2D_ConfigLayer+0xb2>
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	2b09      	cmp	r3, #9
 8007898:	d127      	bne.n	80078ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80078a6:	629a      	str	r2, [r3, #40]	; 0x28
 80078a8:	e01f      	b.n	80078ea <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69da      	ldr	r2, [r3, #28]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	43db      	mvns	r3, r3
 80078b4:	ea02 0103 	and.w	r1, r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	430a      	orrs	r2, r1
 80078c0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	6812      	ldr	r2, [r2, #0]
 80078ca:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2b0a      	cmp	r3, #10
 80078d2:	d003      	beq.n	80078dc <HAL_DMA2D_ConfigLayer+0xf4>
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	2b09      	cmp	r3, #9
 80078da:	d106      	bne.n	80078ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80078e8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	ff03000f 	.word	0xff03000f

0800790c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800790c:	b480      	push	{r7}
 800790e:	b08b      	sub	sp, #44	; 0x2c
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
 8007918:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007920:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	041a      	lsls	r2, r3, #16
 8007928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792a:	431a      	orrs	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007944:	d174      	bne.n	8007a30 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800794c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007954:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800795c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d108      	bne.n	800797e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	431a      	orrs	r2, r3
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	4313      	orrs	r3, r2
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
 800797c:	e053      	b.n	8007a26 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d106      	bne.n	8007994 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	4313      	orrs	r3, r2
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
 8007992:	e048      	b.n	8007a26 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d111      	bne.n	80079c0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	0cdb      	lsrs	r3, r3, #19
 80079a0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	0a9b      	lsrs	r3, r3, #10
 80079a6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	08db      	lsrs	r3, r3, #3
 80079ac:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	02db      	lsls	r3, r3, #11
 80079b6:	4313      	orrs	r3, r2
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
 80079be:	e032      	b.n	8007a26 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	d117      	bne.n	80079f8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	0fdb      	lsrs	r3, r3, #31
 80079cc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	0cdb      	lsrs	r3, r3, #19
 80079d2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	0adb      	lsrs	r3, r3, #11
 80079d8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	08db      	lsrs	r3, r3, #3
 80079de:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	029b      	lsls	r3, r3, #10
 80079e8:	431a      	orrs	r2, r3
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	03db      	lsls	r3, r3, #15
 80079ee:	4313      	orrs	r3, r2
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	627b      	str	r3, [r7, #36]	; 0x24
 80079f6:	e016      	b.n	8007a26 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	0f1b      	lsrs	r3, r3, #28
 80079fc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	0d1b      	lsrs	r3, r3, #20
 8007a02:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	0b1b      	lsrs	r3, r3, #12
 8007a08:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	091b      	lsrs	r3, r3, #4
 8007a0e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	011a      	lsls	r2, r3, #4
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	031b      	lsls	r3, r3, #12
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007a2e:	e003      	b.n	8007a38 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	60da      	str	r2, [r3, #12]
}
 8007a38:	bf00      	nop
 8007a3a:	372c      	adds	r7, #44	; 0x2c
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b089      	sub	sp, #36	; 0x24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007a56:	2300      	movs	r3, #0
 8007a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007a5e:	2300      	movs	r3, #0
 8007a60:	61fb      	str	r3, [r7, #28]
 8007a62:	e175      	b.n	8007d50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007a64:	2201      	movs	r2, #1
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	4013      	ands	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	f040 8164 	bne.w	8007d4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d005      	beq.n	8007a9a <HAL_GPIO_Init+0x56>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f003 0303 	and.w	r3, r3, #3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d130      	bne.n	8007afc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	2203      	movs	r2, #3
 8007aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aaa:	43db      	mvns	r3, r3
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad8:	43db      	mvns	r3, r3
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	4013      	ands	r3, r2
 8007ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	091b      	lsrs	r3, r3, #4
 8007ae6:	f003 0201 	and.w	r2, r3, #1
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	fa02 f303 	lsl.w	r3, r2, r3
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f003 0303 	and.w	r3, r3, #3
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d017      	beq.n	8007b38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	2203      	movs	r2, #3
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	43db      	mvns	r3, r3
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f003 0303 	and.w	r3, r3, #3
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d123      	bne.n	8007b8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	08da      	lsrs	r2, r3, #3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3208      	adds	r2, #8
 8007b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	f003 0307 	and.w	r3, r3, #7
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	220f      	movs	r2, #15
 8007b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b60:	43db      	mvns	r3, r3
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	4013      	ands	r3, r2
 8007b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	691a      	ldr	r2, [r3, #16]
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	08da      	lsrs	r2, r3, #3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	3208      	adds	r2, #8
 8007b86:	69b9      	ldr	r1, [r7, #24]
 8007b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	2203      	movs	r2, #3
 8007b98:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9c:	43db      	mvns	r3, r3
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f003 0203 	and.w	r2, r3, #3
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 80be 	beq.w	8007d4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bce:	4b66      	ldr	r3, [pc, #408]	; (8007d68 <HAL_GPIO_Init+0x324>)
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd2:	4a65      	ldr	r2, [pc, #404]	; (8007d68 <HAL_GPIO_Init+0x324>)
 8007bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8007bda:	4b63      	ldr	r3, [pc, #396]	; (8007d68 <HAL_GPIO_Init+0x324>)
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007be6:	4a61      	ldr	r2, [pc, #388]	; (8007d6c <HAL_GPIO_Init+0x328>)
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	089b      	lsrs	r3, r3, #2
 8007bec:	3302      	adds	r3, #2
 8007bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	220f      	movs	r2, #15
 8007bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007c02:	43db      	mvns	r3, r3
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	4013      	ands	r3, r2
 8007c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a58      	ldr	r2, [pc, #352]	; (8007d70 <HAL_GPIO_Init+0x32c>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d037      	beq.n	8007c82 <HAL_GPIO_Init+0x23e>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a57      	ldr	r2, [pc, #348]	; (8007d74 <HAL_GPIO_Init+0x330>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d031      	beq.n	8007c7e <HAL_GPIO_Init+0x23a>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a56      	ldr	r2, [pc, #344]	; (8007d78 <HAL_GPIO_Init+0x334>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d02b      	beq.n	8007c7a <HAL_GPIO_Init+0x236>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a55      	ldr	r2, [pc, #340]	; (8007d7c <HAL_GPIO_Init+0x338>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d025      	beq.n	8007c76 <HAL_GPIO_Init+0x232>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a54      	ldr	r2, [pc, #336]	; (8007d80 <HAL_GPIO_Init+0x33c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d01f      	beq.n	8007c72 <HAL_GPIO_Init+0x22e>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a53      	ldr	r2, [pc, #332]	; (8007d84 <HAL_GPIO_Init+0x340>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d019      	beq.n	8007c6e <HAL_GPIO_Init+0x22a>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a52      	ldr	r2, [pc, #328]	; (8007d88 <HAL_GPIO_Init+0x344>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d013      	beq.n	8007c6a <HAL_GPIO_Init+0x226>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a51      	ldr	r2, [pc, #324]	; (8007d8c <HAL_GPIO_Init+0x348>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d00d      	beq.n	8007c66 <HAL_GPIO_Init+0x222>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a50      	ldr	r2, [pc, #320]	; (8007d90 <HAL_GPIO_Init+0x34c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d007      	beq.n	8007c62 <HAL_GPIO_Init+0x21e>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a4f      	ldr	r2, [pc, #316]	; (8007d94 <HAL_GPIO_Init+0x350>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d101      	bne.n	8007c5e <HAL_GPIO_Init+0x21a>
 8007c5a:	2309      	movs	r3, #9
 8007c5c:	e012      	b.n	8007c84 <HAL_GPIO_Init+0x240>
 8007c5e:	230a      	movs	r3, #10
 8007c60:	e010      	b.n	8007c84 <HAL_GPIO_Init+0x240>
 8007c62:	2308      	movs	r3, #8
 8007c64:	e00e      	b.n	8007c84 <HAL_GPIO_Init+0x240>
 8007c66:	2307      	movs	r3, #7
 8007c68:	e00c      	b.n	8007c84 <HAL_GPIO_Init+0x240>
 8007c6a:	2306      	movs	r3, #6
 8007c6c:	e00a      	b.n	8007c84 <HAL_GPIO_Init+0x240>
 8007c6e:	2305      	movs	r3, #5
 8007c70:	e008      	b.n	8007c84 <HAL_GPIO_Init+0x240>
 8007c72:	2304      	movs	r3, #4
 8007c74:	e006      	b.n	8007c84 <HAL_GPIO_Init+0x240>
 8007c76:	2303      	movs	r3, #3
 8007c78:	e004      	b.n	8007c84 <HAL_GPIO_Init+0x240>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e002      	b.n	8007c84 <HAL_GPIO_Init+0x240>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e000      	b.n	8007c84 <HAL_GPIO_Init+0x240>
 8007c82:	2300      	movs	r3, #0
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	f002 0203 	and.w	r2, r2, #3
 8007c8a:	0092      	lsls	r2, r2, #2
 8007c8c:	4093      	lsls	r3, r2
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007c94:	4935      	ldr	r1, [pc, #212]	; (8007d6c <HAL_GPIO_Init+0x328>)
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	089b      	lsrs	r3, r3, #2
 8007c9a:	3302      	adds	r3, #2
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007ca2:	4b3d      	ldr	r3, [pc, #244]	; (8007d98 <HAL_GPIO_Init+0x354>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	43db      	mvns	r3, r3
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d003      	beq.n	8007cc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007cc6:	4a34      	ldr	r2, [pc, #208]	; (8007d98 <HAL_GPIO_Init+0x354>)
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ccc:	4b32      	ldr	r3, [pc, #200]	; (8007d98 <HAL_GPIO_Init+0x354>)
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007cf0:	4a29      	ldr	r2, [pc, #164]	; (8007d98 <HAL_GPIO_Init+0x354>)
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007cf6:	4b28      	ldr	r3, [pc, #160]	; (8007d98 <HAL_GPIO_Init+0x354>)
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	43db      	mvns	r3, r3
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	4013      	ands	r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007d1a:	4a1f      	ldr	r2, [pc, #124]	; (8007d98 <HAL_GPIO_Init+0x354>)
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007d20:	4b1d      	ldr	r3, [pc, #116]	; (8007d98 <HAL_GPIO_Init+0x354>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	43db      	mvns	r3, r3
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007d44:	4a14      	ldr	r2, [pc, #80]	; (8007d98 <HAL_GPIO_Init+0x354>)
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	61fb      	str	r3, [r7, #28]
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	2b0f      	cmp	r3, #15
 8007d54:	f67f ae86 	bls.w	8007a64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	3724      	adds	r7, #36	; 0x24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40023800 	.word	0x40023800
 8007d6c:	40013800 	.word	0x40013800
 8007d70:	40020000 	.word	0x40020000
 8007d74:	40020400 	.word	0x40020400
 8007d78:	40020800 	.word	0x40020800
 8007d7c:	40020c00 	.word	0x40020c00
 8007d80:	40021000 	.word	0x40021000
 8007d84:	40021400 	.word	0x40021400
 8007d88:	40021800 	.word	0x40021800
 8007d8c:	40021c00 	.word	0x40021c00
 8007d90:	40022000 	.word	0x40022000
 8007d94:	40022400 	.word	0x40022400
 8007d98:	40013c00 	.word	0x40013c00

08007d9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007dae:	2300      	movs	r3, #0
 8007db0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007db2:	2300      	movs	r3, #0
 8007db4:	617b      	str	r3, [r7, #20]
 8007db6:	e0d9      	b.n	8007f6c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007db8:	2201      	movs	r2, #1
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	f040 80c9 	bne.w	8007f66 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007dd4:	4a6b      	ldr	r2, [pc, #428]	; (8007f84 <HAL_GPIO_DeInit+0x1e8>)
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	089b      	lsrs	r3, r3, #2
 8007dda:	3302      	adds	r3, #2
 8007ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007de0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	220f      	movs	r2, #15
 8007dec:	fa02 f303 	lsl.w	r3, r2, r3
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	4013      	ands	r3, r2
 8007df4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a63      	ldr	r2, [pc, #396]	; (8007f88 <HAL_GPIO_DeInit+0x1ec>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d037      	beq.n	8007e6e <HAL_GPIO_DeInit+0xd2>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a62      	ldr	r2, [pc, #392]	; (8007f8c <HAL_GPIO_DeInit+0x1f0>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d031      	beq.n	8007e6a <HAL_GPIO_DeInit+0xce>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a61      	ldr	r2, [pc, #388]	; (8007f90 <HAL_GPIO_DeInit+0x1f4>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d02b      	beq.n	8007e66 <HAL_GPIO_DeInit+0xca>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a60      	ldr	r2, [pc, #384]	; (8007f94 <HAL_GPIO_DeInit+0x1f8>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d025      	beq.n	8007e62 <HAL_GPIO_DeInit+0xc6>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a5f      	ldr	r2, [pc, #380]	; (8007f98 <HAL_GPIO_DeInit+0x1fc>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d01f      	beq.n	8007e5e <HAL_GPIO_DeInit+0xc2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a5e      	ldr	r2, [pc, #376]	; (8007f9c <HAL_GPIO_DeInit+0x200>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d019      	beq.n	8007e5a <HAL_GPIO_DeInit+0xbe>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a5d      	ldr	r2, [pc, #372]	; (8007fa0 <HAL_GPIO_DeInit+0x204>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d013      	beq.n	8007e56 <HAL_GPIO_DeInit+0xba>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a5c      	ldr	r2, [pc, #368]	; (8007fa4 <HAL_GPIO_DeInit+0x208>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d00d      	beq.n	8007e52 <HAL_GPIO_DeInit+0xb6>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a5b      	ldr	r2, [pc, #364]	; (8007fa8 <HAL_GPIO_DeInit+0x20c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d007      	beq.n	8007e4e <HAL_GPIO_DeInit+0xb2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a5a      	ldr	r2, [pc, #360]	; (8007fac <HAL_GPIO_DeInit+0x210>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d101      	bne.n	8007e4a <HAL_GPIO_DeInit+0xae>
 8007e46:	2309      	movs	r3, #9
 8007e48:	e012      	b.n	8007e70 <HAL_GPIO_DeInit+0xd4>
 8007e4a:	230a      	movs	r3, #10
 8007e4c:	e010      	b.n	8007e70 <HAL_GPIO_DeInit+0xd4>
 8007e4e:	2308      	movs	r3, #8
 8007e50:	e00e      	b.n	8007e70 <HAL_GPIO_DeInit+0xd4>
 8007e52:	2307      	movs	r3, #7
 8007e54:	e00c      	b.n	8007e70 <HAL_GPIO_DeInit+0xd4>
 8007e56:	2306      	movs	r3, #6
 8007e58:	e00a      	b.n	8007e70 <HAL_GPIO_DeInit+0xd4>
 8007e5a:	2305      	movs	r3, #5
 8007e5c:	e008      	b.n	8007e70 <HAL_GPIO_DeInit+0xd4>
 8007e5e:	2304      	movs	r3, #4
 8007e60:	e006      	b.n	8007e70 <HAL_GPIO_DeInit+0xd4>
 8007e62:	2303      	movs	r3, #3
 8007e64:	e004      	b.n	8007e70 <HAL_GPIO_DeInit+0xd4>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e002      	b.n	8007e70 <HAL_GPIO_DeInit+0xd4>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <HAL_GPIO_DeInit+0xd4>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	f002 0203 	and.w	r2, r2, #3
 8007e76:	0092      	lsls	r2, r2, #2
 8007e78:	4093      	lsls	r3, r2
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d132      	bne.n	8007ee6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007e80:	4b4b      	ldr	r3, [pc, #300]	; (8007fb0 <HAL_GPIO_DeInit+0x214>)
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	43db      	mvns	r3, r3
 8007e88:	4949      	ldr	r1, [pc, #292]	; (8007fb0 <HAL_GPIO_DeInit+0x214>)
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007e8e:	4b48      	ldr	r3, [pc, #288]	; (8007fb0 <HAL_GPIO_DeInit+0x214>)
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	43db      	mvns	r3, r3
 8007e96:	4946      	ldr	r1, [pc, #280]	; (8007fb0 <HAL_GPIO_DeInit+0x214>)
 8007e98:	4013      	ands	r3, r2
 8007e9a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007e9c:	4b44      	ldr	r3, [pc, #272]	; (8007fb0 <HAL_GPIO_DeInit+0x214>)
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	43db      	mvns	r3, r3
 8007ea4:	4942      	ldr	r1, [pc, #264]	; (8007fb0 <HAL_GPIO_DeInit+0x214>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007eaa:	4b41      	ldr	r3, [pc, #260]	; (8007fb0 <HAL_GPIO_DeInit+0x214>)
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	493f      	ldr	r1, [pc, #252]	; (8007fb0 <HAL_GPIO_DeInit+0x214>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f003 0303 	and.w	r3, r3, #3
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	220f      	movs	r2, #15
 8007ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007ec8:	4a2e      	ldr	r2, [pc, #184]	; (8007f84 <HAL_GPIO_DeInit+0x1e8>)
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	089b      	lsrs	r3, r3, #2
 8007ece:	3302      	adds	r3, #2
 8007ed0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	43da      	mvns	r2, r3
 8007ed8:	482a      	ldr	r0, [pc, #168]	; (8007f84 <HAL_GPIO_DeInit+0x1e8>)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	089b      	lsrs	r3, r3, #2
 8007ede:	400a      	ands	r2, r1
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	005b      	lsls	r3, r3, #1
 8007eee:	2103      	movs	r1, #3
 8007ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef4:	43db      	mvns	r3, r3
 8007ef6:	401a      	ands	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	08da      	lsrs	r2, r3, #3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3208      	adds	r2, #8
 8007f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f003 0307 	and.w	r3, r3, #7
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	220f      	movs	r2, #15
 8007f12:	fa02 f303 	lsl.w	r3, r2, r3
 8007f16:	43db      	mvns	r3, r3
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	08d2      	lsrs	r2, r2, #3
 8007f1c:	4019      	ands	r1, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3208      	adds	r2, #8
 8007f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	2103      	movs	r1, #3
 8007f30:	fa01 f303 	lsl.w	r3, r1, r3
 8007f34:	43db      	mvns	r3, r3
 8007f36:	401a      	ands	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	2101      	movs	r1, #1
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	fa01 f303 	lsl.w	r3, r1, r3
 8007f48:	43db      	mvns	r3, r3
 8007f4a:	401a      	ands	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	2103      	movs	r1, #3
 8007f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f5e:	43db      	mvns	r3, r3
 8007f60:	401a      	ands	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	617b      	str	r3, [r7, #20]
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2b0f      	cmp	r3, #15
 8007f70:	f67f af22 	bls.w	8007db8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007f74:	bf00      	nop
 8007f76:	bf00      	nop
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	40013800 	.word	0x40013800
 8007f88:	40020000 	.word	0x40020000
 8007f8c:	40020400 	.word	0x40020400
 8007f90:	40020800 	.word	0x40020800
 8007f94:	40020c00 	.word	0x40020c00
 8007f98:	40021000 	.word	0x40021000
 8007f9c:	40021400 	.word	0x40021400
 8007fa0:	40021800 	.word	0x40021800
 8007fa4:	40021c00 	.word	0x40021c00
 8007fa8:	40022000 	.word	0x40022000
 8007fac:	40022400 	.word	0x40022400
 8007fb0:	40013c00 	.word	0x40013c00

08007fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691a      	ldr	r2, [r3, #16]
 8007fc4:	887b      	ldrh	r3, [r7, #2]
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d002      	beq.n	8007fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	73fb      	strb	r3, [r7, #15]
 8007fd0:	e001      	b.n	8007fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	807b      	strh	r3, [r7, #2]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ff4:	787b      	ldrb	r3, [r7, #1]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ffa:	887a      	ldrh	r2, [r7, #2]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008000:	e003      	b.n	800800a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008002:	887b      	ldrh	r3, [r7, #2]
 8008004:	041a      	lsls	r2, r3, #16
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	619a      	str	r2, [r3, #24]
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
	...

08008018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e07f      	b.n	800812a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d106      	bne.n	8008044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7fd f940 	bl	80052c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2224      	movs	r2, #36	; 0x24
 8008048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0201 	bic.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008068:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689a      	ldr	r2, [r3, #8]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008078:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d107      	bne.n	8008092 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800808e:	609a      	str	r2, [r3, #8]
 8008090:	e006      	b.n	80080a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800809e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d104      	bne.n	80080b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6859      	ldr	r1, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	4b1d      	ldr	r3, [pc, #116]	; (8008134 <HAL_I2C_Init+0x11c>)
 80080be:	430b      	orrs	r3, r1
 80080c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68da      	ldr	r2, [r3, #12]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691a      	ldr	r2, [r3, #16]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	69d9      	ldr	r1, [r3, #28]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a1a      	ldr	r2, [r3, #32]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0201 	orr.w	r2, r2, #1
 800810a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2220      	movs	r2, #32
 8008116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	02008000 	.word	0x02008000

08008138 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e021      	b.n	800818e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2224      	movs	r2, #36	; 0x24
 800814e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 0201 	bic.w	r2, r2, #1
 8008160:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fd f956 	bl	8005414 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b088      	sub	sp, #32
 800819c:	af02      	add	r7, sp, #8
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	4608      	mov	r0, r1
 80081a2:	4611      	mov	r1, r2
 80081a4:	461a      	mov	r2, r3
 80081a6:	4603      	mov	r3, r0
 80081a8:	817b      	strh	r3, [r7, #10]
 80081aa:	460b      	mov	r3, r1
 80081ac:	813b      	strh	r3, [r7, #8]
 80081ae:	4613      	mov	r3, r2
 80081b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	f040 80f9 	bne.w	80083b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <HAL_I2C_Mem_Write+0x34>
 80081c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d105      	bne.n	80081d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e0ed      	b.n	80083b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d101      	bne.n	80081e6 <HAL_I2C_Mem_Write+0x4e>
 80081e2:	2302      	movs	r3, #2
 80081e4:	e0e6      	b.n	80083b4 <HAL_I2C_Mem_Write+0x21c>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80081ee:	f7fd fe6d 	bl	8005ecc <HAL_GetTick>
 80081f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	2319      	movs	r3, #25
 80081fa:	2201      	movs	r2, #1
 80081fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 fad1 	bl	80087a8 <I2C_WaitOnFlagUntilTimeout>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e0d1      	b.n	80083b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2221      	movs	r2, #33	; 0x21
 8008214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2240      	movs	r2, #64	; 0x40
 800821c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6a3a      	ldr	r2, [r7, #32]
 800822a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008230:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008238:	88f8      	ldrh	r0, [r7, #6]
 800823a:	893a      	ldrh	r2, [r7, #8]
 800823c:	8979      	ldrh	r1, [r7, #10]
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	4603      	mov	r3, r0
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f9e1 	bl	8008610 <I2C_RequestMemoryWrite>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e0a9      	b.n	80083b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008264:	b29b      	uxth	r3, r3
 8008266:	2bff      	cmp	r3, #255	; 0xff
 8008268:	d90e      	bls.n	8008288 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	22ff      	movs	r2, #255	; 0xff
 800826e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008274:	b2da      	uxtb	r2, r3
 8008276:	8979      	ldrh	r1, [r7, #10]
 8008278:	2300      	movs	r3, #0
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 fc39 	bl	8008af8 <I2C_TransferConfig>
 8008286:	e00f      	b.n	80082a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800828c:	b29a      	uxth	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008296:	b2da      	uxtb	r2, r3
 8008298:	8979      	ldrh	r1, [r7, #10]
 800829a:	2300      	movs	r3, #0
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 fc28 	bl	8008af8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 fabb 	bl	8008828 <I2C_WaitOnTXISFlagUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e07b      	b.n	80083b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	781a      	ldrb	r2, [r3, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	3b01      	subs	r3, #1
 80082da:	b29a      	uxth	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e4:	3b01      	subs	r3, #1
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d034      	beq.n	8008360 <HAL_I2C_Mem_Write+0x1c8>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d130      	bne.n	8008360 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	2200      	movs	r2, #0
 8008306:	2180      	movs	r1, #128	; 0x80
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 fa4d 	bl	80087a8 <I2C_WaitOnFlagUntilTimeout>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e04d      	b.n	80083b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800831c:	b29b      	uxth	r3, r3
 800831e:	2bff      	cmp	r3, #255	; 0xff
 8008320:	d90e      	bls.n	8008340 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	22ff      	movs	r2, #255	; 0xff
 8008326:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800832c:	b2da      	uxtb	r2, r3
 800832e:	8979      	ldrh	r1, [r7, #10]
 8008330:	2300      	movs	r3, #0
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 fbdd 	bl	8008af8 <I2C_TransferConfig>
 800833e:	e00f      	b.n	8008360 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008344:	b29a      	uxth	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800834e:	b2da      	uxtb	r2, r3
 8008350:	8979      	ldrh	r1, [r7, #10]
 8008352:	2300      	movs	r3, #0
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f000 fbcc 	bl	8008af8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008364:	b29b      	uxth	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d19e      	bne.n	80082a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 fa9a 	bl	80088a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e01a      	b.n	80083b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2220      	movs	r2, #32
 8008384:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6859      	ldr	r1, [r3, #4]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <HAL_I2C_Mem_Write+0x224>)
 8008392:	400b      	ands	r3, r1
 8008394:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2220      	movs	r2, #32
 800839a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	e000      	b.n	80083b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80083b2:	2302      	movs	r3, #2
  }
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	fe00e800 	.word	0xfe00e800

080083c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af02      	add	r7, sp, #8
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	4608      	mov	r0, r1
 80083ca:	4611      	mov	r1, r2
 80083cc:	461a      	mov	r2, r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	817b      	strh	r3, [r7, #10]
 80083d2:	460b      	mov	r3, r1
 80083d4:	813b      	strh	r3, [r7, #8]
 80083d6:	4613      	mov	r3, r2
 80083d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	f040 80fd 	bne.w	80085e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80083e8:	6a3b      	ldr	r3, [r7, #32]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <HAL_I2C_Mem_Read+0x34>
 80083ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d105      	bne.n	8008400 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e0f1      	b.n	80085e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008406:	2b01      	cmp	r3, #1
 8008408:	d101      	bne.n	800840e <HAL_I2C_Mem_Read+0x4e>
 800840a:	2302      	movs	r3, #2
 800840c:	e0ea      	b.n	80085e4 <HAL_I2C_Mem_Read+0x224>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008416:	f7fd fd59 	bl	8005ecc <HAL_GetTick>
 800841a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	2319      	movs	r3, #25
 8008422:	2201      	movs	r2, #1
 8008424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f9bd 	bl	80087a8 <I2C_WaitOnFlagUntilTimeout>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e0d5      	b.n	80085e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2222      	movs	r2, #34	; 0x22
 800843c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2240      	movs	r2, #64	; 0x40
 8008444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6a3a      	ldr	r2, [r7, #32]
 8008452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008460:	88f8      	ldrh	r0, [r7, #6]
 8008462:	893a      	ldrh	r2, [r7, #8]
 8008464:	8979      	ldrh	r1, [r7, #10]
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	9301      	str	r3, [sp, #4]
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	4603      	mov	r3, r0
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 f921 	bl	80086b8 <I2C_RequestMemoryRead>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e0ad      	b.n	80085e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848c:	b29b      	uxth	r3, r3
 800848e:	2bff      	cmp	r3, #255	; 0xff
 8008490:	d90e      	bls.n	80084b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	22ff      	movs	r2, #255	; 0xff
 8008496:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800849c:	b2da      	uxtb	r2, r3
 800849e:	8979      	ldrh	r1, [r7, #10]
 80084a0:	4b52      	ldr	r3, [pc, #328]	; (80085ec <HAL_I2C_Mem_Read+0x22c>)
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 fb25 	bl	8008af8 <I2C_TransferConfig>
 80084ae:	e00f      	b.n	80084d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	8979      	ldrh	r1, [r7, #10]
 80084c2:	4b4a      	ldr	r3, [pc, #296]	; (80085ec <HAL_I2C_Mem_Read+0x22c>)
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 fb14 	bl	8008af8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d6:	2200      	movs	r2, #0
 80084d8:	2104      	movs	r1, #4
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 f964 	bl	80087a8 <I2C_WaitOnFlagUntilTimeout>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e07c      	b.n	80085e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	b2d2      	uxtb	r2, r2
 80084f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fc:	1c5a      	adds	r2, r3, #1
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008506:	3b01      	subs	r3, #1
 8008508:	b29a      	uxth	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008512:	b29b      	uxth	r3, r3
 8008514:	3b01      	subs	r3, #1
 8008516:	b29a      	uxth	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008520:	b29b      	uxth	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d034      	beq.n	8008590 <HAL_I2C_Mem_Read+0x1d0>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800852a:	2b00      	cmp	r3, #0
 800852c:	d130      	bne.n	8008590 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008534:	2200      	movs	r2, #0
 8008536:	2180      	movs	r1, #128	; 0x80
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 f935 	bl	80087a8 <I2C_WaitOnFlagUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e04d      	b.n	80085e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800854c:	b29b      	uxth	r3, r3
 800854e:	2bff      	cmp	r3, #255	; 0xff
 8008550:	d90e      	bls.n	8008570 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	22ff      	movs	r2, #255	; 0xff
 8008556:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800855c:	b2da      	uxtb	r2, r3
 800855e:	8979      	ldrh	r1, [r7, #10]
 8008560:	2300      	movs	r3, #0
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 fac5 	bl	8008af8 <I2C_TransferConfig>
 800856e:	e00f      	b.n	8008590 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008574:	b29a      	uxth	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800857e:	b2da      	uxtb	r2, r3
 8008580:	8979      	ldrh	r1, [r7, #10]
 8008582:	2300      	movs	r3, #0
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 fab4 	bl	8008af8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008594:	b29b      	uxth	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d19a      	bne.n	80084d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 f982 	bl	80088a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e01a      	b.n	80085e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2220      	movs	r2, #32
 80085b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6859      	ldr	r1, [r3, #4]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <HAL_I2C_Mem_Read+0x230>)
 80085c2:	400b      	ands	r3, r1
 80085c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	e000      	b.n	80085e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80085e2:	2302      	movs	r3, #2
  }
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	80002400 	.word	0x80002400
 80085f0:	fe00e800 	.word	0xfe00e800

080085f4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008602:	b2db      	uxtb	r3, r3
}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af02      	add	r7, sp, #8
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	461a      	mov	r2, r3
 800861e:	4603      	mov	r3, r0
 8008620:	817b      	strh	r3, [r7, #10]
 8008622:	460b      	mov	r3, r1
 8008624:	813b      	strh	r3, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800862a:	88fb      	ldrh	r3, [r7, #6]
 800862c:	b2da      	uxtb	r2, r3
 800862e:	8979      	ldrh	r1, [r7, #10]
 8008630:	4b20      	ldr	r3, [pc, #128]	; (80086b4 <I2C_RequestMemoryWrite+0xa4>)
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 fa5d 	bl	8008af8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800863e:	69fa      	ldr	r2, [r7, #28]
 8008640:	69b9      	ldr	r1, [r7, #24]
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f000 f8f0 	bl	8008828 <I2C_WaitOnTXISFlagUntilTimeout>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e02c      	b.n	80086ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d105      	bne.n	8008664 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008658:	893b      	ldrh	r3, [r7, #8]
 800865a:	b2da      	uxtb	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	629a      	str	r2, [r3, #40]	; 0x28
 8008662:	e015      	b.n	8008690 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008664:	893b      	ldrh	r3, [r7, #8]
 8008666:	0a1b      	lsrs	r3, r3, #8
 8008668:	b29b      	uxth	r3, r3
 800866a:	b2da      	uxtb	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008672:	69fa      	ldr	r2, [r7, #28]
 8008674:	69b9      	ldr	r1, [r7, #24]
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 f8d6 	bl	8008828 <I2C_WaitOnTXISFlagUntilTimeout>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e012      	b.n	80086ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008686:	893b      	ldrh	r3, [r7, #8]
 8008688:	b2da      	uxtb	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	2200      	movs	r2, #0
 8008698:	2180      	movs	r1, #128	; 0x80
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 f884 	bl	80087a8 <I2C_WaitOnFlagUntilTimeout>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e000      	b.n	80086ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	80002000 	.word	0x80002000

080086b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af02      	add	r7, sp, #8
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	4608      	mov	r0, r1
 80086c2:	4611      	mov	r1, r2
 80086c4:	461a      	mov	r2, r3
 80086c6:	4603      	mov	r3, r0
 80086c8:	817b      	strh	r3, [r7, #10]
 80086ca:	460b      	mov	r3, r1
 80086cc:	813b      	strh	r3, [r7, #8]
 80086ce:	4613      	mov	r3, r2
 80086d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80086d2:	88fb      	ldrh	r3, [r7, #6]
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	8979      	ldrh	r1, [r7, #10]
 80086d8:	4b20      	ldr	r3, [pc, #128]	; (800875c <I2C_RequestMemoryRead+0xa4>)
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	2300      	movs	r3, #0
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 fa0a 	bl	8008af8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086e4:	69fa      	ldr	r2, [r7, #28]
 80086e6:	69b9      	ldr	r1, [r7, #24]
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 f89d 	bl	8008828 <I2C_WaitOnTXISFlagUntilTimeout>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e02c      	b.n	8008752 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086f8:	88fb      	ldrh	r3, [r7, #6]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d105      	bne.n	800870a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80086fe:	893b      	ldrh	r3, [r7, #8]
 8008700:	b2da      	uxtb	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	629a      	str	r2, [r3, #40]	; 0x28
 8008708:	e015      	b.n	8008736 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800870a:	893b      	ldrh	r3, [r7, #8]
 800870c:	0a1b      	lsrs	r3, r3, #8
 800870e:	b29b      	uxth	r3, r3
 8008710:	b2da      	uxtb	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008718:	69fa      	ldr	r2, [r7, #28]
 800871a:	69b9      	ldr	r1, [r7, #24]
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 f883 	bl	8008828 <I2C_WaitOnTXISFlagUntilTimeout>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e012      	b.n	8008752 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800872c:	893b      	ldrh	r3, [r7, #8]
 800872e:	b2da      	uxtb	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	2200      	movs	r2, #0
 800873e:	2140      	movs	r1, #64	; 0x40
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f831 	bl	80087a8 <I2C_WaitOnFlagUntilTimeout>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e000      	b.n	8008752 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	80002000 	.word	0x80002000

08008760 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b02      	cmp	r3, #2
 8008774:	d103      	bne.n	800877e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2200      	movs	r2, #0
 800877c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b01      	cmp	r3, #1
 800878a:	d007      	beq.n	800879c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	699a      	ldr	r2, [r3, #24]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0201 	orr.w	r2, r2, #1
 800879a:	619a      	str	r2, [r3, #24]
  }
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	4613      	mov	r3, r2
 80087b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087b8:	e022      	b.n	8008800 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c0:	d01e      	beq.n	8008800 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087c2:	f7fd fb83 	bl	8005ecc <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d302      	bcc.n	80087d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d113      	bne.n	8008800 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087dc:	f043 0220 	orr.w	r2, r3, #32
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2220      	movs	r2, #32
 80087e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e00f      	b.n	8008820 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	699a      	ldr	r2, [r3, #24]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	4013      	ands	r3, r2
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	429a      	cmp	r2, r3
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	461a      	mov	r2, r3
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	429a      	cmp	r2, r3
 800881c:	d0cd      	beq.n	80087ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008834:	e02c      	b.n	8008890 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	68b9      	ldr	r1, [r7, #8]
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 f870 	bl	8008920 <I2C_IsErrorOccurred>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e02a      	b.n	80088a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008850:	d01e      	beq.n	8008890 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008852:	f7fd fb3b 	bl	8005ecc <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	429a      	cmp	r2, r3
 8008860:	d302      	bcc.n	8008868 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d113      	bne.n	8008890 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886c:	f043 0220 	orr.w	r2, r3, #32
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2220      	movs	r2, #32
 8008878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e007      	b.n	80088a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	f003 0302 	and.w	r3, r3, #2
 800889a:	2b02      	cmp	r3, #2
 800889c:	d1cb      	bne.n	8008836 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088b4:	e028      	b.n	8008908 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	68b9      	ldr	r1, [r7, #8]
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 f830 	bl	8008920 <I2C_IsErrorOccurred>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e026      	b.n	8008918 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ca:	f7fd faff 	bl	8005ecc <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d302      	bcc.n	80088e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d113      	bne.n	8008908 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e4:	f043 0220 	orr.w	r2, r3, #32
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2220      	movs	r2, #32
 80088f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e007      	b.n	8008918 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b20      	cmp	r3, #32
 8008914:	d1cf      	bne.n	80088b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08a      	sub	sp, #40	; 0x28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800893a:	2300      	movs	r3, #0
 800893c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	f003 0310 	and.w	r3, r3, #16
 8008948:	2b00      	cmp	r3, #0
 800894a:	d075      	beq.n	8008a38 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2210      	movs	r2, #16
 8008952:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008954:	e056      	b.n	8008a04 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895c:	d052      	beq.n	8008a04 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800895e:	f7fd fab5 	bl	8005ecc <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	429a      	cmp	r2, r3
 800896c:	d302      	bcc.n	8008974 <I2C_IsErrorOccurred+0x54>
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d147      	bne.n	8008a04 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800897e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008986:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008996:	d12e      	bne.n	80089f6 <I2C_IsErrorOccurred+0xd6>
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800899e:	d02a      	beq.n	80089f6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80089a0:	7cfb      	ldrb	r3, [r7, #19]
 80089a2:	2b20      	cmp	r3, #32
 80089a4:	d027      	beq.n	80089f6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089b4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80089b6:	f7fd fa89 	bl	8005ecc <HAL_GetTick>
 80089ba:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089bc:	e01b      	b.n	80089f6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80089be:	f7fd fa85 	bl	8005ecc <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b19      	cmp	r3, #25
 80089ca:	d914      	bls.n	80089f6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d0:	f043 0220 	orr.w	r2, r3, #32
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2220      	movs	r2, #32
 80089dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	f003 0320 	and.w	r3, r3, #32
 8008a00:	2b20      	cmp	r3, #32
 8008a02:	d1dc      	bne.n	80089be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	f003 0320 	and.w	r3, r3, #32
 8008a0e:	2b20      	cmp	r3, #32
 8008a10:	d003      	beq.n	8008a1a <I2C_IsErrorOccurred+0xfa>
 8008a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d09d      	beq.n	8008956 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d103      	bne.n	8008a2a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2220      	movs	r2, #32
 8008a28:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	f043 0304 	orr.w	r3, r3, #4
 8008a30:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00b      	beq.n	8008a62 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	f043 0301 	orr.w	r3, r3, #1
 8008a50:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00b      	beq.n	8008a84 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	f043 0308 	orr.w	r3, r3, #8
 8008a72:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00b      	beq.n	8008aa6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008a8e:	6a3b      	ldr	r3, [r7, #32]
 8008a90:	f043 0302 	orr.w	r3, r3, #2
 8008a94:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d01c      	beq.n	8008ae8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f7ff fe56 	bl	8008760 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6859      	ldr	r1, [r3, #4]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	4b0d      	ldr	r3, [pc, #52]	; (8008af4 <I2C_IsErrorOccurred+0x1d4>)
 8008ac0:	400b      	ands	r3, r1
 8008ac2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3728      	adds	r7, #40	; 0x28
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	fe00e800 	.word	0xfe00e800

08008af8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	607b      	str	r3, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	817b      	strh	r3, [r7, #10]
 8008b06:	4613      	mov	r3, r2
 8008b08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b0a:	897b      	ldrh	r3, [r7, #10]
 8008b0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b10:	7a7b      	ldrb	r3, [r7, #9]
 8008b12:	041b      	lsls	r3, r3, #16
 8008b14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b18:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b26:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	0d5b      	lsrs	r3, r3, #21
 8008b32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008b36:	4b08      	ldr	r3, [pc, #32]	; (8008b58 <I2C_TransferConfig+0x60>)
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	43db      	mvns	r3, r3
 8008b3c:	ea02 0103 	and.w	r1, r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008b4a:	bf00      	nop
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	03ff63ff 	.word	0x03ff63ff

08008b5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b20      	cmp	r3, #32
 8008b70:	d138      	bne.n	8008be4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d101      	bne.n	8008b80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e032      	b.n	8008be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2224      	movs	r2, #36	; 0x24
 8008b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0201 	bic.w	r2, r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008bae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6819      	ldr	r1, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f042 0201 	orr.w	r2, r2, #1
 8008bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	e000      	b.n	8008be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008be4:	2302      	movs	r3, #2
  }
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b20      	cmp	r3, #32
 8008c06:	d139      	bne.n	8008c7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d101      	bne.n	8008c16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008c12:	2302      	movs	r3, #2
 8008c14:	e033      	b.n	8008c7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2224      	movs	r2, #36	; 0x24
 8008c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f022 0201 	bic.w	r2, r2, #1
 8008c34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008c44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	021b      	lsls	r3, r3, #8
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0201 	orr.w	r2, r2, #1
 8008c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e000      	b.n	8008c7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008c7c:	2302      	movs	r3, #2
  }
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
	...

08008c8c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e0bf      	b.n	8008e1e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d106      	bne.n	8008cb8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7fc fbea 	bl	800548c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699a      	ldr	r2, [r3, #24]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008cce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6999      	ldr	r1, [r3, #24]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008ce4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6899      	ldr	r1, [r3, #8]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	4b4a      	ldr	r3, [pc, #296]	; (8008e28 <HAL_LTDC_Init+0x19c>)
 8008d00:	400b      	ands	r3, r1
 8008d02:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	041b      	lsls	r3, r3, #16
 8008d0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6899      	ldr	r1, [r3, #8]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	699a      	ldr	r2, [r3, #24]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68d9      	ldr	r1, [r3, #12]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	4b3e      	ldr	r3, [pc, #248]	; (8008e28 <HAL_LTDC_Init+0x19c>)
 8008d2e:	400b      	ands	r3, r1
 8008d30:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	69db      	ldr	r3, [r3, #28]
 8008d36:	041b      	lsls	r3, r3, #16
 8008d38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68d9      	ldr	r1, [r3, #12]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a1a      	ldr	r2, [r3, #32]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	431a      	orrs	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6919      	ldr	r1, [r3, #16]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	4b33      	ldr	r3, [pc, #204]	; (8008e28 <HAL_LTDC_Init+0x19c>)
 8008d5c:	400b      	ands	r3, r1
 8008d5e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	041b      	lsls	r3, r3, #16
 8008d66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6919      	ldr	r1, [r3, #16]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	431a      	orrs	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6959      	ldr	r1, [r3, #20]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	4b27      	ldr	r3, [pc, #156]	; (8008e28 <HAL_LTDC_Init+0x19c>)
 8008d8a:	400b      	ands	r3, r1
 8008d8c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d92:	041b      	lsls	r3, r3, #16
 8008d94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6959      	ldr	r1, [r3, #20]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	431a      	orrs	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	430a      	orrs	r2, r1
 8008daa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008db2:	021b      	lsls	r3, r3, #8
 8008db4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008dbc:	041b      	lsls	r3, r3, #16
 8008dbe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f042 0206 	orr.w	r2, r2, #6
 8008dfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	699a      	ldr	r2, [r3, #24]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0201 	orr.w	r2, r2, #1
 8008e0a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	f000f800 	.word	0xf000f800

08008e2c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e42:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f003 0304 	and.w	r3, r3, #4
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d023      	beq.n	8008e96 <HAL_LTDC_IRQHandler+0x6a>
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	f003 0304 	and.w	r3, r3, #4
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01e      	beq.n	8008e96 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f022 0204 	bic.w	r2, r2, #4
 8008e66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2204      	movs	r2, #4
 8008e6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e76:	f043 0201 	orr.w	r2, r3, #1
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2204      	movs	r2, #4
 8008e84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f86f 	bl	8008f74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f003 0302 	and.w	r3, r3, #2
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d023      	beq.n	8008ee8 <HAL_LTDC_IRQHandler+0xbc>
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d01e      	beq.n	8008ee8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f022 0202 	bic.w	r2, r2, #2
 8008eb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ec8:	f043 0202 	orr.w	r2, r3, #2
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2204      	movs	r2, #4
 8008ed6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f846 	bl	8008f74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d01b      	beq.n	8008f2a <HAL_LTDC_IRQHandler+0xfe>
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d016      	beq.n	8008f2a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f022 0201 	bic.w	r2, r2, #1
 8008f0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2201      	movs	r2, #1
 8008f12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f82f 	bl	8008f88 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f003 0308 	and.w	r3, r3, #8
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d01b      	beq.n	8008f6c <HAL_LTDC_IRQHandler+0x140>
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f003 0308 	and.w	r3, r3, #8
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d016      	beq.n	8008f6c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f022 0208 	bic.w	r2, r2, #8
 8008f4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2208      	movs	r2, #8
 8008f54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f818 	bl	8008f9c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008f6c:	bf00      	nop
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008fb0:	b5b0      	push	{r4, r5, r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d101      	bne.n	8008fca <HAL_LTDC_ConfigLayer+0x1a>
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	e02c      	b.n	8009024 <HAL_LTDC_ConfigLayer+0x74>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2134      	movs	r1, #52	; 0x34
 8008fe0:	fb01 f303 	mul.w	r3, r1, r3
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	4614      	mov	r4, r2
 8008fee:	461d      	mov	r5, r3
 8008ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	68b9      	ldr	r1, [r7, #8]
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f000 f855 	bl	80090b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2201      	movs	r2, #1
 8009010:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bdb0      	pop	{r4, r5, r7, pc}

0800902c <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800903e:	2b01      	cmp	r3, #1
 8009040:	d101      	bne.n	8009046 <HAL_LTDC_SetAlpha+0x1a>
 8009042:	2302      	movs	r3, #2
 8009044:	e024      	b.n	8009090 <HAL_LTDC_SetAlpha+0x64>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2202      	movs	r2, #2
 8009052:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2234      	movs	r2, #52	; 0x34
 800905a:	fb02 f303 	mul.w	r3, r2, r3
 800905e:	3338      	adds	r3, #56	; 0x38
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	4413      	add	r3, r2
 8009064:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6979      	ldr	r1, [r7, #20]
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 f81f 	bl	80090b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2201      	movs	r2, #1
 800907c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80090a6:	b2db      	uxtb	r3, r3
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b089      	sub	sp, #36	; 0x24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	685a      	ldr	r2, [r3, #4]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	0c1b      	lsrs	r3, r3, #16
 80090cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090d0:	4413      	add	r3, r2
 80090d2:	041b      	lsls	r3, r3, #16
 80090d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	461a      	mov	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	01db      	lsls	r3, r3, #7
 80090e0:	4413      	add	r3, r2
 80090e2:	3384      	adds	r3, #132	; 0x84
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	6812      	ldr	r2, [r2, #0]
 80090ea:	4611      	mov	r1, r2
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	01d2      	lsls	r2, r2, #7
 80090f0:	440a      	add	r2, r1
 80090f2:	3284      	adds	r2, #132	; 0x84
 80090f4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80090f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	0c1b      	lsrs	r3, r3, #16
 8009106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800910a:	4413      	add	r3, r2
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4619      	mov	r1, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	01db      	lsls	r3, r3, #7
 8009118:	440b      	add	r3, r1
 800911a:	3384      	adds	r3, #132	; 0x84
 800911c:	4619      	mov	r1, r3
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	4313      	orrs	r3, r2
 8009122:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	68da      	ldr	r2, [r3, #12]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009132:	4413      	add	r3, r2
 8009134:	041b      	lsls	r3, r3, #16
 8009136:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	01db      	lsls	r3, r3, #7
 8009142:	4413      	add	r3, r2
 8009144:	3384      	adds	r3, #132	; 0x84
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	6812      	ldr	r2, [r2, #0]
 800914c:	4611      	mov	r1, r2
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	01d2      	lsls	r2, r2, #7
 8009152:	440a      	add	r2, r1
 8009154:	3284      	adds	r2, #132	; 0x84
 8009156:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800915a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	689a      	ldr	r2, [r3, #8]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800916a:	4413      	add	r3, r2
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4619      	mov	r1, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	01db      	lsls	r3, r3, #7
 8009178:	440b      	add	r3, r1
 800917a:	3384      	adds	r3, #132	; 0x84
 800917c:	4619      	mov	r1, r3
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	4313      	orrs	r3, r2
 8009182:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	461a      	mov	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	01db      	lsls	r3, r3, #7
 800918e:	4413      	add	r3, r2
 8009190:	3384      	adds	r3, #132	; 0x84
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	6812      	ldr	r2, [r2, #0]
 8009198:	4611      	mov	r1, r2
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	01d2      	lsls	r2, r2, #7
 800919e:	440a      	add	r2, r1
 80091a0:	3284      	adds	r2, #132	; 0x84
 80091a2:	f023 0307 	bic.w	r3, r3, #7
 80091a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	461a      	mov	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	01db      	lsls	r3, r3, #7
 80091b2:	4413      	add	r3, r2
 80091b4:	3384      	adds	r3, #132	; 0x84
 80091b6:	461a      	mov	r2, r3
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80091c4:	021b      	lsls	r3, r3, #8
 80091c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80091ce:	041b      	lsls	r3, r3, #16
 80091d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	061b      	lsls	r3, r3, #24
 80091d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	01db      	lsls	r3, r3, #7
 80091e4:	4413      	add	r3, r2
 80091e6:	3384      	adds	r3, #132	; 0x84
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	01db      	lsls	r3, r3, #7
 80091f4:	4413      	add	r3, r2
 80091f6:	3384      	adds	r3, #132	; 0x84
 80091f8:	461a      	mov	r2, r3
 80091fa:	2300      	movs	r3, #0
 80091fc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009204:	461a      	mov	r2, r3
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	431a      	orrs	r2, r3
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	431a      	orrs	r2, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4619      	mov	r1, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	01db      	lsls	r3, r3, #7
 8009218:	440b      	add	r3, r1
 800921a:	3384      	adds	r3, #132	; 0x84
 800921c:	4619      	mov	r1, r3
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	4313      	orrs	r3, r2
 8009222:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	461a      	mov	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	01db      	lsls	r3, r3, #7
 800922e:	4413      	add	r3, r2
 8009230:	3384      	adds	r3, #132	; 0x84
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	6812      	ldr	r2, [r2, #0]
 8009238:	4611      	mov	r1, r2
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	01d2      	lsls	r2, r2, #7
 800923e:	440a      	add	r2, r1
 8009240:	3284      	adds	r2, #132	; 0x84
 8009242:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009246:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	01db      	lsls	r3, r3, #7
 8009252:	4413      	add	r3, r2
 8009254:	3384      	adds	r3, #132	; 0x84
 8009256:	461a      	mov	r2, r3
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	01db      	lsls	r3, r3, #7
 8009268:	4413      	add	r3, r2
 800926a:	3384      	adds	r3, #132	; 0x84
 800926c:	69da      	ldr	r2, [r3, #28]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4619      	mov	r1, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	01db      	lsls	r3, r3, #7
 8009278:	440b      	add	r3, r1
 800927a:	3384      	adds	r3, #132	; 0x84
 800927c:	4619      	mov	r1, r3
 800927e:	4b58      	ldr	r3, [pc, #352]	; (80093e0 <LTDC_SetConfig+0x32c>)
 8009280:	4013      	ands	r3, r2
 8009282:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	69da      	ldr	r2, [r3, #28]
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	68f9      	ldr	r1, [r7, #12]
 800928e:	6809      	ldr	r1, [r1, #0]
 8009290:	4608      	mov	r0, r1
 8009292:	6879      	ldr	r1, [r7, #4]
 8009294:	01c9      	lsls	r1, r1, #7
 8009296:	4401      	add	r1, r0
 8009298:	3184      	adds	r1, #132	; 0x84
 800929a:	4313      	orrs	r3, r2
 800929c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	461a      	mov	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	01db      	lsls	r3, r3, #7
 80092a8:	4413      	add	r3, r2
 80092aa:	3384      	adds	r3, #132	; 0x84
 80092ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	461a      	mov	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	01db      	lsls	r3, r3, #7
 80092b8:	4413      	add	r3, r2
 80092ba:	3384      	adds	r3, #132	; 0x84
 80092bc:	461a      	mov	r2, r3
 80092be:	2300      	movs	r3, #0
 80092c0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	461a      	mov	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	01db      	lsls	r3, r3, #7
 80092cc:	4413      	add	r3, r2
 80092ce:	3384      	adds	r3, #132	; 0x84
 80092d0:	461a      	mov	r2, r3
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d102      	bne.n	80092e6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80092e0:	2304      	movs	r3, #4
 80092e2:	61fb      	str	r3, [r7, #28]
 80092e4:	e01b      	b.n	800931e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d102      	bne.n	80092f4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80092ee:	2303      	movs	r3, #3
 80092f0:	61fb      	str	r3, [r7, #28]
 80092f2:	e014      	b.n	800931e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	2b04      	cmp	r3, #4
 80092fa:	d00b      	beq.n	8009314 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009300:	2b02      	cmp	r3, #2
 8009302:	d007      	beq.n	8009314 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009308:	2b03      	cmp	r3, #3
 800930a:	d003      	beq.n	8009314 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009310:	2b07      	cmp	r3, #7
 8009312:	d102      	bne.n	800931a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009314:	2302      	movs	r3, #2
 8009316:	61fb      	str	r3, [r7, #28]
 8009318:	e001      	b.n	800931e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800931a:	2301      	movs	r3, #1
 800931c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	01db      	lsls	r3, r3, #7
 8009328:	4413      	add	r3, r2
 800932a:	3384      	adds	r3, #132	; 0x84
 800932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	6812      	ldr	r2, [r2, #0]
 8009332:	4611      	mov	r1, r2
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	01d2      	lsls	r2, r2, #7
 8009338:	440a      	add	r2, r1
 800933a:	3284      	adds	r2, #132	; 0x84
 800933c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009340:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009346:	69fa      	ldr	r2, [r7, #28]
 8009348:	fb02 f303 	mul.w	r3, r2, r3
 800934c:	041a      	lsls	r2, r3, #16
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	6859      	ldr	r1, [r3, #4]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	1acb      	subs	r3, r1, r3
 8009358:	69f9      	ldr	r1, [r7, #28]
 800935a:	fb01 f303 	mul.w	r3, r1, r3
 800935e:	3303      	adds	r3, #3
 8009360:	68f9      	ldr	r1, [r7, #12]
 8009362:	6809      	ldr	r1, [r1, #0]
 8009364:	4608      	mov	r0, r1
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	01c9      	lsls	r1, r1, #7
 800936a:	4401      	add	r1, r0
 800936c:	3184      	adds	r1, #132	; 0x84
 800936e:	4313      	orrs	r3, r2
 8009370:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	01db      	lsls	r3, r3, #7
 800937c:	4413      	add	r3, r2
 800937e:	3384      	adds	r3, #132	; 0x84
 8009380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4619      	mov	r1, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	01db      	lsls	r3, r3, #7
 800938c:	440b      	add	r3, r1
 800938e:	3384      	adds	r3, #132	; 0x84
 8009390:	4619      	mov	r1, r3
 8009392:	4b14      	ldr	r3, [pc, #80]	; (80093e4 <LTDC_SetConfig+0x330>)
 8009394:	4013      	ands	r3, r2
 8009396:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	461a      	mov	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	01db      	lsls	r3, r3, #7
 80093a2:	4413      	add	r3, r2
 80093a4:	3384      	adds	r3, #132	; 0x84
 80093a6:	461a      	mov	r2, r3
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	01db      	lsls	r3, r3, #7
 80093b8:	4413      	add	r3, r2
 80093ba:	3384      	adds	r3, #132	; 0x84
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	6812      	ldr	r2, [r2, #0]
 80093c2:	4611      	mov	r1, r2
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	01d2      	lsls	r2, r2, #7
 80093c8:	440a      	add	r2, r1
 80093ca:	3284      	adds	r2, #132	; 0x84
 80093cc:	f043 0301 	orr.w	r3, r3, #1
 80093d0:	6013      	str	r3, [r2, #0]
}
 80093d2:	bf00      	nop
 80093d4:	3724      	adds	r7, #36	; 0x24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	fffff8f8 	.word	0xfffff8f8
 80093e4:	fffff800 	.word	0xfffff800

080093e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80093e8:	b480      	push	{r7}
 80093ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a04      	ldr	r2, [pc, #16]	; (8009404 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80093f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093f6:	6013      	str	r3, [r2, #0]
}
 80093f8:	bf00      	nop
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	40007000 	.word	0x40007000

08009408 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800940e:	2300      	movs	r3, #0
 8009410:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009412:	4b23      	ldr	r3, [pc, #140]	; (80094a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009416:	4a22      	ldr	r2, [pc, #136]	; (80094a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800941c:	6413      	str	r3, [r2, #64]	; 0x40
 800941e:	4b20      	ldr	r3, [pc, #128]	; (80094a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800942a:	4b1e      	ldr	r3, [pc, #120]	; (80094a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a1d      	ldr	r2, [pc, #116]	; (80094a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009434:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009436:	f7fc fd49 	bl	8005ecc <HAL_GetTick>
 800943a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800943c:	e009      	b.n	8009452 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800943e:	f7fc fd45 	bl	8005ecc <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800944c:	d901      	bls.n	8009452 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e022      	b.n	8009498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009452:	4b14      	ldr	r3, [pc, #80]	; (80094a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800945a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800945e:	d1ee      	bne.n	800943e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009460:	4b10      	ldr	r3, [pc, #64]	; (80094a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a0f      	ldr	r2, [pc, #60]	; (80094a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800946a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800946c:	f7fc fd2e 	bl	8005ecc <HAL_GetTick>
 8009470:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009472:	e009      	b.n	8009488 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009474:	f7fc fd2a 	bl	8005ecc <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009482:	d901      	bls.n	8009488 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e007      	b.n	8009498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009488:	4b06      	ldr	r3, [pc, #24]	; (80094a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009494:	d1ee      	bne.n	8009474 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	40023800 	.word	0x40023800
 80094a4:	40007000 	.word	0x40007000

080094a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80094b0:	2300      	movs	r3, #0
 80094b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d101      	bne.n	80094be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e291      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f000 8087 	beq.w	80095da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80094cc:	4b96      	ldr	r3, [pc, #600]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	f003 030c 	and.w	r3, r3, #12
 80094d4:	2b04      	cmp	r3, #4
 80094d6:	d00c      	beq.n	80094f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094d8:	4b93      	ldr	r3, [pc, #588]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f003 030c 	and.w	r3, r3, #12
 80094e0:	2b08      	cmp	r3, #8
 80094e2:	d112      	bne.n	800950a <HAL_RCC_OscConfig+0x62>
 80094e4:	4b90      	ldr	r3, [pc, #576]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094f0:	d10b      	bne.n	800950a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094f2:	4b8d      	ldr	r3, [pc, #564]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d06c      	beq.n	80095d8 <HAL_RCC_OscConfig+0x130>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d168      	bne.n	80095d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e26b      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009512:	d106      	bne.n	8009522 <HAL_RCC_OscConfig+0x7a>
 8009514:	4b84      	ldr	r3, [pc, #528]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a83      	ldr	r2, [pc, #524]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 800951a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	e02e      	b.n	8009580 <HAL_RCC_OscConfig+0xd8>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10c      	bne.n	8009544 <HAL_RCC_OscConfig+0x9c>
 800952a:	4b7f      	ldr	r3, [pc, #508]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a7e      	ldr	r2, [pc, #504]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	4b7c      	ldr	r3, [pc, #496]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a7b      	ldr	r2, [pc, #492]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 800953c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009540:	6013      	str	r3, [r2, #0]
 8009542:	e01d      	b.n	8009580 <HAL_RCC_OscConfig+0xd8>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800954c:	d10c      	bne.n	8009568 <HAL_RCC_OscConfig+0xc0>
 800954e:	4b76      	ldr	r3, [pc, #472]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a75      	ldr	r2, [pc, #468]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009558:	6013      	str	r3, [r2, #0]
 800955a:	4b73      	ldr	r3, [pc, #460]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a72      	ldr	r2, [pc, #456]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	e00b      	b.n	8009580 <HAL_RCC_OscConfig+0xd8>
 8009568:	4b6f      	ldr	r3, [pc, #444]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a6e      	ldr	r2, [pc, #440]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 800956e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009572:	6013      	str	r3, [r2, #0]
 8009574:	4b6c      	ldr	r3, [pc, #432]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a6b      	ldr	r2, [pc, #428]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 800957a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800957e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d013      	beq.n	80095b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009588:	f7fc fca0 	bl	8005ecc <HAL_GetTick>
 800958c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800958e:	e008      	b.n	80095a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009590:	f7fc fc9c 	bl	8005ecc <HAL_GetTick>
 8009594:	4602      	mov	r2, r0
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	2b64      	cmp	r3, #100	; 0x64
 800959c:	d901      	bls.n	80095a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e21f      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095a2:	4b61      	ldr	r3, [pc, #388]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0f0      	beq.n	8009590 <HAL_RCC_OscConfig+0xe8>
 80095ae:	e014      	b.n	80095da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095b0:	f7fc fc8c 	bl	8005ecc <HAL_GetTick>
 80095b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095b6:	e008      	b.n	80095ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095b8:	f7fc fc88 	bl	8005ecc <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b64      	cmp	r3, #100	; 0x64
 80095c4:	d901      	bls.n	80095ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e20b      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095ca:	4b57      	ldr	r3, [pc, #348]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1f0      	bne.n	80095b8 <HAL_RCC_OscConfig+0x110>
 80095d6:	e000      	b.n	80095da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 0302 	and.w	r3, r3, #2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d069      	beq.n	80096ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80095e6:	4b50      	ldr	r3, [pc, #320]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f003 030c 	and.w	r3, r3, #12
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00b      	beq.n	800960a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095f2:	4b4d      	ldr	r3, [pc, #308]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f003 030c 	and.w	r3, r3, #12
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	d11c      	bne.n	8009638 <HAL_RCC_OscConfig+0x190>
 80095fe:	4b4a      	ldr	r3, [pc, #296]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d116      	bne.n	8009638 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800960a:	4b47      	ldr	r3, [pc, #284]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	2b00      	cmp	r3, #0
 8009614:	d005      	beq.n	8009622 <HAL_RCC_OscConfig+0x17a>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d001      	beq.n	8009622 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e1df      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009622:	4b41      	ldr	r3, [pc, #260]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	493d      	ldr	r1, [pc, #244]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009632:	4313      	orrs	r3, r2
 8009634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009636:	e040      	b.n	80096ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d023      	beq.n	8009688 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009640:	4b39      	ldr	r3, [pc, #228]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a38      	ldr	r2, [pc, #224]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800964c:	f7fc fc3e 	bl	8005ecc <HAL_GetTick>
 8009650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009652:	e008      	b.n	8009666 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009654:	f7fc fc3a 	bl	8005ecc <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	2b02      	cmp	r3, #2
 8009660:	d901      	bls.n	8009666 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	e1bd      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009666:	4b30      	ldr	r3, [pc, #192]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0f0      	beq.n	8009654 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009672:	4b2d      	ldr	r3, [pc, #180]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	00db      	lsls	r3, r3, #3
 8009680:	4929      	ldr	r1, [pc, #164]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009682:	4313      	orrs	r3, r2
 8009684:	600b      	str	r3, [r1, #0]
 8009686:	e018      	b.n	80096ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009688:	4b27      	ldr	r3, [pc, #156]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a26      	ldr	r2, [pc, #152]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 800968e:	f023 0301 	bic.w	r3, r3, #1
 8009692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009694:	f7fc fc1a 	bl	8005ecc <HAL_GetTick>
 8009698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800969a:	e008      	b.n	80096ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800969c:	f7fc fc16 	bl	8005ecc <HAL_GetTick>
 80096a0:	4602      	mov	r2, r0
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d901      	bls.n	80096ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e199      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096ae:	4b1e      	ldr	r3, [pc, #120]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0302 	and.w	r3, r3, #2
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1f0      	bne.n	800969c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0308 	and.w	r3, r3, #8
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d038      	beq.n	8009738 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d019      	beq.n	8009702 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80096ce:	4b16      	ldr	r3, [pc, #88]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 80096d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096d2:	4a15      	ldr	r2, [pc, #84]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 80096d4:	f043 0301 	orr.w	r3, r3, #1
 80096d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096da:	f7fc fbf7 	bl	8005ecc <HAL_GetTick>
 80096de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096e0:	e008      	b.n	80096f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096e2:	f7fc fbf3 	bl	8005ecc <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d901      	bls.n	80096f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e176      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096f4:	4b0c      	ldr	r3, [pc, #48]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 80096f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096f8:	f003 0302 	and.w	r3, r3, #2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d0f0      	beq.n	80096e2 <HAL_RCC_OscConfig+0x23a>
 8009700:	e01a      	b.n	8009738 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009702:	4b09      	ldr	r3, [pc, #36]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009706:	4a08      	ldr	r2, [pc, #32]	; (8009728 <HAL_RCC_OscConfig+0x280>)
 8009708:	f023 0301 	bic.w	r3, r3, #1
 800970c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800970e:	f7fc fbdd 	bl	8005ecc <HAL_GetTick>
 8009712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009714:	e00a      	b.n	800972c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009716:	f7fc fbd9 	bl	8005ecc <HAL_GetTick>
 800971a:	4602      	mov	r2, r0
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	2b02      	cmp	r3, #2
 8009722:	d903      	bls.n	800972c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e15c      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
 8009728:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800972c:	4b91      	ldr	r3, [pc, #580]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 800972e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1ee      	bne.n	8009716 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0304 	and.w	r3, r3, #4
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 80a4 	beq.w	800988e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009746:	4b8b      	ldr	r3, [pc, #556]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10d      	bne.n	800976e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009752:	4b88      	ldr	r3, [pc, #544]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009756:	4a87      	ldr	r2, [pc, #540]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800975c:	6413      	str	r3, [r2, #64]	; 0x40
 800975e:	4b85      	ldr	r3, [pc, #532]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009766:	60bb      	str	r3, [r7, #8]
 8009768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800976a:	2301      	movs	r3, #1
 800976c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800976e:	4b82      	ldr	r3, [pc, #520]	; (8009978 <HAL_RCC_OscConfig+0x4d0>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009776:	2b00      	cmp	r3, #0
 8009778:	d118      	bne.n	80097ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800977a:	4b7f      	ldr	r3, [pc, #508]	; (8009978 <HAL_RCC_OscConfig+0x4d0>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a7e      	ldr	r2, [pc, #504]	; (8009978 <HAL_RCC_OscConfig+0x4d0>)
 8009780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009786:	f7fc fba1 	bl	8005ecc <HAL_GetTick>
 800978a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800978c:	e008      	b.n	80097a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800978e:	f7fc fb9d 	bl	8005ecc <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	2b64      	cmp	r3, #100	; 0x64
 800979a:	d901      	bls.n	80097a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	e120      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097a0:	4b75      	ldr	r3, [pc, #468]	; (8009978 <HAL_RCC_OscConfig+0x4d0>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d0f0      	beq.n	800978e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d106      	bne.n	80097c2 <HAL_RCC_OscConfig+0x31a>
 80097b4:	4b6f      	ldr	r3, [pc, #444]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 80097b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b8:	4a6e      	ldr	r2, [pc, #440]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 80097ba:	f043 0301 	orr.w	r3, r3, #1
 80097be:	6713      	str	r3, [r2, #112]	; 0x70
 80097c0:	e02d      	b.n	800981e <HAL_RCC_OscConfig+0x376>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10c      	bne.n	80097e4 <HAL_RCC_OscConfig+0x33c>
 80097ca:	4b6a      	ldr	r3, [pc, #424]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 80097cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ce:	4a69      	ldr	r2, [pc, #420]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 80097d0:	f023 0301 	bic.w	r3, r3, #1
 80097d4:	6713      	str	r3, [r2, #112]	; 0x70
 80097d6:	4b67      	ldr	r3, [pc, #412]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 80097d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097da:	4a66      	ldr	r2, [pc, #408]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 80097dc:	f023 0304 	bic.w	r3, r3, #4
 80097e0:	6713      	str	r3, [r2, #112]	; 0x70
 80097e2:	e01c      	b.n	800981e <HAL_RCC_OscConfig+0x376>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	2b05      	cmp	r3, #5
 80097ea:	d10c      	bne.n	8009806 <HAL_RCC_OscConfig+0x35e>
 80097ec:	4b61      	ldr	r3, [pc, #388]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 80097ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f0:	4a60      	ldr	r2, [pc, #384]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 80097f2:	f043 0304 	orr.w	r3, r3, #4
 80097f6:	6713      	str	r3, [r2, #112]	; 0x70
 80097f8:	4b5e      	ldr	r3, [pc, #376]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 80097fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fc:	4a5d      	ldr	r2, [pc, #372]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 80097fe:	f043 0301 	orr.w	r3, r3, #1
 8009802:	6713      	str	r3, [r2, #112]	; 0x70
 8009804:	e00b      	b.n	800981e <HAL_RCC_OscConfig+0x376>
 8009806:	4b5b      	ldr	r3, [pc, #364]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980a:	4a5a      	ldr	r2, [pc, #360]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 800980c:	f023 0301 	bic.w	r3, r3, #1
 8009810:	6713      	str	r3, [r2, #112]	; 0x70
 8009812:	4b58      	ldr	r3, [pc, #352]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009816:	4a57      	ldr	r2, [pc, #348]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009818:	f023 0304 	bic.w	r3, r3, #4
 800981c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d015      	beq.n	8009852 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009826:	f7fc fb51 	bl	8005ecc <HAL_GetTick>
 800982a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800982c:	e00a      	b.n	8009844 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800982e:	f7fc fb4d 	bl	8005ecc <HAL_GetTick>
 8009832:	4602      	mov	r2, r0
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	f241 3288 	movw	r2, #5000	; 0x1388
 800983c:	4293      	cmp	r3, r2
 800983e:	d901      	bls.n	8009844 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e0ce      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009844:	4b4b      	ldr	r3, [pc, #300]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0ee      	beq.n	800982e <HAL_RCC_OscConfig+0x386>
 8009850:	e014      	b.n	800987c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009852:	f7fc fb3b 	bl	8005ecc <HAL_GetTick>
 8009856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009858:	e00a      	b.n	8009870 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800985a:	f7fc fb37 	bl	8005ecc <HAL_GetTick>
 800985e:	4602      	mov	r2, r0
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	f241 3288 	movw	r2, #5000	; 0x1388
 8009868:	4293      	cmp	r3, r2
 800986a:	d901      	bls.n	8009870 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800986c:	2303      	movs	r3, #3
 800986e:	e0b8      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009870:	4b40      	ldr	r3, [pc, #256]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009874:	f003 0302 	and.w	r3, r3, #2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1ee      	bne.n	800985a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800987c:	7dfb      	ldrb	r3, [r7, #23]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d105      	bne.n	800988e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009882:	4b3c      	ldr	r3, [pc, #240]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009886:	4a3b      	ldr	r2, [pc, #236]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800988c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 80a4 	beq.w	80099e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009898:	4b36      	ldr	r3, [pc, #216]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f003 030c 	and.w	r3, r3, #12
 80098a0:	2b08      	cmp	r3, #8
 80098a2:	d06b      	beq.n	800997c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d149      	bne.n	8009940 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098ac:	4b31      	ldr	r3, [pc, #196]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a30      	ldr	r2, [pc, #192]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 80098b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098b8:	f7fc fb08 	bl	8005ecc <HAL_GetTick>
 80098bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098be:	e008      	b.n	80098d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098c0:	f7fc fb04 	bl	8005ecc <HAL_GetTick>
 80098c4:	4602      	mov	r2, r0
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d901      	bls.n	80098d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e087      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098d2:	4b28      	ldr	r3, [pc, #160]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1f0      	bne.n	80098c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	69da      	ldr	r2, [r3, #28]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	431a      	orrs	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	019b      	lsls	r3, r3, #6
 80098ee:	431a      	orrs	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f4:	085b      	lsrs	r3, r3, #1
 80098f6:	3b01      	subs	r3, #1
 80098f8:	041b      	lsls	r3, r3, #16
 80098fa:	431a      	orrs	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	061b      	lsls	r3, r3, #24
 8009902:	4313      	orrs	r3, r2
 8009904:	4a1b      	ldr	r2, [pc, #108]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009906:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800990a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800990c:	4b19      	ldr	r3, [pc, #100]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a18      	ldr	r2, [pc, #96]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009918:	f7fc fad8 	bl	8005ecc <HAL_GetTick>
 800991c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800991e:	e008      	b.n	8009932 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009920:	f7fc fad4 	bl	8005ecc <HAL_GetTick>
 8009924:	4602      	mov	r2, r0
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	2b02      	cmp	r3, #2
 800992c:	d901      	bls.n	8009932 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e057      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009932:	4b10      	ldr	r3, [pc, #64]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0f0      	beq.n	8009920 <HAL_RCC_OscConfig+0x478>
 800993e:	e04f      	b.n	80099e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009940:	4b0c      	ldr	r3, [pc, #48]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a0b      	ldr	r2, [pc, #44]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800994a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800994c:	f7fc fabe 	bl	8005ecc <HAL_GetTick>
 8009950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009952:	e008      	b.n	8009966 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009954:	f7fc faba 	bl	8005ecc <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	2b02      	cmp	r3, #2
 8009960:	d901      	bls.n	8009966 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e03d      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009966:	4b03      	ldr	r3, [pc, #12]	; (8009974 <HAL_RCC_OscConfig+0x4cc>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1f0      	bne.n	8009954 <HAL_RCC_OscConfig+0x4ac>
 8009972:	e035      	b.n	80099e0 <HAL_RCC_OscConfig+0x538>
 8009974:	40023800 	.word	0x40023800
 8009978:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800997c:	4b1b      	ldr	r3, [pc, #108]	; (80099ec <HAL_RCC_OscConfig+0x544>)
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d028      	beq.n	80099dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009994:	429a      	cmp	r2, r3
 8009996:	d121      	bne.n	80099dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d11a      	bne.n	80099dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80099ac:	4013      	ands	r3, r2
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80099b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d111      	bne.n	80099dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c2:	085b      	lsrs	r3, r3, #1
 80099c4:	3b01      	subs	r3, #1
 80099c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d107      	bne.n	80099dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80099d8:	429a      	cmp	r2, r3
 80099da:	d001      	beq.n	80099e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e000      	b.n	80099e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	40023800 	.word	0x40023800

080099f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e0d0      	b.n	8009baa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009a08:	4b6a      	ldr	r3, [pc, #424]	; (8009bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 030f 	and.w	r3, r3, #15
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d910      	bls.n	8009a38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a16:	4b67      	ldr	r3, [pc, #412]	; (8009bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f023 020f 	bic.w	r2, r3, #15
 8009a1e:	4965      	ldr	r1, [pc, #404]	; (8009bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a26:	4b63      	ldr	r3, [pc, #396]	; (8009bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f003 030f 	and.w	r3, r3, #15
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d001      	beq.n	8009a38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e0b8      	b.n	8009baa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0302 	and.w	r3, r3, #2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d020      	beq.n	8009a86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0304 	and.w	r3, r3, #4
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d005      	beq.n	8009a5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009a50:	4b59      	ldr	r3, [pc, #356]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	4a58      	ldr	r2, [pc, #352]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009a5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 0308 	and.w	r3, r3, #8
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d005      	beq.n	8009a74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009a68:	4b53      	ldr	r3, [pc, #332]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	4a52      	ldr	r2, [pc, #328]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009a72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a74:	4b50      	ldr	r3, [pc, #320]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	494d      	ldr	r1, [pc, #308]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009a82:	4313      	orrs	r3, r2
 8009a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d040      	beq.n	8009b14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d107      	bne.n	8009aaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a9a:	4b47      	ldr	r3, [pc, #284]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d115      	bne.n	8009ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e07f      	b.n	8009baa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d107      	bne.n	8009ac2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ab2:	4b41      	ldr	r3, [pc, #260]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d109      	bne.n	8009ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e073      	b.n	8009baa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ac2:	4b3d      	ldr	r3, [pc, #244]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 0302 	and.w	r3, r3, #2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e06b      	b.n	8009baa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ad2:	4b39      	ldr	r3, [pc, #228]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f023 0203 	bic.w	r2, r3, #3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	4936      	ldr	r1, [pc, #216]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ae4:	f7fc f9f2 	bl	8005ecc <HAL_GetTick>
 8009ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009aea:	e00a      	b.n	8009b02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009aec:	f7fc f9ee 	bl	8005ecc <HAL_GetTick>
 8009af0:	4602      	mov	r2, r0
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d901      	bls.n	8009b02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e053      	b.n	8009baa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b02:	4b2d      	ldr	r3, [pc, #180]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f003 020c 	and.w	r2, r3, #12
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d1eb      	bne.n	8009aec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009b14:	4b27      	ldr	r3, [pc, #156]	; (8009bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 030f 	and.w	r3, r3, #15
 8009b1c:	683a      	ldr	r2, [r7, #0]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d210      	bcs.n	8009b44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b22:	4b24      	ldr	r3, [pc, #144]	; (8009bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f023 020f 	bic.w	r2, r3, #15
 8009b2a:	4922      	ldr	r1, [pc, #136]	; (8009bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b32:	4b20      	ldr	r3, [pc, #128]	; (8009bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 030f 	and.w	r3, r3, #15
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d001      	beq.n	8009b44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	e032      	b.n	8009baa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d008      	beq.n	8009b62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b50:	4b19      	ldr	r3, [pc, #100]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	4916      	ldr	r1, [pc, #88]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 0308 	and.w	r3, r3, #8
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d009      	beq.n	8009b82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009b6e:	4b12      	ldr	r3, [pc, #72]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	00db      	lsls	r3, r3, #3
 8009b7c:	490e      	ldr	r1, [pc, #56]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009b82:	f000 f821 	bl	8009bc8 <HAL_RCC_GetSysClockFreq>
 8009b86:	4602      	mov	r2, r0
 8009b88:	4b0b      	ldr	r3, [pc, #44]	; (8009bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	091b      	lsrs	r3, r3, #4
 8009b8e:	f003 030f 	and.w	r3, r3, #15
 8009b92:	490a      	ldr	r1, [pc, #40]	; (8009bbc <HAL_RCC_ClockConfig+0x1cc>)
 8009b94:	5ccb      	ldrb	r3, [r1, r3]
 8009b96:	fa22 f303 	lsr.w	r3, r2, r3
 8009b9a:	4a09      	ldr	r2, [pc, #36]	; (8009bc0 <HAL_RCC_ClockConfig+0x1d0>)
 8009b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <HAL_RCC_ClockConfig+0x1d4>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fc f854 	bl	8005c50 <HAL_InitTick>

  return HAL_OK;
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	40023c00 	.word	0x40023c00
 8009bb8:	40023800 	.word	0x40023800
 8009bbc:	080901e0 	.word	0x080901e0
 8009bc0:	20000040 	.word	0x20000040
 8009bc4:	20000044 	.word	0x20000044

08009bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009bc8:	b5b0      	push	{r4, r5, r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009bce:	2100      	movs	r1, #0
 8009bd0:	6079      	str	r1, [r7, #4]
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	60f9      	str	r1, [r7, #12]
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8009bda:	2100      	movs	r1, #0
 8009bdc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009bde:	4952      	ldr	r1, [pc, #328]	; (8009d28 <HAL_RCC_GetSysClockFreq+0x160>)
 8009be0:	6889      	ldr	r1, [r1, #8]
 8009be2:	f001 010c 	and.w	r1, r1, #12
 8009be6:	2908      	cmp	r1, #8
 8009be8:	d00d      	beq.n	8009c06 <HAL_RCC_GetSysClockFreq+0x3e>
 8009bea:	2908      	cmp	r1, #8
 8009bec:	f200 8094 	bhi.w	8009d18 <HAL_RCC_GetSysClockFreq+0x150>
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	d002      	beq.n	8009bfa <HAL_RCC_GetSysClockFreq+0x32>
 8009bf4:	2904      	cmp	r1, #4
 8009bf6:	d003      	beq.n	8009c00 <HAL_RCC_GetSysClockFreq+0x38>
 8009bf8:	e08e      	b.n	8009d18 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009bfa:	4b4c      	ldr	r3, [pc, #304]	; (8009d2c <HAL_RCC_GetSysClockFreq+0x164>)
 8009bfc:	60bb      	str	r3, [r7, #8]
      break;
 8009bfe:	e08e      	b.n	8009d1e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009c00:	4b4b      	ldr	r3, [pc, #300]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x168>)
 8009c02:	60bb      	str	r3, [r7, #8]
      break;
 8009c04:	e08b      	b.n	8009d1e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c06:	4948      	ldr	r1, [pc, #288]	; (8009d28 <HAL_RCC_GetSysClockFreq+0x160>)
 8009c08:	6849      	ldr	r1, [r1, #4]
 8009c0a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009c0e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009c10:	4945      	ldr	r1, [pc, #276]	; (8009d28 <HAL_RCC_GetSysClockFreq+0x160>)
 8009c12:	6849      	ldr	r1, [r1, #4]
 8009c14:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009c18:	2900      	cmp	r1, #0
 8009c1a:	d024      	beq.n	8009c66 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c1c:	4942      	ldr	r1, [pc, #264]	; (8009d28 <HAL_RCC_GetSysClockFreq+0x160>)
 8009c1e:	6849      	ldr	r1, [r1, #4]
 8009c20:	0989      	lsrs	r1, r1, #6
 8009c22:	4608      	mov	r0, r1
 8009c24:	f04f 0100 	mov.w	r1, #0
 8009c28:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009c2c:	f04f 0500 	mov.w	r5, #0
 8009c30:	ea00 0204 	and.w	r2, r0, r4
 8009c34:	ea01 0305 	and.w	r3, r1, r5
 8009c38:	493d      	ldr	r1, [pc, #244]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x168>)
 8009c3a:	fb01 f003 	mul.w	r0, r1, r3
 8009c3e:	2100      	movs	r1, #0
 8009c40:	fb01 f102 	mul.w	r1, r1, r2
 8009c44:	1844      	adds	r4, r0, r1
 8009c46:	493a      	ldr	r1, [pc, #232]	; (8009d30 <HAL_RCC_GetSysClockFreq+0x168>)
 8009c48:	fba2 0101 	umull	r0, r1, r2, r1
 8009c4c:	1863      	adds	r3, r4, r1
 8009c4e:	4619      	mov	r1, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	461a      	mov	r2, r3
 8009c54:	f04f 0300 	mov.w	r3, #0
 8009c58:	f7f6 ff96 	bl	8000b88 <__aeabi_uldivmod>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4613      	mov	r3, r2
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	e04a      	b.n	8009cfc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c66:	4b30      	ldr	r3, [pc, #192]	; (8009d28 <HAL_RCC_GetSysClockFreq+0x160>)
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	099b      	lsrs	r3, r3, #6
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	f04f 0300 	mov.w	r3, #0
 8009c72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009c76:	f04f 0100 	mov.w	r1, #0
 8009c7a:	ea02 0400 	and.w	r4, r2, r0
 8009c7e:	ea03 0501 	and.w	r5, r3, r1
 8009c82:	4620      	mov	r0, r4
 8009c84:	4629      	mov	r1, r5
 8009c86:	f04f 0200 	mov.w	r2, #0
 8009c8a:	f04f 0300 	mov.w	r3, #0
 8009c8e:	014b      	lsls	r3, r1, #5
 8009c90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009c94:	0142      	lsls	r2, r0, #5
 8009c96:	4610      	mov	r0, r2
 8009c98:	4619      	mov	r1, r3
 8009c9a:	1b00      	subs	r0, r0, r4
 8009c9c:	eb61 0105 	sbc.w	r1, r1, r5
 8009ca0:	f04f 0200 	mov.w	r2, #0
 8009ca4:	f04f 0300 	mov.w	r3, #0
 8009ca8:	018b      	lsls	r3, r1, #6
 8009caa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009cae:	0182      	lsls	r2, r0, #6
 8009cb0:	1a12      	subs	r2, r2, r0
 8009cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8009cb6:	f04f 0000 	mov.w	r0, #0
 8009cba:	f04f 0100 	mov.w	r1, #0
 8009cbe:	00d9      	lsls	r1, r3, #3
 8009cc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009cc4:	00d0      	lsls	r0, r2, #3
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	1912      	adds	r2, r2, r4
 8009ccc:	eb45 0303 	adc.w	r3, r5, r3
 8009cd0:	f04f 0000 	mov.w	r0, #0
 8009cd4:	f04f 0100 	mov.w	r1, #0
 8009cd8:	0299      	lsls	r1, r3, #10
 8009cda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009cde:	0290      	lsls	r0, r2, #10
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	461a      	mov	r2, r3
 8009cec:	f04f 0300 	mov.w	r3, #0
 8009cf0:	f7f6 ff4a 	bl	8000b88 <__aeabi_uldivmod>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <HAL_RCC_GetSysClockFreq+0x160>)
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	0c1b      	lsrs	r3, r3, #16
 8009d02:	f003 0303 	and.w	r3, r3, #3
 8009d06:	3301      	adds	r3, #1
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d14:	60bb      	str	r3, [r7, #8]
      break;
 8009d16:	e002      	b.n	8009d1e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009d18:	4b04      	ldr	r3, [pc, #16]	; (8009d2c <HAL_RCC_GetSysClockFreq+0x164>)
 8009d1a:	60bb      	str	r3, [r7, #8]
      break;
 8009d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d1e:	68bb      	ldr	r3, [r7, #8]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bdb0      	pop	{r4, r5, r7, pc}
 8009d28:	40023800 	.word	0x40023800
 8009d2c:	00f42400 	.word	0x00f42400
 8009d30:	017d7840 	.word	0x017d7840

08009d34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d34:	b480      	push	{r7}
 8009d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d38:	4b03      	ldr	r3, [pc, #12]	; (8009d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	20000040 	.word	0x20000040

08009d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009d50:	f7ff fff0 	bl	8009d34 <HAL_RCC_GetHCLKFreq>
 8009d54:	4602      	mov	r2, r0
 8009d56:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	0a9b      	lsrs	r3, r3, #10
 8009d5c:	f003 0307 	and.w	r3, r3, #7
 8009d60:	4903      	ldr	r1, [pc, #12]	; (8009d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d62:	5ccb      	ldrb	r3, [r1, r3]
 8009d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	40023800 	.word	0x40023800
 8009d70:	080901f0 	.word	0x080901f0

08009d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009d78:	f7ff ffdc 	bl	8009d34 <HAL_RCC_GetHCLKFreq>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	0b5b      	lsrs	r3, r3, #13
 8009d84:	f003 0307 	and.w	r3, r3, #7
 8009d88:	4903      	ldr	r1, [pc, #12]	; (8009d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d8a:	5ccb      	ldrb	r3, [r1, r3]
 8009d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	40023800 	.word	0x40023800
 8009d98:	080901f0 	.word	0x080901f0

08009d9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	220f      	movs	r2, #15
 8009daa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009dac:	4b12      	ldr	r3, [pc, #72]	; (8009df8 <HAL_RCC_GetClockConfig+0x5c>)
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	f003 0203 	and.w	r2, r3, #3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009db8:	4b0f      	ldr	r3, [pc, #60]	; (8009df8 <HAL_RCC_GetClockConfig+0x5c>)
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009dc4:	4b0c      	ldr	r3, [pc, #48]	; (8009df8 <HAL_RCC_GetClockConfig+0x5c>)
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009dd0:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <HAL_RCC_GetClockConfig+0x5c>)
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	08db      	lsrs	r3, r3, #3
 8009dd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009dde:	4b07      	ldr	r3, [pc, #28]	; (8009dfc <HAL_RCC_GetClockConfig+0x60>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 020f 	and.w	r2, r3, #15
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	601a      	str	r2, [r3, #0]
}
 8009dea:	bf00      	nop
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	40023800 	.word	0x40023800
 8009dfc:	40023c00 	.word	0x40023c00

08009e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b088      	sub	sp, #32
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d012      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009e28:	4b69      	ldr	r3, [pc, #420]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	4a68      	ldr	r2, [pc, #416]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009e32:	6093      	str	r3, [r2, #8]
 8009e34:	4b66      	ldr	r3, [pc, #408]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e36:	689a      	ldr	r2, [r3, #8]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3c:	4964      	ldr	r1, [pc, #400]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d101      	bne.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d017      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e5a:	4b5d      	ldr	r3, [pc, #372]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e68:	4959      	ldr	r1, [pc, #356]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e78:	d101      	bne.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009e86:	2301      	movs	r3, #1
 8009e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d017      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009e96:	4b4e      	ldr	r3, [pc, #312]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea4:	494a      	ldr	r1, [pc, #296]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009eb4:	d101      	bne.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0320 	and.w	r3, r3, #32
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f000 808b 	beq.w	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009ee4:	4b3a      	ldr	r3, [pc, #232]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee8:	4a39      	ldr	r2, [pc, #228]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eee:	6413      	str	r3, [r2, #64]	; 0x40
 8009ef0:	4b37      	ldr	r3, [pc, #220]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ef8:	60bb      	str	r3, [r7, #8]
 8009efa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009efc:	4b35      	ldr	r3, [pc, #212]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a34      	ldr	r2, [pc, #208]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f08:	f7fb ffe0 	bl	8005ecc <HAL_GetTick>
 8009f0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009f0e:	e008      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f10:	f7fb ffdc 	bl	8005ecc <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	2b64      	cmp	r3, #100	; 0x64
 8009f1c:	d901      	bls.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	e357      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009f22:	4b2c      	ldr	r3, [pc, #176]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d0f0      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009f2e:	4b28      	ldr	r3, [pc, #160]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d035      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d02e      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f4c:	4b20      	ldr	r3, [pc, #128]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009f56:	4b1e      	ldr	r3, [pc, #120]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f5a:	4a1d      	ldr	r2, [pc, #116]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f60:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009f62:	4b1b      	ldr	r3, [pc, #108]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f66:	4a1a      	ldr	r2, [pc, #104]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009f6e:	4a18      	ldr	r2, [pc, #96]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009f74:	4b16      	ldr	r3, [pc, #88]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f78:	f003 0301 	and.w	r3, r3, #1
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d114      	bne.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f80:	f7fb ffa4 	bl	8005ecc <HAL_GetTick>
 8009f84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f86:	e00a      	b.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f88:	f7fb ffa0 	bl	8005ecc <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d901      	bls.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e319      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f9e:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d0ee      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fb6:	d111      	bne.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009fc4:	4b04      	ldr	r3, [pc, #16]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009fc6:	400b      	ands	r3, r1
 8009fc8:	4901      	ldr	r1, [pc, #4]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	608b      	str	r3, [r1, #8]
 8009fce:	e00b      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009fd0:	40023800 	.word	0x40023800
 8009fd4:	40007000 	.word	0x40007000
 8009fd8:	0ffffcff 	.word	0x0ffffcff
 8009fdc:	4bb1      	ldr	r3, [pc, #708]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	4ab0      	ldr	r2, [pc, #704]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009fe2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009fe6:	6093      	str	r3, [r2, #8]
 8009fe8:	4bae      	ldr	r3, [pc, #696]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009fea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ff4:	49ab      	ldr	r1, [pc, #684]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 0310 	and.w	r3, r3, #16
 800a002:	2b00      	cmp	r3, #0
 800a004:	d010      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a006:	4ba7      	ldr	r3, [pc, #668]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a00c:	4aa5      	ldr	r2, [pc, #660]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a00e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a012:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a016:	4ba3      	ldr	r3, [pc, #652]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a018:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a020:	49a0      	ldr	r1, [pc, #640]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a022:	4313      	orrs	r3, r2
 800a024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00a      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a034:	4b9b      	ldr	r3, [pc, #620]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a03a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a042:	4998      	ldr	r1, [pc, #608]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a044:	4313      	orrs	r3, r2
 800a046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00a      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a056:	4b93      	ldr	r3, [pc, #588]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a05c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a064:	498f      	ldr	r1, [pc, #572]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a066:	4313      	orrs	r3, r2
 800a068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00a      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a078:	4b8a      	ldr	r3, [pc, #552]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a07e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a086:	4987      	ldr	r1, [pc, #540]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00a      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a09a:	4b82      	ldr	r3, [pc, #520]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0a8:	497e      	ldr	r1, [pc, #504]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00a      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a0bc:	4b79      	ldr	r3, [pc, #484]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a0be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0c2:	f023 0203 	bic.w	r2, r3, #3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ca:	4976      	ldr	r1, [pc, #472]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00a      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a0de:	4b71      	ldr	r3, [pc, #452]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a0e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0e4:	f023 020c 	bic.w	r2, r3, #12
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0ec:	496d      	ldr	r1, [pc, #436]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00a      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a100:	4b68      	ldr	r3, [pc, #416]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a106:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a10e:	4965      	ldr	r1, [pc, #404]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a110:	4313      	orrs	r3, r2
 800a112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00a      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a122:	4b60      	ldr	r3, [pc, #384]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a128:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a130:	495c      	ldr	r1, [pc, #368]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a132:	4313      	orrs	r3, r2
 800a134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00a      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a144:	4b57      	ldr	r3, [pc, #348]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a14a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a152:	4954      	ldr	r1, [pc, #336]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a154:	4313      	orrs	r3, r2
 800a156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00a      	beq.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a166:	4b4f      	ldr	r3, [pc, #316]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a16c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a174:	494b      	ldr	r1, [pc, #300]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a176:	4313      	orrs	r3, r2
 800a178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00a      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a188:	4b46      	ldr	r3, [pc, #280]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a18a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a18e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a196:	4943      	ldr	r1, [pc, #268]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a198:	4313      	orrs	r3, r2
 800a19a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00a      	beq.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a1aa:	4b3e      	ldr	r3, [pc, #248]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a1ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1b8:	493a      	ldr	r1, [pc, #232]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00a      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a1cc:	4b35      	ldr	r3, [pc, #212]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1da:	4932      	ldr	r1, [pc, #200]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d011      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a1ee:	4b2d      	ldr	r3, [pc, #180]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a1f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1fc:	4929      	ldr	r1, [pc, #164]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a1fe:	4313      	orrs	r3, r2
 800a200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a20c:	d101      	bne.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a20e:	2301      	movs	r3, #1
 800a210:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0308 	and.w	r3, r3, #8
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a21e:	2301      	movs	r3, #1
 800a220:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00a      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a22e:	4b1d      	ldr	r3, [pc, #116]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a234:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a23c:	4919      	ldr	r1, [pc, #100]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a23e:	4313      	orrs	r3, r2
 800a240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00b      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a250:	4b14      	ldr	r3, [pc, #80]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a256:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a260:	4910      	ldr	r1, [pc, #64]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a262:	4313      	orrs	r3, r2
 800a264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d006      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 80d9 	beq.w	800a42e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a27c:	4b09      	ldr	r3, [pc, #36]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a08      	ldr	r2, [pc, #32]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a282:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a288:	f7fb fe20 	bl	8005ecc <HAL_GetTick>
 800a28c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a28e:	e00b      	b.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a290:	f7fb fe1c 	bl	8005ecc <HAL_GetTick>
 800a294:	4602      	mov	r2, r0
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	2b64      	cmp	r3, #100	; 0x64
 800a29c:	d904      	bls.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	e197      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a2a2:	bf00      	nop
 800a2a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a2a8:	4b6c      	ldr	r3, [pc, #432]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1ed      	bne.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d021      	beq.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d11d      	bne.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a2c8:	4b64      	ldr	r3, [pc, #400]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2ce:	0c1b      	lsrs	r3, r3, #16
 800a2d0:	f003 0303 	and.w	r3, r3, #3
 800a2d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a2d6:	4b61      	ldr	r3, [pc, #388]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2dc:	0e1b      	lsrs	r3, r3, #24
 800a2de:	f003 030f 	and.w	r3, r3, #15
 800a2e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	019a      	lsls	r2, r3, #6
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	041b      	lsls	r3, r3, #16
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	061b      	lsls	r3, r3, #24
 800a2f4:	431a      	orrs	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	071b      	lsls	r3, r3, #28
 800a2fc:	4957      	ldr	r1, [pc, #348]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d004      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a318:	d00a      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a322:	2b00      	cmp	r3, #0
 800a324:	d02e      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a32e:	d129      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a330:	4b4a      	ldr	r3, [pc, #296]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a336:	0c1b      	lsrs	r3, r3, #16
 800a338:	f003 0303 	and.w	r3, r3, #3
 800a33c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a33e:	4b47      	ldr	r3, [pc, #284]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a344:	0f1b      	lsrs	r3, r3, #28
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	019a      	lsls	r2, r3, #6
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	041b      	lsls	r3, r3, #16
 800a356:	431a      	orrs	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	061b      	lsls	r3, r3, #24
 800a35e:	431a      	orrs	r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	071b      	lsls	r3, r3, #28
 800a364:	493d      	ldr	r1, [pc, #244]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a366:	4313      	orrs	r3, r2
 800a368:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a36c:	4b3b      	ldr	r3, [pc, #236]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a36e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a372:	f023 021f 	bic.w	r2, r3, #31
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37a:	3b01      	subs	r3, #1
 800a37c:	4937      	ldr	r1, [pc, #220]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a37e:	4313      	orrs	r3, r2
 800a380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01d      	beq.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a390:	4b32      	ldr	r3, [pc, #200]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a396:	0e1b      	lsrs	r3, r3, #24
 800a398:	f003 030f 	and.w	r3, r3, #15
 800a39c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a39e:	4b2f      	ldr	r3, [pc, #188]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3a4:	0f1b      	lsrs	r3, r3, #28
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	019a      	lsls	r2, r3, #6
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	041b      	lsls	r3, r3, #16
 800a3b8:	431a      	orrs	r2, r3
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	061b      	lsls	r3, r3, #24
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	071b      	lsls	r3, r3, #28
 800a3c4:	4925      	ldr	r1, [pc, #148]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d011      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	019a      	lsls	r2, r3, #6
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	041b      	lsls	r3, r3, #16
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	061b      	lsls	r3, r3, #24
 800a3ec:	431a      	orrs	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	071b      	lsls	r3, r3, #28
 800a3f4:	4919      	ldr	r1, [pc, #100]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a3fc:	4b17      	ldr	r3, [pc, #92]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a16      	ldr	r2, [pc, #88]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a402:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a408:	f7fb fd60 	bl	8005ecc <HAL_GetTick>
 800a40c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a40e:	e008      	b.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a410:	f7fb fd5c 	bl	8005ecc <HAL_GetTick>
 800a414:	4602      	mov	r2, r0
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	2b64      	cmp	r3, #100	; 0x64
 800a41c:	d901      	bls.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e0d7      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a422:	4b0e      	ldr	r3, [pc, #56]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d0f0      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	2b01      	cmp	r3, #1
 800a432:	f040 80cd 	bne.w	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a436:	4b09      	ldr	r3, [pc, #36]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a08      	ldr	r2, [pc, #32]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a43c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a442:	f7fb fd43 	bl	8005ecc <HAL_GetTick>
 800a446:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a448:	e00a      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a44a:	f7fb fd3f 	bl	8005ecc <HAL_GetTick>
 800a44e:	4602      	mov	r2, r0
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	2b64      	cmp	r3, #100	; 0x64
 800a456:	d903      	bls.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	e0ba      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a45c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a460:	4b5e      	ldr	r3, [pc, #376]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a46c:	d0ed      	beq.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d009      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d02e      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a492:	2b00      	cmp	r3, #0
 800a494:	d12a      	bne.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a496:	4b51      	ldr	r3, [pc, #324]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a49c:	0c1b      	lsrs	r3, r3, #16
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a4a4:	4b4d      	ldr	r3, [pc, #308]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4aa:	0f1b      	lsrs	r3, r3, #28
 800a4ac:	f003 0307 	and.w	r3, r3, #7
 800a4b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	019a      	lsls	r2, r3, #6
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	041b      	lsls	r3, r3, #16
 800a4bc:	431a      	orrs	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	061b      	lsls	r3, r3, #24
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	071b      	lsls	r3, r3, #28
 800a4ca:	4944      	ldr	r1, [pc, #272]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a4d2:	4b42      	ldr	r3, [pc, #264]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	021b      	lsls	r3, r3, #8
 800a4e4:	493d      	ldr	r1, [pc, #244]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d022      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a500:	d11d      	bne.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a502:	4b36      	ldr	r3, [pc, #216]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a508:	0e1b      	lsrs	r3, r3, #24
 800a50a:	f003 030f 	and.w	r3, r3, #15
 800a50e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a510:	4b32      	ldr	r3, [pc, #200]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a516:	0f1b      	lsrs	r3, r3, #28
 800a518:	f003 0307 	and.w	r3, r3, #7
 800a51c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	019a      	lsls	r2, r3, #6
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	041b      	lsls	r3, r3, #16
 800a52a:	431a      	orrs	r2, r3
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	061b      	lsls	r3, r3, #24
 800a530:	431a      	orrs	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	071b      	lsls	r3, r3, #28
 800a536:	4929      	ldr	r1, [pc, #164]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a538:	4313      	orrs	r3, r2
 800a53a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0308 	and.w	r3, r3, #8
 800a546:	2b00      	cmp	r3, #0
 800a548:	d028      	beq.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a54a:	4b24      	ldr	r3, [pc, #144]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a550:	0e1b      	lsrs	r3, r3, #24
 800a552:	f003 030f 	and.w	r3, r3, #15
 800a556:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a558:	4b20      	ldr	r3, [pc, #128]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a55e:	0c1b      	lsrs	r3, r3, #16
 800a560:	f003 0303 	and.w	r3, r3, #3
 800a564:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	019a      	lsls	r2, r3, #6
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	041b      	lsls	r3, r3, #16
 800a570:	431a      	orrs	r2, r3
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	061b      	lsls	r3, r3, #24
 800a576:	431a      	orrs	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	69db      	ldr	r3, [r3, #28]
 800a57c:	071b      	lsls	r3, r3, #28
 800a57e:	4917      	ldr	r1, [pc, #92]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a580:	4313      	orrs	r3, r2
 800a582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a586:	4b15      	ldr	r3, [pc, #84]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a58c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a594:	4911      	ldr	r1, [pc, #68]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a596:	4313      	orrs	r3, r2
 800a598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a59c:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a0e      	ldr	r2, [pc, #56]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a5a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5a8:	f7fb fc90 	bl	8005ecc <HAL_GetTick>
 800a5ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a5ae:	e008      	b.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a5b0:	f7fb fc8c 	bl	8005ecc <HAL_GetTick>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	2b64      	cmp	r3, #100	; 0x64
 800a5bc:	d901      	bls.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e007      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a5c2:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5ce:	d1ef      	bne.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3720      	adds	r7, #32
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	40023800 	.word	0x40023800

0800a5e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d101      	bne.n	800a5f2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e081      	b.n	800a6f6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	7f5b      	ldrb	r3, [r3, #29]
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d105      	bne.n	800a608 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7fb f844 	bl	8005690 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2202      	movs	r2, #2
 800a60c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	22ca      	movs	r2, #202	; 0xca
 800a614:	625a      	str	r2, [r3, #36]	; 0x24
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2253      	movs	r2, #83	; 0x53
 800a61c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fb16 	bl	800ac50 <RTC_EnterInitMode>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d008      	beq.n	800a63c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	22ff      	movs	r2, #255	; 0xff
 800a630:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2204      	movs	r2, #4
 800a636:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e05c      	b.n	800a6f6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6899      	ldr	r1, [r3, #8]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	4b2e      	ldr	r3, [pc, #184]	; (800a700 <HAL_RTC_Init+0x120>)
 800a648:	400b      	ands	r3, r1
 800a64a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6899      	ldr	r1, [r3, #8]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	431a      	orrs	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	431a      	orrs	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	430a      	orrs	r2, r1
 800a668:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	68d2      	ldr	r2, [r2, #12]
 800a672:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6919      	ldr	r1, [r3, #16]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	041a      	lsls	r2, r3, #16
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	430a      	orrs	r2, r1
 800a686:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68da      	ldr	r2, [r3, #12]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a696:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	f003 0320 	and.w	r3, r3, #32
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10e      	bne.n	800a6c4 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 faaa 	bl	800ac00 <HAL_RTC_WaitForSynchro>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d008      	beq.n	800a6c4 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	22ff      	movs	r2, #255	; 0xff
 800a6b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2204      	movs	r2, #4
 800a6be:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e018      	b.n	800a6f6 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f022 0208 	bic.w	r2, r2, #8
 800a6d2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	699a      	ldr	r2, [r3, #24]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	430a      	orrs	r2, r1
 800a6e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	22ff      	movs	r2, #255	; 0xff
 800a6ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
  }
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	ff8fffbf 	.word	0xff8fffbf

0800a704 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a704:	b590      	push	{r4, r7, lr}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a710:	2300      	movs	r3, #0
 800a712:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	7f1b      	ldrb	r3, [r3, #28]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d101      	bne.n	800a720 <HAL_RTC_SetTime+0x1c>
 800a71c:	2302      	movs	r3, #2
 800a71e:	e0a8      	b.n	800a872 <HAL_RTC_SetTime+0x16e>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2201      	movs	r2, #1
 800a724:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2202      	movs	r2, #2
 800a72a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d126      	bne.n	800a780 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d102      	bne.n	800a746 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2200      	movs	r2, #0
 800a744:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 faac 	bl	800aca8 <RTC_ByteToBcd2>
 800a750:	4603      	mov	r3, r0
 800a752:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	785b      	ldrb	r3, [r3, #1]
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 faa5 	bl	800aca8 <RTC_ByteToBcd2>
 800a75e:	4603      	mov	r3, r0
 800a760:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a762:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	789b      	ldrb	r3, [r3, #2]
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 fa9d 	bl	800aca8 <RTC_ByteToBcd2>
 800a76e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a770:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	7b1b      	ldrb	r3, [r3, #12]
 800a778:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a77a:	4313      	orrs	r3, r2
 800a77c:	617b      	str	r3, [r7, #20]
 800a77e:	e018      	b.n	800a7b2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d102      	bne.n	800a794 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	2200      	movs	r2, #0
 800a792:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	785b      	ldrb	r3, [r3, #1]
 800a79e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a7a0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a7a6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	7b1b      	ldrb	r3, [r3, #12]
 800a7ac:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	22ca      	movs	r2, #202	; 0xca
 800a7b8:	625a      	str	r2, [r3, #36]	; 0x24
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2253      	movs	r2, #83	; 0x53
 800a7c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f000 fa44 	bl	800ac50 <RTC_EnterInitMode>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00b      	beq.n	800a7e6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	22ff      	movs	r2, #255	; 0xff
 800a7d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2204      	movs	r2, #4
 800a7da:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e045      	b.n	800a872 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	6979      	ldr	r1, [r7, #20]
 800a7ec:	4b23      	ldr	r3, [pc, #140]	; (800a87c <HAL_RTC_SetTime+0x178>)
 800a7ee:	400b      	ands	r3, r1
 800a7f0:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	689a      	ldr	r2, [r3, #8]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a800:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	6899      	ldr	r1, [r3, #8]
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	691a      	ldr	r2, [r3, #16]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	431a      	orrs	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	430a      	orrs	r2, r1
 800a818:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68da      	ldr	r2, [r3, #12]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a828:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f003 0320 	and.w	r3, r3, #32
 800a834:	2b00      	cmp	r3, #0
 800a836:	d111      	bne.n	800a85c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f000 f9e1 	bl	800ac00 <HAL_RTC_WaitForSynchro>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00b      	beq.n	800a85c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	22ff      	movs	r2, #255	; 0xff
 800a84a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2204      	movs	r2, #4
 800a850:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	e00a      	b.n	800a872 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	22ff      	movs	r2, #255	; 0xff
 800a862:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2201      	movs	r2, #1
 800a868:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a870:	2300      	movs	r3, #0
  }
}
 800a872:	4618      	mov	r0, r3
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	bd90      	pop	{r4, r7, pc}
 800a87a:	bf00      	nop
 800a87c:	007f7f7f 	.word	0x007f7f7f

0800a880 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a880:	b590      	push	{r4, r7, lr}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	7f1b      	ldrb	r3, [r3, #28]
 800a894:	2b01      	cmp	r3, #1
 800a896:	d101      	bne.n	800a89c <HAL_RTC_SetDate+0x1c>
 800a898:	2302      	movs	r3, #2
 800a89a:	e092      	b.n	800a9c2 <HAL_RTC_SetDate+0x142>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10e      	bne.n	800a8cc <HAL_RTC_SetDate+0x4c>
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	785b      	ldrb	r3, [r3, #1]
 800a8b2:	f003 0310 	and.w	r3, r3, #16
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d008      	beq.n	800a8cc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	785b      	ldrb	r3, [r3, #1]
 800a8be:	f023 0310 	bic.w	r3, r3, #16
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	330a      	adds	r3, #10
 800a8c6:	b2da      	uxtb	r2, r3
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d11c      	bne.n	800a90c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	78db      	ldrb	r3, [r3, #3]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 f9e6 	bl	800aca8 <RTC_ByteToBcd2>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	785b      	ldrb	r3, [r3, #1]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 f9df 	bl	800aca8 <RTC_ByteToBcd2>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a8ee:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	789b      	ldrb	r3, [r3, #2]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 f9d7 	bl	800aca8 <RTC_ByteToBcd2>
 800a8fa:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a8fc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a906:	4313      	orrs	r3, r2
 800a908:	617b      	str	r3, [r7, #20]
 800a90a:	e00e      	b.n	800a92a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	78db      	ldrb	r3, [r3, #3]
 800a910:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	785b      	ldrb	r3, [r3, #1]
 800a916:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a918:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a91e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a926:	4313      	orrs	r3, r2
 800a928:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	22ca      	movs	r2, #202	; 0xca
 800a930:	625a      	str	r2, [r3, #36]	; 0x24
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2253      	movs	r2, #83	; 0x53
 800a938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f000 f988 	bl	800ac50 <RTC_EnterInitMode>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00b      	beq.n	800a95e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	22ff      	movs	r2, #255	; 0xff
 800a94c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2204      	movs	r2, #4
 800a952:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e031      	b.n	800a9c2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	6979      	ldr	r1, [r7, #20]
 800a964:	4b19      	ldr	r3, [pc, #100]	; (800a9cc <HAL_RTC_SetDate+0x14c>)
 800a966:	400b      	ands	r3, r1
 800a968:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68da      	ldr	r2, [r3, #12]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a978:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	f003 0320 	and.w	r3, r3, #32
 800a984:	2b00      	cmp	r3, #0
 800a986:	d111      	bne.n	800a9ac <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f000 f939 	bl	800ac00 <HAL_RTC_WaitForSynchro>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00b      	beq.n	800a9ac <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	22ff      	movs	r2, #255	; 0xff
 800a99a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2204      	movs	r2, #4
 800a9a0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e00a      	b.n	800a9c2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	22ff      	movs	r2, #255	; 0xff
 800a9b2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
  }
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	371c      	adds	r7, #28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd90      	pop	{r4, r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	00ffff3f 	.word	0x00ffff3f

0800a9d0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a9d0:	b590      	push	{r4, r7, lr}
 800a9d2:	b089      	sub	sp, #36	; 0x24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	61fb      	str	r3, [r7, #28]
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	7f1b      	ldrb	r3, [r3, #28]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d101      	bne.n	800a9f4 <HAL_RTC_SetAlarm+0x24>
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	e101      	b.n	800abf8 <HAL_RTC_SetAlarm+0x228>
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2202      	movs	r2, #2
 800a9fe:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d137      	bne.n	800aa76 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d102      	bne.n	800aa1a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	2200      	movs	r2, #0
 800aa18:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 f942 	bl	800aca8 <RTC_ByteToBcd2>
 800aa24:	4603      	mov	r3, r0
 800aa26:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	785b      	ldrb	r3, [r3, #1]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 f93b 	bl	800aca8 <RTC_ByteToBcd2>
 800aa32:	4603      	mov	r3, r0
 800aa34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800aa36:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	789b      	ldrb	r3, [r3, #2]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 f933 	bl	800aca8 <RTC_ByteToBcd2>
 800aa42:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800aa44:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	7b1b      	ldrb	r3, [r3, #12]
 800aa4c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800aa4e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 f925 	bl	800aca8 <RTC_ByteToBcd2>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800aa62:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800aa6a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800aa70:	4313      	orrs	r3, r2
 800aa72:	61fb      	str	r3, [r7, #28]
 800aa74:	e023      	b.n	800aabe <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d102      	bne.n	800aa8a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	2200      	movs	r2, #0
 800aa88:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	785b      	ldrb	r3, [r3, #1]
 800aa94:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800aa96:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800aa9c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	7b1b      	ldrb	r3, [r3, #12]
 800aaa2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800aaa4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aaac:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800aaae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800aab4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800aaba:	4313      	orrs	r3, r2
 800aabc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	685a      	ldr	r2, [r3, #4]
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	69db      	ldr	r3, [r3, #28]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	22ca      	movs	r2, #202	; 0xca
 800aad0:	625a      	str	r2, [r3, #36]	; 0x24
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2253      	movs	r2, #83	; 0x53
 800aad8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aae2:	d13f      	bne.n	800ab64 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	689a      	ldr	r2, [r3, #8]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aaf2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689a      	ldr	r2, [r3, #8]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ab02:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ab04:	f7fb f9e2 	bl	8005ecc <HAL_GetTick>
 800ab08:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800ab0a:	e013      	b.n	800ab34 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ab0c:	f7fb f9de 	bl	8005ecc <HAL_GetTick>
 800ab10:	4602      	mov	r2, r0
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab1a:	d90b      	bls.n	800ab34 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	22ff      	movs	r2, #255	; 0xff
 800ab22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2203      	movs	r2, #3
 800ab28:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e061      	b.n	800abf8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	f003 0301 	and.w	r3, r3, #1
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d0e4      	beq.n	800ab0c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	69fa      	ldr	r2, [r7, #28]
 800ab48:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	689a      	ldr	r2, [r3, #8]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab60:	609a      	str	r2, [r3, #8]
 800ab62:	e03e      	b.n	800abe2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	689a      	ldr	r2, [r3, #8]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ab72:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	689a      	ldr	r2, [r3, #8]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab82:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ab84:	f7fb f9a2 	bl	8005ecc <HAL_GetTick>
 800ab88:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800ab8a:	e013      	b.n	800abb4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ab8c:	f7fb f99e 	bl	8005ecc <HAL_GetTick>
 800ab90:	4602      	mov	r2, r0
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab9a:	d90b      	bls.n	800abb4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	22ff      	movs	r2, #255	; 0xff
 800aba2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2203      	movs	r2, #3
 800aba8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e021      	b.n	800abf8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	f003 0302 	and.w	r3, r3, #2
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d0e4      	beq.n	800ab8c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	69fa      	ldr	r2, [r7, #28]
 800abc8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	689a      	ldr	r2, [r3, #8]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abe0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	22ff      	movs	r2, #255	; 0xff
 800abe8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2201      	movs	r2, #1
 800abee:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3724      	adds	r7, #36	; 0x24
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd90      	pop	{r4, r7, pc}

0800ac00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68da      	ldr	r2, [r3, #12]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ac1a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ac1c:	f7fb f956 	bl	8005ecc <HAL_GetTick>
 800ac20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ac22:	e009      	b.n	800ac38 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ac24:	f7fb f952 	bl	8005ecc <HAL_GetTick>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac32:	d901      	bls.n	800ac38 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ac34:	2303      	movs	r3, #3
 800ac36:	e007      	b.n	800ac48 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	f003 0320 	and.w	r3, r3, #32
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0ee      	beq.n	800ac24 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d119      	bne.n	800ac9e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac72:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ac74:	f7fb f92a 	bl	8005ecc <HAL_GetTick>
 800ac78:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ac7a:	e009      	b.n	800ac90 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ac7c:	f7fb f926 	bl	8005ecc <HAL_GetTick>
 800ac80:	4602      	mov	r2, r0
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac8a:	d901      	bls.n	800ac90 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	e007      	b.n	800aca0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d0ee      	beq.n	800ac7c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	4603      	mov	r3, r0
 800acb0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800acb6:	e005      	b.n	800acc4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	3301      	adds	r3, #1
 800acbc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800acbe:	79fb      	ldrb	r3, [r7, #7]
 800acc0:	3b0a      	subs	r3, #10
 800acc2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800acc4:	79fb      	ldrb	r3, [r7, #7]
 800acc6:	2b09      	cmp	r3, #9
 800acc8:	d8f6      	bhi.n	800acb8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	b2db      	uxtb	r3, r3
 800acce:	011b      	lsls	r3, r3, #4
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	79fb      	ldrb	r3, [r7, #7]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	b2db      	uxtb	r3, r3
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3714      	adds	r7, #20
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800acf0:	2300      	movs	r3, #0
 800acf2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	7f1b      	ldrb	r3, [r3, #28]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d101      	bne.n	800ad00 <HAL_RTCEx_SetTimeStamp+0x1c>
 800acfc:	2302      	movs	r3, #2
 800acfe:	e03e      	b.n	800ad7e <HAL_RTCEx_SetTimeStamp+0x9a>
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2201      	movs	r2, #1
 800ad04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2202      	movs	r2, #2
 800ad0a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	689a      	ldr	r2, [r3, #8]
 800ad12:	4b1e      	ldr	r3, [pc, #120]	; (800ad8c <HAL_RTCEx_SetTimeStamp+0xa8>)
 800ad14:	4013      	ands	r3, r2
 800ad16:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	22ca      	movs	r2, #202	; 0xca
 800ad26:	625a      	str	r2, [r3, #36]	; 0x24
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2253      	movs	r2, #83	; 0x53
 800ad2e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f022 0206 	bic.w	r2, r2, #6
 800ad3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	430a      	orrs	r2, r1
 800ad4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	697a      	ldr	r2, [r7, #20]
 800ad56:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	689a      	ldr	r2, [r3, #8]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad66:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	22ff      	movs	r2, #255	; 0xff
 800ad6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2201      	movs	r2, #1
 800ad74:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	371c      	adds	r7, #28
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	fffff7f7 	.word	0xfffff7f7

0800ad90 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e025      	b.n	800adf0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2b00      	cmp	r3, #0
 800adae:	d106      	bne.n	800adbe <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f7fa ff3f 	bl	8005c3c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2202      	movs	r2, #2
 800adc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	3304      	adds	r3, #4
 800adce:	4619      	mov	r1, r3
 800add0:	4610      	mov	r0, r2
 800add2:	f001 fa9b 	bl	800c30c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6818      	ldr	r0, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	461a      	mov	r2, r3
 800ade0:	6839      	ldr	r1, [r7, #0]
 800ade2:	f001 faef 	bl	800c3c4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2201      	movs	r2, #1
 800adea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ae0a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ae0c:	7dfb      	ldrb	r3, [r7, #23]
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d101      	bne.n	800ae16 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800ae12:	2302      	movs	r3, #2
 800ae14:	e021      	b.n	800ae5a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d002      	beq.n	800ae22 <HAL_SDRAM_SendCommand+0x2a>
 800ae1c:	7dfb      	ldrb	r3, [r7, #23]
 800ae1e:	2b05      	cmp	r3, #5
 800ae20:	d118      	bne.n	800ae54 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2202      	movs	r2, #2
 800ae26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	68b9      	ldr	r1, [r7, #8]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f001 fb30 	bl	800c498 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d104      	bne.n	800ae4a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2205      	movs	r2, #5
 800ae44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ae48:	e006      	b.n	800ae58 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ae52:	e001      	b.n	800ae58 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	e000      	b.n	800ae5a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3718      	adds	r7, #24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b082      	sub	sp, #8
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d101      	bne.n	800ae7c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ae78:	2302      	movs	r3, #2
 800ae7a:	e016      	b.n	800aeaa <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d10f      	bne.n	800aea8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	4618      	mov	r0, r3
 800ae98:	f001 fb22 	bl	800c4e0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	e000      	b.n	800aeaa <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e09d      	b.n	800b000 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d108      	bne.n	800aede <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aed4:	d009      	beq.n	800aeea <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	61da      	str	r2, [r3, #28]
 800aedc:	e005      	b.n	800aeea <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d106      	bne.n	800af0a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7fa fbf1 	bl	80056ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2202      	movs	r2, #2
 800af0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af20:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800af2a:	d902      	bls.n	800af32 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]
 800af30:	e002      	b.n	800af38 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800af32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800af40:	d007      	beq.n	800af52 <HAL_SPI_Init+0xa0>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800af4a:	d002      	beq.n	800af52 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800af62:	431a      	orrs	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	f003 0302 	and.w	r3, r3, #2
 800af6c:	431a      	orrs	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	f003 0301 	and.w	r3, r3, #1
 800af76:	431a      	orrs	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af80:	431a      	orrs	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af8a:	431a      	orrs	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a1b      	ldr	r3, [r3, #32]
 800af90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af94:	ea42 0103 	orr.w	r1, r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	430a      	orrs	r2, r1
 800afa6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	0c1b      	lsrs	r3, r3, #16
 800afae:	f003 0204 	and.w	r2, r3, #4
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb6:	f003 0310 	and.w	r3, r3, #16
 800afba:	431a      	orrs	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afc0:	f003 0308 	and.w	r3, r3, #8
 800afc4:	431a      	orrs	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800afce:	ea42 0103 	orr.w	r1, r2, r3
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	430a      	orrs	r2, r1
 800afde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	69da      	ldr	r2, [r3, #28]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800afee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d101      	bne.n	800b01a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	e049      	b.n	800b0ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b020:	b2db      	uxtb	r3, r3
 800b022:	2b00      	cmp	r3, #0
 800b024:	d106      	bne.n	800b034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f7fa fbbe 	bl	80057b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2202      	movs	r2, #2
 800b038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	3304      	adds	r3, #4
 800b044:	4619      	mov	r1, r3
 800b046:	4610      	mov	r0, r2
 800b048:	f000 fb30 	bl	800b6ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
	...

0800b0b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d001      	beq.n	800b0d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e04c      	b.n	800b16a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2202      	movs	r2, #2
 800b0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a26      	ldr	r2, [pc, #152]	; (800b178 <HAL_TIM_Base_Start+0xc0>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d022      	beq.n	800b128 <HAL_TIM_Base_Start+0x70>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ea:	d01d      	beq.n	800b128 <HAL_TIM_Base_Start+0x70>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a22      	ldr	r2, [pc, #136]	; (800b17c <HAL_TIM_Base_Start+0xc4>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d018      	beq.n	800b128 <HAL_TIM_Base_Start+0x70>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a21      	ldr	r2, [pc, #132]	; (800b180 <HAL_TIM_Base_Start+0xc8>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d013      	beq.n	800b128 <HAL_TIM_Base_Start+0x70>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a1f      	ldr	r2, [pc, #124]	; (800b184 <HAL_TIM_Base_Start+0xcc>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d00e      	beq.n	800b128 <HAL_TIM_Base_Start+0x70>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a1e      	ldr	r2, [pc, #120]	; (800b188 <HAL_TIM_Base_Start+0xd0>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d009      	beq.n	800b128 <HAL_TIM_Base_Start+0x70>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a1c      	ldr	r2, [pc, #112]	; (800b18c <HAL_TIM_Base_Start+0xd4>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d004      	beq.n	800b128 <HAL_TIM_Base_Start+0x70>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a1b      	ldr	r2, [pc, #108]	; (800b190 <HAL_TIM_Base_Start+0xd8>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d115      	bne.n	800b154 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	689a      	ldr	r2, [r3, #8]
 800b12e:	4b19      	ldr	r3, [pc, #100]	; (800b194 <HAL_TIM_Base_Start+0xdc>)
 800b130:	4013      	ands	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b06      	cmp	r3, #6
 800b138:	d015      	beq.n	800b166 <HAL_TIM_Base_Start+0xae>
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b140:	d011      	beq.n	800b166 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f042 0201 	orr.w	r2, r2, #1
 800b150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b152:	e008      	b.n	800b166 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f042 0201 	orr.w	r2, r2, #1
 800b162:	601a      	str	r2, [r3, #0]
 800b164:	e000      	b.n	800b168 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b166:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	40010000 	.word	0x40010000
 800b17c:	40000400 	.word	0x40000400
 800b180:	40000800 	.word	0x40000800
 800b184:	40000c00 	.word	0x40000c00
 800b188:	40010400 	.word	0x40010400
 800b18c:	40014000 	.word	0x40014000
 800b190:	40001800 	.word	0x40001800
 800b194:	00010007 	.word	0x00010007

0800b198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d001      	beq.n	800b1b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e054      	b.n	800b25a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2202      	movs	r2, #2
 800b1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68da      	ldr	r2, [r3, #12]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f042 0201 	orr.w	r2, r2, #1
 800b1c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a26      	ldr	r2, [pc, #152]	; (800b268 <HAL_TIM_Base_Start_IT+0xd0>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d022      	beq.n	800b218 <HAL_TIM_Base_Start_IT+0x80>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1da:	d01d      	beq.n	800b218 <HAL_TIM_Base_Start_IT+0x80>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a22      	ldr	r2, [pc, #136]	; (800b26c <HAL_TIM_Base_Start_IT+0xd4>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d018      	beq.n	800b218 <HAL_TIM_Base_Start_IT+0x80>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a21      	ldr	r2, [pc, #132]	; (800b270 <HAL_TIM_Base_Start_IT+0xd8>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d013      	beq.n	800b218 <HAL_TIM_Base_Start_IT+0x80>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a1f      	ldr	r2, [pc, #124]	; (800b274 <HAL_TIM_Base_Start_IT+0xdc>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d00e      	beq.n	800b218 <HAL_TIM_Base_Start_IT+0x80>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a1e      	ldr	r2, [pc, #120]	; (800b278 <HAL_TIM_Base_Start_IT+0xe0>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d009      	beq.n	800b218 <HAL_TIM_Base_Start_IT+0x80>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a1c      	ldr	r2, [pc, #112]	; (800b27c <HAL_TIM_Base_Start_IT+0xe4>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d004      	beq.n	800b218 <HAL_TIM_Base_Start_IT+0x80>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a1b      	ldr	r2, [pc, #108]	; (800b280 <HAL_TIM_Base_Start_IT+0xe8>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d115      	bne.n	800b244 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	689a      	ldr	r2, [r3, #8]
 800b21e:	4b19      	ldr	r3, [pc, #100]	; (800b284 <HAL_TIM_Base_Start_IT+0xec>)
 800b220:	4013      	ands	r3, r2
 800b222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b06      	cmp	r3, #6
 800b228:	d015      	beq.n	800b256 <HAL_TIM_Base_Start_IT+0xbe>
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b230:	d011      	beq.n	800b256 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f042 0201 	orr.w	r2, r2, #1
 800b240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b242:	e008      	b.n	800b256 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f042 0201 	orr.w	r2, r2, #1
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	e000      	b.n	800b258 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b256:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	40010000 	.word	0x40010000
 800b26c:	40000400 	.word	0x40000400
 800b270:	40000800 	.word	0x40000800
 800b274:	40000c00 	.word	0x40000c00
 800b278:	40010400 	.word	0x40010400
 800b27c:	40014000 	.word	0x40014000
 800b280:	40001800 	.word	0x40001800
 800b284:	00010007 	.word	0x00010007

0800b288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	f003 0302 	and.w	r3, r3, #2
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d122      	bne.n	800b2e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	f003 0302 	and.w	r3, r3, #2
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d11b      	bne.n	800b2e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f06f 0202 	mvn.w	r2, #2
 800b2b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	f003 0303 	and.w	r3, r3, #3
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d003      	beq.n	800b2d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f9d0 	bl	800b670 <HAL_TIM_IC_CaptureCallback>
 800b2d0:	e005      	b.n	800b2de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f9c2 	bl	800b65c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f9d3 	bl	800b684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	f003 0304 	and.w	r3, r3, #4
 800b2ee:	2b04      	cmp	r3, #4
 800b2f0:	d122      	bne.n	800b338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	f003 0304 	and.w	r3, r3, #4
 800b2fc:	2b04      	cmp	r3, #4
 800b2fe:	d11b      	bne.n	800b338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f06f 0204 	mvn.w	r2, #4
 800b308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2202      	movs	r2, #2
 800b30e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f9a6 	bl	800b670 <HAL_TIM_IC_CaptureCallback>
 800b324:	e005      	b.n	800b332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f998 	bl	800b65c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f9a9 	bl	800b684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	f003 0308 	and.w	r3, r3, #8
 800b342:	2b08      	cmp	r3, #8
 800b344:	d122      	bne.n	800b38c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	f003 0308 	and.w	r3, r3, #8
 800b350:	2b08      	cmp	r3, #8
 800b352:	d11b      	bne.n	800b38c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f06f 0208 	mvn.w	r2, #8
 800b35c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2204      	movs	r2, #4
 800b362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	69db      	ldr	r3, [r3, #28]
 800b36a:	f003 0303 	and.w	r3, r3, #3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d003      	beq.n	800b37a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f97c 	bl	800b670 <HAL_TIM_IC_CaptureCallback>
 800b378:	e005      	b.n	800b386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 f96e 	bl	800b65c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f97f 	bl	800b684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	f003 0310 	and.w	r3, r3, #16
 800b396:	2b10      	cmp	r3, #16
 800b398:	d122      	bne.n	800b3e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	f003 0310 	and.w	r3, r3, #16
 800b3a4:	2b10      	cmp	r3, #16
 800b3a6:	d11b      	bne.n	800b3e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f06f 0210 	mvn.w	r2, #16
 800b3b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2208      	movs	r2, #8
 800b3b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	69db      	ldr	r3, [r3, #28]
 800b3be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f952 	bl	800b670 <HAL_TIM_IC_CaptureCallback>
 800b3cc:	e005      	b.n	800b3da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 f944 	bl	800b65c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f955 	bl	800b684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	f003 0301 	and.w	r3, r3, #1
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d10e      	bne.n	800b40c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d107      	bne.n	800b40c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f06f 0201 	mvn.w	r2, #1
 800b404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f7f7 ff28 	bl	800325c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	691b      	ldr	r3, [r3, #16]
 800b412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b416:	2b80      	cmp	r3, #128	; 0x80
 800b418:	d10e      	bne.n	800b438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b424:	2b80      	cmp	r3, #128	; 0x80
 800b426:	d107      	bne.n	800b438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 fb0c 	bl	800ba50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b446:	d10e      	bne.n	800b466 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b452:	2b80      	cmp	r3, #128	; 0x80
 800b454:	d107      	bne.n	800b466 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b45e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 faff 	bl	800ba64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b470:	2b40      	cmp	r3, #64	; 0x40
 800b472:	d10e      	bne.n	800b492 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b47e:	2b40      	cmp	r3, #64	; 0x40
 800b480:	d107      	bne.n	800b492 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b48a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 f903 	bl	800b698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	f003 0320 	and.w	r3, r3, #32
 800b49c:	2b20      	cmp	r3, #32
 800b49e:	d10e      	bne.n	800b4be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	f003 0320 	and.w	r3, r3, #32
 800b4aa:	2b20      	cmp	r3, #32
 800b4ac:	d107      	bne.n	800b4be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f06f 0220 	mvn.w	r2, #32
 800b4b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fabf 	bl	800ba3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b4be:	bf00      	nop
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d101      	bne.n	800b4e4 <HAL_TIM_ConfigClockSource+0x1c>
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	e0b4      	b.n	800b64e <HAL_TIM_ConfigClockSource+0x186>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2202      	movs	r2, #2
 800b4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	4b56      	ldr	r3, [pc, #344]	; (800b658 <HAL_TIM_ConfigClockSource+0x190>)
 800b500:	4013      	ands	r3, r2
 800b502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b50a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	68ba      	ldr	r2, [r7, #8]
 800b512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b51c:	d03e      	beq.n	800b59c <HAL_TIM_ConfigClockSource+0xd4>
 800b51e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b522:	f200 8087 	bhi.w	800b634 <HAL_TIM_ConfigClockSource+0x16c>
 800b526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b52a:	f000 8086 	beq.w	800b63a <HAL_TIM_ConfigClockSource+0x172>
 800b52e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b532:	d87f      	bhi.n	800b634 <HAL_TIM_ConfigClockSource+0x16c>
 800b534:	2b70      	cmp	r3, #112	; 0x70
 800b536:	d01a      	beq.n	800b56e <HAL_TIM_ConfigClockSource+0xa6>
 800b538:	2b70      	cmp	r3, #112	; 0x70
 800b53a:	d87b      	bhi.n	800b634 <HAL_TIM_ConfigClockSource+0x16c>
 800b53c:	2b60      	cmp	r3, #96	; 0x60
 800b53e:	d050      	beq.n	800b5e2 <HAL_TIM_ConfigClockSource+0x11a>
 800b540:	2b60      	cmp	r3, #96	; 0x60
 800b542:	d877      	bhi.n	800b634 <HAL_TIM_ConfigClockSource+0x16c>
 800b544:	2b50      	cmp	r3, #80	; 0x50
 800b546:	d03c      	beq.n	800b5c2 <HAL_TIM_ConfigClockSource+0xfa>
 800b548:	2b50      	cmp	r3, #80	; 0x50
 800b54a:	d873      	bhi.n	800b634 <HAL_TIM_ConfigClockSource+0x16c>
 800b54c:	2b40      	cmp	r3, #64	; 0x40
 800b54e:	d058      	beq.n	800b602 <HAL_TIM_ConfigClockSource+0x13a>
 800b550:	2b40      	cmp	r3, #64	; 0x40
 800b552:	d86f      	bhi.n	800b634 <HAL_TIM_ConfigClockSource+0x16c>
 800b554:	2b30      	cmp	r3, #48	; 0x30
 800b556:	d064      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0x15a>
 800b558:	2b30      	cmp	r3, #48	; 0x30
 800b55a:	d86b      	bhi.n	800b634 <HAL_TIM_ConfigClockSource+0x16c>
 800b55c:	2b20      	cmp	r3, #32
 800b55e:	d060      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0x15a>
 800b560:	2b20      	cmp	r3, #32
 800b562:	d867      	bhi.n	800b634 <HAL_TIM_ConfigClockSource+0x16c>
 800b564:	2b00      	cmp	r3, #0
 800b566:	d05c      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0x15a>
 800b568:	2b10      	cmp	r3, #16
 800b56a:	d05a      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0x15a>
 800b56c:	e062      	b.n	800b634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	6899      	ldr	r1, [r3, #8]
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	685a      	ldr	r2, [r3, #4]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	f000 f9af 	bl	800b8e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	609a      	str	r2, [r3, #8]
      break;
 800b59a:	e04f      	b.n	800b63c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6818      	ldr	r0, [r3, #0]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	6899      	ldr	r1, [r3, #8]
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	f000 f998 	bl	800b8e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689a      	ldr	r2, [r3, #8]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5be:	609a      	str	r2, [r3, #8]
      break;
 800b5c0:	e03c      	b.n	800b63c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6818      	ldr	r0, [r3, #0]
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	6859      	ldr	r1, [r3, #4]
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	f000 f90c 	bl	800b7ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2150      	movs	r1, #80	; 0x50
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f000 f965 	bl	800b8aa <TIM_ITRx_SetConfig>
      break;
 800b5e0:	e02c      	b.n	800b63c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6818      	ldr	r0, [r3, #0]
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	6859      	ldr	r1, [r3, #4]
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	f000 f92b 	bl	800b84a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2160      	movs	r1, #96	; 0x60
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 f955 	bl	800b8aa <TIM_ITRx_SetConfig>
      break;
 800b600:	e01c      	b.n	800b63c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6818      	ldr	r0, [r3, #0]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	6859      	ldr	r1, [r3, #4]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	461a      	mov	r2, r3
 800b610:	f000 f8ec 	bl	800b7ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2140      	movs	r1, #64	; 0x40
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 f945 	bl	800b8aa <TIM_ITRx_SetConfig>
      break;
 800b620:	e00c      	b.n	800b63c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4619      	mov	r1, r3
 800b62c:	4610      	mov	r0, r2
 800b62e:	f000 f93c 	bl	800b8aa <TIM_ITRx_SetConfig>
      break;
 800b632:	e003      	b.n	800b63c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	73fb      	strb	r3, [r7, #15]
      break;
 800b638:	e000      	b.n	800b63c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b63a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	fffeff88 	.word	0xfffeff88

0800b65c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b664:	bf00      	nop
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b678:	bf00      	nop
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a40      	ldr	r2, [pc, #256]	; (800b7c0 <TIM_Base_SetConfig+0x114>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d013      	beq.n	800b6ec <TIM_Base_SetConfig+0x40>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ca:	d00f      	beq.n	800b6ec <TIM_Base_SetConfig+0x40>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a3d      	ldr	r2, [pc, #244]	; (800b7c4 <TIM_Base_SetConfig+0x118>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d00b      	beq.n	800b6ec <TIM_Base_SetConfig+0x40>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a3c      	ldr	r2, [pc, #240]	; (800b7c8 <TIM_Base_SetConfig+0x11c>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d007      	beq.n	800b6ec <TIM_Base_SetConfig+0x40>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a3b      	ldr	r2, [pc, #236]	; (800b7cc <TIM_Base_SetConfig+0x120>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d003      	beq.n	800b6ec <TIM_Base_SetConfig+0x40>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a3a      	ldr	r2, [pc, #232]	; (800b7d0 <TIM_Base_SetConfig+0x124>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d108      	bne.n	800b6fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a2f      	ldr	r2, [pc, #188]	; (800b7c0 <TIM_Base_SetConfig+0x114>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d02b      	beq.n	800b75e <TIM_Base_SetConfig+0xb2>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b70c:	d027      	beq.n	800b75e <TIM_Base_SetConfig+0xb2>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a2c      	ldr	r2, [pc, #176]	; (800b7c4 <TIM_Base_SetConfig+0x118>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d023      	beq.n	800b75e <TIM_Base_SetConfig+0xb2>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4a2b      	ldr	r2, [pc, #172]	; (800b7c8 <TIM_Base_SetConfig+0x11c>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d01f      	beq.n	800b75e <TIM_Base_SetConfig+0xb2>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4a2a      	ldr	r2, [pc, #168]	; (800b7cc <TIM_Base_SetConfig+0x120>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d01b      	beq.n	800b75e <TIM_Base_SetConfig+0xb2>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4a29      	ldr	r2, [pc, #164]	; (800b7d0 <TIM_Base_SetConfig+0x124>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d017      	beq.n	800b75e <TIM_Base_SetConfig+0xb2>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4a28      	ldr	r2, [pc, #160]	; (800b7d4 <TIM_Base_SetConfig+0x128>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d013      	beq.n	800b75e <TIM_Base_SetConfig+0xb2>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	4a27      	ldr	r2, [pc, #156]	; (800b7d8 <TIM_Base_SetConfig+0x12c>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d00f      	beq.n	800b75e <TIM_Base_SetConfig+0xb2>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4a26      	ldr	r2, [pc, #152]	; (800b7dc <TIM_Base_SetConfig+0x130>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d00b      	beq.n	800b75e <TIM_Base_SetConfig+0xb2>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4a25      	ldr	r2, [pc, #148]	; (800b7e0 <TIM_Base_SetConfig+0x134>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d007      	beq.n	800b75e <TIM_Base_SetConfig+0xb2>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4a24      	ldr	r2, [pc, #144]	; (800b7e4 <TIM_Base_SetConfig+0x138>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d003      	beq.n	800b75e <TIM_Base_SetConfig+0xb2>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4a23      	ldr	r2, [pc, #140]	; (800b7e8 <TIM_Base_SetConfig+0x13c>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d108      	bne.n	800b770 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	695b      	ldr	r3, [r3, #20]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	689a      	ldr	r2, [r3, #8]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a0a      	ldr	r2, [pc, #40]	; (800b7c0 <TIM_Base_SetConfig+0x114>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d003      	beq.n	800b7a4 <TIM_Base_SetConfig+0xf8>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a0c      	ldr	r2, [pc, #48]	; (800b7d0 <TIM_Base_SetConfig+0x124>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d103      	bne.n	800b7ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	691a      	ldr	r2, [r3, #16]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	615a      	str	r2, [r3, #20]
}
 800b7b2:	bf00      	nop
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	40010000 	.word	0x40010000
 800b7c4:	40000400 	.word	0x40000400
 800b7c8:	40000800 	.word	0x40000800
 800b7cc:	40000c00 	.word	0x40000c00
 800b7d0:	40010400 	.word	0x40010400
 800b7d4:	40014000 	.word	0x40014000
 800b7d8:	40014400 	.word	0x40014400
 800b7dc:	40014800 	.word	0x40014800
 800b7e0:	40001800 	.word	0x40001800
 800b7e4:	40001c00 	.word	0x40001c00
 800b7e8:	40002000 	.word	0x40002000

0800b7ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b087      	sub	sp, #28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6a1b      	ldr	r3, [r3, #32]
 800b7fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	f023 0201 	bic.w	r2, r3, #1
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	011b      	lsls	r3, r3, #4
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	4313      	orrs	r3, r2
 800b820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f023 030a 	bic.w	r3, r3, #10
 800b828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	4313      	orrs	r3, r2
 800b830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	693a      	ldr	r2, [r7, #16]
 800b836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	621a      	str	r2, [r3, #32]
}
 800b83e:	bf00      	nop
 800b840:	371c      	adds	r7, #28
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr

0800b84a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b84a:	b480      	push	{r7}
 800b84c:	b087      	sub	sp, #28
 800b84e:	af00      	add	r7, sp, #0
 800b850:	60f8      	str	r0, [r7, #12]
 800b852:	60b9      	str	r1, [r7, #8]
 800b854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	f023 0210 	bic.w	r2, r3, #16
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	031b      	lsls	r3, r3, #12
 800b87a:	697a      	ldr	r2, [r7, #20]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	011b      	lsls	r3, r3, #4
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	4313      	orrs	r3, r2
 800b890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	621a      	str	r2, [r3, #32]
}
 800b89e:	bf00      	nop
 800b8a0:	371c      	adds	r7, #28
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b085      	sub	sp, #20
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8c2:	683a      	ldr	r2, [r7, #0]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	f043 0307 	orr.w	r3, r3, #7
 800b8cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	609a      	str	r2, [r3, #8]
}
 800b8d4:	bf00      	nop
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
 800b8ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	021a      	lsls	r2, r3, #8
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	431a      	orrs	r2, r3
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	4313      	orrs	r3, r2
 800b908:	697a      	ldr	r2, [r7, #20]
 800b90a:	4313      	orrs	r3, r2
 800b90c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	697a      	ldr	r2, [r7, #20]
 800b912:	609a      	str	r2, [r3, #8]
}
 800b914:	bf00      	nop
 800b916:	371c      	adds	r7, #28
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b930:	2b01      	cmp	r3, #1
 800b932:	d101      	bne.n	800b938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b934:	2302      	movs	r3, #2
 800b936:	e06d      	b.n	800ba14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2202      	movs	r2, #2
 800b944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a30      	ldr	r2, [pc, #192]	; (800ba20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d004      	beq.n	800b96c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a2f      	ldr	r2, [pc, #188]	; (800ba24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d108      	bne.n	800b97e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b972:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b984:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	4313      	orrs	r3, r2
 800b98e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a20      	ldr	r2, [pc, #128]	; (800ba20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d022      	beq.n	800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9aa:	d01d      	beq.n	800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a1d      	ldr	r2, [pc, #116]	; (800ba28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d018      	beq.n	800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a1c      	ldr	r2, [pc, #112]	; (800ba2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d013      	beq.n	800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a1a      	ldr	r2, [pc, #104]	; (800ba30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d00e      	beq.n	800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a15      	ldr	r2, [pc, #84]	; (800ba24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d009      	beq.n	800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a16      	ldr	r2, [pc, #88]	; (800ba34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d004      	beq.n	800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a15      	ldr	r2, [pc, #84]	; (800ba38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d10c      	bne.n	800ba02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	68ba      	ldr	r2, [r7, #8]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba12:	2300      	movs	r3, #0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3714      	adds	r7, #20
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	40010000 	.word	0x40010000
 800ba24:	40010400 	.word	0x40010400
 800ba28:	40000400 	.word	0x40000400
 800ba2c:	40000800 	.word	0x40000800
 800ba30:	40000c00 	.word	0x40000c00
 800ba34:	40014000 	.word	0x40014000
 800ba38:	40001800 	.word	0x40001800

0800ba3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba44:	bf00      	nop
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ba6c:	bf00      	nop
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e040      	b.n	800bb0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d106      	bne.n	800baa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f7f9 ff2e 	bl	80058fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2224      	movs	r2, #36	; 0x24
 800baa4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f022 0201 	bic.w	r2, r2, #1
 800bab4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f82c 	bl	800bb14 <UART_SetConfig>
 800babc:	4603      	mov	r3, r0
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d101      	bne.n	800bac6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	e022      	b.n	800bb0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d002      	beq.n	800bad4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 fa82 	bl	800bfd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bae2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	689a      	ldr	r2, [r3, #8]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800baf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f042 0201 	orr.w	r2, r2, #1
 800bb02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 fb09 	bl	800c11c <UART_CheckIdleState>
 800bb0a:	4603      	mov	r3, r0
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b088      	sub	sp, #32
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	689a      	ldr	r2, [r3, #8]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	691b      	ldr	r3, [r3, #16]
 800bb28:	431a      	orrs	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	695b      	ldr	r3, [r3, #20]
 800bb2e:	431a      	orrs	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	69db      	ldr	r3, [r3, #28]
 800bb34:	4313      	orrs	r3, r2
 800bb36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	4ba7      	ldr	r3, [pc, #668]	; (800bddc <UART_SetConfig+0x2c8>)
 800bb40:	4013      	ands	r3, r2
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	6812      	ldr	r2, [r2, #0]
 800bb46:	6979      	ldr	r1, [r7, #20]
 800bb48:	430b      	orrs	r3, r1
 800bb4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	68da      	ldr	r2, [r3, #12]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	699b      	ldr	r3, [r3, #24]
 800bb66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a1b      	ldr	r3, [r3, #32]
 800bb6c:	697a      	ldr	r2, [r7, #20]
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	697a      	ldr	r2, [r7, #20]
 800bb82:	430a      	orrs	r2, r1
 800bb84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a95      	ldr	r2, [pc, #596]	; (800bde0 <UART_SetConfig+0x2cc>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d120      	bne.n	800bbd2 <UART_SetConfig+0xbe>
 800bb90:	4b94      	ldr	r3, [pc, #592]	; (800bde4 <UART_SetConfig+0x2d0>)
 800bb92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb96:	f003 0303 	and.w	r3, r3, #3
 800bb9a:	2b03      	cmp	r3, #3
 800bb9c:	d816      	bhi.n	800bbcc <UART_SetConfig+0xb8>
 800bb9e:	a201      	add	r2, pc, #4	; (adr r2, 800bba4 <UART_SetConfig+0x90>)
 800bba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba4:	0800bbb5 	.word	0x0800bbb5
 800bba8:	0800bbc1 	.word	0x0800bbc1
 800bbac:	0800bbbb 	.word	0x0800bbbb
 800bbb0:	0800bbc7 	.word	0x0800bbc7
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	77fb      	strb	r3, [r7, #31]
 800bbb8:	e14f      	b.n	800be5a <UART_SetConfig+0x346>
 800bbba:	2302      	movs	r3, #2
 800bbbc:	77fb      	strb	r3, [r7, #31]
 800bbbe:	e14c      	b.n	800be5a <UART_SetConfig+0x346>
 800bbc0:	2304      	movs	r3, #4
 800bbc2:	77fb      	strb	r3, [r7, #31]
 800bbc4:	e149      	b.n	800be5a <UART_SetConfig+0x346>
 800bbc6:	2308      	movs	r3, #8
 800bbc8:	77fb      	strb	r3, [r7, #31]
 800bbca:	e146      	b.n	800be5a <UART_SetConfig+0x346>
 800bbcc:	2310      	movs	r3, #16
 800bbce:	77fb      	strb	r3, [r7, #31]
 800bbd0:	e143      	b.n	800be5a <UART_SetConfig+0x346>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a84      	ldr	r2, [pc, #528]	; (800bde8 <UART_SetConfig+0x2d4>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d132      	bne.n	800bc42 <UART_SetConfig+0x12e>
 800bbdc:	4b81      	ldr	r3, [pc, #516]	; (800bde4 <UART_SetConfig+0x2d0>)
 800bbde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe2:	f003 030c 	and.w	r3, r3, #12
 800bbe6:	2b0c      	cmp	r3, #12
 800bbe8:	d828      	bhi.n	800bc3c <UART_SetConfig+0x128>
 800bbea:	a201      	add	r2, pc, #4	; (adr r2, 800bbf0 <UART_SetConfig+0xdc>)
 800bbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf0:	0800bc25 	.word	0x0800bc25
 800bbf4:	0800bc3d 	.word	0x0800bc3d
 800bbf8:	0800bc3d 	.word	0x0800bc3d
 800bbfc:	0800bc3d 	.word	0x0800bc3d
 800bc00:	0800bc31 	.word	0x0800bc31
 800bc04:	0800bc3d 	.word	0x0800bc3d
 800bc08:	0800bc3d 	.word	0x0800bc3d
 800bc0c:	0800bc3d 	.word	0x0800bc3d
 800bc10:	0800bc2b 	.word	0x0800bc2b
 800bc14:	0800bc3d 	.word	0x0800bc3d
 800bc18:	0800bc3d 	.word	0x0800bc3d
 800bc1c:	0800bc3d 	.word	0x0800bc3d
 800bc20:	0800bc37 	.word	0x0800bc37
 800bc24:	2300      	movs	r3, #0
 800bc26:	77fb      	strb	r3, [r7, #31]
 800bc28:	e117      	b.n	800be5a <UART_SetConfig+0x346>
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	77fb      	strb	r3, [r7, #31]
 800bc2e:	e114      	b.n	800be5a <UART_SetConfig+0x346>
 800bc30:	2304      	movs	r3, #4
 800bc32:	77fb      	strb	r3, [r7, #31]
 800bc34:	e111      	b.n	800be5a <UART_SetConfig+0x346>
 800bc36:	2308      	movs	r3, #8
 800bc38:	77fb      	strb	r3, [r7, #31]
 800bc3a:	e10e      	b.n	800be5a <UART_SetConfig+0x346>
 800bc3c:	2310      	movs	r3, #16
 800bc3e:	77fb      	strb	r3, [r7, #31]
 800bc40:	e10b      	b.n	800be5a <UART_SetConfig+0x346>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a69      	ldr	r2, [pc, #420]	; (800bdec <UART_SetConfig+0x2d8>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d120      	bne.n	800bc8e <UART_SetConfig+0x17a>
 800bc4c:	4b65      	ldr	r3, [pc, #404]	; (800bde4 <UART_SetConfig+0x2d0>)
 800bc4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bc56:	2b30      	cmp	r3, #48	; 0x30
 800bc58:	d013      	beq.n	800bc82 <UART_SetConfig+0x16e>
 800bc5a:	2b30      	cmp	r3, #48	; 0x30
 800bc5c:	d814      	bhi.n	800bc88 <UART_SetConfig+0x174>
 800bc5e:	2b20      	cmp	r3, #32
 800bc60:	d009      	beq.n	800bc76 <UART_SetConfig+0x162>
 800bc62:	2b20      	cmp	r3, #32
 800bc64:	d810      	bhi.n	800bc88 <UART_SetConfig+0x174>
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <UART_SetConfig+0x15c>
 800bc6a:	2b10      	cmp	r3, #16
 800bc6c:	d006      	beq.n	800bc7c <UART_SetConfig+0x168>
 800bc6e:	e00b      	b.n	800bc88 <UART_SetConfig+0x174>
 800bc70:	2300      	movs	r3, #0
 800bc72:	77fb      	strb	r3, [r7, #31]
 800bc74:	e0f1      	b.n	800be5a <UART_SetConfig+0x346>
 800bc76:	2302      	movs	r3, #2
 800bc78:	77fb      	strb	r3, [r7, #31]
 800bc7a:	e0ee      	b.n	800be5a <UART_SetConfig+0x346>
 800bc7c:	2304      	movs	r3, #4
 800bc7e:	77fb      	strb	r3, [r7, #31]
 800bc80:	e0eb      	b.n	800be5a <UART_SetConfig+0x346>
 800bc82:	2308      	movs	r3, #8
 800bc84:	77fb      	strb	r3, [r7, #31]
 800bc86:	e0e8      	b.n	800be5a <UART_SetConfig+0x346>
 800bc88:	2310      	movs	r3, #16
 800bc8a:	77fb      	strb	r3, [r7, #31]
 800bc8c:	e0e5      	b.n	800be5a <UART_SetConfig+0x346>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a57      	ldr	r2, [pc, #348]	; (800bdf0 <UART_SetConfig+0x2dc>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d120      	bne.n	800bcda <UART_SetConfig+0x1c6>
 800bc98:	4b52      	ldr	r3, [pc, #328]	; (800bde4 <UART_SetConfig+0x2d0>)
 800bc9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bca2:	2bc0      	cmp	r3, #192	; 0xc0
 800bca4:	d013      	beq.n	800bcce <UART_SetConfig+0x1ba>
 800bca6:	2bc0      	cmp	r3, #192	; 0xc0
 800bca8:	d814      	bhi.n	800bcd4 <UART_SetConfig+0x1c0>
 800bcaa:	2b80      	cmp	r3, #128	; 0x80
 800bcac:	d009      	beq.n	800bcc2 <UART_SetConfig+0x1ae>
 800bcae:	2b80      	cmp	r3, #128	; 0x80
 800bcb0:	d810      	bhi.n	800bcd4 <UART_SetConfig+0x1c0>
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d002      	beq.n	800bcbc <UART_SetConfig+0x1a8>
 800bcb6:	2b40      	cmp	r3, #64	; 0x40
 800bcb8:	d006      	beq.n	800bcc8 <UART_SetConfig+0x1b4>
 800bcba:	e00b      	b.n	800bcd4 <UART_SetConfig+0x1c0>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	77fb      	strb	r3, [r7, #31]
 800bcc0:	e0cb      	b.n	800be5a <UART_SetConfig+0x346>
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	77fb      	strb	r3, [r7, #31]
 800bcc6:	e0c8      	b.n	800be5a <UART_SetConfig+0x346>
 800bcc8:	2304      	movs	r3, #4
 800bcca:	77fb      	strb	r3, [r7, #31]
 800bccc:	e0c5      	b.n	800be5a <UART_SetConfig+0x346>
 800bcce:	2308      	movs	r3, #8
 800bcd0:	77fb      	strb	r3, [r7, #31]
 800bcd2:	e0c2      	b.n	800be5a <UART_SetConfig+0x346>
 800bcd4:	2310      	movs	r3, #16
 800bcd6:	77fb      	strb	r3, [r7, #31]
 800bcd8:	e0bf      	b.n	800be5a <UART_SetConfig+0x346>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a45      	ldr	r2, [pc, #276]	; (800bdf4 <UART_SetConfig+0x2e0>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d125      	bne.n	800bd30 <UART_SetConfig+0x21c>
 800bce4:	4b3f      	ldr	r3, [pc, #252]	; (800bde4 <UART_SetConfig+0x2d0>)
 800bce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcf2:	d017      	beq.n	800bd24 <UART_SetConfig+0x210>
 800bcf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcf8:	d817      	bhi.n	800bd2a <UART_SetConfig+0x216>
 800bcfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcfe:	d00b      	beq.n	800bd18 <UART_SetConfig+0x204>
 800bd00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd04:	d811      	bhi.n	800bd2a <UART_SetConfig+0x216>
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d003      	beq.n	800bd12 <UART_SetConfig+0x1fe>
 800bd0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd0e:	d006      	beq.n	800bd1e <UART_SetConfig+0x20a>
 800bd10:	e00b      	b.n	800bd2a <UART_SetConfig+0x216>
 800bd12:	2300      	movs	r3, #0
 800bd14:	77fb      	strb	r3, [r7, #31]
 800bd16:	e0a0      	b.n	800be5a <UART_SetConfig+0x346>
 800bd18:	2302      	movs	r3, #2
 800bd1a:	77fb      	strb	r3, [r7, #31]
 800bd1c:	e09d      	b.n	800be5a <UART_SetConfig+0x346>
 800bd1e:	2304      	movs	r3, #4
 800bd20:	77fb      	strb	r3, [r7, #31]
 800bd22:	e09a      	b.n	800be5a <UART_SetConfig+0x346>
 800bd24:	2308      	movs	r3, #8
 800bd26:	77fb      	strb	r3, [r7, #31]
 800bd28:	e097      	b.n	800be5a <UART_SetConfig+0x346>
 800bd2a:	2310      	movs	r3, #16
 800bd2c:	77fb      	strb	r3, [r7, #31]
 800bd2e:	e094      	b.n	800be5a <UART_SetConfig+0x346>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a30      	ldr	r2, [pc, #192]	; (800bdf8 <UART_SetConfig+0x2e4>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d125      	bne.n	800bd86 <UART_SetConfig+0x272>
 800bd3a:	4b2a      	ldr	r3, [pc, #168]	; (800bde4 <UART_SetConfig+0x2d0>)
 800bd3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bd44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd48:	d017      	beq.n	800bd7a <UART_SetConfig+0x266>
 800bd4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd4e:	d817      	bhi.n	800bd80 <UART_SetConfig+0x26c>
 800bd50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd54:	d00b      	beq.n	800bd6e <UART_SetConfig+0x25a>
 800bd56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd5a:	d811      	bhi.n	800bd80 <UART_SetConfig+0x26c>
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d003      	beq.n	800bd68 <UART_SetConfig+0x254>
 800bd60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd64:	d006      	beq.n	800bd74 <UART_SetConfig+0x260>
 800bd66:	e00b      	b.n	800bd80 <UART_SetConfig+0x26c>
 800bd68:	2301      	movs	r3, #1
 800bd6a:	77fb      	strb	r3, [r7, #31]
 800bd6c:	e075      	b.n	800be5a <UART_SetConfig+0x346>
 800bd6e:	2302      	movs	r3, #2
 800bd70:	77fb      	strb	r3, [r7, #31]
 800bd72:	e072      	b.n	800be5a <UART_SetConfig+0x346>
 800bd74:	2304      	movs	r3, #4
 800bd76:	77fb      	strb	r3, [r7, #31]
 800bd78:	e06f      	b.n	800be5a <UART_SetConfig+0x346>
 800bd7a:	2308      	movs	r3, #8
 800bd7c:	77fb      	strb	r3, [r7, #31]
 800bd7e:	e06c      	b.n	800be5a <UART_SetConfig+0x346>
 800bd80:	2310      	movs	r3, #16
 800bd82:	77fb      	strb	r3, [r7, #31]
 800bd84:	e069      	b.n	800be5a <UART_SetConfig+0x346>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a1c      	ldr	r2, [pc, #112]	; (800bdfc <UART_SetConfig+0x2e8>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d137      	bne.n	800be00 <UART_SetConfig+0x2ec>
 800bd90:	4b14      	ldr	r3, [pc, #80]	; (800bde4 <UART_SetConfig+0x2d0>)
 800bd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bd9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd9e:	d017      	beq.n	800bdd0 <UART_SetConfig+0x2bc>
 800bda0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bda4:	d817      	bhi.n	800bdd6 <UART_SetConfig+0x2c2>
 800bda6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdaa:	d00b      	beq.n	800bdc4 <UART_SetConfig+0x2b0>
 800bdac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdb0:	d811      	bhi.n	800bdd6 <UART_SetConfig+0x2c2>
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d003      	beq.n	800bdbe <UART_SetConfig+0x2aa>
 800bdb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdba:	d006      	beq.n	800bdca <UART_SetConfig+0x2b6>
 800bdbc:	e00b      	b.n	800bdd6 <UART_SetConfig+0x2c2>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	77fb      	strb	r3, [r7, #31]
 800bdc2:	e04a      	b.n	800be5a <UART_SetConfig+0x346>
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	77fb      	strb	r3, [r7, #31]
 800bdc8:	e047      	b.n	800be5a <UART_SetConfig+0x346>
 800bdca:	2304      	movs	r3, #4
 800bdcc:	77fb      	strb	r3, [r7, #31]
 800bdce:	e044      	b.n	800be5a <UART_SetConfig+0x346>
 800bdd0:	2308      	movs	r3, #8
 800bdd2:	77fb      	strb	r3, [r7, #31]
 800bdd4:	e041      	b.n	800be5a <UART_SetConfig+0x346>
 800bdd6:	2310      	movs	r3, #16
 800bdd8:	77fb      	strb	r3, [r7, #31]
 800bdda:	e03e      	b.n	800be5a <UART_SetConfig+0x346>
 800bddc:	efff69f3 	.word	0xefff69f3
 800bde0:	40011000 	.word	0x40011000
 800bde4:	40023800 	.word	0x40023800
 800bde8:	40004400 	.word	0x40004400
 800bdec:	40004800 	.word	0x40004800
 800bdf0:	40004c00 	.word	0x40004c00
 800bdf4:	40005000 	.word	0x40005000
 800bdf8:	40011400 	.word	0x40011400
 800bdfc:	40007800 	.word	0x40007800
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a71      	ldr	r2, [pc, #452]	; (800bfcc <UART_SetConfig+0x4b8>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d125      	bne.n	800be56 <UART_SetConfig+0x342>
 800be0a:	4b71      	ldr	r3, [pc, #452]	; (800bfd0 <UART_SetConfig+0x4bc>)
 800be0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800be14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800be18:	d017      	beq.n	800be4a <UART_SetConfig+0x336>
 800be1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800be1e:	d817      	bhi.n	800be50 <UART_SetConfig+0x33c>
 800be20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be24:	d00b      	beq.n	800be3e <UART_SetConfig+0x32a>
 800be26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be2a:	d811      	bhi.n	800be50 <UART_SetConfig+0x33c>
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d003      	beq.n	800be38 <UART_SetConfig+0x324>
 800be30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be34:	d006      	beq.n	800be44 <UART_SetConfig+0x330>
 800be36:	e00b      	b.n	800be50 <UART_SetConfig+0x33c>
 800be38:	2300      	movs	r3, #0
 800be3a:	77fb      	strb	r3, [r7, #31]
 800be3c:	e00d      	b.n	800be5a <UART_SetConfig+0x346>
 800be3e:	2302      	movs	r3, #2
 800be40:	77fb      	strb	r3, [r7, #31]
 800be42:	e00a      	b.n	800be5a <UART_SetConfig+0x346>
 800be44:	2304      	movs	r3, #4
 800be46:	77fb      	strb	r3, [r7, #31]
 800be48:	e007      	b.n	800be5a <UART_SetConfig+0x346>
 800be4a:	2308      	movs	r3, #8
 800be4c:	77fb      	strb	r3, [r7, #31]
 800be4e:	e004      	b.n	800be5a <UART_SetConfig+0x346>
 800be50:	2310      	movs	r3, #16
 800be52:	77fb      	strb	r3, [r7, #31]
 800be54:	e001      	b.n	800be5a <UART_SetConfig+0x346>
 800be56:	2310      	movs	r3, #16
 800be58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	69db      	ldr	r3, [r3, #28]
 800be5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be62:	d15a      	bne.n	800bf1a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800be64:	7ffb      	ldrb	r3, [r7, #31]
 800be66:	2b08      	cmp	r3, #8
 800be68:	d827      	bhi.n	800beba <UART_SetConfig+0x3a6>
 800be6a:	a201      	add	r2, pc, #4	; (adr r2, 800be70 <UART_SetConfig+0x35c>)
 800be6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be70:	0800be95 	.word	0x0800be95
 800be74:	0800be9d 	.word	0x0800be9d
 800be78:	0800bea5 	.word	0x0800bea5
 800be7c:	0800bebb 	.word	0x0800bebb
 800be80:	0800beab 	.word	0x0800beab
 800be84:	0800bebb 	.word	0x0800bebb
 800be88:	0800bebb 	.word	0x0800bebb
 800be8c:	0800bebb 	.word	0x0800bebb
 800be90:	0800beb3 	.word	0x0800beb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be94:	f7fd ff5a 	bl	8009d4c <HAL_RCC_GetPCLK1Freq>
 800be98:	61b8      	str	r0, [r7, #24]
        break;
 800be9a:	e013      	b.n	800bec4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be9c:	f7fd ff6a 	bl	8009d74 <HAL_RCC_GetPCLK2Freq>
 800bea0:	61b8      	str	r0, [r7, #24]
        break;
 800bea2:	e00f      	b.n	800bec4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bea4:	4b4b      	ldr	r3, [pc, #300]	; (800bfd4 <UART_SetConfig+0x4c0>)
 800bea6:	61bb      	str	r3, [r7, #24]
        break;
 800bea8:	e00c      	b.n	800bec4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800beaa:	f7fd fe8d 	bl	8009bc8 <HAL_RCC_GetSysClockFreq>
 800beae:	61b8      	str	r0, [r7, #24]
        break;
 800beb0:	e008      	b.n	800bec4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800beb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800beb6:	61bb      	str	r3, [r7, #24]
        break;
 800beb8:	e004      	b.n	800bec4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800beba:	2300      	movs	r3, #0
 800bebc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	77bb      	strb	r3, [r7, #30]
        break;
 800bec2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d074      	beq.n	800bfb4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	005a      	lsls	r2, r3, #1
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	085b      	lsrs	r3, r3, #1
 800bed4:	441a      	add	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	fbb2 f3f3 	udiv	r3, r2, r3
 800bede:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	2b0f      	cmp	r3, #15
 800bee4:	d916      	bls.n	800bf14 <UART_SetConfig+0x400>
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beec:	d212      	bcs.n	800bf14 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	f023 030f 	bic.w	r3, r3, #15
 800bef6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	085b      	lsrs	r3, r3, #1
 800befc:	b29b      	uxth	r3, r3
 800befe:	f003 0307 	and.w	r3, r3, #7
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	89fb      	ldrh	r3, [r7, #14]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	89fa      	ldrh	r2, [r7, #14]
 800bf10:	60da      	str	r2, [r3, #12]
 800bf12:	e04f      	b.n	800bfb4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	77bb      	strb	r3, [r7, #30]
 800bf18:	e04c      	b.n	800bfb4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf1a:	7ffb      	ldrb	r3, [r7, #31]
 800bf1c:	2b08      	cmp	r3, #8
 800bf1e:	d828      	bhi.n	800bf72 <UART_SetConfig+0x45e>
 800bf20:	a201      	add	r2, pc, #4	; (adr r2, 800bf28 <UART_SetConfig+0x414>)
 800bf22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf26:	bf00      	nop
 800bf28:	0800bf4d 	.word	0x0800bf4d
 800bf2c:	0800bf55 	.word	0x0800bf55
 800bf30:	0800bf5d 	.word	0x0800bf5d
 800bf34:	0800bf73 	.word	0x0800bf73
 800bf38:	0800bf63 	.word	0x0800bf63
 800bf3c:	0800bf73 	.word	0x0800bf73
 800bf40:	0800bf73 	.word	0x0800bf73
 800bf44:	0800bf73 	.word	0x0800bf73
 800bf48:	0800bf6b 	.word	0x0800bf6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf4c:	f7fd fefe 	bl	8009d4c <HAL_RCC_GetPCLK1Freq>
 800bf50:	61b8      	str	r0, [r7, #24]
        break;
 800bf52:	e013      	b.n	800bf7c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf54:	f7fd ff0e 	bl	8009d74 <HAL_RCC_GetPCLK2Freq>
 800bf58:	61b8      	str	r0, [r7, #24]
        break;
 800bf5a:	e00f      	b.n	800bf7c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf5c:	4b1d      	ldr	r3, [pc, #116]	; (800bfd4 <UART_SetConfig+0x4c0>)
 800bf5e:	61bb      	str	r3, [r7, #24]
        break;
 800bf60:	e00c      	b.n	800bf7c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf62:	f7fd fe31 	bl	8009bc8 <HAL_RCC_GetSysClockFreq>
 800bf66:	61b8      	str	r0, [r7, #24]
        break;
 800bf68:	e008      	b.n	800bf7c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf6e:	61bb      	str	r3, [r7, #24]
        break;
 800bf70:	e004      	b.n	800bf7c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800bf72:	2300      	movs	r3, #0
 800bf74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	77bb      	strb	r3, [r7, #30]
        break;
 800bf7a:	bf00      	nop
    }

    if (pclk != 0U)
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d018      	beq.n	800bfb4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	085a      	lsrs	r2, r3, #1
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	441a      	add	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	2b0f      	cmp	r3, #15
 800bf9a:	d909      	bls.n	800bfb0 <UART_SetConfig+0x49c>
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfa2:	d205      	bcs.n	800bfb0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	b29a      	uxth	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	60da      	str	r2, [r3, #12]
 800bfae:	e001      	b.n	800bfb4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bfc0:	7fbb      	ldrb	r3, [r7, #30]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3720      	adds	r7, #32
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	40007c00 	.word	0x40007c00
 800bfd0:	40023800 	.word	0x40023800
 800bfd4:	00f42400 	.word	0x00f42400

0800bfd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe4:	f003 0301 	and.w	r3, r3, #1
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00a      	beq.n	800c002 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	430a      	orrs	r2, r1
 800c000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c006:	f003 0302 	and.w	r3, r3, #2
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00a      	beq.n	800c024 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	430a      	orrs	r2, r1
 800c022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c028:	f003 0304 	and.w	r3, r3, #4
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d00a      	beq.n	800c046 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	430a      	orrs	r2, r1
 800c044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04a:	f003 0308 	and.w	r3, r3, #8
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00a      	beq.n	800c068 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	430a      	orrs	r2, r1
 800c066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06c:	f003 0310 	and.w	r3, r3, #16
 800c070:	2b00      	cmp	r3, #0
 800c072:	d00a      	beq.n	800c08a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	430a      	orrs	r2, r1
 800c088:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08e:	f003 0320 	and.w	r3, r3, #32
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00a      	beq.n	800c0ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	430a      	orrs	r2, r1
 800c0aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d01a      	beq.n	800c0ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	430a      	orrs	r2, r1
 800c0cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0d6:	d10a      	bne.n	800c0ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	430a      	orrs	r2, r1
 800c0ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00a      	beq.n	800c110 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	430a      	orrs	r2, r1
 800c10e:	605a      	str	r2, [r3, #4]
  }
}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af02      	add	r7, sp, #8
 800c122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c12c:	f7f9 fece 	bl	8005ecc <HAL_GetTick>
 800c130:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f003 0308 	and.w	r3, r3, #8
 800c13c:	2b08      	cmp	r3, #8
 800c13e:	d10e      	bne.n	800c15e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c140:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 f817 	bl	800c182 <UART_WaitOnFlagUntilTimeout>
 800c154:	4603      	mov	r3, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c15a:	2303      	movs	r3, #3
 800c15c:	e00d      	b.n	800c17a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2220      	movs	r2, #32
 800c162:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2220      	movs	r2, #32
 800c168:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b09c      	sub	sp, #112	; 0x70
 800c186:	af00      	add	r7, sp, #0
 800c188:	60f8      	str	r0, [r7, #12]
 800c18a:	60b9      	str	r1, [r7, #8]
 800c18c:	603b      	str	r3, [r7, #0]
 800c18e:	4613      	mov	r3, r2
 800c190:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c192:	e0a5      	b.n	800c2e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19a:	f000 80a1 	beq.w	800c2e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c19e:	f7f9 fe95 	bl	8005ecc <HAL_GetTick>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d302      	bcc.n	800c1b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800c1ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d13e      	bne.n	800c232 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1bc:	e853 3f00 	ldrex	r3, [r3]
 800c1c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1c8:	667b      	str	r3, [r7, #100]	; 0x64
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1da:	e841 2300 	strex	r3, r2, [r1]
 800c1de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c1e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d1e6      	bne.n	800c1b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	3308      	adds	r3, #8
 800c1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f0:	e853 3f00 	ldrex	r3, [r3]
 800c1f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f8:	f023 0301 	bic.w	r3, r3, #1
 800c1fc:	663b      	str	r3, [r7, #96]	; 0x60
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	3308      	adds	r3, #8
 800c204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c206:	64ba      	str	r2, [r7, #72]	; 0x48
 800c208:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c20c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c20e:	e841 2300 	strex	r3, r2, [r1]
 800c212:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1e5      	bne.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2220      	movs	r2, #32
 800c21e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2220      	movs	r2, #32
 800c224:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2200      	movs	r2, #0
 800c22a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	e067      	b.n	800c302 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 0304 	and.w	r3, r3, #4
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d04f      	beq.n	800c2e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	69db      	ldr	r3, [r3, #28]
 800c246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c24a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c24e:	d147      	bne.n	800c2e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c258:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c262:	e853 3f00 	ldrex	r3, [r3]
 800c266:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c26e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	461a      	mov	r2, r3
 800c276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c278:	637b      	str	r3, [r7, #52]	; 0x34
 800c27a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c27e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c280:	e841 2300 	strex	r3, r2, [r1]
 800c284:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1e6      	bne.n	800c25a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	3308      	adds	r3, #8
 800c292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	e853 3f00 	ldrex	r3, [r3]
 800c29a:	613b      	str	r3, [r7, #16]
   return(result);
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	f023 0301 	bic.w	r3, r3, #1
 800c2a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c2ac:	623a      	str	r2, [r7, #32]
 800c2ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b0:	69f9      	ldr	r1, [r7, #28]
 800c2b2:	6a3a      	ldr	r2, [r7, #32]
 800c2b4:	e841 2300 	strex	r3, r2, [r1]
 800c2b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1e5      	bne.n	800c28c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2220      	movs	r2, #32
 800c2c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2220      	movs	r2, #32
 800c2ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2220      	movs	r2, #32
 800c2d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	e010      	b.n	800c302 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	69da      	ldr	r2, [r3, #28]
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	bf0c      	ite	eq
 800c2f0:	2301      	moveq	r3, #1
 800c2f2:	2300      	movne	r3, #0
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	79fb      	ldrb	r3, [r7, #7]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	f43f af4a 	beq.w	800c194 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3770      	adds	r7, #112	; 0x70
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
	...

0800c30c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d121      	bne.n	800c362 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	4b27      	ldr	r3, [pc, #156]	; (800c3c0 <FMC_SDRAM_Init+0xb4>)
 800c324:	4013      	ands	r3, r2
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	6851      	ldr	r1, [r2, #4]
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	6892      	ldr	r2, [r2, #8]
 800c32e:	4311      	orrs	r1, r2
 800c330:	683a      	ldr	r2, [r7, #0]
 800c332:	68d2      	ldr	r2, [r2, #12]
 800c334:	4311      	orrs	r1, r2
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	6912      	ldr	r2, [r2, #16]
 800c33a:	4311      	orrs	r1, r2
 800c33c:	683a      	ldr	r2, [r7, #0]
 800c33e:	6952      	ldr	r2, [r2, #20]
 800c340:	4311      	orrs	r1, r2
 800c342:	683a      	ldr	r2, [r7, #0]
 800c344:	6992      	ldr	r2, [r2, #24]
 800c346:	4311      	orrs	r1, r2
 800c348:	683a      	ldr	r2, [r7, #0]
 800c34a:	69d2      	ldr	r2, [r2, #28]
 800c34c:	4311      	orrs	r1, r2
 800c34e:	683a      	ldr	r2, [r7, #0]
 800c350:	6a12      	ldr	r2, [r2, #32]
 800c352:	4311      	orrs	r1, r2
 800c354:	683a      	ldr	r2, [r7, #0]
 800c356:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c358:	430a      	orrs	r2, r1
 800c35a:	431a      	orrs	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	601a      	str	r2, [r3, #0]
 800c360:	e026      	b.n	800c3b0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	69d9      	ldr	r1, [r3, #28]
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	6a1b      	ldr	r3, [r3, #32]
 800c372:	4319      	orrs	r1, r3
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c378:	430b      	orrs	r3, r1
 800c37a:	431a      	orrs	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	685a      	ldr	r2, [r3, #4]
 800c384:	4b0e      	ldr	r3, [pc, #56]	; (800c3c0 <FMC_SDRAM_Init+0xb4>)
 800c386:	4013      	ands	r3, r2
 800c388:	683a      	ldr	r2, [r7, #0]
 800c38a:	6851      	ldr	r1, [r2, #4]
 800c38c:	683a      	ldr	r2, [r7, #0]
 800c38e:	6892      	ldr	r2, [r2, #8]
 800c390:	4311      	orrs	r1, r2
 800c392:	683a      	ldr	r2, [r7, #0]
 800c394:	68d2      	ldr	r2, [r2, #12]
 800c396:	4311      	orrs	r1, r2
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	6912      	ldr	r2, [r2, #16]
 800c39c:	4311      	orrs	r1, r2
 800c39e:	683a      	ldr	r2, [r7, #0]
 800c3a0:	6952      	ldr	r2, [r2, #20]
 800c3a2:	4311      	orrs	r1, r2
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	6992      	ldr	r2, [r2, #24]
 800c3a8:	430a      	orrs	r2, r1
 800c3aa:	431a      	orrs	r2, r3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	ffff8000 	.word	0xffff8000

0800c3c4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d128      	bne.n	800c428 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	1e59      	subs	r1, r3, #1
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	011b      	lsls	r3, r3, #4
 800c3ec:	4319      	orrs	r1, r3
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	021b      	lsls	r3, r3, #8
 800c3f6:	4319      	orrs	r1, r3
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	031b      	lsls	r3, r3, #12
 800c400:	4319      	orrs	r1, r3
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	3b01      	subs	r3, #1
 800c408:	041b      	lsls	r3, r3, #16
 800c40a:	4319      	orrs	r1, r3
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	695b      	ldr	r3, [r3, #20]
 800c410:	3b01      	subs	r3, #1
 800c412:	051b      	lsls	r3, r3, #20
 800c414:	4319      	orrs	r1, r3
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	3b01      	subs	r3, #1
 800c41c:	061b      	lsls	r3, r3, #24
 800c41e:	430b      	orrs	r3, r1
 800c420:	431a      	orrs	r2, r3
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	609a      	str	r2, [r3, #8]
 800c426:	e02d      	b.n	800c484 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	689a      	ldr	r2, [r3, #8]
 800c42c:	4b19      	ldr	r3, [pc, #100]	; (800c494 <FMC_SDRAM_Timing_Init+0xd0>)
 800c42e:	4013      	ands	r3, r2
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	68d2      	ldr	r2, [r2, #12]
 800c434:	3a01      	subs	r2, #1
 800c436:	0311      	lsls	r1, r2, #12
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	6952      	ldr	r2, [r2, #20]
 800c43c:	3a01      	subs	r2, #1
 800c43e:	0512      	lsls	r2, r2, #20
 800c440:	430a      	orrs	r2, r1
 800c442:	431a      	orrs	r2, r3
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	1e59      	subs	r1, r3, #1
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	3b01      	subs	r3, #1
 800c45c:	011b      	lsls	r3, r3, #4
 800c45e:	4319      	orrs	r1, r3
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	3b01      	subs	r3, #1
 800c466:	021b      	lsls	r3, r3, #8
 800c468:	4319      	orrs	r1, r3
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	3b01      	subs	r3, #1
 800c470:	041b      	lsls	r3, r3, #16
 800c472:	4319      	orrs	r1, r3
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	699b      	ldr	r3, [r3, #24]
 800c478:	3b01      	subs	r3, #1
 800c47a:	061b      	lsls	r3, r3, #24
 800c47c:	430b      	orrs	r3, r1
 800c47e:	431a      	orrs	r2, r3
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3714      	adds	r7, #20
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr
 800c492:	bf00      	nop
 800c494:	ff0f0fff 	.word	0xff0f0fff

0800c498 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	691a      	ldr	r2, [r3, #16]
 800c4a8:	4b0c      	ldr	r3, [pc, #48]	; (800c4dc <FMC_SDRAM_SendCommand+0x44>)
 800c4aa:	4013      	ands	r3, r2
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	6811      	ldr	r1, [r2, #0]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	6852      	ldr	r2, [r2, #4]
 800c4b4:	4311      	orrs	r1, r2
 800c4b6:	68ba      	ldr	r2, [r7, #8]
 800c4b8:	6892      	ldr	r2, [r2, #8]
 800c4ba:	3a01      	subs	r2, #1
 800c4bc:	0152      	lsls	r2, r2, #5
 800c4be:	4311      	orrs	r1, r2
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	68d2      	ldr	r2, [r2, #12]
 800c4c4:	0252      	lsls	r2, r2, #9
 800c4c6:	430a      	orrs	r2, r1
 800c4c8:	431a      	orrs	r2, r3
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr
 800c4dc:	ffc00000 	.word	0xffc00000

0800c4e0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	695a      	ldr	r2, [r3, #20]
 800c4ee:	4b07      	ldr	r3, [pc, #28]	; (800c50c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	683a      	ldr	r2, [r7, #0]
 800c4f4:	0052      	lsls	r2, r2, #1
 800c4f6:	431a      	orrs	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	370c      	adds	r7, #12
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	ffffc001 	.word	0xffffc001

0800c510 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	4603      	mov	r3, r0
 800c518:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c51a:	2300      	movs	r3, #0
 800c51c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c51e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c522:	2b84      	cmp	r3, #132	; 0x84
 800c524:	d005      	beq.n	800c532 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c526:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	4413      	add	r3, r2
 800c52e:	3303      	adds	r3, #3
 800c530:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c532:	68fb      	ldr	r3, [r7, #12]
}
 800c534:	4618      	mov	r0, r3
 800c536:	3714      	adds	r7, #20
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c544:	f000 fc28 	bl	800cd98 <vTaskStartScheduler>
  
  return osOK;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	bd80      	pop	{r7, pc}

0800c54e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c54e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c550:	b089      	sub	sp, #36	; 0x24
 800c552:	af04      	add	r7, sp, #16
 800c554:	6078      	str	r0, [r7, #4]
 800c556:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	695b      	ldr	r3, [r3, #20]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d020      	beq.n	800c5a2 <osThreadCreate+0x54>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	699b      	ldr	r3, [r3, #24]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d01c      	beq.n	800c5a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	685c      	ldr	r4, [r3, #4]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681d      	ldr	r5, [r3, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	691e      	ldr	r6, [r3, #16]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7ff ffc8 	bl	800c510 <makeFreeRtosPriority>
 800c580:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	695b      	ldr	r3, [r3, #20]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c58a:	9202      	str	r2, [sp, #8]
 800c58c:	9301      	str	r3, [sp, #4]
 800c58e:	9100      	str	r1, [sp, #0]
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	4632      	mov	r2, r6
 800c594:	4629      	mov	r1, r5
 800c596:	4620      	mov	r0, r4
 800c598:	f000 f8ed 	bl	800c776 <xTaskCreateStatic>
 800c59c:	4603      	mov	r3, r0
 800c59e:	60fb      	str	r3, [r7, #12]
 800c5a0:	e01c      	b.n	800c5dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	685c      	ldr	r4, [r3, #4]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c5ae:	b29e      	uxth	r6, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7ff ffaa 	bl	800c510 <makeFreeRtosPriority>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	f107 030c 	add.w	r3, r7, #12
 800c5c2:	9301      	str	r3, [sp, #4]
 800c5c4:	9200      	str	r2, [sp, #0]
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	4632      	mov	r2, r6
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f000 f935 	bl	800c83c <xTaskCreate>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d001      	beq.n	800c5dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	e000      	b.n	800c5de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3714      	adds	r7, #20
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b084      	sub	sp, #16
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d001      	beq.n	800c5fc <osDelay+0x16>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	e000      	b.n	800c5fe <osDelay+0x18>
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	4618      	mov	r0, r3
 800c600:	f000 fa6c 	bl	800cadc <vTaskDelay>
  
  return osOK;
 800c604:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c60e:	b480      	push	{r7}
 800c610:	b083      	sub	sp, #12
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f103 0208 	add.w	r2, r3, #8
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f04f 32ff 	mov.w	r2, #4294967295
 800c626:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f103 0208 	add.w	r2, r3, #8
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f103 0208 	add.w	r2, r3, #8
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c642:	bf00      	nop
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c64e:	b480      	push	{r7}
 800c650:	b083      	sub	sp, #12
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2200      	movs	r2, #0
 800c65a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c65c:	bf00      	nop
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	689a      	ldr	r2, [r3, #8]
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	683a      	ldr	r2, [r7, #0]
 800c68c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	683a      	ldr	r2, [r7, #0]
 800c692:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	1c5a      	adds	r2, r3, #1
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	601a      	str	r2, [r3, #0]
}
 800c6a4:	bf00      	nop
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c6:	d103      	bne.n	800c6d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	60fb      	str	r3, [r7, #12]
 800c6ce:	e00c      	b.n	800c6ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	3308      	adds	r3, #8
 800c6d4:	60fb      	str	r3, [r7, #12]
 800c6d6:	e002      	b.n	800c6de <vListInsert+0x2e>
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	60fb      	str	r3, [r7, #12]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d2f6      	bcs.n	800c6d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	685a      	ldr	r2, [r3, #4]
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	683a      	ldr	r2, [r7, #0]
 800c704:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	1c5a      	adds	r2, r3, #1
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	601a      	str	r2, [r3, #0]
}
 800c716:	bf00      	nop
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr

0800c722 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c722:	b480      	push	{r7}
 800c724:	b085      	sub	sp, #20
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	6892      	ldr	r2, [r2, #8]
 800c738:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	6852      	ldr	r2, [r2, #4]
 800c742:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d103      	bne.n	800c756 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	689a      	ldr	r2, [r3, #8]
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	1e5a      	subs	r2, r3, #1
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3714      	adds	r7, #20
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr

0800c776 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c776:	b580      	push	{r7, lr}
 800c778:	b08e      	sub	sp, #56	; 0x38
 800c77a:	af04      	add	r7, sp, #16
 800c77c:	60f8      	str	r0, [r7, #12]
 800c77e:	60b9      	str	r1, [r7, #8]
 800c780:	607a      	str	r2, [r7, #4]
 800c782:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c786:	2b00      	cmp	r3, #0
 800c788:	d10c      	bne.n	800c7a4 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78e:	b672      	cpsid	i
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	b662      	cpsie	i
 800c79e:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c7a0:	bf00      	nop
 800c7a2:	e7fe      	b.n	800c7a2 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10c      	bne.n	800c7c4 <xTaskCreateStatic+0x4e>
	__asm volatile
 800c7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ae:	b672      	cpsid	i
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	b662      	cpsie	i
 800c7be:	61fb      	str	r3, [r7, #28]
}
 800c7c0:	bf00      	nop
 800c7c2:	e7fe      	b.n	800c7c2 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c7c4:	23b4      	movs	r3, #180	; 0xb4
 800c7c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	2bb4      	cmp	r3, #180	; 0xb4
 800c7cc:	d00c      	beq.n	800c7e8 <xTaskCreateStatic+0x72>
	__asm volatile
 800c7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d2:	b672      	cpsid	i
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	b662      	cpsie	i
 800c7e2:	61bb      	str	r3, [r7, #24]
}
 800c7e4:	bf00      	nop
 800c7e6:	e7fe      	b.n	800c7e6 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c7e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d01e      	beq.n	800c82e <xTaskCreateStatic+0xb8>
 800c7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d01b      	beq.n	800c82e <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	2202      	movs	r2, #2
 800c804:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c808:	2300      	movs	r3, #0
 800c80a:	9303      	str	r3, [sp, #12]
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	9302      	str	r3, [sp, #8]
 800c810:	f107 0314 	add.w	r3, r7, #20
 800c814:	9301      	str	r3, [sp, #4]
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	68b9      	ldr	r1, [r7, #8]
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	f000 f851 	bl	800c8c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c826:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c828:	f000 f8ee 	bl	800ca08 <prvAddNewTaskToReadyList>
 800c82c:	e001      	b.n	800c832 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c82e:	2300      	movs	r3, #0
 800c830:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c832:	697b      	ldr	r3, [r7, #20]
	}
 800c834:	4618      	mov	r0, r3
 800c836:	3728      	adds	r7, #40	; 0x28
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08c      	sub	sp, #48	; 0x30
 800c840:	af04      	add	r7, sp, #16
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	603b      	str	r3, [r7, #0]
 800c848:	4613      	mov	r3, r2
 800c84a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c84c:	88fb      	ldrh	r3, [r7, #6]
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	4618      	mov	r0, r3
 800c852:	f001 f813 	bl	800d87c <pvPortMalloc>
 800c856:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00e      	beq.n	800c87c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c85e:	20b4      	movs	r0, #180	; 0xb4
 800c860:	f001 f80c 	bl	800d87c <pvPortMalloc>
 800c864:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d003      	beq.n	800c874 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	631a      	str	r2, [r3, #48]	; 0x30
 800c872:	e005      	b.n	800c880 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c874:	6978      	ldr	r0, [r7, #20]
 800c876:	f001 f8cb 	bl	800da10 <vPortFree>
 800c87a:	e001      	b.n	800c880 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c87c:	2300      	movs	r3, #0
 800c87e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d017      	beq.n	800c8b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	2200      	movs	r2, #0
 800c88a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c88e:	88fa      	ldrh	r2, [r7, #6]
 800c890:	2300      	movs	r3, #0
 800c892:	9303      	str	r3, [sp, #12]
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	9302      	str	r3, [sp, #8]
 800c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89a:	9301      	str	r3, [sp, #4]
 800c89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	68b9      	ldr	r1, [r7, #8]
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	f000 f80f 	bl	800c8c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8aa:	69f8      	ldr	r0, [r7, #28]
 800c8ac:	f000 f8ac 	bl	800ca08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	61bb      	str	r3, [r7, #24]
 800c8b4:	e002      	b.n	800c8bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c8bc:	69bb      	ldr	r3, [r7, #24]
	}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3720      	adds	r7, #32
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
	...

0800c8c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b088      	sub	sp, #32
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	607a      	str	r2, [r7, #4]
 800c8d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8da:	6879      	ldr	r1, [r7, #4]
 800c8dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c8e0:	440b      	add	r3, r1
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	4413      	add	r3, r2
 800c8e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	f023 0307 	bic.w	r3, r3, #7
 800c8ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00c      	beq.n	800c914 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fe:	b672      	cpsid	i
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	b662      	cpsie	i
 800c90e:	617b      	str	r3, [r7, #20]
}
 800c910:	bf00      	nop
 800c912:	e7fe      	b.n	800c912 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d01f      	beq.n	800c95a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c91a:	2300      	movs	r3, #0
 800c91c:	61fb      	str	r3, [r7, #28]
 800c91e:	e012      	b.n	800c946 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c920:	68ba      	ldr	r2, [r7, #8]
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	4413      	add	r3, r2
 800c926:	7819      	ldrb	r1, [r3, #0]
 800c928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	4413      	add	r3, r2
 800c92e:	3334      	adds	r3, #52	; 0x34
 800c930:	460a      	mov	r2, r1
 800c932:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	69fb      	ldr	r3, [r7, #28]
 800c938:	4413      	add	r3, r2
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d006      	beq.n	800c94e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	3301      	adds	r3, #1
 800c944:	61fb      	str	r3, [r7, #28]
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	2b0f      	cmp	r3, #15
 800c94a:	d9e9      	bls.n	800c920 <prvInitialiseNewTask+0x58>
 800c94c:	e000      	b.n	800c950 <prvInitialiseNewTask+0x88>
			{
				break;
 800c94e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c952:	2200      	movs	r2, #0
 800c954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c958:	e003      	b.n	800c962 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c964:	2b06      	cmp	r3, #6
 800c966:	d901      	bls.n	800c96c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c968:	2306      	movs	r3, #6
 800c96a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c970:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c976:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97a:	2200      	movs	r2, #0
 800c97c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c980:	3304      	adds	r3, #4
 800c982:	4618      	mov	r0, r3
 800c984:	f7ff fe63 	bl	800c64e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98a:	3318      	adds	r3, #24
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7ff fe5e 	bl	800c64e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c996:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	f1c3 0207 	rsb	r2, r3, #7
 800c99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ba:	334c      	adds	r3, #76	; 0x4c
 800c9bc:	2260      	movs	r2, #96	; 0x60
 800c9be:	2100      	movs	r1, #0
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f001 f98d 	bl	800dce0 <memset>
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c8:	4a0c      	ldr	r2, [pc, #48]	; (800c9fc <prvInitialiseNewTask+0x134>)
 800c9ca:	651a      	str	r2, [r3, #80]	; 0x50
 800c9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ce:	4a0c      	ldr	r2, [pc, #48]	; (800ca00 <prvInitialiseNewTask+0x138>)
 800c9d0:	655a      	str	r2, [r3, #84]	; 0x54
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d4:	4a0b      	ldr	r2, [pc, #44]	; (800ca04 <prvInitialiseNewTask+0x13c>)
 800c9d6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c9d8:	683a      	ldr	r2, [r7, #0]
 800c9da:	68f9      	ldr	r1, [r7, #12]
 800c9dc:	69b8      	ldr	r0, [r7, #24]
 800c9de:	f000 fd55 	bl	800d48c <pxPortInitialiseStack>
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d002      	beq.n	800c9f4 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9f4:	bf00      	nop
 800c9f6:	3720      	adds	r7, #32
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	08090220 	.word	0x08090220
 800ca00:	08090240 	.word	0x08090240
 800ca04:	08090200 	.word	0x08090200

0800ca08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca10:	f000 fe4c 	bl	800d6ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca14:	4b2a      	ldr	r3, [pc, #168]	; (800cac0 <prvAddNewTaskToReadyList+0xb8>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	4a29      	ldr	r2, [pc, #164]	; (800cac0 <prvAddNewTaskToReadyList+0xb8>)
 800ca1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ca1e:	4b29      	ldr	r3, [pc, #164]	; (800cac4 <prvAddNewTaskToReadyList+0xbc>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d109      	bne.n	800ca3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca26:	4a27      	ldr	r2, [pc, #156]	; (800cac4 <prvAddNewTaskToReadyList+0xbc>)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca2c:	4b24      	ldr	r3, [pc, #144]	; (800cac0 <prvAddNewTaskToReadyList+0xb8>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d110      	bne.n	800ca56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca34:	f000 fc00 	bl	800d238 <prvInitialiseTaskLists>
 800ca38:	e00d      	b.n	800ca56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca3a:	4b23      	ldr	r3, [pc, #140]	; (800cac8 <prvAddNewTaskToReadyList+0xc0>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d109      	bne.n	800ca56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca42:	4b20      	ldr	r3, [pc, #128]	; (800cac4 <prvAddNewTaskToReadyList+0xbc>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d802      	bhi.n	800ca56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca50:	4a1c      	ldr	r2, [pc, #112]	; (800cac4 <prvAddNewTaskToReadyList+0xbc>)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca56:	4b1d      	ldr	r3, [pc, #116]	; (800cacc <prvAddNewTaskToReadyList+0xc4>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	4a1b      	ldr	r2, [pc, #108]	; (800cacc <prvAddNewTaskToReadyList+0xc4>)
 800ca5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca64:	2201      	movs	r2, #1
 800ca66:	409a      	lsls	r2, r3
 800ca68:	4b19      	ldr	r3, [pc, #100]	; (800cad0 <prvAddNewTaskToReadyList+0xc8>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	4a18      	ldr	r2, [pc, #96]	; (800cad0 <prvAddNewTaskToReadyList+0xc8>)
 800ca70:	6013      	str	r3, [r2, #0]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca76:	4613      	mov	r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	4413      	add	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4a15      	ldr	r2, [pc, #84]	; (800cad4 <prvAddNewTaskToReadyList+0xcc>)
 800ca80:	441a      	add	r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3304      	adds	r3, #4
 800ca86:	4619      	mov	r1, r3
 800ca88:	4610      	mov	r0, r2
 800ca8a:	f7ff fded 	bl	800c668 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca8e:	f000 fe41 	bl	800d714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca92:	4b0d      	ldr	r3, [pc, #52]	; (800cac8 <prvAddNewTaskToReadyList+0xc0>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00e      	beq.n	800cab8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ca9a:	4b0a      	ldr	r3, [pc, #40]	; (800cac4 <prvAddNewTaskToReadyList+0xbc>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d207      	bcs.n	800cab8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800caa8:	4b0b      	ldr	r3, [pc, #44]	; (800cad8 <prvAddNewTaskToReadyList+0xd0>)
 800caaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caae:	601a      	str	r2, [r3, #0]
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cab8:	bf00      	nop
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	2000071c 	.word	0x2000071c
 800cac4:	2000061c 	.word	0x2000061c
 800cac8:	20000728 	.word	0x20000728
 800cacc:	20000738 	.word	0x20000738
 800cad0:	20000724 	.word	0x20000724
 800cad4:	20000620 	.word	0x20000620
 800cad8:	e000ed04 	.word	0xe000ed04

0800cadc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cae4:	2300      	movs	r3, #0
 800cae6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d019      	beq.n	800cb22 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800caee:	4b14      	ldr	r3, [pc, #80]	; (800cb40 <vTaskDelay+0x64>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d00c      	beq.n	800cb10 <vTaskDelay+0x34>
	__asm volatile
 800caf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafa:	b672      	cpsid	i
 800cafc:	f383 8811 	msr	BASEPRI, r3
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	b662      	cpsie	i
 800cb0a:	60bb      	str	r3, [r7, #8]
}
 800cb0c:	bf00      	nop
 800cb0e:	e7fe      	b.n	800cb0e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cb10:	f000 f9b0 	bl	800ce74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb14:	2100      	movs	r1, #0
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 fc52 	bl	800d3c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb1c:	f000 f9b8 	bl	800ce90 <xTaskResumeAll>
 800cb20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d107      	bne.n	800cb38 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800cb28:	4b06      	ldr	r3, [pc, #24]	; (800cb44 <vTaskDelay+0x68>)
 800cb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb2e:	601a      	str	r2, [r3, #0]
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb38:	bf00      	nop
 800cb3a:	3710      	adds	r7, #16
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	20000744 	.word	0x20000744
 800cb44:	e000ed04 	.word	0xe000ed04

0800cb48 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cb50:	f000 fdac 	bl	800d6ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d102      	bne.n	800cb60 <vTaskSuspend+0x18>
 800cb5a:	4b3d      	ldr	r3, [pc, #244]	; (800cc50 <vTaskSuspend+0x108>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	e000      	b.n	800cb62 <vTaskSuspend+0x1a>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	3304      	adds	r3, #4
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7ff fdda 	bl	800c722 <uxListRemove>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d115      	bne.n	800cba0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb78:	4936      	ldr	r1, [pc, #216]	; (800cc54 <vTaskSuspend+0x10c>)
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	4413      	add	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	440b      	add	r3, r1
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d10a      	bne.n	800cba0 <vTaskSuspend+0x58>
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb8e:	2201      	movs	r2, #1
 800cb90:	fa02 f303 	lsl.w	r3, r2, r3
 800cb94:	43da      	mvns	r2, r3
 800cb96:	4b30      	ldr	r3, [pc, #192]	; (800cc58 <vTaskSuspend+0x110>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4013      	ands	r3, r2
 800cb9c:	4a2e      	ldr	r2, [pc, #184]	; (800cc58 <vTaskSuspend+0x110>)
 800cb9e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d004      	beq.n	800cbb2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	3318      	adds	r3, #24
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7ff fdb8 	bl	800c722 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	3304      	adds	r3, #4
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	4828      	ldr	r0, [pc, #160]	; (800cc5c <vTaskSuspend+0x114>)
 800cbba:	f7ff fd55 	bl	800c668 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d103      	bne.n	800cbd2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800cbd2:	f000 fd9f 	bl	800d714 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800cbd6:	4b22      	ldr	r3, [pc, #136]	; (800cc60 <vTaskSuspend+0x118>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d005      	beq.n	800cbea <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800cbde:	f000 fd65 	bl	800d6ac <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800cbe2:	f000 fbcd 	bl	800d380 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800cbe6:	f000 fd95 	bl	800d714 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800cbea:	4b19      	ldr	r3, [pc, #100]	; (800cc50 <vTaskSuspend+0x108>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	68fa      	ldr	r2, [r7, #12]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d129      	bne.n	800cc48 <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 800cbf4:	4b1a      	ldr	r3, [pc, #104]	; (800cc60 <vTaskSuspend+0x118>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d019      	beq.n	800cc30 <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800cbfc:	4b19      	ldr	r3, [pc, #100]	; (800cc64 <vTaskSuspend+0x11c>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00c      	beq.n	800cc1e <vTaskSuspend+0xd6>
	__asm volatile
 800cc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc08:	b672      	cpsid	i
 800cc0a:	f383 8811 	msr	BASEPRI, r3
 800cc0e:	f3bf 8f6f 	isb	sy
 800cc12:	f3bf 8f4f 	dsb	sy
 800cc16:	b662      	cpsie	i
 800cc18:	60bb      	str	r3, [r7, #8]
}
 800cc1a:	bf00      	nop
 800cc1c:	e7fe      	b.n	800cc1c <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 800cc1e:	4b12      	ldr	r3, [pc, #72]	; (800cc68 <vTaskSuspend+0x120>)
 800cc20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc24:	601a      	str	r2, [r3, #0]
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc2e:	e00b      	b.n	800cc48 <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800cc30:	4b0a      	ldr	r3, [pc, #40]	; (800cc5c <vTaskSuspend+0x114>)
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	4b0d      	ldr	r3, [pc, #52]	; (800cc6c <vTaskSuspend+0x124>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d103      	bne.n	800cc44 <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 800cc3c:	4b04      	ldr	r3, [pc, #16]	; (800cc50 <vTaskSuspend+0x108>)
 800cc3e:	2200      	movs	r2, #0
 800cc40:	601a      	str	r2, [r3, #0]
	}
 800cc42:	e001      	b.n	800cc48 <vTaskSuspend+0x100>
					vTaskSwitchContext();
 800cc44:	f000 fa7c 	bl	800d140 <vTaskSwitchContext>
	}
 800cc48:	bf00      	nop
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	2000061c 	.word	0x2000061c
 800cc54:	20000620 	.word	0x20000620
 800cc58:	20000724 	.word	0x20000724
 800cc5c:	20000708 	.word	0x20000708
 800cc60:	20000728 	.word	0x20000728
 800cc64:	20000744 	.word	0x20000744
 800cc68:	e000ed04 	.word	0xe000ed04
 800cc6c:	2000071c 	.word	0x2000071c

0800cc70 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800cc70:	b480      	push	{r7}
 800cc72:	b087      	sub	sp, #28
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d10c      	bne.n	800cca0 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 800cc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8a:	b672      	cpsid	i
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	b662      	cpsie	i
 800cc9a:	60fb      	str	r3, [r7, #12]
}
 800cc9c:	bf00      	nop
 800cc9e:	e7fe      	b.n	800cc9e <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	695b      	ldr	r3, [r3, #20]
 800cca4:	4a0a      	ldr	r2, [pc, #40]	; (800ccd0 <prvTaskIsTaskSuspended+0x60>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d10a      	bne.n	800ccc0 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccae:	4a09      	ldr	r2, [pc, #36]	; (800ccd4 <prvTaskIsTaskSuspended+0x64>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d005      	beq.n	800ccc0 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d101      	bne.n	800ccc0 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ccc0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	371c      	adds	r7, #28
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	20000708 	.word	0x20000708
 800ccd4:	200006dc 	.word	0x200006dc

0800ccd8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d10c      	bne.n	800cd04 <vTaskResume+0x2c>
	__asm volatile
 800ccea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccee:	b672      	cpsid	i
 800ccf0:	f383 8811 	msr	BASEPRI, r3
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	f3bf 8f4f 	dsb	sy
 800ccfc:	b662      	cpsie	i
 800ccfe:	60bb      	str	r3, [r7, #8]
}
 800cd00:	bf00      	nop
 800cd02:	e7fe      	b.n	800cd02 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800cd04:	4b20      	ldr	r3, [pc, #128]	; (800cd88 <vTaskResume+0xb0>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d037      	beq.n	800cd7e <vTaskResume+0xa6>
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d034      	beq.n	800cd7e <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800cd14:	f000 fcca 	bl	800d6ac <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f7ff ffa9 	bl	800cc70 <prvTaskIsTaskSuspended>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d02a      	beq.n	800cd7a <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	3304      	adds	r3, #4
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7ff fcfa 	bl	800c722 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd32:	2201      	movs	r2, #1
 800cd34:	409a      	lsls	r2, r3
 800cd36:	4b15      	ldr	r3, [pc, #84]	; (800cd8c <vTaskResume+0xb4>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	4a13      	ldr	r2, [pc, #76]	; (800cd8c <vTaskResume+0xb4>)
 800cd3e:	6013      	str	r3, [r2, #0]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd44:	4613      	mov	r3, r2
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	4a10      	ldr	r2, [pc, #64]	; (800cd90 <vTaskResume+0xb8>)
 800cd4e:	441a      	add	r2, r3
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	3304      	adds	r3, #4
 800cd54:	4619      	mov	r1, r3
 800cd56:	4610      	mov	r0, r2
 800cd58:	f7ff fc86 	bl	800c668 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd60:	4b09      	ldr	r3, [pc, #36]	; (800cd88 <vTaskResume+0xb0>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d307      	bcc.n	800cd7a <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800cd6a:	4b0a      	ldr	r3, [pc, #40]	; (800cd94 <vTaskResume+0xbc>)
 800cd6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd70:	601a      	str	r2, [r3, #0]
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800cd7a:	f000 fccb 	bl	800d714 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd7e:	bf00      	nop
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	2000061c 	.word	0x2000061c
 800cd8c:	20000724 	.word	0x20000724
 800cd90:	20000620 	.word	0x20000620
 800cd94:	e000ed04 	.word	0xe000ed04

0800cd98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b08a      	sub	sp, #40	; 0x28
 800cd9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cda2:	2300      	movs	r3, #0
 800cda4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cda6:	463a      	mov	r2, r7
 800cda8:	1d39      	adds	r1, r7, #4
 800cdaa:	f107 0308 	add.w	r3, r7, #8
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7f4 f866 	bl	8000e80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cdb4:	6839      	ldr	r1, [r7, #0]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	68ba      	ldr	r2, [r7, #8]
 800cdba:	9202      	str	r2, [sp, #8]
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	9300      	str	r3, [sp, #0]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	460a      	mov	r2, r1
 800cdc6:	4923      	ldr	r1, [pc, #140]	; (800ce54 <vTaskStartScheduler+0xbc>)
 800cdc8:	4823      	ldr	r0, [pc, #140]	; (800ce58 <vTaskStartScheduler+0xc0>)
 800cdca:	f7ff fcd4 	bl	800c776 <xTaskCreateStatic>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	4a22      	ldr	r2, [pc, #136]	; (800ce5c <vTaskStartScheduler+0xc4>)
 800cdd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cdd4:	4b21      	ldr	r3, [pc, #132]	; (800ce5c <vTaskStartScheduler+0xc4>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cddc:	2301      	movs	r3, #1
 800cdde:	617b      	str	r3, [r7, #20]
 800cde0:	e001      	b.n	800cde6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d11d      	bne.n	800ce28 <vTaskStartScheduler+0x90>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	b672      	cpsid	i
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	b662      	cpsie	i
 800ce00:	613b      	str	r3, [r7, #16]
}
 800ce02:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce04:	4b16      	ldr	r3, [pc, #88]	; (800ce60 <vTaskStartScheduler+0xc8>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	334c      	adds	r3, #76	; 0x4c
 800ce0a:	4a16      	ldr	r2, [pc, #88]	; (800ce64 <vTaskStartScheduler+0xcc>)
 800ce0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ce0e:	4b16      	ldr	r3, [pc, #88]	; (800ce68 <vTaskStartScheduler+0xd0>)
 800ce10:	f04f 32ff 	mov.w	r2, #4294967295
 800ce14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce16:	4b15      	ldr	r3, [pc, #84]	; (800ce6c <vTaskStartScheduler+0xd4>)
 800ce18:	2201      	movs	r2, #1
 800ce1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ce1c:	4b14      	ldr	r3, [pc, #80]	; (800ce70 <vTaskStartScheduler+0xd8>)
 800ce1e:	2200      	movs	r2, #0
 800ce20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ce22:	f000 fbc5 	bl	800d5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ce26:	e010      	b.n	800ce4a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2e:	d10c      	bne.n	800ce4a <vTaskStartScheduler+0xb2>
	__asm volatile
 800ce30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce34:	b672      	cpsid	i
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	b662      	cpsie	i
 800ce44:	60fb      	str	r3, [r7, #12]
}
 800ce46:	bf00      	nop
 800ce48:	e7fe      	b.n	800ce48 <vTaskStartScheduler+0xb0>
}
 800ce4a:	bf00      	nop
 800ce4c:	3718      	adds	r7, #24
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	0800f91c 	.word	0x0800f91c
 800ce58:	0800d209 	.word	0x0800d209
 800ce5c:	20000740 	.word	0x20000740
 800ce60:	2000061c 	.word	0x2000061c
 800ce64:	20000050 	.word	0x20000050
 800ce68:	2000073c 	.word	0x2000073c
 800ce6c:	20000728 	.word	0x20000728
 800ce70:	20000720 	.word	0x20000720

0800ce74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce74:	b480      	push	{r7}
 800ce76:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ce78:	4b04      	ldr	r3, [pc, #16]	; (800ce8c <vTaskSuspendAll+0x18>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	4a03      	ldr	r2, [pc, #12]	; (800ce8c <vTaskSuspendAll+0x18>)
 800ce80:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ce82:	bf00      	nop
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr
 800ce8c:	20000744 	.word	0x20000744

0800ce90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce96:	2300      	movs	r3, #0
 800ce98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce9e:	4b42      	ldr	r3, [pc, #264]	; (800cfa8 <xTaskResumeAll+0x118>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10c      	bne.n	800cec0 <xTaskResumeAll+0x30>
	__asm volatile
 800cea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceaa:	b672      	cpsid	i
 800ceac:	f383 8811 	msr	BASEPRI, r3
 800ceb0:	f3bf 8f6f 	isb	sy
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	b662      	cpsie	i
 800ceba:	603b      	str	r3, [r7, #0]
}
 800cebc:	bf00      	nop
 800cebe:	e7fe      	b.n	800cebe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cec0:	f000 fbf4 	bl	800d6ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cec4:	4b38      	ldr	r3, [pc, #224]	; (800cfa8 <xTaskResumeAll+0x118>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	4a37      	ldr	r2, [pc, #220]	; (800cfa8 <xTaskResumeAll+0x118>)
 800cecc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cece:	4b36      	ldr	r3, [pc, #216]	; (800cfa8 <xTaskResumeAll+0x118>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d161      	bne.n	800cf9a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ced6:	4b35      	ldr	r3, [pc, #212]	; (800cfac <xTaskResumeAll+0x11c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d05d      	beq.n	800cf9a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cede:	e02e      	b.n	800cf3e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cee0:	4b33      	ldr	r3, [pc, #204]	; (800cfb0 <xTaskResumeAll+0x120>)
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3318      	adds	r3, #24
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7ff fc18 	bl	800c722 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	3304      	adds	r3, #4
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7ff fc13 	bl	800c722 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf00:	2201      	movs	r2, #1
 800cf02:	409a      	lsls	r2, r3
 800cf04:	4b2b      	ldr	r3, [pc, #172]	; (800cfb4 <xTaskResumeAll+0x124>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	4a2a      	ldr	r2, [pc, #168]	; (800cfb4 <xTaskResumeAll+0x124>)
 800cf0c:	6013      	str	r3, [r2, #0]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf12:	4613      	mov	r3, r2
 800cf14:	009b      	lsls	r3, r3, #2
 800cf16:	4413      	add	r3, r2
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	4a27      	ldr	r2, [pc, #156]	; (800cfb8 <xTaskResumeAll+0x128>)
 800cf1c:	441a      	add	r2, r3
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	3304      	adds	r3, #4
 800cf22:	4619      	mov	r1, r3
 800cf24:	4610      	mov	r0, r2
 800cf26:	f7ff fb9f 	bl	800c668 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2e:	4b23      	ldr	r3, [pc, #140]	; (800cfbc <xTaskResumeAll+0x12c>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d302      	bcc.n	800cf3e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cf38:	4b21      	ldr	r3, [pc, #132]	; (800cfc0 <xTaskResumeAll+0x130>)
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf3e:	4b1c      	ldr	r3, [pc, #112]	; (800cfb0 <xTaskResumeAll+0x120>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1cc      	bne.n	800cee0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d001      	beq.n	800cf50 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cf4c:	f000 fa18 	bl	800d380 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cf50:	4b1c      	ldr	r3, [pc, #112]	; (800cfc4 <xTaskResumeAll+0x134>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d010      	beq.n	800cf7e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf5c:	f000 f836 	bl	800cfcc <xTaskIncrementTick>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d002      	beq.n	800cf6c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cf66:	4b16      	ldr	r3, [pc, #88]	; (800cfc0 <xTaskResumeAll+0x130>)
 800cf68:	2201      	movs	r2, #1
 800cf6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1f1      	bne.n	800cf5c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800cf78:	4b12      	ldr	r3, [pc, #72]	; (800cfc4 <xTaskResumeAll+0x134>)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf7e:	4b10      	ldr	r3, [pc, #64]	; (800cfc0 <xTaskResumeAll+0x130>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d009      	beq.n	800cf9a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf86:	2301      	movs	r3, #1
 800cf88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf8a:	4b0f      	ldr	r3, [pc, #60]	; (800cfc8 <xTaskResumeAll+0x138>)
 800cf8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf90:	601a      	str	r2, [r3, #0]
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf9a:	f000 fbbb 	bl	800d714 <vPortExitCritical>

	return xAlreadyYielded;
 800cf9e:	68bb      	ldr	r3, [r7, #8]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	20000744 	.word	0x20000744
 800cfac:	2000071c 	.word	0x2000071c
 800cfb0:	200006dc 	.word	0x200006dc
 800cfb4:	20000724 	.word	0x20000724
 800cfb8:	20000620 	.word	0x20000620
 800cfbc:	2000061c 	.word	0x2000061c
 800cfc0:	20000730 	.word	0x20000730
 800cfc4:	2000072c 	.word	0x2000072c
 800cfc8:	e000ed04 	.word	0xe000ed04

0800cfcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfd6:	4b4f      	ldr	r3, [pc, #316]	; (800d114 <xTaskIncrementTick+0x148>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	f040 808a 	bne.w	800d0f4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cfe0:	4b4d      	ldr	r3, [pc, #308]	; (800d118 <xTaskIncrementTick+0x14c>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cfe8:	4a4b      	ldr	r2, [pc, #300]	; (800d118 <xTaskIncrementTick+0x14c>)
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d122      	bne.n	800d03a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800cff4:	4b49      	ldr	r3, [pc, #292]	; (800d11c <xTaskIncrementTick+0x150>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00c      	beq.n	800d018 <xTaskIncrementTick+0x4c>
	__asm volatile
 800cffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d002:	b672      	cpsid	i
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	b662      	cpsie	i
 800d012:	603b      	str	r3, [r7, #0]
}
 800d014:	bf00      	nop
 800d016:	e7fe      	b.n	800d016 <xTaskIncrementTick+0x4a>
 800d018:	4b40      	ldr	r3, [pc, #256]	; (800d11c <xTaskIncrementTick+0x150>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	60fb      	str	r3, [r7, #12]
 800d01e:	4b40      	ldr	r3, [pc, #256]	; (800d120 <xTaskIncrementTick+0x154>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a3e      	ldr	r2, [pc, #248]	; (800d11c <xTaskIncrementTick+0x150>)
 800d024:	6013      	str	r3, [r2, #0]
 800d026:	4a3e      	ldr	r2, [pc, #248]	; (800d120 <xTaskIncrementTick+0x154>)
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6013      	str	r3, [r2, #0]
 800d02c:	4b3d      	ldr	r3, [pc, #244]	; (800d124 <xTaskIncrementTick+0x158>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	3301      	adds	r3, #1
 800d032:	4a3c      	ldr	r2, [pc, #240]	; (800d124 <xTaskIncrementTick+0x158>)
 800d034:	6013      	str	r3, [r2, #0]
 800d036:	f000 f9a3 	bl	800d380 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d03a:	4b3b      	ldr	r3, [pc, #236]	; (800d128 <xTaskIncrementTick+0x15c>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	693a      	ldr	r2, [r7, #16]
 800d040:	429a      	cmp	r2, r3
 800d042:	d348      	bcc.n	800d0d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d044:	4b35      	ldr	r3, [pc, #212]	; (800d11c <xTaskIncrementTick+0x150>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d104      	bne.n	800d058 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d04e:	4b36      	ldr	r3, [pc, #216]	; (800d128 <xTaskIncrementTick+0x15c>)
 800d050:	f04f 32ff 	mov.w	r2, #4294967295
 800d054:	601a      	str	r2, [r3, #0]
					break;
 800d056:	e03e      	b.n	800d0d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d058:	4b30      	ldr	r3, [pc, #192]	; (800d11c <xTaskIncrementTick+0x150>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d068:	693a      	ldr	r2, [r7, #16]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d203      	bcs.n	800d078 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d070:	4a2d      	ldr	r2, [pc, #180]	; (800d128 <xTaskIncrementTick+0x15c>)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d076:	e02e      	b.n	800d0d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	3304      	adds	r3, #4
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7ff fb50 	bl	800c722 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d086:	2b00      	cmp	r3, #0
 800d088:	d004      	beq.n	800d094 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	3318      	adds	r3, #24
 800d08e:	4618      	mov	r0, r3
 800d090:	f7ff fb47 	bl	800c722 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d098:	2201      	movs	r2, #1
 800d09a:	409a      	lsls	r2, r3
 800d09c:	4b23      	ldr	r3, [pc, #140]	; (800d12c <xTaskIncrementTick+0x160>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	4a22      	ldr	r2, [pc, #136]	; (800d12c <xTaskIncrementTick+0x160>)
 800d0a4:	6013      	str	r3, [r2, #0]
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4413      	add	r3, r2
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	4a1f      	ldr	r2, [pc, #124]	; (800d130 <xTaskIncrementTick+0x164>)
 800d0b4:	441a      	add	r2, r3
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	4610      	mov	r0, r2
 800d0be:	f7ff fad3 	bl	800c668 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c6:	4b1b      	ldr	r3, [pc, #108]	; (800d134 <xTaskIncrementTick+0x168>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d3b9      	bcc.n	800d044 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0d4:	e7b6      	b.n	800d044 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d0d6:	4b17      	ldr	r3, [pc, #92]	; (800d134 <xTaskIncrementTick+0x168>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0dc:	4914      	ldr	r1, [pc, #80]	; (800d130 <xTaskIncrementTick+0x164>)
 800d0de:	4613      	mov	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4413      	add	r3, r2
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	440b      	add	r3, r1
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d907      	bls.n	800d0fe <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	617b      	str	r3, [r7, #20]
 800d0f2:	e004      	b.n	800d0fe <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d0f4:	4b10      	ldr	r3, [pc, #64]	; (800d138 <xTaskIncrementTick+0x16c>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	4a0f      	ldr	r2, [pc, #60]	; (800d138 <xTaskIncrementTick+0x16c>)
 800d0fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d0fe:	4b0f      	ldr	r3, [pc, #60]	; (800d13c <xTaskIncrementTick+0x170>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800d106:	2301      	movs	r3, #1
 800d108:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d10a:	697b      	ldr	r3, [r7, #20]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3718      	adds	r7, #24
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	20000744 	.word	0x20000744
 800d118:	20000720 	.word	0x20000720
 800d11c:	200006d4 	.word	0x200006d4
 800d120:	200006d8 	.word	0x200006d8
 800d124:	20000734 	.word	0x20000734
 800d128:	2000073c 	.word	0x2000073c
 800d12c:	20000724 	.word	0x20000724
 800d130:	20000620 	.word	0x20000620
 800d134:	2000061c 	.word	0x2000061c
 800d138:	2000072c 	.word	0x2000072c
 800d13c:	20000730 	.word	0x20000730

0800d140 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d140:	b480      	push	{r7}
 800d142:	b087      	sub	sp, #28
 800d144:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d146:	4b2a      	ldr	r3, [pc, #168]	; (800d1f0 <vTaskSwitchContext+0xb0>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d003      	beq.n	800d156 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d14e:	4b29      	ldr	r3, [pc, #164]	; (800d1f4 <vTaskSwitchContext+0xb4>)
 800d150:	2201      	movs	r2, #1
 800d152:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d154:	e046      	b.n	800d1e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d156:	4b27      	ldr	r3, [pc, #156]	; (800d1f4 <vTaskSwitchContext+0xb4>)
 800d158:	2200      	movs	r2, #0
 800d15a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d15c:	4b26      	ldr	r3, [pc, #152]	; (800d1f8 <vTaskSwitchContext+0xb8>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	fab3 f383 	clz	r3, r3
 800d168:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d16a:	7afb      	ldrb	r3, [r7, #11]
 800d16c:	f1c3 031f 	rsb	r3, r3, #31
 800d170:	617b      	str	r3, [r7, #20]
 800d172:	4922      	ldr	r1, [pc, #136]	; (800d1fc <vTaskSwitchContext+0xbc>)
 800d174:	697a      	ldr	r2, [r7, #20]
 800d176:	4613      	mov	r3, r2
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	4413      	add	r3, r2
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	440b      	add	r3, r1
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d10c      	bne.n	800d1a0 <vTaskSwitchContext+0x60>
	__asm volatile
 800d186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18a:	b672      	cpsid	i
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	b662      	cpsie	i
 800d19a:	607b      	str	r3, [r7, #4]
}
 800d19c:	bf00      	nop
 800d19e:	e7fe      	b.n	800d19e <vTaskSwitchContext+0x5e>
 800d1a0:	697a      	ldr	r2, [r7, #20]
 800d1a2:	4613      	mov	r3, r2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	4413      	add	r3, r2
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	4a14      	ldr	r2, [pc, #80]	; (800d1fc <vTaskSwitchContext+0xbc>)
 800d1ac:	4413      	add	r3, r2
 800d1ae:	613b      	str	r3, [r7, #16]
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	685a      	ldr	r2, [r3, #4]
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	605a      	str	r2, [r3, #4]
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	685a      	ldr	r2, [r3, #4]
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	3308      	adds	r3, #8
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d104      	bne.n	800d1d0 <vTaskSwitchContext+0x90>
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	685a      	ldr	r2, [r3, #4]
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	605a      	str	r2, [r3, #4]
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	4a0a      	ldr	r2, [pc, #40]	; (800d200 <vTaskSwitchContext+0xc0>)
 800d1d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d1da:	4b09      	ldr	r3, [pc, #36]	; (800d200 <vTaskSwitchContext+0xc0>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	334c      	adds	r3, #76	; 0x4c
 800d1e0:	4a08      	ldr	r2, [pc, #32]	; (800d204 <vTaskSwitchContext+0xc4>)
 800d1e2:	6013      	str	r3, [r2, #0]
}
 800d1e4:	bf00      	nop
 800d1e6:	371c      	adds	r7, #28
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr
 800d1f0:	20000744 	.word	0x20000744
 800d1f4:	20000730 	.word	0x20000730
 800d1f8:	20000724 	.word	0x20000724
 800d1fc:	20000620 	.word	0x20000620
 800d200:	2000061c 	.word	0x2000061c
 800d204:	20000050 	.word	0x20000050

0800d208 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d210:	f000 f852 	bl	800d2b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d214:	4b06      	ldr	r3, [pc, #24]	; (800d230 <prvIdleTask+0x28>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d9f9      	bls.n	800d210 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d21c:	4b05      	ldr	r3, [pc, #20]	; (800d234 <prvIdleTask+0x2c>)
 800d21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d222:	601a      	str	r2, [r3, #0]
 800d224:	f3bf 8f4f 	dsb	sy
 800d228:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d22c:	e7f0      	b.n	800d210 <prvIdleTask+0x8>
 800d22e:	bf00      	nop
 800d230:	20000620 	.word	0x20000620
 800d234:	e000ed04 	.word	0xe000ed04

0800d238 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d23e:	2300      	movs	r3, #0
 800d240:	607b      	str	r3, [r7, #4]
 800d242:	e00c      	b.n	800d25e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	4613      	mov	r3, r2
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	4a12      	ldr	r2, [pc, #72]	; (800d298 <prvInitialiseTaskLists+0x60>)
 800d250:	4413      	add	r3, r2
 800d252:	4618      	mov	r0, r3
 800d254:	f7ff f9db 	bl	800c60e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	3301      	adds	r3, #1
 800d25c:	607b      	str	r3, [r7, #4]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2b06      	cmp	r3, #6
 800d262:	d9ef      	bls.n	800d244 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d264:	480d      	ldr	r0, [pc, #52]	; (800d29c <prvInitialiseTaskLists+0x64>)
 800d266:	f7ff f9d2 	bl	800c60e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d26a:	480d      	ldr	r0, [pc, #52]	; (800d2a0 <prvInitialiseTaskLists+0x68>)
 800d26c:	f7ff f9cf 	bl	800c60e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d270:	480c      	ldr	r0, [pc, #48]	; (800d2a4 <prvInitialiseTaskLists+0x6c>)
 800d272:	f7ff f9cc 	bl	800c60e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d276:	480c      	ldr	r0, [pc, #48]	; (800d2a8 <prvInitialiseTaskLists+0x70>)
 800d278:	f7ff f9c9 	bl	800c60e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d27c:	480b      	ldr	r0, [pc, #44]	; (800d2ac <prvInitialiseTaskLists+0x74>)
 800d27e:	f7ff f9c6 	bl	800c60e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d282:	4b0b      	ldr	r3, [pc, #44]	; (800d2b0 <prvInitialiseTaskLists+0x78>)
 800d284:	4a05      	ldr	r2, [pc, #20]	; (800d29c <prvInitialiseTaskLists+0x64>)
 800d286:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d288:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <prvInitialiseTaskLists+0x7c>)
 800d28a:	4a05      	ldr	r2, [pc, #20]	; (800d2a0 <prvInitialiseTaskLists+0x68>)
 800d28c:	601a      	str	r2, [r3, #0]
}
 800d28e:	bf00      	nop
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	20000620 	.word	0x20000620
 800d29c:	200006ac 	.word	0x200006ac
 800d2a0:	200006c0 	.word	0x200006c0
 800d2a4:	200006dc 	.word	0x200006dc
 800d2a8:	200006f0 	.word	0x200006f0
 800d2ac:	20000708 	.word	0x20000708
 800d2b0:	200006d4 	.word	0x200006d4
 800d2b4:	200006d8 	.word	0x200006d8

0800d2b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d2be:	e019      	b.n	800d2f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d2c0:	f000 f9f4 	bl	800d6ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2c4:	4b10      	ldr	r3, [pc, #64]	; (800d308 <prvCheckTasksWaitingTermination+0x50>)
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff fa26 	bl	800c722 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d2d6:	4b0d      	ldr	r3, [pc, #52]	; (800d30c <prvCheckTasksWaitingTermination+0x54>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	4a0b      	ldr	r2, [pc, #44]	; (800d30c <prvCheckTasksWaitingTermination+0x54>)
 800d2de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d2e0:	4b0b      	ldr	r3, [pc, #44]	; (800d310 <prvCheckTasksWaitingTermination+0x58>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	4a0a      	ldr	r2, [pc, #40]	; (800d310 <prvCheckTasksWaitingTermination+0x58>)
 800d2e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d2ea:	f000 fa13 	bl	800d714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f810 	bl	800d314 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d2f4:	4b06      	ldr	r3, [pc, #24]	; (800d310 <prvCheckTasksWaitingTermination+0x58>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1e1      	bne.n	800d2c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d2fc:	bf00      	nop
 800d2fe:	bf00      	nop
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	200006f0 	.word	0x200006f0
 800d30c:	2000071c 	.word	0x2000071c
 800d310:	20000704 	.word	0x20000704

0800d314 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	334c      	adds	r3, #76	; 0x4c
 800d320:	4618      	mov	r0, r3
 800d322:	f000 fd4d 	bl	800ddc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d108      	bne.n	800d342 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d334:	4618      	mov	r0, r3
 800d336:	f000 fb6b 	bl	800da10 <vPortFree>
				vPortFree( pxTCB );
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 fb68 	bl	800da10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d340:	e01a      	b.n	800d378 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d103      	bne.n	800d354 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fb5f 	bl	800da10 <vPortFree>
	}
 800d352:	e011      	b.n	800d378 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d35a:	2b02      	cmp	r3, #2
 800d35c:	d00c      	beq.n	800d378 <prvDeleteTCB+0x64>
	__asm volatile
 800d35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d362:	b672      	cpsid	i
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	b662      	cpsie	i
 800d372:	60fb      	str	r3, [r7, #12]
}
 800d374:	bf00      	nop
 800d376:	e7fe      	b.n	800d376 <prvDeleteTCB+0x62>
	}
 800d378:	bf00      	nop
 800d37a:	3710      	adds	r7, #16
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d380:	b480      	push	{r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d386:	4b0c      	ldr	r3, [pc, #48]	; (800d3b8 <prvResetNextTaskUnblockTime+0x38>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d104      	bne.n	800d39a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d390:	4b0a      	ldr	r3, [pc, #40]	; (800d3bc <prvResetNextTaskUnblockTime+0x3c>)
 800d392:	f04f 32ff 	mov.w	r2, #4294967295
 800d396:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d398:	e008      	b.n	800d3ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d39a:	4b07      	ldr	r3, [pc, #28]	; (800d3b8 <prvResetNextTaskUnblockTime+0x38>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	4a04      	ldr	r2, [pc, #16]	; (800d3bc <prvResetNextTaskUnblockTime+0x3c>)
 800d3aa:	6013      	str	r3, [r2, #0]
}
 800d3ac:	bf00      	nop
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr
 800d3b8:	200006d4 	.word	0x200006d4
 800d3bc:	2000073c 	.word	0x2000073c

0800d3c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d3ca:	4b29      	ldr	r3, [pc, #164]	; (800d470 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3d0:	4b28      	ldr	r3, [pc, #160]	; (800d474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7ff f9a3 	bl	800c722 <uxListRemove>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d10b      	bne.n	800d3fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d3e2:	4b24      	ldr	r3, [pc, #144]	; (800d474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d3ee:	43da      	mvns	r2, r3
 800d3f0:	4b21      	ldr	r3, [pc, #132]	; (800d478 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4013      	ands	r3, r2
 800d3f6:	4a20      	ldr	r2, [pc, #128]	; (800d478 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d400:	d10a      	bne.n	800d418 <prvAddCurrentTaskToDelayedList+0x58>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d007      	beq.n	800d418 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d408:	4b1a      	ldr	r3, [pc, #104]	; (800d474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3304      	adds	r3, #4
 800d40e:	4619      	mov	r1, r3
 800d410:	481a      	ldr	r0, [pc, #104]	; (800d47c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d412:	f7ff f929 	bl	800c668 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d416:	e026      	b.n	800d466 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4413      	add	r3, r2
 800d41e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d420:	4b14      	ldr	r3, [pc, #80]	; (800d474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68ba      	ldr	r2, [r7, #8]
 800d426:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d428:	68ba      	ldr	r2, [r7, #8]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d209      	bcs.n	800d444 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d430:	4b13      	ldr	r3, [pc, #76]	; (800d480 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	4b0f      	ldr	r3, [pc, #60]	; (800d474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	3304      	adds	r3, #4
 800d43a:	4619      	mov	r1, r3
 800d43c:	4610      	mov	r0, r2
 800d43e:	f7ff f937 	bl	800c6b0 <vListInsert>
}
 800d442:	e010      	b.n	800d466 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d444:	4b0f      	ldr	r3, [pc, #60]	; (800d484 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	4b0a      	ldr	r3, [pc, #40]	; (800d474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	3304      	adds	r3, #4
 800d44e:	4619      	mov	r1, r3
 800d450:	4610      	mov	r0, r2
 800d452:	f7ff f92d 	bl	800c6b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d456:	4b0c      	ldr	r3, [pc, #48]	; (800d488 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d202      	bcs.n	800d466 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d460:	4a09      	ldr	r2, [pc, #36]	; (800d488 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	6013      	str	r3, [r2, #0]
}
 800d466:	bf00      	nop
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	20000720 	.word	0x20000720
 800d474:	2000061c 	.word	0x2000061c
 800d478:	20000724 	.word	0x20000724
 800d47c:	20000708 	.word	0x20000708
 800d480:	200006d8 	.word	0x200006d8
 800d484:	200006d4 	.word	0x200006d4
 800d488:	2000073c 	.word	0x2000073c

0800d48c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d48c:	b480      	push	{r7}
 800d48e:	b085      	sub	sp, #20
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	3b04      	subs	r3, #4
 800d49c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d4a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	3b04      	subs	r3, #4
 800d4aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	f023 0201 	bic.w	r2, r3, #1
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	3b04      	subs	r3, #4
 800d4ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4bc:	4a0c      	ldr	r2, [pc, #48]	; (800d4f0 <pxPortInitialiseStack+0x64>)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	3b14      	subs	r3, #20
 800d4c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	3b04      	subs	r3, #4
 800d4d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f06f 0202 	mvn.w	r2, #2
 800d4da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	3b20      	subs	r3, #32
 800d4e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3714      	adds	r7, #20
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr
 800d4f0:	0800d4f5 	.word	0x0800d4f5

0800d4f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d4fe:	4b14      	ldr	r3, [pc, #80]	; (800d550 <prvTaskExitError+0x5c>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d506:	d00c      	beq.n	800d522 <prvTaskExitError+0x2e>
	__asm volatile
 800d508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50c:	b672      	cpsid	i
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	b662      	cpsie	i
 800d51c:	60fb      	str	r3, [r7, #12]
}
 800d51e:	bf00      	nop
 800d520:	e7fe      	b.n	800d520 <prvTaskExitError+0x2c>
	__asm volatile
 800d522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d526:	b672      	cpsid	i
 800d528:	f383 8811 	msr	BASEPRI, r3
 800d52c:	f3bf 8f6f 	isb	sy
 800d530:	f3bf 8f4f 	dsb	sy
 800d534:	b662      	cpsie	i
 800d536:	60bb      	str	r3, [r7, #8]
}
 800d538:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d53a:	bf00      	nop
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d0fc      	beq.n	800d53c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d542:	bf00      	nop
 800d544:	bf00      	nop
 800d546:	3714      	adds	r7, #20
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr
 800d550:	2000004c 	.word	0x2000004c
	...

0800d560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d560:	4b07      	ldr	r3, [pc, #28]	; (800d580 <pxCurrentTCBConst2>)
 800d562:	6819      	ldr	r1, [r3, #0]
 800d564:	6808      	ldr	r0, [r1, #0]
 800d566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56a:	f380 8809 	msr	PSP, r0
 800d56e:	f3bf 8f6f 	isb	sy
 800d572:	f04f 0000 	mov.w	r0, #0
 800d576:	f380 8811 	msr	BASEPRI, r0
 800d57a:	4770      	bx	lr
 800d57c:	f3af 8000 	nop.w

0800d580 <pxCurrentTCBConst2>:
 800d580:	2000061c 	.word	0x2000061c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d584:	bf00      	nop
 800d586:	bf00      	nop

0800d588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d588:	4808      	ldr	r0, [pc, #32]	; (800d5ac <prvPortStartFirstTask+0x24>)
 800d58a:	6800      	ldr	r0, [r0, #0]
 800d58c:	6800      	ldr	r0, [r0, #0]
 800d58e:	f380 8808 	msr	MSP, r0
 800d592:	f04f 0000 	mov.w	r0, #0
 800d596:	f380 8814 	msr	CONTROL, r0
 800d59a:	b662      	cpsie	i
 800d59c:	b661      	cpsie	f
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	df00      	svc	0
 800d5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5aa:	bf00      	nop
 800d5ac:	e000ed08 	.word	0xe000ed08

0800d5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d5b6:	4b37      	ldr	r3, [pc, #220]	; (800d694 <xPortStartScheduler+0xe4>)
 800d5b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	22ff      	movs	r2, #255	; 0xff
 800d5c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d5d0:	78fb      	ldrb	r3, [r7, #3]
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d5d8:	b2da      	uxtb	r2, r3
 800d5da:	4b2f      	ldr	r3, [pc, #188]	; (800d698 <xPortStartScheduler+0xe8>)
 800d5dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d5de:	4b2f      	ldr	r3, [pc, #188]	; (800d69c <xPortStartScheduler+0xec>)
 800d5e0:	2207      	movs	r2, #7
 800d5e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5e4:	e009      	b.n	800d5fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d5e6:	4b2d      	ldr	r3, [pc, #180]	; (800d69c <xPortStartScheduler+0xec>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	4a2b      	ldr	r2, [pc, #172]	; (800d69c <xPortStartScheduler+0xec>)
 800d5ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d5f0:	78fb      	ldrb	r3, [r7, #3]
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	005b      	lsls	r3, r3, #1
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5fa:	78fb      	ldrb	r3, [r7, #3]
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d602:	2b80      	cmp	r3, #128	; 0x80
 800d604:	d0ef      	beq.n	800d5e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d606:	4b25      	ldr	r3, [pc, #148]	; (800d69c <xPortStartScheduler+0xec>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f1c3 0307 	rsb	r3, r3, #7
 800d60e:	2b04      	cmp	r3, #4
 800d610:	d00c      	beq.n	800d62c <xPortStartScheduler+0x7c>
	__asm volatile
 800d612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d616:	b672      	cpsid	i
 800d618:	f383 8811 	msr	BASEPRI, r3
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	f3bf 8f4f 	dsb	sy
 800d624:	b662      	cpsie	i
 800d626:	60bb      	str	r3, [r7, #8]
}
 800d628:	bf00      	nop
 800d62a:	e7fe      	b.n	800d62a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d62c:	4b1b      	ldr	r3, [pc, #108]	; (800d69c <xPortStartScheduler+0xec>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	021b      	lsls	r3, r3, #8
 800d632:	4a1a      	ldr	r2, [pc, #104]	; (800d69c <xPortStartScheduler+0xec>)
 800d634:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d636:	4b19      	ldr	r3, [pc, #100]	; (800d69c <xPortStartScheduler+0xec>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d63e:	4a17      	ldr	r2, [pc, #92]	; (800d69c <xPortStartScheduler+0xec>)
 800d640:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	b2da      	uxtb	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d64a:	4b15      	ldr	r3, [pc, #84]	; (800d6a0 <xPortStartScheduler+0xf0>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a14      	ldr	r2, [pc, #80]	; (800d6a0 <xPortStartScheduler+0xf0>)
 800d650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d654:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d656:	4b12      	ldr	r3, [pc, #72]	; (800d6a0 <xPortStartScheduler+0xf0>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a11      	ldr	r2, [pc, #68]	; (800d6a0 <xPortStartScheduler+0xf0>)
 800d65c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d660:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d662:	f000 f8dd 	bl	800d820 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d666:	4b0f      	ldr	r3, [pc, #60]	; (800d6a4 <xPortStartScheduler+0xf4>)
 800d668:	2200      	movs	r2, #0
 800d66a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d66c:	f000 f8fc 	bl	800d868 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d670:	4b0d      	ldr	r3, [pc, #52]	; (800d6a8 <xPortStartScheduler+0xf8>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a0c      	ldr	r2, [pc, #48]	; (800d6a8 <xPortStartScheduler+0xf8>)
 800d676:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d67a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d67c:	f7ff ff84 	bl	800d588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d680:	f7ff fd5e 	bl	800d140 <vTaskSwitchContext>
	prvTaskExitError();
 800d684:	f7ff ff36 	bl	800d4f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3710      	adds	r7, #16
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	e000e400 	.word	0xe000e400
 800d698:	20000748 	.word	0x20000748
 800d69c:	2000074c 	.word	0x2000074c
 800d6a0:	e000ed20 	.word	0xe000ed20
 800d6a4:	2000004c 	.word	0x2000004c
 800d6a8:	e000ef34 	.word	0xe000ef34

0800d6ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
	__asm volatile
 800d6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b6:	b672      	cpsid	i
 800d6b8:	f383 8811 	msr	BASEPRI, r3
 800d6bc:	f3bf 8f6f 	isb	sy
 800d6c0:	f3bf 8f4f 	dsb	sy
 800d6c4:	b662      	cpsie	i
 800d6c6:	607b      	str	r3, [r7, #4]
}
 800d6c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d6ca:	4b10      	ldr	r3, [pc, #64]	; (800d70c <vPortEnterCritical+0x60>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	4a0e      	ldr	r2, [pc, #56]	; (800d70c <vPortEnterCritical+0x60>)
 800d6d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d6d4:	4b0d      	ldr	r3, [pc, #52]	; (800d70c <vPortEnterCritical+0x60>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d111      	bne.n	800d700 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d6dc:	4b0c      	ldr	r3, [pc, #48]	; (800d710 <vPortEnterCritical+0x64>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00c      	beq.n	800d700 <vPortEnterCritical+0x54>
	__asm volatile
 800d6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ea:	b672      	cpsid	i
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	b662      	cpsie	i
 800d6fa:	603b      	str	r3, [r7, #0]
}
 800d6fc:	bf00      	nop
 800d6fe:	e7fe      	b.n	800d6fe <vPortEnterCritical+0x52>
	}
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	2000004c 	.word	0x2000004c
 800d710:	e000ed04 	.word	0xe000ed04

0800d714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d71a:	4b13      	ldr	r3, [pc, #76]	; (800d768 <vPortExitCritical+0x54>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d10c      	bne.n	800d73c <vPortExitCritical+0x28>
	__asm volatile
 800d722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d726:	b672      	cpsid	i
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	b662      	cpsie	i
 800d736:	607b      	str	r3, [r7, #4]
}
 800d738:	bf00      	nop
 800d73a:	e7fe      	b.n	800d73a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d73c:	4b0a      	ldr	r3, [pc, #40]	; (800d768 <vPortExitCritical+0x54>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	3b01      	subs	r3, #1
 800d742:	4a09      	ldr	r2, [pc, #36]	; (800d768 <vPortExitCritical+0x54>)
 800d744:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d746:	4b08      	ldr	r3, [pc, #32]	; (800d768 <vPortExitCritical+0x54>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d105      	bne.n	800d75a <vPortExitCritical+0x46>
 800d74e:	2300      	movs	r3, #0
 800d750:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d758:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d75a:	bf00      	nop
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	2000004c 	.word	0x2000004c
 800d76c:	00000000 	.word	0x00000000

0800d770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d770:	f3ef 8009 	mrs	r0, PSP
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	4b15      	ldr	r3, [pc, #84]	; (800d7d0 <pxCurrentTCBConst>)
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	f01e 0f10 	tst.w	lr, #16
 800d780:	bf08      	it	eq
 800d782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d78a:	6010      	str	r0, [r2, #0]
 800d78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d790:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d794:	b672      	cpsid	i
 800d796:	f380 8811 	msr	BASEPRI, r0
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	f3bf 8f6f 	isb	sy
 800d7a2:	b662      	cpsie	i
 800d7a4:	f7ff fccc 	bl	800d140 <vTaskSwitchContext>
 800d7a8:	f04f 0000 	mov.w	r0, #0
 800d7ac:	f380 8811 	msr	BASEPRI, r0
 800d7b0:	bc09      	pop	{r0, r3}
 800d7b2:	6819      	ldr	r1, [r3, #0]
 800d7b4:	6808      	ldr	r0, [r1, #0]
 800d7b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ba:	f01e 0f10 	tst.w	lr, #16
 800d7be:	bf08      	it	eq
 800d7c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d7c4:	f380 8809 	msr	PSP, r0
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop

0800d7d0 <pxCurrentTCBConst>:
 800d7d0:	2000061c 	.word	0x2000061c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d7d4:	bf00      	nop
 800d7d6:	bf00      	nop

0800d7d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e2:	b672      	cpsid	i
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	f3bf 8f6f 	isb	sy
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	b662      	cpsie	i
 800d7f2:	607b      	str	r3, [r7, #4]
}
 800d7f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d7f6:	f7ff fbe9 	bl	800cfcc <xTaskIncrementTick>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d003      	beq.n	800d808 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d800:	4b06      	ldr	r3, [pc, #24]	; (800d81c <SysTick_Handler+0x44>)
 800d802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d806:	601a      	str	r2, [r3, #0]
 800d808:	2300      	movs	r3, #0
 800d80a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	f383 8811 	msr	BASEPRI, r3
}
 800d812:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d814:	bf00      	nop
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	e000ed04 	.word	0xe000ed04

0800d820 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d820:	b480      	push	{r7}
 800d822:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d824:	4b0b      	ldr	r3, [pc, #44]	; (800d854 <vPortSetupTimerInterrupt+0x34>)
 800d826:	2200      	movs	r2, #0
 800d828:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d82a:	4b0b      	ldr	r3, [pc, #44]	; (800d858 <vPortSetupTimerInterrupt+0x38>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d830:	4b0a      	ldr	r3, [pc, #40]	; (800d85c <vPortSetupTimerInterrupt+0x3c>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a0a      	ldr	r2, [pc, #40]	; (800d860 <vPortSetupTimerInterrupt+0x40>)
 800d836:	fba2 2303 	umull	r2, r3, r2, r3
 800d83a:	099b      	lsrs	r3, r3, #6
 800d83c:	4a09      	ldr	r2, [pc, #36]	; (800d864 <vPortSetupTimerInterrupt+0x44>)
 800d83e:	3b01      	subs	r3, #1
 800d840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d842:	4b04      	ldr	r3, [pc, #16]	; (800d854 <vPortSetupTimerInterrupt+0x34>)
 800d844:	2207      	movs	r2, #7
 800d846:	601a      	str	r2, [r3, #0]
}
 800d848:	bf00      	nop
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	e000e010 	.word	0xe000e010
 800d858:	e000e018 	.word	0xe000e018
 800d85c:	20000040 	.word	0x20000040
 800d860:	10624dd3 	.word	0x10624dd3
 800d864:	e000e014 	.word	0xe000e014

0800d868 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d868:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d878 <vPortEnableVFP+0x10>
 800d86c:	6801      	ldr	r1, [r0, #0]
 800d86e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d872:	6001      	str	r1, [r0, #0]
 800d874:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d876:	bf00      	nop
 800d878:	e000ed88 	.word	0xe000ed88

0800d87c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b08a      	sub	sp, #40	; 0x28
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d884:	2300      	movs	r3, #0
 800d886:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d888:	f7ff faf4 	bl	800ce74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d88c:	4b5b      	ldr	r3, [pc, #364]	; (800d9fc <pvPortMalloc+0x180>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d101      	bne.n	800d898 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d894:	f000 f91a 	bl	800dacc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d898:	4b59      	ldr	r3, [pc, #356]	; (800da00 <pvPortMalloc+0x184>)
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	4013      	ands	r3, r2
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f040 8092 	bne.w	800d9ca <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d01f      	beq.n	800d8ec <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d8ac:	2208      	movs	r2, #8
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f003 0307 	and.w	r3, r3, #7
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d016      	beq.n	800d8ec <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f023 0307 	bic.w	r3, r3, #7
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f003 0307 	and.w	r3, r3, #7
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00c      	beq.n	800d8ec <pvPortMalloc+0x70>
	__asm volatile
 800d8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d6:	b672      	cpsid	i
 800d8d8:	f383 8811 	msr	BASEPRI, r3
 800d8dc:	f3bf 8f6f 	isb	sy
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	b662      	cpsie	i
 800d8e6:	617b      	str	r3, [r7, #20]
}
 800d8e8:	bf00      	nop
 800d8ea:	e7fe      	b.n	800d8ea <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d06b      	beq.n	800d9ca <pvPortMalloc+0x14e>
 800d8f2:	4b44      	ldr	r3, [pc, #272]	; (800da04 <pvPortMalloc+0x188>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d866      	bhi.n	800d9ca <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d8fc:	4b42      	ldr	r3, [pc, #264]	; (800da08 <pvPortMalloc+0x18c>)
 800d8fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d900:	4b41      	ldr	r3, [pc, #260]	; (800da08 <pvPortMalloc+0x18c>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d906:	e004      	b.n	800d912 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d903      	bls.n	800d924 <pvPortMalloc+0xa8>
 800d91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d1f1      	bne.n	800d908 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d924:	4b35      	ldr	r3, [pc, #212]	; (800d9fc <pvPortMalloc+0x180>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d04d      	beq.n	800d9ca <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d92e:	6a3b      	ldr	r3, [r7, #32]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2208      	movs	r2, #8
 800d934:	4413      	add	r3, r2
 800d936:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	6a3b      	ldr	r3, [r7, #32]
 800d93e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	685a      	ldr	r2, [r3, #4]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	1ad2      	subs	r2, r2, r3
 800d948:	2308      	movs	r3, #8
 800d94a:	005b      	lsls	r3, r3, #1
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d921      	bls.n	800d994 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4413      	add	r3, r2
 800d956:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	f003 0307 	and.w	r3, r3, #7
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00c      	beq.n	800d97c <pvPortMalloc+0x100>
	__asm volatile
 800d962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d966:	b672      	cpsid	i
 800d968:	f383 8811 	msr	BASEPRI, r3
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	b662      	cpsie	i
 800d976:	613b      	str	r3, [r7, #16]
}
 800d978:	bf00      	nop
 800d97a:	e7fe      	b.n	800d97a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97e:	685a      	ldr	r2, [r3, #4]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	1ad2      	subs	r2, r2, r3
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d98e:	69b8      	ldr	r0, [r7, #24]
 800d990:	f000 f8fe 	bl	800db90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d994:	4b1b      	ldr	r3, [pc, #108]	; (800da04 <pvPortMalloc+0x188>)
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	1ad3      	subs	r3, r2, r3
 800d99e:	4a19      	ldr	r2, [pc, #100]	; (800da04 <pvPortMalloc+0x188>)
 800d9a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d9a2:	4b18      	ldr	r3, [pc, #96]	; (800da04 <pvPortMalloc+0x188>)
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	4b19      	ldr	r3, [pc, #100]	; (800da0c <pvPortMalloc+0x190>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d203      	bcs.n	800d9b6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d9ae:	4b15      	ldr	r3, [pc, #84]	; (800da04 <pvPortMalloc+0x188>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4a16      	ldr	r2, [pc, #88]	; (800da0c <pvPortMalloc+0x190>)
 800d9b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b8:	685a      	ldr	r2, [r3, #4]
 800d9ba:	4b11      	ldr	r3, [pc, #68]	; (800da00 <pvPortMalloc+0x184>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	431a      	orrs	r2, r3
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d9ca:	f7ff fa61 	bl	800ce90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9ce:	69fb      	ldr	r3, [r7, #28]
 800d9d0:	f003 0307 	and.w	r3, r3, #7
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00c      	beq.n	800d9f2 <pvPortMalloc+0x176>
	__asm volatile
 800d9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9dc:	b672      	cpsid	i
 800d9de:	f383 8811 	msr	BASEPRI, r3
 800d9e2:	f3bf 8f6f 	isb	sy
 800d9e6:	f3bf 8f4f 	dsb	sy
 800d9ea:	b662      	cpsie	i
 800d9ec:	60fb      	str	r3, [r7, #12]
}
 800d9ee:	bf00      	nop
 800d9f0:	e7fe      	b.n	800d9f0 <pvPortMalloc+0x174>
	return pvReturn;
 800d9f2:	69fb      	ldr	r3, [r7, #28]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3728      	adds	r7, #40	; 0x28
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	20004358 	.word	0x20004358
 800da00:	20004364 	.word	0x20004364
 800da04:	2000435c 	.word	0x2000435c
 800da08:	20004350 	.word	0x20004350
 800da0c:	20004360 	.word	0x20004360

0800da10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b086      	sub	sp, #24
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d04c      	beq.n	800dabc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800da22:	2308      	movs	r3, #8
 800da24:	425b      	negs	r3, r3
 800da26:	697a      	ldr	r2, [r7, #20]
 800da28:	4413      	add	r3, r2
 800da2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	685a      	ldr	r2, [r3, #4]
 800da34:	4b23      	ldr	r3, [pc, #140]	; (800dac4 <vPortFree+0xb4>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4013      	ands	r3, r2
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d10c      	bne.n	800da58 <vPortFree+0x48>
	__asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da42:	b672      	cpsid	i
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	b662      	cpsie	i
 800da52:	60fb      	str	r3, [r7, #12]
}
 800da54:	bf00      	nop
 800da56:	e7fe      	b.n	800da56 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d00c      	beq.n	800da7a <vPortFree+0x6a>
	__asm volatile
 800da60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da64:	b672      	cpsid	i
 800da66:	f383 8811 	msr	BASEPRI, r3
 800da6a:	f3bf 8f6f 	isb	sy
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	b662      	cpsie	i
 800da74:	60bb      	str	r3, [r7, #8]
}
 800da76:	bf00      	nop
 800da78:	e7fe      	b.n	800da78 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	685a      	ldr	r2, [r3, #4]
 800da7e:	4b11      	ldr	r3, [pc, #68]	; (800dac4 <vPortFree+0xb4>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4013      	ands	r3, r2
 800da84:	2b00      	cmp	r3, #0
 800da86:	d019      	beq.n	800dabc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d115      	bne.n	800dabc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	685a      	ldr	r2, [r3, #4]
 800da94:	4b0b      	ldr	r3, [pc, #44]	; (800dac4 <vPortFree+0xb4>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	43db      	mvns	r3, r3
 800da9a:	401a      	ands	r2, r3
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800daa0:	f7ff f9e8 	bl	800ce74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	685a      	ldr	r2, [r3, #4]
 800daa8:	4b07      	ldr	r3, [pc, #28]	; (800dac8 <vPortFree+0xb8>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4413      	add	r3, r2
 800daae:	4a06      	ldr	r2, [pc, #24]	; (800dac8 <vPortFree+0xb8>)
 800dab0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dab2:	6938      	ldr	r0, [r7, #16]
 800dab4:	f000 f86c 	bl	800db90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dab8:	f7ff f9ea 	bl	800ce90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dabc:	bf00      	nop
 800dabe:	3718      	adds	r7, #24
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	20004364 	.word	0x20004364
 800dac8:	2000435c 	.word	0x2000435c

0800dacc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dacc:	b480      	push	{r7}
 800dace:	b085      	sub	sp, #20
 800dad0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dad2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dad6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dad8:	4b27      	ldr	r3, [pc, #156]	; (800db78 <prvHeapInit+0xac>)
 800dada:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f003 0307 	and.w	r3, r3, #7
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00c      	beq.n	800db00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	3307      	adds	r3, #7
 800daea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f023 0307 	bic.w	r3, r3, #7
 800daf2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800daf4:	68ba      	ldr	r2, [r7, #8]
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	1ad3      	subs	r3, r2, r3
 800dafa:	4a1f      	ldr	r2, [pc, #124]	; (800db78 <prvHeapInit+0xac>)
 800dafc:	4413      	add	r3, r2
 800dafe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800db04:	4a1d      	ldr	r2, [pc, #116]	; (800db7c <prvHeapInit+0xb0>)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800db0a:	4b1c      	ldr	r3, [pc, #112]	; (800db7c <prvHeapInit+0xb0>)
 800db0c:	2200      	movs	r2, #0
 800db0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	68ba      	ldr	r2, [r7, #8]
 800db14:	4413      	add	r3, r2
 800db16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800db18:	2208      	movs	r2, #8
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	1a9b      	subs	r3, r3, r2
 800db1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f023 0307 	bic.w	r3, r3, #7
 800db26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	4a15      	ldr	r2, [pc, #84]	; (800db80 <prvHeapInit+0xb4>)
 800db2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800db2e:	4b14      	ldr	r3, [pc, #80]	; (800db80 <prvHeapInit+0xb4>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2200      	movs	r2, #0
 800db34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800db36:	4b12      	ldr	r3, [pc, #72]	; (800db80 <prvHeapInit+0xb4>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2200      	movs	r2, #0
 800db3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	68fa      	ldr	r2, [r7, #12]
 800db46:	1ad2      	subs	r2, r2, r3
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db4c:	4b0c      	ldr	r3, [pc, #48]	; (800db80 <prvHeapInit+0xb4>)
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	4a0a      	ldr	r2, [pc, #40]	; (800db84 <prvHeapInit+0xb8>)
 800db5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	4a09      	ldr	r2, [pc, #36]	; (800db88 <prvHeapInit+0xbc>)
 800db62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800db64:	4b09      	ldr	r3, [pc, #36]	; (800db8c <prvHeapInit+0xc0>)
 800db66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800db6a:	601a      	str	r2, [r3, #0]
}
 800db6c:	bf00      	nop
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr
 800db78:	20000750 	.word	0x20000750
 800db7c:	20004350 	.word	0x20004350
 800db80:	20004358 	.word	0x20004358
 800db84:	20004360 	.word	0x20004360
 800db88:	2000435c 	.word	0x2000435c
 800db8c:	20004364 	.word	0x20004364

0800db90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db98:	4b28      	ldr	r3, [pc, #160]	; (800dc3c <prvInsertBlockIntoFreeList+0xac>)
 800db9a:	60fb      	str	r3, [r7, #12]
 800db9c:	e002      	b.n	800dba4 <prvInsertBlockIntoFreeList+0x14>
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	60fb      	str	r3, [r7, #12]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d8f7      	bhi.n	800db9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	68ba      	ldr	r2, [r7, #8]
 800dbb8:	4413      	add	r3, r2
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d108      	bne.n	800dbd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	685a      	ldr	r2, [r3, #4]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	441a      	add	r2, r3
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	441a      	add	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d118      	bne.n	800dc18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	4b15      	ldr	r3, [pc, #84]	; (800dc40 <prvInsertBlockIntoFreeList+0xb0>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d00d      	beq.n	800dc0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	685a      	ldr	r2, [r3, #4]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	441a      	add	r2, r3
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	601a      	str	r2, [r3, #0]
 800dc0c:	e008      	b.n	800dc20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dc0e:	4b0c      	ldr	r3, [pc, #48]	; (800dc40 <prvInsertBlockIntoFreeList+0xb0>)
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	601a      	str	r2, [r3, #0]
 800dc16:	e003      	b.n	800dc20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dc20:	68fa      	ldr	r2, [r7, #12]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d002      	beq.n	800dc2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc2e:	bf00      	nop
 800dc30:	3714      	adds	r7, #20
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	20004350 	.word	0x20004350
 800dc40:	20004358 	.word	0x20004358

0800dc44 <clock>:
 800dc44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc46:	4b08      	ldr	r3, [pc, #32]	; (800dc68 <clock+0x24>)
 800dc48:	4669      	mov	r1, sp
 800dc4a:	6818      	ldr	r0, [r3, #0]
 800dc4c:	f000 f944 	bl	800ded8 <_times_r>
 800dc50:	1c43      	adds	r3, r0, #1
 800dc52:	d006      	beq.n	800dc62 <clock+0x1e>
 800dc54:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dc58:	4418      	add	r0, r3
 800dc5a:	9b02      	ldr	r3, [sp, #8]
 800dc5c:	4418      	add	r0, r3
 800dc5e:	9b03      	ldr	r3, [sp, #12]
 800dc60:	4418      	add	r0, r3
 800dc62:	b005      	add	sp, #20
 800dc64:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc68:	20000050 	.word	0x20000050

0800dc6c <__errno>:
 800dc6c:	4b01      	ldr	r3, [pc, #4]	; (800dc74 <__errno+0x8>)
 800dc6e:	6818      	ldr	r0, [r3, #0]
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	20000050 	.word	0x20000050

0800dc78 <__libc_init_array>:
 800dc78:	b570      	push	{r4, r5, r6, lr}
 800dc7a:	4d0d      	ldr	r5, [pc, #52]	; (800dcb0 <__libc_init_array+0x38>)
 800dc7c:	4c0d      	ldr	r4, [pc, #52]	; (800dcb4 <__libc_init_array+0x3c>)
 800dc7e:	1b64      	subs	r4, r4, r5
 800dc80:	10a4      	asrs	r4, r4, #2
 800dc82:	2600      	movs	r6, #0
 800dc84:	42a6      	cmp	r6, r4
 800dc86:	d109      	bne.n	800dc9c <__libc_init_array+0x24>
 800dc88:	4d0b      	ldr	r5, [pc, #44]	; (800dcb8 <__libc_init_array+0x40>)
 800dc8a:	4c0c      	ldr	r4, [pc, #48]	; (800dcbc <__libc_init_array+0x44>)
 800dc8c:	f001 fc72 	bl	800f574 <_init>
 800dc90:	1b64      	subs	r4, r4, r5
 800dc92:	10a4      	asrs	r4, r4, #2
 800dc94:	2600      	movs	r6, #0
 800dc96:	42a6      	cmp	r6, r4
 800dc98:	d105      	bne.n	800dca6 <__libc_init_array+0x2e>
 800dc9a:	bd70      	pop	{r4, r5, r6, pc}
 800dc9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dca0:	4798      	blx	r3
 800dca2:	3601      	adds	r6, #1
 800dca4:	e7ee      	b.n	800dc84 <__libc_init_array+0xc>
 800dca6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcaa:	4798      	blx	r3
 800dcac:	3601      	adds	r6, #1
 800dcae:	e7f2      	b.n	800dc96 <__libc_init_array+0x1e>
 800dcb0:	080902e0 	.word	0x080902e0
 800dcb4:	080902e0 	.word	0x080902e0
 800dcb8:	080902e0 	.word	0x080902e0
 800dcbc:	080902e4 	.word	0x080902e4

0800dcc0 <__retarget_lock_acquire_recursive>:
 800dcc0:	4770      	bx	lr

0800dcc2 <__retarget_lock_release_recursive>:
 800dcc2:	4770      	bx	lr

0800dcc4 <memcpy>:
 800dcc4:	440a      	add	r2, r1
 800dcc6:	4291      	cmp	r1, r2
 800dcc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dccc:	d100      	bne.n	800dcd0 <memcpy+0xc>
 800dcce:	4770      	bx	lr
 800dcd0:	b510      	push	{r4, lr}
 800dcd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcda:	4291      	cmp	r1, r2
 800dcdc:	d1f9      	bne.n	800dcd2 <memcpy+0xe>
 800dcde:	bd10      	pop	{r4, pc}

0800dce0 <memset>:
 800dce0:	4402      	add	r2, r0
 800dce2:	4603      	mov	r3, r0
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d100      	bne.n	800dcea <memset+0xa>
 800dce8:	4770      	bx	lr
 800dcea:	f803 1b01 	strb.w	r1, [r3], #1
 800dcee:	e7f9      	b.n	800dce4 <memset+0x4>

0800dcf0 <_malloc_r>:
 800dcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcf2:	1ccd      	adds	r5, r1, #3
 800dcf4:	f025 0503 	bic.w	r5, r5, #3
 800dcf8:	3508      	adds	r5, #8
 800dcfa:	2d0c      	cmp	r5, #12
 800dcfc:	bf38      	it	cc
 800dcfe:	250c      	movcc	r5, #12
 800dd00:	2d00      	cmp	r5, #0
 800dd02:	4606      	mov	r6, r0
 800dd04:	db01      	blt.n	800dd0a <_malloc_r+0x1a>
 800dd06:	42a9      	cmp	r1, r5
 800dd08:	d903      	bls.n	800dd12 <_malloc_r+0x22>
 800dd0a:	230c      	movs	r3, #12
 800dd0c:	6033      	str	r3, [r6, #0]
 800dd0e:	2000      	movs	r0, #0
 800dd10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd12:	f000 f8e5 	bl	800dee0 <__malloc_lock>
 800dd16:	4921      	ldr	r1, [pc, #132]	; (800dd9c <_malloc_r+0xac>)
 800dd18:	680a      	ldr	r2, [r1, #0]
 800dd1a:	4614      	mov	r4, r2
 800dd1c:	b99c      	cbnz	r4, 800dd46 <_malloc_r+0x56>
 800dd1e:	4f20      	ldr	r7, [pc, #128]	; (800dda0 <_malloc_r+0xb0>)
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	b923      	cbnz	r3, 800dd2e <_malloc_r+0x3e>
 800dd24:	4621      	mov	r1, r4
 800dd26:	4630      	mov	r0, r6
 800dd28:	f000 f8a6 	bl	800de78 <_sbrk_r>
 800dd2c:	6038      	str	r0, [r7, #0]
 800dd2e:	4629      	mov	r1, r5
 800dd30:	4630      	mov	r0, r6
 800dd32:	f000 f8a1 	bl	800de78 <_sbrk_r>
 800dd36:	1c43      	adds	r3, r0, #1
 800dd38:	d123      	bne.n	800dd82 <_malloc_r+0x92>
 800dd3a:	230c      	movs	r3, #12
 800dd3c:	6033      	str	r3, [r6, #0]
 800dd3e:	4630      	mov	r0, r6
 800dd40:	f000 f8d4 	bl	800deec <__malloc_unlock>
 800dd44:	e7e3      	b.n	800dd0e <_malloc_r+0x1e>
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	1b5b      	subs	r3, r3, r5
 800dd4a:	d417      	bmi.n	800dd7c <_malloc_r+0x8c>
 800dd4c:	2b0b      	cmp	r3, #11
 800dd4e:	d903      	bls.n	800dd58 <_malloc_r+0x68>
 800dd50:	6023      	str	r3, [r4, #0]
 800dd52:	441c      	add	r4, r3
 800dd54:	6025      	str	r5, [r4, #0]
 800dd56:	e004      	b.n	800dd62 <_malloc_r+0x72>
 800dd58:	6863      	ldr	r3, [r4, #4]
 800dd5a:	42a2      	cmp	r2, r4
 800dd5c:	bf0c      	ite	eq
 800dd5e:	600b      	streq	r3, [r1, #0]
 800dd60:	6053      	strne	r3, [r2, #4]
 800dd62:	4630      	mov	r0, r6
 800dd64:	f000 f8c2 	bl	800deec <__malloc_unlock>
 800dd68:	f104 000b 	add.w	r0, r4, #11
 800dd6c:	1d23      	adds	r3, r4, #4
 800dd6e:	f020 0007 	bic.w	r0, r0, #7
 800dd72:	1ac2      	subs	r2, r0, r3
 800dd74:	d0cc      	beq.n	800dd10 <_malloc_r+0x20>
 800dd76:	1a1b      	subs	r3, r3, r0
 800dd78:	50a3      	str	r3, [r4, r2]
 800dd7a:	e7c9      	b.n	800dd10 <_malloc_r+0x20>
 800dd7c:	4622      	mov	r2, r4
 800dd7e:	6864      	ldr	r4, [r4, #4]
 800dd80:	e7cc      	b.n	800dd1c <_malloc_r+0x2c>
 800dd82:	1cc4      	adds	r4, r0, #3
 800dd84:	f024 0403 	bic.w	r4, r4, #3
 800dd88:	42a0      	cmp	r0, r4
 800dd8a:	d0e3      	beq.n	800dd54 <_malloc_r+0x64>
 800dd8c:	1a21      	subs	r1, r4, r0
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f000 f872 	bl	800de78 <_sbrk_r>
 800dd94:	3001      	adds	r0, #1
 800dd96:	d1dd      	bne.n	800dd54 <_malloc_r+0x64>
 800dd98:	e7cf      	b.n	800dd3a <_malloc_r+0x4a>
 800dd9a:	bf00      	nop
 800dd9c:	20004368 	.word	0x20004368
 800dda0:	2000436c 	.word	0x2000436c

0800dda4 <cleanup_glue>:
 800dda4:	b538      	push	{r3, r4, r5, lr}
 800dda6:	460c      	mov	r4, r1
 800dda8:	6809      	ldr	r1, [r1, #0]
 800ddaa:	4605      	mov	r5, r0
 800ddac:	b109      	cbz	r1, 800ddb2 <cleanup_glue+0xe>
 800ddae:	f7ff fff9 	bl	800dda4 <cleanup_glue>
 800ddb2:	4621      	mov	r1, r4
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddba:	f000 b89d 	b.w	800def8 <_free_r>
	...

0800ddc0 <_reclaim_reent>:
 800ddc0:	4b2c      	ldr	r3, [pc, #176]	; (800de74 <_reclaim_reent+0xb4>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4283      	cmp	r3, r0
 800ddc6:	b570      	push	{r4, r5, r6, lr}
 800ddc8:	4604      	mov	r4, r0
 800ddca:	d051      	beq.n	800de70 <_reclaim_reent+0xb0>
 800ddcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ddce:	b143      	cbz	r3, 800dde2 <_reclaim_reent+0x22>
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d14a      	bne.n	800de6c <_reclaim_reent+0xac>
 800ddd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddd8:	6819      	ldr	r1, [r3, #0]
 800ddda:	b111      	cbz	r1, 800dde2 <_reclaim_reent+0x22>
 800dddc:	4620      	mov	r0, r4
 800ddde:	f000 f88b 	bl	800def8 <_free_r>
 800dde2:	6961      	ldr	r1, [r4, #20]
 800dde4:	b111      	cbz	r1, 800ddec <_reclaim_reent+0x2c>
 800dde6:	4620      	mov	r0, r4
 800dde8:	f000 f886 	bl	800def8 <_free_r>
 800ddec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ddee:	b111      	cbz	r1, 800ddf6 <_reclaim_reent+0x36>
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	f000 f881 	bl	800def8 <_free_r>
 800ddf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ddf8:	b111      	cbz	r1, 800de00 <_reclaim_reent+0x40>
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f000 f87c 	bl	800def8 <_free_r>
 800de00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800de02:	b111      	cbz	r1, 800de0a <_reclaim_reent+0x4a>
 800de04:	4620      	mov	r0, r4
 800de06:	f000 f877 	bl	800def8 <_free_r>
 800de0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800de0c:	b111      	cbz	r1, 800de14 <_reclaim_reent+0x54>
 800de0e:	4620      	mov	r0, r4
 800de10:	f000 f872 	bl	800def8 <_free_r>
 800de14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800de16:	b111      	cbz	r1, 800de1e <_reclaim_reent+0x5e>
 800de18:	4620      	mov	r0, r4
 800de1a:	f000 f86d 	bl	800def8 <_free_r>
 800de1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800de20:	b111      	cbz	r1, 800de28 <_reclaim_reent+0x68>
 800de22:	4620      	mov	r0, r4
 800de24:	f000 f868 	bl	800def8 <_free_r>
 800de28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de2a:	b111      	cbz	r1, 800de32 <_reclaim_reent+0x72>
 800de2c:	4620      	mov	r0, r4
 800de2e:	f000 f863 	bl	800def8 <_free_r>
 800de32:	69a3      	ldr	r3, [r4, #24]
 800de34:	b1e3      	cbz	r3, 800de70 <_reclaim_reent+0xb0>
 800de36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800de38:	4620      	mov	r0, r4
 800de3a:	4798      	blx	r3
 800de3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800de3e:	b1b9      	cbz	r1, 800de70 <_reclaim_reent+0xb0>
 800de40:	4620      	mov	r0, r4
 800de42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de46:	f7ff bfad 	b.w	800dda4 <cleanup_glue>
 800de4a:	5949      	ldr	r1, [r1, r5]
 800de4c:	b941      	cbnz	r1, 800de60 <_reclaim_reent+0xa0>
 800de4e:	3504      	adds	r5, #4
 800de50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de52:	2d80      	cmp	r5, #128	; 0x80
 800de54:	68d9      	ldr	r1, [r3, #12]
 800de56:	d1f8      	bne.n	800de4a <_reclaim_reent+0x8a>
 800de58:	4620      	mov	r0, r4
 800de5a:	f000 f84d 	bl	800def8 <_free_r>
 800de5e:	e7ba      	b.n	800ddd6 <_reclaim_reent+0x16>
 800de60:	680e      	ldr	r6, [r1, #0]
 800de62:	4620      	mov	r0, r4
 800de64:	f000 f848 	bl	800def8 <_free_r>
 800de68:	4631      	mov	r1, r6
 800de6a:	e7ef      	b.n	800de4c <_reclaim_reent+0x8c>
 800de6c:	2500      	movs	r5, #0
 800de6e:	e7ef      	b.n	800de50 <_reclaim_reent+0x90>
 800de70:	bd70      	pop	{r4, r5, r6, pc}
 800de72:	bf00      	nop
 800de74:	20000050 	.word	0x20000050

0800de78 <_sbrk_r>:
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	4d06      	ldr	r5, [pc, #24]	; (800de94 <_sbrk_r+0x1c>)
 800de7c:	2300      	movs	r3, #0
 800de7e:	4604      	mov	r4, r0
 800de80:	4608      	mov	r0, r1
 800de82:	602b      	str	r3, [r5, #0]
 800de84:	f7f7 ff90 	bl	8005da8 <_sbrk>
 800de88:	1c43      	adds	r3, r0, #1
 800de8a:	d102      	bne.n	800de92 <_sbrk_r+0x1a>
 800de8c:	682b      	ldr	r3, [r5, #0]
 800de8e:	b103      	cbz	r3, 800de92 <_sbrk_r+0x1a>
 800de90:	6023      	str	r3, [r4, #0]
 800de92:	bd38      	pop	{r3, r4, r5, pc}
 800de94:	20004c04 	.word	0x20004c04

0800de98 <siprintf>:
 800de98:	b40e      	push	{r1, r2, r3}
 800de9a:	b500      	push	{lr}
 800de9c:	b09c      	sub	sp, #112	; 0x70
 800de9e:	ab1d      	add	r3, sp, #116	; 0x74
 800dea0:	9002      	str	r0, [sp, #8]
 800dea2:	9006      	str	r0, [sp, #24]
 800dea4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dea8:	4809      	ldr	r0, [pc, #36]	; (800ded0 <siprintf+0x38>)
 800deaa:	9107      	str	r1, [sp, #28]
 800deac:	9104      	str	r1, [sp, #16]
 800deae:	4909      	ldr	r1, [pc, #36]	; (800ded4 <siprintf+0x3c>)
 800deb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800deb4:	9105      	str	r1, [sp, #20]
 800deb6:	6800      	ldr	r0, [r0, #0]
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	a902      	add	r1, sp, #8
 800debc:	f000 f8c8 	bl	800e050 <_svfiprintf_r>
 800dec0:	9b02      	ldr	r3, [sp, #8]
 800dec2:	2200      	movs	r2, #0
 800dec4:	701a      	strb	r2, [r3, #0]
 800dec6:	b01c      	add	sp, #112	; 0x70
 800dec8:	f85d eb04 	ldr.w	lr, [sp], #4
 800decc:	b003      	add	sp, #12
 800dece:	4770      	bx	lr
 800ded0:	20000050 	.word	0x20000050
 800ded4:	ffff0208 	.word	0xffff0208

0800ded8 <_times_r>:
 800ded8:	4608      	mov	r0, r1
 800deda:	f7f7 bf59 	b.w	8005d90 <_times>
	...

0800dee0 <__malloc_lock>:
 800dee0:	4801      	ldr	r0, [pc, #4]	; (800dee8 <__malloc_lock+0x8>)
 800dee2:	f7ff beed 	b.w	800dcc0 <__retarget_lock_acquire_recursive>
 800dee6:	bf00      	nop
 800dee8:	20004bfc 	.word	0x20004bfc

0800deec <__malloc_unlock>:
 800deec:	4801      	ldr	r0, [pc, #4]	; (800def4 <__malloc_unlock+0x8>)
 800deee:	f7ff bee8 	b.w	800dcc2 <__retarget_lock_release_recursive>
 800def2:	bf00      	nop
 800def4:	20004bfc 	.word	0x20004bfc

0800def8 <_free_r>:
 800def8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800defa:	2900      	cmp	r1, #0
 800defc:	d048      	beq.n	800df90 <_free_r+0x98>
 800defe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df02:	9001      	str	r0, [sp, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	f1a1 0404 	sub.w	r4, r1, #4
 800df0a:	bfb8      	it	lt
 800df0c:	18e4      	addlt	r4, r4, r3
 800df0e:	f7ff ffe7 	bl	800dee0 <__malloc_lock>
 800df12:	4a20      	ldr	r2, [pc, #128]	; (800df94 <_free_r+0x9c>)
 800df14:	9801      	ldr	r0, [sp, #4]
 800df16:	6813      	ldr	r3, [r2, #0]
 800df18:	4615      	mov	r5, r2
 800df1a:	b933      	cbnz	r3, 800df2a <_free_r+0x32>
 800df1c:	6063      	str	r3, [r4, #4]
 800df1e:	6014      	str	r4, [r2, #0]
 800df20:	b003      	add	sp, #12
 800df22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df26:	f7ff bfe1 	b.w	800deec <__malloc_unlock>
 800df2a:	42a3      	cmp	r3, r4
 800df2c:	d90b      	bls.n	800df46 <_free_r+0x4e>
 800df2e:	6821      	ldr	r1, [r4, #0]
 800df30:	1862      	adds	r2, r4, r1
 800df32:	4293      	cmp	r3, r2
 800df34:	bf04      	itt	eq
 800df36:	681a      	ldreq	r2, [r3, #0]
 800df38:	685b      	ldreq	r3, [r3, #4]
 800df3a:	6063      	str	r3, [r4, #4]
 800df3c:	bf04      	itt	eq
 800df3e:	1852      	addeq	r2, r2, r1
 800df40:	6022      	streq	r2, [r4, #0]
 800df42:	602c      	str	r4, [r5, #0]
 800df44:	e7ec      	b.n	800df20 <_free_r+0x28>
 800df46:	461a      	mov	r2, r3
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	b10b      	cbz	r3, 800df50 <_free_r+0x58>
 800df4c:	42a3      	cmp	r3, r4
 800df4e:	d9fa      	bls.n	800df46 <_free_r+0x4e>
 800df50:	6811      	ldr	r1, [r2, #0]
 800df52:	1855      	adds	r5, r2, r1
 800df54:	42a5      	cmp	r5, r4
 800df56:	d10b      	bne.n	800df70 <_free_r+0x78>
 800df58:	6824      	ldr	r4, [r4, #0]
 800df5a:	4421      	add	r1, r4
 800df5c:	1854      	adds	r4, r2, r1
 800df5e:	42a3      	cmp	r3, r4
 800df60:	6011      	str	r1, [r2, #0]
 800df62:	d1dd      	bne.n	800df20 <_free_r+0x28>
 800df64:	681c      	ldr	r4, [r3, #0]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	6053      	str	r3, [r2, #4]
 800df6a:	4421      	add	r1, r4
 800df6c:	6011      	str	r1, [r2, #0]
 800df6e:	e7d7      	b.n	800df20 <_free_r+0x28>
 800df70:	d902      	bls.n	800df78 <_free_r+0x80>
 800df72:	230c      	movs	r3, #12
 800df74:	6003      	str	r3, [r0, #0]
 800df76:	e7d3      	b.n	800df20 <_free_r+0x28>
 800df78:	6825      	ldr	r5, [r4, #0]
 800df7a:	1961      	adds	r1, r4, r5
 800df7c:	428b      	cmp	r3, r1
 800df7e:	bf04      	itt	eq
 800df80:	6819      	ldreq	r1, [r3, #0]
 800df82:	685b      	ldreq	r3, [r3, #4]
 800df84:	6063      	str	r3, [r4, #4]
 800df86:	bf04      	itt	eq
 800df88:	1949      	addeq	r1, r1, r5
 800df8a:	6021      	streq	r1, [r4, #0]
 800df8c:	6054      	str	r4, [r2, #4]
 800df8e:	e7c7      	b.n	800df20 <_free_r+0x28>
 800df90:	b003      	add	sp, #12
 800df92:	bd30      	pop	{r4, r5, pc}
 800df94:	20004368 	.word	0x20004368

0800df98 <__ssputs_r>:
 800df98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df9c:	688e      	ldr	r6, [r1, #8]
 800df9e:	429e      	cmp	r6, r3
 800dfa0:	4682      	mov	sl, r0
 800dfa2:	460c      	mov	r4, r1
 800dfa4:	4690      	mov	r8, r2
 800dfa6:	461f      	mov	r7, r3
 800dfa8:	d838      	bhi.n	800e01c <__ssputs_r+0x84>
 800dfaa:	898a      	ldrh	r2, [r1, #12]
 800dfac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dfb0:	d032      	beq.n	800e018 <__ssputs_r+0x80>
 800dfb2:	6825      	ldr	r5, [r4, #0]
 800dfb4:	6909      	ldr	r1, [r1, #16]
 800dfb6:	eba5 0901 	sub.w	r9, r5, r1
 800dfba:	6965      	ldr	r5, [r4, #20]
 800dfbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	444b      	add	r3, r9
 800dfc8:	106d      	asrs	r5, r5, #1
 800dfca:	429d      	cmp	r5, r3
 800dfcc:	bf38      	it	cc
 800dfce:	461d      	movcc	r5, r3
 800dfd0:	0553      	lsls	r3, r2, #21
 800dfd2:	d531      	bpl.n	800e038 <__ssputs_r+0xa0>
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	f7ff fe8b 	bl	800dcf0 <_malloc_r>
 800dfda:	4606      	mov	r6, r0
 800dfdc:	b950      	cbnz	r0, 800dff4 <__ssputs_r+0x5c>
 800dfde:	230c      	movs	r3, #12
 800dfe0:	f8ca 3000 	str.w	r3, [sl]
 800dfe4:	89a3      	ldrh	r3, [r4, #12]
 800dfe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfea:	81a3      	strh	r3, [r4, #12]
 800dfec:	f04f 30ff 	mov.w	r0, #4294967295
 800dff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dff4:	6921      	ldr	r1, [r4, #16]
 800dff6:	464a      	mov	r2, r9
 800dff8:	f7ff fe64 	bl	800dcc4 <memcpy>
 800dffc:	89a3      	ldrh	r3, [r4, #12]
 800dffe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e006:	81a3      	strh	r3, [r4, #12]
 800e008:	6126      	str	r6, [r4, #16]
 800e00a:	6165      	str	r5, [r4, #20]
 800e00c:	444e      	add	r6, r9
 800e00e:	eba5 0509 	sub.w	r5, r5, r9
 800e012:	6026      	str	r6, [r4, #0]
 800e014:	60a5      	str	r5, [r4, #8]
 800e016:	463e      	mov	r6, r7
 800e018:	42be      	cmp	r6, r7
 800e01a:	d900      	bls.n	800e01e <__ssputs_r+0x86>
 800e01c:	463e      	mov	r6, r7
 800e01e:	4632      	mov	r2, r6
 800e020:	6820      	ldr	r0, [r4, #0]
 800e022:	4641      	mov	r1, r8
 800e024:	f000 faa8 	bl	800e578 <memmove>
 800e028:	68a3      	ldr	r3, [r4, #8]
 800e02a:	6822      	ldr	r2, [r4, #0]
 800e02c:	1b9b      	subs	r3, r3, r6
 800e02e:	4432      	add	r2, r6
 800e030:	60a3      	str	r3, [r4, #8]
 800e032:	6022      	str	r2, [r4, #0]
 800e034:	2000      	movs	r0, #0
 800e036:	e7db      	b.n	800dff0 <__ssputs_r+0x58>
 800e038:	462a      	mov	r2, r5
 800e03a:	f000 fab7 	bl	800e5ac <_realloc_r>
 800e03e:	4606      	mov	r6, r0
 800e040:	2800      	cmp	r0, #0
 800e042:	d1e1      	bne.n	800e008 <__ssputs_r+0x70>
 800e044:	6921      	ldr	r1, [r4, #16]
 800e046:	4650      	mov	r0, sl
 800e048:	f7ff ff56 	bl	800def8 <_free_r>
 800e04c:	e7c7      	b.n	800dfde <__ssputs_r+0x46>
	...

0800e050 <_svfiprintf_r>:
 800e050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e054:	4698      	mov	r8, r3
 800e056:	898b      	ldrh	r3, [r1, #12]
 800e058:	061b      	lsls	r3, r3, #24
 800e05a:	b09d      	sub	sp, #116	; 0x74
 800e05c:	4607      	mov	r7, r0
 800e05e:	460d      	mov	r5, r1
 800e060:	4614      	mov	r4, r2
 800e062:	d50e      	bpl.n	800e082 <_svfiprintf_r+0x32>
 800e064:	690b      	ldr	r3, [r1, #16]
 800e066:	b963      	cbnz	r3, 800e082 <_svfiprintf_r+0x32>
 800e068:	2140      	movs	r1, #64	; 0x40
 800e06a:	f7ff fe41 	bl	800dcf0 <_malloc_r>
 800e06e:	6028      	str	r0, [r5, #0]
 800e070:	6128      	str	r0, [r5, #16]
 800e072:	b920      	cbnz	r0, 800e07e <_svfiprintf_r+0x2e>
 800e074:	230c      	movs	r3, #12
 800e076:	603b      	str	r3, [r7, #0]
 800e078:	f04f 30ff 	mov.w	r0, #4294967295
 800e07c:	e0d1      	b.n	800e222 <_svfiprintf_r+0x1d2>
 800e07e:	2340      	movs	r3, #64	; 0x40
 800e080:	616b      	str	r3, [r5, #20]
 800e082:	2300      	movs	r3, #0
 800e084:	9309      	str	r3, [sp, #36]	; 0x24
 800e086:	2320      	movs	r3, #32
 800e088:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e08c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e090:	2330      	movs	r3, #48	; 0x30
 800e092:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e23c <_svfiprintf_r+0x1ec>
 800e096:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e09a:	f04f 0901 	mov.w	r9, #1
 800e09e:	4623      	mov	r3, r4
 800e0a0:	469a      	mov	sl, r3
 800e0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0a6:	b10a      	cbz	r2, 800e0ac <_svfiprintf_r+0x5c>
 800e0a8:	2a25      	cmp	r2, #37	; 0x25
 800e0aa:	d1f9      	bne.n	800e0a0 <_svfiprintf_r+0x50>
 800e0ac:	ebba 0b04 	subs.w	fp, sl, r4
 800e0b0:	d00b      	beq.n	800e0ca <_svfiprintf_r+0x7a>
 800e0b2:	465b      	mov	r3, fp
 800e0b4:	4622      	mov	r2, r4
 800e0b6:	4629      	mov	r1, r5
 800e0b8:	4638      	mov	r0, r7
 800e0ba:	f7ff ff6d 	bl	800df98 <__ssputs_r>
 800e0be:	3001      	adds	r0, #1
 800e0c0:	f000 80aa 	beq.w	800e218 <_svfiprintf_r+0x1c8>
 800e0c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0c6:	445a      	add	r2, fp
 800e0c8:	9209      	str	r2, [sp, #36]	; 0x24
 800e0ca:	f89a 3000 	ldrb.w	r3, [sl]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f000 80a2 	beq.w	800e218 <_svfiprintf_r+0x1c8>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0de:	f10a 0a01 	add.w	sl, sl, #1
 800e0e2:	9304      	str	r3, [sp, #16]
 800e0e4:	9307      	str	r3, [sp, #28]
 800e0e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0ea:	931a      	str	r3, [sp, #104]	; 0x68
 800e0ec:	4654      	mov	r4, sl
 800e0ee:	2205      	movs	r2, #5
 800e0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0f4:	4851      	ldr	r0, [pc, #324]	; (800e23c <_svfiprintf_r+0x1ec>)
 800e0f6:	f7f2 f88b 	bl	8000210 <memchr>
 800e0fa:	9a04      	ldr	r2, [sp, #16]
 800e0fc:	b9d8      	cbnz	r0, 800e136 <_svfiprintf_r+0xe6>
 800e0fe:	06d0      	lsls	r0, r2, #27
 800e100:	bf44      	itt	mi
 800e102:	2320      	movmi	r3, #32
 800e104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e108:	0711      	lsls	r1, r2, #28
 800e10a:	bf44      	itt	mi
 800e10c:	232b      	movmi	r3, #43	; 0x2b
 800e10e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e112:	f89a 3000 	ldrb.w	r3, [sl]
 800e116:	2b2a      	cmp	r3, #42	; 0x2a
 800e118:	d015      	beq.n	800e146 <_svfiprintf_r+0xf6>
 800e11a:	9a07      	ldr	r2, [sp, #28]
 800e11c:	4654      	mov	r4, sl
 800e11e:	2000      	movs	r0, #0
 800e120:	f04f 0c0a 	mov.w	ip, #10
 800e124:	4621      	mov	r1, r4
 800e126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e12a:	3b30      	subs	r3, #48	; 0x30
 800e12c:	2b09      	cmp	r3, #9
 800e12e:	d94e      	bls.n	800e1ce <_svfiprintf_r+0x17e>
 800e130:	b1b0      	cbz	r0, 800e160 <_svfiprintf_r+0x110>
 800e132:	9207      	str	r2, [sp, #28]
 800e134:	e014      	b.n	800e160 <_svfiprintf_r+0x110>
 800e136:	eba0 0308 	sub.w	r3, r0, r8
 800e13a:	fa09 f303 	lsl.w	r3, r9, r3
 800e13e:	4313      	orrs	r3, r2
 800e140:	9304      	str	r3, [sp, #16]
 800e142:	46a2      	mov	sl, r4
 800e144:	e7d2      	b.n	800e0ec <_svfiprintf_r+0x9c>
 800e146:	9b03      	ldr	r3, [sp, #12]
 800e148:	1d19      	adds	r1, r3, #4
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	9103      	str	r1, [sp, #12]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	bfbb      	ittet	lt
 800e152:	425b      	neglt	r3, r3
 800e154:	f042 0202 	orrlt.w	r2, r2, #2
 800e158:	9307      	strge	r3, [sp, #28]
 800e15a:	9307      	strlt	r3, [sp, #28]
 800e15c:	bfb8      	it	lt
 800e15e:	9204      	strlt	r2, [sp, #16]
 800e160:	7823      	ldrb	r3, [r4, #0]
 800e162:	2b2e      	cmp	r3, #46	; 0x2e
 800e164:	d10c      	bne.n	800e180 <_svfiprintf_r+0x130>
 800e166:	7863      	ldrb	r3, [r4, #1]
 800e168:	2b2a      	cmp	r3, #42	; 0x2a
 800e16a:	d135      	bne.n	800e1d8 <_svfiprintf_r+0x188>
 800e16c:	9b03      	ldr	r3, [sp, #12]
 800e16e:	1d1a      	adds	r2, r3, #4
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	9203      	str	r2, [sp, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	bfb8      	it	lt
 800e178:	f04f 33ff 	movlt.w	r3, #4294967295
 800e17c:	3402      	adds	r4, #2
 800e17e:	9305      	str	r3, [sp, #20]
 800e180:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e24c <_svfiprintf_r+0x1fc>
 800e184:	7821      	ldrb	r1, [r4, #0]
 800e186:	2203      	movs	r2, #3
 800e188:	4650      	mov	r0, sl
 800e18a:	f7f2 f841 	bl	8000210 <memchr>
 800e18e:	b140      	cbz	r0, 800e1a2 <_svfiprintf_r+0x152>
 800e190:	2340      	movs	r3, #64	; 0x40
 800e192:	eba0 000a 	sub.w	r0, r0, sl
 800e196:	fa03 f000 	lsl.w	r0, r3, r0
 800e19a:	9b04      	ldr	r3, [sp, #16]
 800e19c:	4303      	orrs	r3, r0
 800e19e:	3401      	adds	r4, #1
 800e1a0:	9304      	str	r3, [sp, #16]
 800e1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1a6:	4826      	ldr	r0, [pc, #152]	; (800e240 <_svfiprintf_r+0x1f0>)
 800e1a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1ac:	2206      	movs	r2, #6
 800e1ae:	f7f2 f82f 	bl	8000210 <memchr>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d038      	beq.n	800e228 <_svfiprintf_r+0x1d8>
 800e1b6:	4b23      	ldr	r3, [pc, #140]	; (800e244 <_svfiprintf_r+0x1f4>)
 800e1b8:	bb1b      	cbnz	r3, 800e202 <_svfiprintf_r+0x1b2>
 800e1ba:	9b03      	ldr	r3, [sp, #12]
 800e1bc:	3307      	adds	r3, #7
 800e1be:	f023 0307 	bic.w	r3, r3, #7
 800e1c2:	3308      	adds	r3, #8
 800e1c4:	9303      	str	r3, [sp, #12]
 800e1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1c8:	4433      	add	r3, r6
 800e1ca:	9309      	str	r3, [sp, #36]	; 0x24
 800e1cc:	e767      	b.n	800e09e <_svfiprintf_r+0x4e>
 800e1ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1d2:	460c      	mov	r4, r1
 800e1d4:	2001      	movs	r0, #1
 800e1d6:	e7a5      	b.n	800e124 <_svfiprintf_r+0xd4>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	3401      	adds	r4, #1
 800e1dc:	9305      	str	r3, [sp, #20]
 800e1de:	4619      	mov	r1, r3
 800e1e0:	f04f 0c0a 	mov.w	ip, #10
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1ea:	3a30      	subs	r2, #48	; 0x30
 800e1ec:	2a09      	cmp	r2, #9
 800e1ee:	d903      	bls.n	800e1f8 <_svfiprintf_r+0x1a8>
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d0c5      	beq.n	800e180 <_svfiprintf_r+0x130>
 800e1f4:	9105      	str	r1, [sp, #20]
 800e1f6:	e7c3      	b.n	800e180 <_svfiprintf_r+0x130>
 800e1f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	2301      	movs	r3, #1
 800e200:	e7f0      	b.n	800e1e4 <_svfiprintf_r+0x194>
 800e202:	ab03      	add	r3, sp, #12
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	462a      	mov	r2, r5
 800e208:	4b0f      	ldr	r3, [pc, #60]	; (800e248 <_svfiprintf_r+0x1f8>)
 800e20a:	a904      	add	r1, sp, #16
 800e20c:	4638      	mov	r0, r7
 800e20e:	f3af 8000 	nop.w
 800e212:	1c42      	adds	r2, r0, #1
 800e214:	4606      	mov	r6, r0
 800e216:	d1d6      	bne.n	800e1c6 <_svfiprintf_r+0x176>
 800e218:	89ab      	ldrh	r3, [r5, #12]
 800e21a:	065b      	lsls	r3, r3, #25
 800e21c:	f53f af2c 	bmi.w	800e078 <_svfiprintf_r+0x28>
 800e220:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e222:	b01d      	add	sp, #116	; 0x74
 800e224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e228:	ab03      	add	r3, sp, #12
 800e22a:	9300      	str	r3, [sp, #0]
 800e22c:	462a      	mov	r2, r5
 800e22e:	4b06      	ldr	r3, [pc, #24]	; (800e248 <_svfiprintf_r+0x1f8>)
 800e230:	a904      	add	r1, sp, #16
 800e232:	4638      	mov	r0, r7
 800e234:	f000 f87a 	bl	800e32c <_printf_i>
 800e238:	e7eb      	b.n	800e212 <_svfiprintf_r+0x1c2>
 800e23a:	bf00      	nop
 800e23c:	08090260 	.word	0x08090260
 800e240:	0809026a 	.word	0x0809026a
 800e244:	00000000 	.word	0x00000000
 800e248:	0800df99 	.word	0x0800df99
 800e24c:	08090266 	.word	0x08090266

0800e250 <_printf_common>:
 800e250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e254:	4616      	mov	r6, r2
 800e256:	4699      	mov	r9, r3
 800e258:	688a      	ldr	r2, [r1, #8]
 800e25a:	690b      	ldr	r3, [r1, #16]
 800e25c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e260:	4293      	cmp	r3, r2
 800e262:	bfb8      	it	lt
 800e264:	4613      	movlt	r3, r2
 800e266:	6033      	str	r3, [r6, #0]
 800e268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e26c:	4607      	mov	r7, r0
 800e26e:	460c      	mov	r4, r1
 800e270:	b10a      	cbz	r2, 800e276 <_printf_common+0x26>
 800e272:	3301      	adds	r3, #1
 800e274:	6033      	str	r3, [r6, #0]
 800e276:	6823      	ldr	r3, [r4, #0]
 800e278:	0699      	lsls	r1, r3, #26
 800e27a:	bf42      	ittt	mi
 800e27c:	6833      	ldrmi	r3, [r6, #0]
 800e27e:	3302      	addmi	r3, #2
 800e280:	6033      	strmi	r3, [r6, #0]
 800e282:	6825      	ldr	r5, [r4, #0]
 800e284:	f015 0506 	ands.w	r5, r5, #6
 800e288:	d106      	bne.n	800e298 <_printf_common+0x48>
 800e28a:	f104 0a19 	add.w	sl, r4, #25
 800e28e:	68e3      	ldr	r3, [r4, #12]
 800e290:	6832      	ldr	r2, [r6, #0]
 800e292:	1a9b      	subs	r3, r3, r2
 800e294:	42ab      	cmp	r3, r5
 800e296:	dc26      	bgt.n	800e2e6 <_printf_common+0x96>
 800e298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e29c:	1e13      	subs	r3, r2, #0
 800e29e:	6822      	ldr	r2, [r4, #0]
 800e2a0:	bf18      	it	ne
 800e2a2:	2301      	movne	r3, #1
 800e2a4:	0692      	lsls	r2, r2, #26
 800e2a6:	d42b      	bmi.n	800e300 <_printf_common+0xb0>
 800e2a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e2ac:	4649      	mov	r1, r9
 800e2ae:	4638      	mov	r0, r7
 800e2b0:	47c0      	blx	r8
 800e2b2:	3001      	adds	r0, #1
 800e2b4:	d01e      	beq.n	800e2f4 <_printf_common+0xa4>
 800e2b6:	6823      	ldr	r3, [r4, #0]
 800e2b8:	68e5      	ldr	r5, [r4, #12]
 800e2ba:	6832      	ldr	r2, [r6, #0]
 800e2bc:	f003 0306 	and.w	r3, r3, #6
 800e2c0:	2b04      	cmp	r3, #4
 800e2c2:	bf08      	it	eq
 800e2c4:	1aad      	subeq	r5, r5, r2
 800e2c6:	68a3      	ldr	r3, [r4, #8]
 800e2c8:	6922      	ldr	r2, [r4, #16]
 800e2ca:	bf0c      	ite	eq
 800e2cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e2d0:	2500      	movne	r5, #0
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	bfc4      	itt	gt
 800e2d6:	1a9b      	subgt	r3, r3, r2
 800e2d8:	18ed      	addgt	r5, r5, r3
 800e2da:	2600      	movs	r6, #0
 800e2dc:	341a      	adds	r4, #26
 800e2de:	42b5      	cmp	r5, r6
 800e2e0:	d11a      	bne.n	800e318 <_printf_common+0xc8>
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	e008      	b.n	800e2f8 <_printf_common+0xa8>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	4652      	mov	r2, sl
 800e2ea:	4649      	mov	r1, r9
 800e2ec:	4638      	mov	r0, r7
 800e2ee:	47c0      	blx	r8
 800e2f0:	3001      	adds	r0, #1
 800e2f2:	d103      	bne.n	800e2fc <_printf_common+0xac>
 800e2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2fc:	3501      	adds	r5, #1
 800e2fe:	e7c6      	b.n	800e28e <_printf_common+0x3e>
 800e300:	18e1      	adds	r1, r4, r3
 800e302:	1c5a      	adds	r2, r3, #1
 800e304:	2030      	movs	r0, #48	; 0x30
 800e306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e30a:	4422      	add	r2, r4
 800e30c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e314:	3302      	adds	r3, #2
 800e316:	e7c7      	b.n	800e2a8 <_printf_common+0x58>
 800e318:	2301      	movs	r3, #1
 800e31a:	4622      	mov	r2, r4
 800e31c:	4649      	mov	r1, r9
 800e31e:	4638      	mov	r0, r7
 800e320:	47c0      	blx	r8
 800e322:	3001      	adds	r0, #1
 800e324:	d0e6      	beq.n	800e2f4 <_printf_common+0xa4>
 800e326:	3601      	adds	r6, #1
 800e328:	e7d9      	b.n	800e2de <_printf_common+0x8e>
	...

0800e32c <_printf_i>:
 800e32c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e330:	460c      	mov	r4, r1
 800e332:	4691      	mov	r9, r2
 800e334:	7e27      	ldrb	r7, [r4, #24]
 800e336:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e338:	2f78      	cmp	r7, #120	; 0x78
 800e33a:	4680      	mov	r8, r0
 800e33c:	469a      	mov	sl, r3
 800e33e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e342:	d807      	bhi.n	800e354 <_printf_i+0x28>
 800e344:	2f62      	cmp	r7, #98	; 0x62
 800e346:	d80a      	bhi.n	800e35e <_printf_i+0x32>
 800e348:	2f00      	cmp	r7, #0
 800e34a:	f000 80d8 	beq.w	800e4fe <_printf_i+0x1d2>
 800e34e:	2f58      	cmp	r7, #88	; 0x58
 800e350:	f000 80a3 	beq.w	800e49a <_printf_i+0x16e>
 800e354:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e35c:	e03a      	b.n	800e3d4 <_printf_i+0xa8>
 800e35e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e362:	2b15      	cmp	r3, #21
 800e364:	d8f6      	bhi.n	800e354 <_printf_i+0x28>
 800e366:	a001      	add	r0, pc, #4	; (adr r0, 800e36c <_printf_i+0x40>)
 800e368:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e36c:	0800e3c5 	.word	0x0800e3c5
 800e370:	0800e3d9 	.word	0x0800e3d9
 800e374:	0800e355 	.word	0x0800e355
 800e378:	0800e355 	.word	0x0800e355
 800e37c:	0800e355 	.word	0x0800e355
 800e380:	0800e355 	.word	0x0800e355
 800e384:	0800e3d9 	.word	0x0800e3d9
 800e388:	0800e355 	.word	0x0800e355
 800e38c:	0800e355 	.word	0x0800e355
 800e390:	0800e355 	.word	0x0800e355
 800e394:	0800e355 	.word	0x0800e355
 800e398:	0800e4e5 	.word	0x0800e4e5
 800e39c:	0800e409 	.word	0x0800e409
 800e3a0:	0800e4c7 	.word	0x0800e4c7
 800e3a4:	0800e355 	.word	0x0800e355
 800e3a8:	0800e355 	.word	0x0800e355
 800e3ac:	0800e507 	.word	0x0800e507
 800e3b0:	0800e355 	.word	0x0800e355
 800e3b4:	0800e409 	.word	0x0800e409
 800e3b8:	0800e355 	.word	0x0800e355
 800e3bc:	0800e355 	.word	0x0800e355
 800e3c0:	0800e4cf 	.word	0x0800e4cf
 800e3c4:	680b      	ldr	r3, [r1, #0]
 800e3c6:	1d1a      	adds	r2, r3, #4
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	600a      	str	r2, [r1, #0]
 800e3cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e3d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	e0a3      	b.n	800e520 <_printf_i+0x1f4>
 800e3d8:	6825      	ldr	r5, [r4, #0]
 800e3da:	6808      	ldr	r0, [r1, #0]
 800e3dc:	062e      	lsls	r6, r5, #24
 800e3de:	f100 0304 	add.w	r3, r0, #4
 800e3e2:	d50a      	bpl.n	800e3fa <_printf_i+0xce>
 800e3e4:	6805      	ldr	r5, [r0, #0]
 800e3e6:	600b      	str	r3, [r1, #0]
 800e3e8:	2d00      	cmp	r5, #0
 800e3ea:	da03      	bge.n	800e3f4 <_printf_i+0xc8>
 800e3ec:	232d      	movs	r3, #45	; 0x2d
 800e3ee:	426d      	negs	r5, r5
 800e3f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3f4:	485e      	ldr	r0, [pc, #376]	; (800e570 <_printf_i+0x244>)
 800e3f6:	230a      	movs	r3, #10
 800e3f8:	e019      	b.n	800e42e <_printf_i+0x102>
 800e3fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e3fe:	6805      	ldr	r5, [r0, #0]
 800e400:	600b      	str	r3, [r1, #0]
 800e402:	bf18      	it	ne
 800e404:	b22d      	sxthne	r5, r5
 800e406:	e7ef      	b.n	800e3e8 <_printf_i+0xbc>
 800e408:	680b      	ldr	r3, [r1, #0]
 800e40a:	6825      	ldr	r5, [r4, #0]
 800e40c:	1d18      	adds	r0, r3, #4
 800e40e:	6008      	str	r0, [r1, #0]
 800e410:	0628      	lsls	r0, r5, #24
 800e412:	d501      	bpl.n	800e418 <_printf_i+0xec>
 800e414:	681d      	ldr	r5, [r3, #0]
 800e416:	e002      	b.n	800e41e <_printf_i+0xf2>
 800e418:	0669      	lsls	r1, r5, #25
 800e41a:	d5fb      	bpl.n	800e414 <_printf_i+0xe8>
 800e41c:	881d      	ldrh	r5, [r3, #0]
 800e41e:	4854      	ldr	r0, [pc, #336]	; (800e570 <_printf_i+0x244>)
 800e420:	2f6f      	cmp	r7, #111	; 0x6f
 800e422:	bf0c      	ite	eq
 800e424:	2308      	moveq	r3, #8
 800e426:	230a      	movne	r3, #10
 800e428:	2100      	movs	r1, #0
 800e42a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e42e:	6866      	ldr	r6, [r4, #4]
 800e430:	60a6      	str	r6, [r4, #8]
 800e432:	2e00      	cmp	r6, #0
 800e434:	bfa2      	ittt	ge
 800e436:	6821      	ldrge	r1, [r4, #0]
 800e438:	f021 0104 	bicge.w	r1, r1, #4
 800e43c:	6021      	strge	r1, [r4, #0]
 800e43e:	b90d      	cbnz	r5, 800e444 <_printf_i+0x118>
 800e440:	2e00      	cmp	r6, #0
 800e442:	d04d      	beq.n	800e4e0 <_printf_i+0x1b4>
 800e444:	4616      	mov	r6, r2
 800e446:	fbb5 f1f3 	udiv	r1, r5, r3
 800e44a:	fb03 5711 	mls	r7, r3, r1, r5
 800e44e:	5dc7      	ldrb	r7, [r0, r7]
 800e450:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e454:	462f      	mov	r7, r5
 800e456:	42bb      	cmp	r3, r7
 800e458:	460d      	mov	r5, r1
 800e45a:	d9f4      	bls.n	800e446 <_printf_i+0x11a>
 800e45c:	2b08      	cmp	r3, #8
 800e45e:	d10b      	bne.n	800e478 <_printf_i+0x14c>
 800e460:	6823      	ldr	r3, [r4, #0]
 800e462:	07df      	lsls	r7, r3, #31
 800e464:	d508      	bpl.n	800e478 <_printf_i+0x14c>
 800e466:	6923      	ldr	r3, [r4, #16]
 800e468:	6861      	ldr	r1, [r4, #4]
 800e46a:	4299      	cmp	r1, r3
 800e46c:	bfde      	ittt	le
 800e46e:	2330      	movle	r3, #48	; 0x30
 800e470:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e474:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e478:	1b92      	subs	r2, r2, r6
 800e47a:	6122      	str	r2, [r4, #16]
 800e47c:	f8cd a000 	str.w	sl, [sp]
 800e480:	464b      	mov	r3, r9
 800e482:	aa03      	add	r2, sp, #12
 800e484:	4621      	mov	r1, r4
 800e486:	4640      	mov	r0, r8
 800e488:	f7ff fee2 	bl	800e250 <_printf_common>
 800e48c:	3001      	adds	r0, #1
 800e48e:	d14c      	bne.n	800e52a <_printf_i+0x1fe>
 800e490:	f04f 30ff 	mov.w	r0, #4294967295
 800e494:	b004      	add	sp, #16
 800e496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e49a:	4835      	ldr	r0, [pc, #212]	; (800e570 <_printf_i+0x244>)
 800e49c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e4a0:	6823      	ldr	r3, [r4, #0]
 800e4a2:	680e      	ldr	r6, [r1, #0]
 800e4a4:	061f      	lsls	r7, r3, #24
 800e4a6:	f856 5b04 	ldr.w	r5, [r6], #4
 800e4aa:	600e      	str	r6, [r1, #0]
 800e4ac:	d514      	bpl.n	800e4d8 <_printf_i+0x1ac>
 800e4ae:	07d9      	lsls	r1, r3, #31
 800e4b0:	bf44      	itt	mi
 800e4b2:	f043 0320 	orrmi.w	r3, r3, #32
 800e4b6:	6023      	strmi	r3, [r4, #0]
 800e4b8:	b91d      	cbnz	r5, 800e4c2 <_printf_i+0x196>
 800e4ba:	6823      	ldr	r3, [r4, #0]
 800e4bc:	f023 0320 	bic.w	r3, r3, #32
 800e4c0:	6023      	str	r3, [r4, #0]
 800e4c2:	2310      	movs	r3, #16
 800e4c4:	e7b0      	b.n	800e428 <_printf_i+0xfc>
 800e4c6:	6823      	ldr	r3, [r4, #0]
 800e4c8:	f043 0320 	orr.w	r3, r3, #32
 800e4cc:	6023      	str	r3, [r4, #0]
 800e4ce:	2378      	movs	r3, #120	; 0x78
 800e4d0:	4828      	ldr	r0, [pc, #160]	; (800e574 <_printf_i+0x248>)
 800e4d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e4d6:	e7e3      	b.n	800e4a0 <_printf_i+0x174>
 800e4d8:	065e      	lsls	r6, r3, #25
 800e4da:	bf48      	it	mi
 800e4dc:	b2ad      	uxthmi	r5, r5
 800e4de:	e7e6      	b.n	800e4ae <_printf_i+0x182>
 800e4e0:	4616      	mov	r6, r2
 800e4e2:	e7bb      	b.n	800e45c <_printf_i+0x130>
 800e4e4:	680b      	ldr	r3, [r1, #0]
 800e4e6:	6826      	ldr	r6, [r4, #0]
 800e4e8:	6960      	ldr	r0, [r4, #20]
 800e4ea:	1d1d      	adds	r5, r3, #4
 800e4ec:	600d      	str	r5, [r1, #0]
 800e4ee:	0635      	lsls	r5, r6, #24
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	d501      	bpl.n	800e4f8 <_printf_i+0x1cc>
 800e4f4:	6018      	str	r0, [r3, #0]
 800e4f6:	e002      	b.n	800e4fe <_printf_i+0x1d2>
 800e4f8:	0671      	lsls	r1, r6, #25
 800e4fa:	d5fb      	bpl.n	800e4f4 <_printf_i+0x1c8>
 800e4fc:	8018      	strh	r0, [r3, #0]
 800e4fe:	2300      	movs	r3, #0
 800e500:	6123      	str	r3, [r4, #16]
 800e502:	4616      	mov	r6, r2
 800e504:	e7ba      	b.n	800e47c <_printf_i+0x150>
 800e506:	680b      	ldr	r3, [r1, #0]
 800e508:	1d1a      	adds	r2, r3, #4
 800e50a:	600a      	str	r2, [r1, #0]
 800e50c:	681e      	ldr	r6, [r3, #0]
 800e50e:	6862      	ldr	r2, [r4, #4]
 800e510:	2100      	movs	r1, #0
 800e512:	4630      	mov	r0, r6
 800e514:	f7f1 fe7c 	bl	8000210 <memchr>
 800e518:	b108      	cbz	r0, 800e51e <_printf_i+0x1f2>
 800e51a:	1b80      	subs	r0, r0, r6
 800e51c:	6060      	str	r0, [r4, #4]
 800e51e:	6863      	ldr	r3, [r4, #4]
 800e520:	6123      	str	r3, [r4, #16]
 800e522:	2300      	movs	r3, #0
 800e524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e528:	e7a8      	b.n	800e47c <_printf_i+0x150>
 800e52a:	6923      	ldr	r3, [r4, #16]
 800e52c:	4632      	mov	r2, r6
 800e52e:	4649      	mov	r1, r9
 800e530:	4640      	mov	r0, r8
 800e532:	47d0      	blx	sl
 800e534:	3001      	adds	r0, #1
 800e536:	d0ab      	beq.n	800e490 <_printf_i+0x164>
 800e538:	6823      	ldr	r3, [r4, #0]
 800e53a:	079b      	lsls	r3, r3, #30
 800e53c:	d413      	bmi.n	800e566 <_printf_i+0x23a>
 800e53e:	68e0      	ldr	r0, [r4, #12]
 800e540:	9b03      	ldr	r3, [sp, #12]
 800e542:	4298      	cmp	r0, r3
 800e544:	bfb8      	it	lt
 800e546:	4618      	movlt	r0, r3
 800e548:	e7a4      	b.n	800e494 <_printf_i+0x168>
 800e54a:	2301      	movs	r3, #1
 800e54c:	4632      	mov	r2, r6
 800e54e:	4649      	mov	r1, r9
 800e550:	4640      	mov	r0, r8
 800e552:	47d0      	blx	sl
 800e554:	3001      	adds	r0, #1
 800e556:	d09b      	beq.n	800e490 <_printf_i+0x164>
 800e558:	3501      	adds	r5, #1
 800e55a:	68e3      	ldr	r3, [r4, #12]
 800e55c:	9903      	ldr	r1, [sp, #12]
 800e55e:	1a5b      	subs	r3, r3, r1
 800e560:	42ab      	cmp	r3, r5
 800e562:	dcf2      	bgt.n	800e54a <_printf_i+0x21e>
 800e564:	e7eb      	b.n	800e53e <_printf_i+0x212>
 800e566:	2500      	movs	r5, #0
 800e568:	f104 0619 	add.w	r6, r4, #25
 800e56c:	e7f5      	b.n	800e55a <_printf_i+0x22e>
 800e56e:	bf00      	nop
 800e570:	08090271 	.word	0x08090271
 800e574:	08090282 	.word	0x08090282

0800e578 <memmove>:
 800e578:	4288      	cmp	r0, r1
 800e57a:	b510      	push	{r4, lr}
 800e57c:	eb01 0402 	add.w	r4, r1, r2
 800e580:	d902      	bls.n	800e588 <memmove+0x10>
 800e582:	4284      	cmp	r4, r0
 800e584:	4623      	mov	r3, r4
 800e586:	d807      	bhi.n	800e598 <memmove+0x20>
 800e588:	1e43      	subs	r3, r0, #1
 800e58a:	42a1      	cmp	r1, r4
 800e58c:	d008      	beq.n	800e5a0 <memmove+0x28>
 800e58e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e592:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e596:	e7f8      	b.n	800e58a <memmove+0x12>
 800e598:	4402      	add	r2, r0
 800e59a:	4601      	mov	r1, r0
 800e59c:	428a      	cmp	r2, r1
 800e59e:	d100      	bne.n	800e5a2 <memmove+0x2a>
 800e5a0:	bd10      	pop	{r4, pc}
 800e5a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5aa:	e7f7      	b.n	800e59c <memmove+0x24>

0800e5ac <_realloc_r>:
 800e5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ae:	4607      	mov	r7, r0
 800e5b0:	4614      	mov	r4, r2
 800e5b2:	460e      	mov	r6, r1
 800e5b4:	b921      	cbnz	r1, 800e5c0 <_realloc_r+0x14>
 800e5b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e5ba:	4611      	mov	r1, r2
 800e5bc:	f7ff bb98 	b.w	800dcf0 <_malloc_r>
 800e5c0:	b922      	cbnz	r2, 800e5cc <_realloc_r+0x20>
 800e5c2:	f7ff fc99 	bl	800def8 <_free_r>
 800e5c6:	4625      	mov	r5, r4
 800e5c8:	4628      	mov	r0, r5
 800e5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5cc:	f000 f814 	bl	800e5f8 <_malloc_usable_size_r>
 800e5d0:	42a0      	cmp	r0, r4
 800e5d2:	d20f      	bcs.n	800e5f4 <_realloc_r+0x48>
 800e5d4:	4621      	mov	r1, r4
 800e5d6:	4638      	mov	r0, r7
 800e5d8:	f7ff fb8a 	bl	800dcf0 <_malloc_r>
 800e5dc:	4605      	mov	r5, r0
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d0f2      	beq.n	800e5c8 <_realloc_r+0x1c>
 800e5e2:	4631      	mov	r1, r6
 800e5e4:	4622      	mov	r2, r4
 800e5e6:	f7ff fb6d 	bl	800dcc4 <memcpy>
 800e5ea:	4631      	mov	r1, r6
 800e5ec:	4638      	mov	r0, r7
 800e5ee:	f7ff fc83 	bl	800def8 <_free_r>
 800e5f2:	e7e9      	b.n	800e5c8 <_realloc_r+0x1c>
 800e5f4:	4635      	mov	r5, r6
 800e5f6:	e7e7      	b.n	800e5c8 <_realloc_r+0x1c>

0800e5f8 <_malloc_usable_size_r>:
 800e5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5fc:	1f18      	subs	r0, r3, #4
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	bfbc      	itt	lt
 800e602:	580b      	ldrlt	r3, [r1, r0]
 800e604:	18c0      	addlt	r0, r0, r3
 800e606:	4770      	bx	lr

0800e608 <pow>:
 800e608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e60c:	ec59 8b10 	vmov	r8, r9, d0
 800e610:	ec57 6b11 	vmov	r6, r7, d1
 800e614:	f000 f8a8 	bl	800e768 <__ieee754_pow>
 800e618:	4b4e      	ldr	r3, [pc, #312]	; (800e754 <pow+0x14c>)
 800e61a:	f993 3000 	ldrsb.w	r3, [r3]
 800e61e:	3301      	adds	r3, #1
 800e620:	ec55 4b10 	vmov	r4, r5, d0
 800e624:	d015      	beq.n	800e652 <pow+0x4a>
 800e626:	4632      	mov	r2, r6
 800e628:	463b      	mov	r3, r7
 800e62a:	4630      	mov	r0, r6
 800e62c:	4639      	mov	r1, r7
 800e62e:	f7f2 fa95 	bl	8000b5c <__aeabi_dcmpun>
 800e632:	b970      	cbnz	r0, 800e652 <pow+0x4a>
 800e634:	4642      	mov	r2, r8
 800e636:	464b      	mov	r3, r9
 800e638:	4640      	mov	r0, r8
 800e63a:	4649      	mov	r1, r9
 800e63c:	f7f2 fa8e 	bl	8000b5c <__aeabi_dcmpun>
 800e640:	2200      	movs	r2, #0
 800e642:	2300      	movs	r3, #0
 800e644:	b148      	cbz	r0, 800e65a <pow+0x52>
 800e646:	4630      	mov	r0, r6
 800e648:	4639      	mov	r1, r7
 800e64a:	f7f2 fa55 	bl	8000af8 <__aeabi_dcmpeq>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d17d      	bne.n	800e74e <pow+0x146>
 800e652:	ec45 4b10 	vmov	d0, r4, r5
 800e656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e65a:	4640      	mov	r0, r8
 800e65c:	4649      	mov	r1, r9
 800e65e:	f7f2 fa4b 	bl	8000af8 <__aeabi_dcmpeq>
 800e662:	b1e0      	cbz	r0, 800e69e <pow+0x96>
 800e664:	2200      	movs	r2, #0
 800e666:	2300      	movs	r3, #0
 800e668:	4630      	mov	r0, r6
 800e66a:	4639      	mov	r1, r7
 800e66c:	f7f2 fa44 	bl	8000af8 <__aeabi_dcmpeq>
 800e670:	2800      	cmp	r0, #0
 800e672:	d16c      	bne.n	800e74e <pow+0x146>
 800e674:	ec47 6b10 	vmov	d0, r6, r7
 800e678:	f000 fe55 	bl	800f326 <finite>
 800e67c:	2800      	cmp	r0, #0
 800e67e:	d0e8      	beq.n	800e652 <pow+0x4a>
 800e680:	2200      	movs	r2, #0
 800e682:	2300      	movs	r3, #0
 800e684:	4630      	mov	r0, r6
 800e686:	4639      	mov	r1, r7
 800e688:	f7f2 fa40 	bl	8000b0c <__aeabi_dcmplt>
 800e68c:	2800      	cmp	r0, #0
 800e68e:	d0e0      	beq.n	800e652 <pow+0x4a>
 800e690:	f7ff faec 	bl	800dc6c <__errno>
 800e694:	2321      	movs	r3, #33	; 0x21
 800e696:	6003      	str	r3, [r0, #0]
 800e698:	2400      	movs	r4, #0
 800e69a:	4d2f      	ldr	r5, [pc, #188]	; (800e758 <pow+0x150>)
 800e69c:	e7d9      	b.n	800e652 <pow+0x4a>
 800e69e:	ec45 4b10 	vmov	d0, r4, r5
 800e6a2:	f000 fe40 	bl	800f326 <finite>
 800e6a6:	bbb8      	cbnz	r0, 800e718 <pow+0x110>
 800e6a8:	ec49 8b10 	vmov	d0, r8, r9
 800e6ac:	f000 fe3b 	bl	800f326 <finite>
 800e6b0:	b390      	cbz	r0, 800e718 <pow+0x110>
 800e6b2:	ec47 6b10 	vmov	d0, r6, r7
 800e6b6:	f000 fe36 	bl	800f326 <finite>
 800e6ba:	b368      	cbz	r0, 800e718 <pow+0x110>
 800e6bc:	4622      	mov	r2, r4
 800e6be:	462b      	mov	r3, r5
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	f7f2 fa4a 	bl	8000b5c <__aeabi_dcmpun>
 800e6c8:	b160      	cbz	r0, 800e6e4 <pow+0xdc>
 800e6ca:	f7ff facf 	bl	800dc6c <__errno>
 800e6ce:	2321      	movs	r3, #33	; 0x21
 800e6d0:	6003      	str	r3, [r0, #0]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	4610      	mov	r0, r2
 800e6d8:	4619      	mov	r1, r3
 800e6da:	f7f2 f8cf 	bl	800087c <__aeabi_ddiv>
 800e6de:	4604      	mov	r4, r0
 800e6e0:	460d      	mov	r5, r1
 800e6e2:	e7b6      	b.n	800e652 <pow+0x4a>
 800e6e4:	f7ff fac2 	bl	800dc6c <__errno>
 800e6e8:	2322      	movs	r3, #34	; 0x22
 800e6ea:	6003      	str	r3, [r0, #0]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	4640      	mov	r0, r8
 800e6f2:	4649      	mov	r1, r9
 800e6f4:	f7f2 fa0a 	bl	8000b0c <__aeabi_dcmplt>
 800e6f8:	2400      	movs	r4, #0
 800e6fa:	b158      	cbz	r0, 800e714 <pow+0x10c>
 800e6fc:	ec47 6b10 	vmov	d0, r6, r7
 800e700:	f000 fe26 	bl	800f350 <rint>
 800e704:	4632      	mov	r2, r6
 800e706:	ec51 0b10 	vmov	r0, r1, d0
 800e70a:	463b      	mov	r3, r7
 800e70c:	f7f2 f9f4 	bl	8000af8 <__aeabi_dcmpeq>
 800e710:	2800      	cmp	r0, #0
 800e712:	d0c2      	beq.n	800e69a <pow+0x92>
 800e714:	4d11      	ldr	r5, [pc, #68]	; (800e75c <pow+0x154>)
 800e716:	e79c      	b.n	800e652 <pow+0x4a>
 800e718:	2200      	movs	r2, #0
 800e71a:	2300      	movs	r3, #0
 800e71c:	4620      	mov	r0, r4
 800e71e:	4629      	mov	r1, r5
 800e720:	f7f2 f9ea 	bl	8000af8 <__aeabi_dcmpeq>
 800e724:	2800      	cmp	r0, #0
 800e726:	d094      	beq.n	800e652 <pow+0x4a>
 800e728:	ec49 8b10 	vmov	d0, r8, r9
 800e72c:	f000 fdfb 	bl	800f326 <finite>
 800e730:	2800      	cmp	r0, #0
 800e732:	d08e      	beq.n	800e652 <pow+0x4a>
 800e734:	ec47 6b10 	vmov	d0, r6, r7
 800e738:	f000 fdf5 	bl	800f326 <finite>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	d088      	beq.n	800e652 <pow+0x4a>
 800e740:	f7ff fa94 	bl	800dc6c <__errno>
 800e744:	2322      	movs	r3, #34	; 0x22
 800e746:	6003      	str	r3, [r0, #0]
 800e748:	2400      	movs	r4, #0
 800e74a:	2500      	movs	r5, #0
 800e74c:	e781      	b.n	800e652 <pow+0x4a>
 800e74e:	4d04      	ldr	r5, [pc, #16]	; (800e760 <pow+0x158>)
 800e750:	2400      	movs	r4, #0
 800e752:	e77e      	b.n	800e652 <pow+0x4a>
 800e754:	200000b4 	.word	0x200000b4
 800e758:	fff00000 	.word	0xfff00000
 800e75c:	7ff00000 	.word	0x7ff00000
 800e760:	3ff00000 	.word	0x3ff00000
 800e764:	00000000 	.word	0x00000000

0800e768 <__ieee754_pow>:
 800e768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e76c:	ed2d 8b06 	vpush	{d8-d10}
 800e770:	b08d      	sub	sp, #52	; 0x34
 800e772:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e776:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800e77a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e77e:	ea56 0100 	orrs.w	r1, r6, r0
 800e782:	ec53 2b10 	vmov	r2, r3, d0
 800e786:	f000 84d1 	beq.w	800f12c <__ieee754_pow+0x9c4>
 800e78a:	497f      	ldr	r1, [pc, #508]	; (800e988 <__ieee754_pow+0x220>)
 800e78c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e790:	428c      	cmp	r4, r1
 800e792:	ee10 8a10 	vmov	r8, s0
 800e796:	4699      	mov	r9, r3
 800e798:	dc09      	bgt.n	800e7ae <__ieee754_pow+0x46>
 800e79a:	d103      	bne.n	800e7a4 <__ieee754_pow+0x3c>
 800e79c:	b97a      	cbnz	r2, 800e7be <__ieee754_pow+0x56>
 800e79e:	42a6      	cmp	r6, r4
 800e7a0:	dd02      	ble.n	800e7a8 <__ieee754_pow+0x40>
 800e7a2:	e00c      	b.n	800e7be <__ieee754_pow+0x56>
 800e7a4:	428e      	cmp	r6, r1
 800e7a6:	dc02      	bgt.n	800e7ae <__ieee754_pow+0x46>
 800e7a8:	428e      	cmp	r6, r1
 800e7aa:	d110      	bne.n	800e7ce <__ieee754_pow+0x66>
 800e7ac:	b178      	cbz	r0, 800e7ce <__ieee754_pow+0x66>
 800e7ae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e7b2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e7b6:	ea54 0308 	orrs.w	r3, r4, r8
 800e7ba:	f000 84b7 	beq.w	800f12c <__ieee754_pow+0x9c4>
 800e7be:	4873      	ldr	r0, [pc, #460]	; (800e98c <__ieee754_pow+0x224>)
 800e7c0:	b00d      	add	sp, #52	; 0x34
 800e7c2:	ecbd 8b06 	vpop	{d8-d10}
 800e7c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ca:	f000 bdb9 	b.w	800f340 <nan>
 800e7ce:	f1b9 0f00 	cmp.w	r9, #0
 800e7d2:	da36      	bge.n	800e842 <__ieee754_pow+0xda>
 800e7d4:	496e      	ldr	r1, [pc, #440]	; (800e990 <__ieee754_pow+0x228>)
 800e7d6:	428e      	cmp	r6, r1
 800e7d8:	dc51      	bgt.n	800e87e <__ieee754_pow+0x116>
 800e7da:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800e7de:	428e      	cmp	r6, r1
 800e7e0:	f340 84af 	ble.w	800f142 <__ieee754_pow+0x9da>
 800e7e4:	1531      	asrs	r1, r6, #20
 800e7e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e7ea:	2914      	cmp	r1, #20
 800e7ec:	dd0f      	ble.n	800e80e <__ieee754_pow+0xa6>
 800e7ee:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800e7f2:	fa20 fc01 	lsr.w	ip, r0, r1
 800e7f6:	fa0c f101 	lsl.w	r1, ip, r1
 800e7fa:	4281      	cmp	r1, r0
 800e7fc:	f040 84a1 	bne.w	800f142 <__ieee754_pow+0x9da>
 800e800:	f00c 0c01 	and.w	ip, ip, #1
 800e804:	f1cc 0102 	rsb	r1, ip, #2
 800e808:	9100      	str	r1, [sp, #0]
 800e80a:	b180      	cbz	r0, 800e82e <__ieee754_pow+0xc6>
 800e80c:	e059      	b.n	800e8c2 <__ieee754_pow+0x15a>
 800e80e:	2800      	cmp	r0, #0
 800e810:	d155      	bne.n	800e8be <__ieee754_pow+0x156>
 800e812:	f1c1 0114 	rsb	r1, r1, #20
 800e816:	fa46 fc01 	asr.w	ip, r6, r1
 800e81a:	fa0c f101 	lsl.w	r1, ip, r1
 800e81e:	42b1      	cmp	r1, r6
 800e820:	f040 848c 	bne.w	800f13c <__ieee754_pow+0x9d4>
 800e824:	f00c 0c01 	and.w	ip, ip, #1
 800e828:	f1cc 0102 	rsb	r1, ip, #2
 800e82c:	9100      	str	r1, [sp, #0]
 800e82e:	4959      	ldr	r1, [pc, #356]	; (800e994 <__ieee754_pow+0x22c>)
 800e830:	428e      	cmp	r6, r1
 800e832:	d12d      	bne.n	800e890 <__ieee754_pow+0x128>
 800e834:	2f00      	cmp	r7, #0
 800e836:	da79      	bge.n	800e92c <__ieee754_pow+0x1c4>
 800e838:	4956      	ldr	r1, [pc, #344]	; (800e994 <__ieee754_pow+0x22c>)
 800e83a:	2000      	movs	r0, #0
 800e83c:	f7f2 f81e 	bl	800087c <__aeabi_ddiv>
 800e840:	e016      	b.n	800e870 <__ieee754_pow+0x108>
 800e842:	2100      	movs	r1, #0
 800e844:	9100      	str	r1, [sp, #0]
 800e846:	2800      	cmp	r0, #0
 800e848:	d13b      	bne.n	800e8c2 <__ieee754_pow+0x15a>
 800e84a:	494f      	ldr	r1, [pc, #316]	; (800e988 <__ieee754_pow+0x220>)
 800e84c:	428e      	cmp	r6, r1
 800e84e:	d1ee      	bne.n	800e82e <__ieee754_pow+0xc6>
 800e850:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e854:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e858:	ea53 0308 	orrs.w	r3, r3, r8
 800e85c:	f000 8466 	beq.w	800f12c <__ieee754_pow+0x9c4>
 800e860:	4b4d      	ldr	r3, [pc, #308]	; (800e998 <__ieee754_pow+0x230>)
 800e862:	429c      	cmp	r4, r3
 800e864:	dd0d      	ble.n	800e882 <__ieee754_pow+0x11a>
 800e866:	2f00      	cmp	r7, #0
 800e868:	f280 8464 	bge.w	800f134 <__ieee754_pow+0x9cc>
 800e86c:	2000      	movs	r0, #0
 800e86e:	2100      	movs	r1, #0
 800e870:	ec41 0b10 	vmov	d0, r0, r1
 800e874:	b00d      	add	sp, #52	; 0x34
 800e876:	ecbd 8b06 	vpop	{d8-d10}
 800e87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e87e:	2102      	movs	r1, #2
 800e880:	e7e0      	b.n	800e844 <__ieee754_pow+0xdc>
 800e882:	2f00      	cmp	r7, #0
 800e884:	daf2      	bge.n	800e86c <__ieee754_pow+0x104>
 800e886:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e88a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e88e:	e7ef      	b.n	800e870 <__ieee754_pow+0x108>
 800e890:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e894:	d104      	bne.n	800e8a0 <__ieee754_pow+0x138>
 800e896:	4610      	mov	r0, r2
 800e898:	4619      	mov	r1, r3
 800e89a:	f7f1 fec5 	bl	8000628 <__aeabi_dmul>
 800e89e:	e7e7      	b.n	800e870 <__ieee754_pow+0x108>
 800e8a0:	493e      	ldr	r1, [pc, #248]	; (800e99c <__ieee754_pow+0x234>)
 800e8a2:	428f      	cmp	r7, r1
 800e8a4:	d10d      	bne.n	800e8c2 <__ieee754_pow+0x15a>
 800e8a6:	f1b9 0f00 	cmp.w	r9, #0
 800e8aa:	db0a      	blt.n	800e8c2 <__ieee754_pow+0x15a>
 800e8ac:	ec43 2b10 	vmov	d0, r2, r3
 800e8b0:	b00d      	add	sp, #52	; 0x34
 800e8b2:	ecbd 8b06 	vpop	{d8-d10}
 800e8b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ba:	f000 bc77 	b.w	800f1ac <__ieee754_sqrt>
 800e8be:	2100      	movs	r1, #0
 800e8c0:	9100      	str	r1, [sp, #0]
 800e8c2:	ec43 2b10 	vmov	d0, r2, r3
 800e8c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e8ca:	f000 fd23 	bl	800f314 <fabs>
 800e8ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8d2:	ec51 0b10 	vmov	r0, r1, d0
 800e8d6:	f1b8 0f00 	cmp.w	r8, #0
 800e8da:	d12a      	bne.n	800e932 <__ieee754_pow+0x1ca>
 800e8dc:	b12c      	cbz	r4, 800e8ea <__ieee754_pow+0x182>
 800e8de:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800e994 <__ieee754_pow+0x22c>
 800e8e2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800e8e6:	45e6      	cmp	lr, ip
 800e8e8:	d123      	bne.n	800e932 <__ieee754_pow+0x1ca>
 800e8ea:	2f00      	cmp	r7, #0
 800e8ec:	da05      	bge.n	800e8fa <__ieee754_pow+0x192>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	2000      	movs	r0, #0
 800e8f4:	4927      	ldr	r1, [pc, #156]	; (800e994 <__ieee754_pow+0x22c>)
 800e8f6:	f7f1 ffc1 	bl	800087c <__aeabi_ddiv>
 800e8fa:	f1b9 0f00 	cmp.w	r9, #0
 800e8fe:	dab7      	bge.n	800e870 <__ieee754_pow+0x108>
 800e900:	9b00      	ldr	r3, [sp, #0]
 800e902:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e906:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e90a:	4323      	orrs	r3, r4
 800e90c:	d108      	bne.n	800e920 <__ieee754_pow+0x1b8>
 800e90e:	4602      	mov	r2, r0
 800e910:	460b      	mov	r3, r1
 800e912:	4610      	mov	r0, r2
 800e914:	4619      	mov	r1, r3
 800e916:	f7f1 fccf 	bl	80002b8 <__aeabi_dsub>
 800e91a:	4602      	mov	r2, r0
 800e91c:	460b      	mov	r3, r1
 800e91e:	e78d      	b.n	800e83c <__ieee754_pow+0xd4>
 800e920:	9b00      	ldr	r3, [sp, #0]
 800e922:	2b01      	cmp	r3, #1
 800e924:	d1a4      	bne.n	800e870 <__ieee754_pow+0x108>
 800e926:	4602      	mov	r2, r0
 800e928:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e92c:	4610      	mov	r0, r2
 800e92e:	4619      	mov	r1, r3
 800e930:	e79e      	b.n	800e870 <__ieee754_pow+0x108>
 800e932:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800e936:	f10c 35ff 	add.w	r5, ip, #4294967295
 800e93a:	950a      	str	r5, [sp, #40]	; 0x28
 800e93c:	9d00      	ldr	r5, [sp, #0]
 800e93e:	46ac      	mov	ip, r5
 800e940:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e942:	ea5c 0505 	orrs.w	r5, ip, r5
 800e946:	d0e4      	beq.n	800e912 <__ieee754_pow+0x1aa>
 800e948:	4b15      	ldr	r3, [pc, #84]	; (800e9a0 <__ieee754_pow+0x238>)
 800e94a:	429e      	cmp	r6, r3
 800e94c:	f340 80fc 	ble.w	800eb48 <__ieee754_pow+0x3e0>
 800e950:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e954:	429e      	cmp	r6, r3
 800e956:	4b10      	ldr	r3, [pc, #64]	; (800e998 <__ieee754_pow+0x230>)
 800e958:	dd07      	ble.n	800e96a <__ieee754_pow+0x202>
 800e95a:	429c      	cmp	r4, r3
 800e95c:	dc0a      	bgt.n	800e974 <__ieee754_pow+0x20c>
 800e95e:	2f00      	cmp	r7, #0
 800e960:	da84      	bge.n	800e86c <__ieee754_pow+0x104>
 800e962:	a307      	add	r3, pc, #28	; (adr r3, 800e980 <__ieee754_pow+0x218>)
 800e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e968:	e795      	b.n	800e896 <__ieee754_pow+0x12e>
 800e96a:	429c      	cmp	r4, r3
 800e96c:	dbf7      	blt.n	800e95e <__ieee754_pow+0x1f6>
 800e96e:	4b09      	ldr	r3, [pc, #36]	; (800e994 <__ieee754_pow+0x22c>)
 800e970:	429c      	cmp	r4, r3
 800e972:	dd17      	ble.n	800e9a4 <__ieee754_pow+0x23c>
 800e974:	2f00      	cmp	r7, #0
 800e976:	dcf4      	bgt.n	800e962 <__ieee754_pow+0x1fa>
 800e978:	e778      	b.n	800e86c <__ieee754_pow+0x104>
 800e97a:	bf00      	nop
 800e97c:	f3af 8000 	nop.w
 800e980:	8800759c 	.word	0x8800759c
 800e984:	7e37e43c 	.word	0x7e37e43c
 800e988:	7ff00000 	.word	0x7ff00000
 800e98c:	08090265 	.word	0x08090265
 800e990:	433fffff 	.word	0x433fffff
 800e994:	3ff00000 	.word	0x3ff00000
 800e998:	3fefffff 	.word	0x3fefffff
 800e99c:	3fe00000 	.word	0x3fe00000
 800e9a0:	41e00000 	.word	0x41e00000
 800e9a4:	4b64      	ldr	r3, [pc, #400]	; (800eb38 <__ieee754_pow+0x3d0>)
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f7f1 fc86 	bl	80002b8 <__aeabi_dsub>
 800e9ac:	a356      	add	r3, pc, #344	; (adr r3, 800eb08 <__ieee754_pow+0x3a0>)
 800e9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	460d      	mov	r5, r1
 800e9b6:	f7f1 fe37 	bl	8000628 <__aeabi_dmul>
 800e9ba:	a355      	add	r3, pc, #340	; (adr r3, 800eb10 <__ieee754_pow+0x3a8>)
 800e9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c0:	4606      	mov	r6, r0
 800e9c2:	460f      	mov	r7, r1
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	4629      	mov	r1, r5
 800e9c8:	f7f1 fe2e 	bl	8000628 <__aeabi_dmul>
 800e9cc:	4b5b      	ldr	r3, [pc, #364]	; (800eb3c <__ieee754_pow+0x3d4>)
 800e9ce:	4682      	mov	sl, r0
 800e9d0:	468b      	mov	fp, r1
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	f7f1 fe26 	bl	8000628 <__aeabi_dmul>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	460b      	mov	r3, r1
 800e9e0:	a14d      	add	r1, pc, #308	; (adr r1, 800eb18 <__ieee754_pow+0x3b0>)
 800e9e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9e6:	f7f1 fc67 	bl	80002b8 <__aeabi_dsub>
 800e9ea:	4622      	mov	r2, r4
 800e9ec:	462b      	mov	r3, r5
 800e9ee:	f7f1 fe1b 	bl	8000628 <__aeabi_dmul>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	4951      	ldr	r1, [pc, #324]	; (800eb40 <__ieee754_pow+0x3d8>)
 800e9fa:	f7f1 fc5d 	bl	80002b8 <__aeabi_dsub>
 800e9fe:	4622      	mov	r2, r4
 800ea00:	4680      	mov	r8, r0
 800ea02:	4689      	mov	r9, r1
 800ea04:	462b      	mov	r3, r5
 800ea06:	4620      	mov	r0, r4
 800ea08:	4629      	mov	r1, r5
 800ea0a:	f7f1 fe0d 	bl	8000628 <__aeabi_dmul>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	460b      	mov	r3, r1
 800ea12:	4640      	mov	r0, r8
 800ea14:	4649      	mov	r1, r9
 800ea16:	f7f1 fe07 	bl	8000628 <__aeabi_dmul>
 800ea1a:	a341      	add	r3, pc, #260	; (adr r3, 800eb20 <__ieee754_pow+0x3b8>)
 800ea1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea20:	f7f1 fe02 	bl	8000628 <__aeabi_dmul>
 800ea24:	4602      	mov	r2, r0
 800ea26:	460b      	mov	r3, r1
 800ea28:	4650      	mov	r0, sl
 800ea2a:	4659      	mov	r1, fp
 800ea2c:	f7f1 fc44 	bl	80002b8 <__aeabi_dsub>
 800ea30:	4602      	mov	r2, r0
 800ea32:	460b      	mov	r3, r1
 800ea34:	4680      	mov	r8, r0
 800ea36:	4689      	mov	r9, r1
 800ea38:	4630      	mov	r0, r6
 800ea3a:	4639      	mov	r1, r7
 800ea3c:	f7f1 fc3e 	bl	80002bc <__adddf3>
 800ea40:	2400      	movs	r4, #0
 800ea42:	4632      	mov	r2, r6
 800ea44:	463b      	mov	r3, r7
 800ea46:	4620      	mov	r0, r4
 800ea48:	460d      	mov	r5, r1
 800ea4a:	f7f1 fc35 	bl	80002b8 <__aeabi_dsub>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	460b      	mov	r3, r1
 800ea52:	4640      	mov	r0, r8
 800ea54:	4649      	mov	r1, r9
 800ea56:	f7f1 fc2f 	bl	80002b8 <__aeabi_dsub>
 800ea5a:	9b00      	ldr	r3, [sp, #0]
 800ea5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea5e:	3b01      	subs	r3, #1
 800ea60:	4313      	orrs	r3, r2
 800ea62:	4682      	mov	sl, r0
 800ea64:	468b      	mov	fp, r1
 800ea66:	f040 81f1 	bne.w	800ee4c <__ieee754_pow+0x6e4>
 800ea6a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800eb28 <__ieee754_pow+0x3c0>
 800ea6e:	eeb0 8a47 	vmov.f32	s16, s14
 800ea72:	eef0 8a67 	vmov.f32	s17, s15
 800ea76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ea7a:	2600      	movs	r6, #0
 800ea7c:	4632      	mov	r2, r6
 800ea7e:	463b      	mov	r3, r7
 800ea80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea84:	f7f1 fc18 	bl	80002b8 <__aeabi_dsub>
 800ea88:	4622      	mov	r2, r4
 800ea8a:	462b      	mov	r3, r5
 800ea8c:	f7f1 fdcc 	bl	8000628 <__aeabi_dmul>
 800ea90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea94:	4680      	mov	r8, r0
 800ea96:	4689      	mov	r9, r1
 800ea98:	4650      	mov	r0, sl
 800ea9a:	4659      	mov	r1, fp
 800ea9c:	f7f1 fdc4 	bl	8000628 <__aeabi_dmul>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	460b      	mov	r3, r1
 800eaa4:	4640      	mov	r0, r8
 800eaa6:	4649      	mov	r1, r9
 800eaa8:	f7f1 fc08 	bl	80002bc <__adddf3>
 800eaac:	4632      	mov	r2, r6
 800eaae:	463b      	mov	r3, r7
 800eab0:	4680      	mov	r8, r0
 800eab2:	4689      	mov	r9, r1
 800eab4:	4620      	mov	r0, r4
 800eab6:	4629      	mov	r1, r5
 800eab8:	f7f1 fdb6 	bl	8000628 <__aeabi_dmul>
 800eabc:	460b      	mov	r3, r1
 800eabe:	4604      	mov	r4, r0
 800eac0:	460d      	mov	r5, r1
 800eac2:	4602      	mov	r2, r0
 800eac4:	4649      	mov	r1, r9
 800eac6:	4640      	mov	r0, r8
 800eac8:	f7f1 fbf8 	bl	80002bc <__adddf3>
 800eacc:	4b1d      	ldr	r3, [pc, #116]	; (800eb44 <__ieee754_pow+0x3dc>)
 800eace:	4299      	cmp	r1, r3
 800ead0:	ec45 4b19 	vmov	d9, r4, r5
 800ead4:	4606      	mov	r6, r0
 800ead6:	460f      	mov	r7, r1
 800ead8:	468b      	mov	fp, r1
 800eada:	f340 82fe 	ble.w	800f0da <__ieee754_pow+0x972>
 800eade:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800eae2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800eae6:	4303      	orrs	r3, r0
 800eae8:	f000 81f0 	beq.w	800eecc <__ieee754_pow+0x764>
 800eaec:	a310      	add	r3, pc, #64	; (adr r3, 800eb30 <__ieee754_pow+0x3c8>)
 800eaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf2:	ec51 0b18 	vmov	r0, r1, d8
 800eaf6:	f7f1 fd97 	bl	8000628 <__aeabi_dmul>
 800eafa:	a30d      	add	r3, pc, #52	; (adr r3, 800eb30 <__ieee754_pow+0x3c8>)
 800eafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb00:	e6cb      	b.n	800e89a <__ieee754_pow+0x132>
 800eb02:	bf00      	nop
 800eb04:	f3af 8000 	nop.w
 800eb08:	60000000 	.word	0x60000000
 800eb0c:	3ff71547 	.word	0x3ff71547
 800eb10:	f85ddf44 	.word	0xf85ddf44
 800eb14:	3e54ae0b 	.word	0x3e54ae0b
 800eb18:	55555555 	.word	0x55555555
 800eb1c:	3fd55555 	.word	0x3fd55555
 800eb20:	652b82fe 	.word	0x652b82fe
 800eb24:	3ff71547 	.word	0x3ff71547
 800eb28:	00000000 	.word	0x00000000
 800eb2c:	bff00000 	.word	0xbff00000
 800eb30:	8800759c 	.word	0x8800759c
 800eb34:	7e37e43c 	.word	0x7e37e43c
 800eb38:	3ff00000 	.word	0x3ff00000
 800eb3c:	3fd00000 	.word	0x3fd00000
 800eb40:	3fe00000 	.word	0x3fe00000
 800eb44:	408fffff 	.word	0x408fffff
 800eb48:	4bd7      	ldr	r3, [pc, #860]	; (800eea8 <__ieee754_pow+0x740>)
 800eb4a:	ea03 0309 	and.w	r3, r3, r9
 800eb4e:	2200      	movs	r2, #0
 800eb50:	b92b      	cbnz	r3, 800eb5e <__ieee754_pow+0x3f6>
 800eb52:	4bd6      	ldr	r3, [pc, #856]	; (800eeac <__ieee754_pow+0x744>)
 800eb54:	f7f1 fd68 	bl	8000628 <__aeabi_dmul>
 800eb58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800eb5c:	460c      	mov	r4, r1
 800eb5e:	1523      	asrs	r3, r4, #20
 800eb60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eb64:	4413      	add	r3, r2
 800eb66:	9309      	str	r3, [sp, #36]	; 0x24
 800eb68:	4bd1      	ldr	r3, [pc, #836]	; (800eeb0 <__ieee754_pow+0x748>)
 800eb6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800eb6e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800eb72:	429c      	cmp	r4, r3
 800eb74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eb78:	dd08      	ble.n	800eb8c <__ieee754_pow+0x424>
 800eb7a:	4bce      	ldr	r3, [pc, #824]	; (800eeb4 <__ieee754_pow+0x74c>)
 800eb7c:	429c      	cmp	r4, r3
 800eb7e:	f340 8163 	ble.w	800ee48 <__ieee754_pow+0x6e0>
 800eb82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb84:	3301      	adds	r3, #1
 800eb86:	9309      	str	r3, [sp, #36]	; 0x24
 800eb88:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800eb8c:	2400      	movs	r4, #0
 800eb8e:	00e3      	lsls	r3, r4, #3
 800eb90:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb92:	4bc9      	ldr	r3, [pc, #804]	; (800eeb8 <__ieee754_pow+0x750>)
 800eb94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eb98:	ed93 7b00 	vldr	d7, [r3]
 800eb9c:	4629      	mov	r1, r5
 800eb9e:	ec53 2b17 	vmov	r2, r3, d7
 800eba2:	eeb0 8a47 	vmov.f32	s16, s14
 800eba6:	eef0 8a67 	vmov.f32	s17, s15
 800ebaa:	4682      	mov	sl, r0
 800ebac:	f7f1 fb84 	bl	80002b8 <__aeabi_dsub>
 800ebb0:	4652      	mov	r2, sl
 800ebb2:	4606      	mov	r6, r0
 800ebb4:	460f      	mov	r7, r1
 800ebb6:	462b      	mov	r3, r5
 800ebb8:	ec51 0b18 	vmov	r0, r1, d8
 800ebbc:	f7f1 fb7e 	bl	80002bc <__adddf3>
 800ebc0:	4602      	mov	r2, r0
 800ebc2:	460b      	mov	r3, r1
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	49bd      	ldr	r1, [pc, #756]	; (800eebc <__ieee754_pow+0x754>)
 800ebc8:	f7f1 fe58 	bl	800087c <__aeabi_ddiv>
 800ebcc:	ec41 0b19 	vmov	d9, r0, r1
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	460b      	mov	r3, r1
 800ebd4:	4630      	mov	r0, r6
 800ebd6:	4639      	mov	r1, r7
 800ebd8:	f7f1 fd26 	bl	8000628 <__aeabi_dmul>
 800ebdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ebe0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ebe4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ebe8:	2300      	movs	r3, #0
 800ebea:	9304      	str	r3, [sp, #16]
 800ebec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ebf0:	46ab      	mov	fp, r5
 800ebf2:	106d      	asrs	r5, r5, #1
 800ebf4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ebf8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ebfc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ec00:	2200      	movs	r2, #0
 800ec02:	4640      	mov	r0, r8
 800ec04:	4649      	mov	r1, r9
 800ec06:	4614      	mov	r4, r2
 800ec08:	461d      	mov	r5, r3
 800ec0a:	f7f1 fd0d 	bl	8000628 <__aeabi_dmul>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	460b      	mov	r3, r1
 800ec12:	4630      	mov	r0, r6
 800ec14:	4639      	mov	r1, r7
 800ec16:	f7f1 fb4f 	bl	80002b8 <__aeabi_dsub>
 800ec1a:	ec53 2b18 	vmov	r2, r3, d8
 800ec1e:	4606      	mov	r6, r0
 800ec20:	460f      	mov	r7, r1
 800ec22:	4620      	mov	r0, r4
 800ec24:	4629      	mov	r1, r5
 800ec26:	f7f1 fb47 	bl	80002b8 <__aeabi_dsub>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	4650      	mov	r0, sl
 800ec30:	4659      	mov	r1, fp
 800ec32:	f7f1 fb41 	bl	80002b8 <__aeabi_dsub>
 800ec36:	4642      	mov	r2, r8
 800ec38:	464b      	mov	r3, r9
 800ec3a:	f7f1 fcf5 	bl	8000628 <__aeabi_dmul>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	460b      	mov	r3, r1
 800ec42:	4630      	mov	r0, r6
 800ec44:	4639      	mov	r1, r7
 800ec46:	f7f1 fb37 	bl	80002b8 <__aeabi_dsub>
 800ec4a:	ec53 2b19 	vmov	r2, r3, d9
 800ec4e:	f7f1 fceb 	bl	8000628 <__aeabi_dmul>
 800ec52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec56:	ec41 0b18 	vmov	d8, r0, r1
 800ec5a:	4610      	mov	r0, r2
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	f7f1 fce3 	bl	8000628 <__aeabi_dmul>
 800ec62:	a37d      	add	r3, pc, #500	; (adr r3, 800ee58 <__ieee754_pow+0x6f0>)
 800ec64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec68:	4604      	mov	r4, r0
 800ec6a:	460d      	mov	r5, r1
 800ec6c:	f7f1 fcdc 	bl	8000628 <__aeabi_dmul>
 800ec70:	a37b      	add	r3, pc, #492	; (adr r3, 800ee60 <__ieee754_pow+0x6f8>)
 800ec72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec76:	f7f1 fb21 	bl	80002bc <__adddf3>
 800ec7a:	4622      	mov	r2, r4
 800ec7c:	462b      	mov	r3, r5
 800ec7e:	f7f1 fcd3 	bl	8000628 <__aeabi_dmul>
 800ec82:	a379      	add	r3, pc, #484	; (adr r3, 800ee68 <__ieee754_pow+0x700>)
 800ec84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec88:	f7f1 fb18 	bl	80002bc <__adddf3>
 800ec8c:	4622      	mov	r2, r4
 800ec8e:	462b      	mov	r3, r5
 800ec90:	f7f1 fcca 	bl	8000628 <__aeabi_dmul>
 800ec94:	a376      	add	r3, pc, #472	; (adr r3, 800ee70 <__ieee754_pow+0x708>)
 800ec96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9a:	f7f1 fb0f 	bl	80002bc <__adddf3>
 800ec9e:	4622      	mov	r2, r4
 800eca0:	462b      	mov	r3, r5
 800eca2:	f7f1 fcc1 	bl	8000628 <__aeabi_dmul>
 800eca6:	a374      	add	r3, pc, #464	; (adr r3, 800ee78 <__ieee754_pow+0x710>)
 800eca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecac:	f7f1 fb06 	bl	80002bc <__adddf3>
 800ecb0:	4622      	mov	r2, r4
 800ecb2:	462b      	mov	r3, r5
 800ecb4:	f7f1 fcb8 	bl	8000628 <__aeabi_dmul>
 800ecb8:	a371      	add	r3, pc, #452	; (adr r3, 800ee80 <__ieee754_pow+0x718>)
 800ecba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecbe:	f7f1 fafd 	bl	80002bc <__adddf3>
 800ecc2:	4622      	mov	r2, r4
 800ecc4:	4606      	mov	r6, r0
 800ecc6:	460f      	mov	r7, r1
 800ecc8:	462b      	mov	r3, r5
 800ecca:	4620      	mov	r0, r4
 800eccc:	4629      	mov	r1, r5
 800ecce:	f7f1 fcab 	bl	8000628 <__aeabi_dmul>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	4630      	mov	r0, r6
 800ecd8:	4639      	mov	r1, r7
 800ecda:	f7f1 fca5 	bl	8000628 <__aeabi_dmul>
 800ecde:	4642      	mov	r2, r8
 800ece0:	4604      	mov	r4, r0
 800ece2:	460d      	mov	r5, r1
 800ece4:	464b      	mov	r3, r9
 800ece6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ecea:	f7f1 fae7 	bl	80002bc <__adddf3>
 800ecee:	ec53 2b18 	vmov	r2, r3, d8
 800ecf2:	f7f1 fc99 	bl	8000628 <__aeabi_dmul>
 800ecf6:	4622      	mov	r2, r4
 800ecf8:	462b      	mov	r3, r5
 800ecfa:	f7f1 fadf 	bl	80002bc <__adddf3>
 800ecfe:	4642      	mov	r2, r8
 800ed00:	4682      	mov	sl, r0
 800ed02:	468b      	mov	fp, r1
 800ed04:	464b      	mov	r3, r9
 800ed06:	4640      	mov	r0, r8
 800ed08:	4649      	mov	r1, r9
 800ed0a:	f7f1 fc8d 	bl	8000628 <__aeabi_dmul>
 800ed0e:	4b6c      	ldr	r3, [pc, #432]	; (800eec0 <__ieee754_pow+0x758>)
 800ed10:	2200      	movs	r2, #0
 800ed12:	4606      	mov	r6, r0
 800ed14:	460f      	mov	r7, r1
 800ed16:	f7f1 fad1 	bl	80002bc <__adddf3>
 800ed1a:	4652      	mov	r2, sl
 800ed1c:	465b      	mov	r3, fp
 800ed1e:	f7f1 facd 	bl	80002bc <__adddf3>
 800ed22:	9c04      	ldr	r4, [sp, #16]
 800ed24:	460d      	mov	r5, r1
 800ed26:	4622      	mov	r2, r4
 800ed28:	460b      	mov	r3, r1
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	4649      	mov	r1, r9
 800ed2e:	f7f1 fc7b 	bl	8000628 <__aeabi_dmul>
 800ed32:	4b63      	ldr	r3, [pc, #396]	; (800eec0 <__ieee754_pow+0x758>)
 800ed34:	4680      	mov	r8, r0
 800ed36:	4689      	mov	r9, r1
 800ed38:	2200      	movs	r2, #0
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	4629      	mov	r1, r5
 800ed3e:	f7f1 fabb 	bl	80002b8 <__aeabi_dsub>
 800ed42:	4632      	mov	r2, r6
 800ed44:	463b      	mov	r3, r7
 800ed46:	f7f1 fab7 	bl	80002b8 <__aeabi_dsub>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	4650      	mov	r0, sl
 800ed50:	4659      	mov	r1, fp
 800ed52:	f7f1 fab1 	bl	80002b8 <__aeabi_dsub>
 800ed56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed5a:	f7f1 fc65 	bl	8000628 <__aeabi_dmul>
 800ed5e:	4622      	mov	r2, r4
 800ed60:	4606      	mov	r6, r0
 800ed62:	460f      	mov	r7, r1
 800ed64:	462b      	mov	r3, r5
 800ed66:	ec51 0b18 	vmov	r0, r1, d8
 800ed6a:	f7f1 fc5d 	bl	8000628 <__aeabi_dmul>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	460b      	mov	r3, r1
 800ed72:	4630      	mov	r0, r6
 800ed74:	4639      	mov	r1, r7
 800ed76:	f7f1 faa1 	bl	80002bc <__adddf3>
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	460f      	mov	r7, r1
 800ed7e:	4602      	mov	r2, r0
 800ed80:	460b      	mov	r3, r1
 800ed82:	4640      	mov	r0, r8
 800ed84:	4649      	mov	r1, r9
 800ed86:	f7f1 fa99 	bl	80002bc <__adddf3>
 800ed8a:	9c04      	ldr	r4, [sp, #16]
 800ed8c:	a33e      	add	r3, pc, #248	; (adr r3, 800ee88 <__ieee754_pow+0x720>)
 800ed8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed92:	4620      	mov	r0, r4
 800ed94:	460d      	mov	r5, r1
 800ed96:	f7f1 fc47 	bl	8000628 <__aeabi_dmul>
 800ed9a:	4642      	mov	r2, r8
 800ed9c:	ec41 0b18 	vmov	d8, r0, r1
 800eda0:	464b      	mov	r3, r9
 800eda2:	4620      	mov	r0, r4
 800eda4:	4629      	mov	r1, r5
 800eda6:	f7f1 fa87 	bl	80002b8 <__aeabi_dsub>
 800edaa:	4602      	mov	r2, r0
 800edac:	460b      	mov	r3, r1
 800edae:	4630      	mov	r0, r6
 800edb0:	4639      	mov	r1, r7
 800edb2:	f7f1 fa81 	bl	80002b8 <__aeabi_dsub>
 800edb6:	a336      	add	r3, pc, #216	; (adr r3, 800ee90 <__ieee754_pow+0x728>)
 800edb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edbc:	f7f1 fc34 	bl	8000628 <__aeabi_dmul>
 800edc0:	a335      	add	r3, pc, #212	; (adr r3, 800ee98 <__ieee754_pow+0x730>)
 800edc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc6:	4606      	mov	r6, r0
 800edc8:	460f      	mov	r7, r1
 800edca:	4620      	mov	r0, r4
 800edcc:	4629      	mov	r1, r5
 800edce:	f7f1 fc2b 	bl	8000628 <__aeabi_dmul>
 800edd2:	4602      	mov	r2, r0
 800edd4:	460b      	mov	r3, r1
 800edd6:	4630      	mov	r0, r6
 800edd8:	4639      	mov	r1, r7
 800edda:	f7f1 fa6f 	bl	80002bc <__adddf3>
 800edde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ede0:	4b38      	ldr	r3, [pc, #224]	; (800eec4 <__ieee754_pow+0x75c>)
 800ede2:	4413      	add	r3, r2
 800ede4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede8:	f7f1 fa68 	bl	80002bc <__adddf3>
 800edec:	4682      	mov	sl, r0
 800edee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edf0:	468b      	mov	fp, r1
 800edf2:	f7f1 fbaf 	bl	8000554 <__aeabi_i2d>
 800edf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800edf8:	4b33      	ldr	r3, [pc, #204]	; (800eec8 <__ieee754_pow+0x760>)
 800edfa:	4413      	add	r3, r2
 800edfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee00:	4606      	mov	r6, r0
 800ee02:	460f      	mov	r7, r1
 800ee04:	4652      	mov	r2, sl
 800ee06:	465b      	mov	r3, fp
 800ee08:	ec51 0b18 	vmov	r0, r1, d8
 800ee0c:	f7f1 fa56 	bl	80002bc <__adddf3>
 800ee10:	4642      	mov	r2, r8
 800ee12:	464b      	mov	r3, r9
 800ee14:	f7f1 fa52 	bl	80002bc <__adddf3>
 800ee18:	4632      	mov	r2, r6
 800ee1a:	463b      	mov	r3, r7
 800ee1c:	f7f1 fa4e 	bl	80002bc <__adddf3>
 800ee20:	9c04      	ldr	r4, [sp, #16]
 800ee22:	4632      	mov	r2, r6
 800ee24:	463b      	mov	r3, r7
 800ee26:	4620      	mov	r0, r4
 800ee28:	460d      	mov	r5, r1
 800ee2a:	f7f1 fa45 	bl	80002b8 <__aeabi_dsub>
 800ee2e:	4642      	mov	r2, r8
 800ee30:	464b      	mov	r3, r9
 800ee32:	f7f1 fa41 	bl	80002b8 <__aeabi_dsub>
 800ee36:	ec53 2b18 	vmov	r2, r3, d8
 800ee3a:	f7f1 fa3d 	bl	80002b8 <__aeabi_dsub>
 800ee3e:	4602      	mov	r2, r0
 800ee40:	460b      	mov	r3, r1
 800ee42:	4650      	mov	r0, sl
 800ee44:	4659      	mov	r1, fp
 800ee46:	e606      	b.n	800ea56 <__ieee754_pow+0x2ee>
 800ee48:	2401      	movs	r4, #1
 800ee4a:	e6a0      	b.n	800eb8e <__ieee754_pow+0x426>
 800ee4c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800eea0 <__ieee754_pow+0x738>
 800ee50:	e60d      	b.n	800ea6e <__ieee754_pow+0x306>
 800ee52:	bf00      	nop
 800ee54:	f3af 8000 	nop.w
 800ee58:	4a454eef 	.word	0x4a454eef
 800ee5c:	3fca7e28 	.word	0x3fca7e28
 800ee60:	93c9db65 	.word	0x93c9db65
 800ee64:	3fcd864a 	.word	0x3fcd864a
 800ee68:	a91d4101 	.word	0xa91d4101
 800ee6c:	3fd17460 	.word	0x3fd17460
 800ee70:	518f264d 	.word	0x518f264d
 800ee74:	3fd55555 	.word	0x3fd55555
 800ee78:	db6fabff 	.word	0xdb6fabff
 800ee7c:	3fdb6db6 	.word	0x3fdb6db6
 800ee80:	33333303 	.word	0x33333303
 800ee84:	3fe33333 	.word	0x3fe33333
 800ee88:	e0000000 	.word	0xe0000000
 800ee8c:	3feec709 	.word	0x3feec709
 800ee90:	dc3a03fd 	.word	0xdc3a03fd
 800ee94:	3feec709 	.word	0x3feec709
 800ee98:	145b01f5 	.word	0x145b01f5
 800ee9c:	be3e2fe0 	.word	0xbe3e2fe0
 800eea0:	00000000 	.word	0x00000000
 800eea4:	3ff00000 	.word	0x3ff00000
 800eea8:	7ff00000 	.word	0x7ff00000
 800eeac:	43400000 	.word	0x43400000
 800eeb0:	0003988e 	.word	0x0003988e
 800eeb4:	000bb679 	.word	0x000bb679
 800eeb8:	08090298 	.word	0x08090298
 800eebc:	3ff00000 	.word	0x3ff00000
 800eec0:	40080000 	.word	0x40080000
 800eec4:	080902b8 	.word	0x080902b8
 800eec8:	080902a8 	.word	0x080902a8
 800eecc:	a3b5      	add	r3, pc, #724	; (adr r3, 800f1a4 <__ieee754_pow+0xa3c>)
 800eece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed2:	4640      	mov	r0, r8
 800eed4:	4649      	mov	r1, r9
 800eed6:	f7f1 f9f1 	bl	80002bc <__adddf3>
 800eeda:	4622      	mov	r2, r4
 800eedc:	ec41 0b1a 	vmov	d10, r0, r1
 800eee0:	462b      	mov	r3, r5
 800eee2:	4630      	mov	r0, r6
 800eee4:	4639      	mov	r1, r7
 800eee6:	f7f1 f9e7 	bl	80002b8 <__aeabi_dsub>
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	ec51 0b1a 	vmov	r0, r1, d10
 800eef2:	f7f1 fe29 	bl	8000b48 <__aeabi_dcmpgt>
 800eef6:	2800      	cmp	r0, #0
 800eef8:	f47f adf8 	bne.w	800eaec <__ieee754_pow+0x384>
 800eefc:	4aa4      	ldr	r2, [pc, #656]	; (800f190 <__ieee754_pow+0xa28>)
 800eefe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ef02:	4293      	cmp	r3, r2
 800ef04:	f340 810b 	ble.w	800f11e <__ieee754_pow+0x9b6>
 800ef08:	151b      	asrs	r3, r3, #20
 800ef0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ef0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ef12:	fa4a f303 	asr.w	r3, sl, r3
 800ef16:	445b      	add	r3, fp
 800ef18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ef1c:	4e9d      	ldr	r6, [pc, #628]	; (800f194 <__ieee754_pow+0xa2c>)
 800ef1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ef22:	4116      	asrs	r6, r2
 800ef24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ef28:	2000      	movs	r0, #0
 800ef2a:	ea23 0106 	bic.w	r1, r3, r6
 800ef2e:	f1c2 0214 	rsb	r2, r2, #20
 800ef32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ef36:	fa4a fa02 	asr.w	sl, sl, r2
 800ef3a:	f1bb 0f00 	cmp.w	fp, #0
 800ef3e:	4602      	mov	r2, r0
 800ef40:	460b      	mov	r3, r1
 800ef42:	4620      	mov	r0, r4
 800ef44:	4629      	mov	r1, r5
 800ef46:	bfb8      	it	lt
 800ef48:	f1ca 0a00 	rsblt	sl, sl, #0
 800ef4c:	f7f1 f9b4 	bl	80002b8 <__aeabi_dsub>
 800ef50:	ec41 0b19 	vmov	d9, r0, r1
 800ef54:	4642      	mov	r2, r8
 800ef56:	464b      	mov	r3, r9
 800ef58:	ec51 0b19 	vmov	r0, r1, d9
 800ef5c:	f7f1 f9ae 	bl	80002bc <__adddf3>
 800ef60:	2400      	movs	r4, #0
 800ef62:	a379      	add	r3, pc, #484	; (adr r3, 800f148 <__ieee754_pow+0x9e0>)
 800ef64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef68:	4620      	mov	r0, r4
 800ef6a:	460d      	mov	r5, r1
 800ef6c:	f7f1 fb5c 	bl	8000628 <__aeabi_dmul>
 800ef70:	ec53 2b19 	vmov	r2, r3, d9
 800ef74:	4606      	mov	r6, r0
 800ef76:	460f      	mov	r7, r1
 800ef78:	4620      	mov	r0, r4
 800ef7a:	4629      	mov	r1, r5
 800ef7c:	f7f1 f99c 	bl	80002b8 <__aeabi_dsub>
 800ef80:	4602      	mov	r2, r0
 800ef82:	460b      	mov	r3, r1
 800ef84:	4640      	mov	r0, r8
 800ef86:	4649      	mov	r1, r9
 800ef88:	f7f1 f996 	bl	80002b8 <__aeabi_dsub>
 800ef8c:	a370      	add	r3, pc, #448	; (adr r3, 800f150 <__ieee754_pow+0x9e8>)
 800ef8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef92:	f7f1 fb49 	bl	8000628 <__aeabi_dmul>
 800ef96:	a370      	add	r3, pc, #448	; (adr r3, 800f158 <__ieee754_pow+0x9f0>)
 800ef98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9c:	4680      	mov	r8, r0
 800ef9e:	4689      	mov	r9, r1
 800efa0:	4620      	mov	r0, r4
 800efa2:	4629      	mov	r1, r5
 800efa4:	f7f1 fb40 	bl	8000628 <__aeabi_dmul>
 800efa8:	4602      	mov	r2, r0
 800efaa:	460b      	mov	r3, r1
 800efac:	4640      	mov	r0, r8
 800efae:	4649      	mov	r1, r9
 800efb0:	f7f1 f984 	bl	80002bc <__adddf3>
 800efb4:	4604      	mov	r4, r0
 800efb6:	460d      	mov	r5, r1
 800efb8:	4602      	mov	r2, r0
 800efba:	460b      	mov	r3, r1
 800efbc:	4630      	mov	r0, r6
 800efbe:	4639      	mov	r1, r7
 800efc0:	f7f1 f97c 	bl	80002bc <__adddf3>
 800efc4:	4632      	mov	r2, r6
 800efc6:	463b      	mov	r3, r7
 800efc8:	4680      	mov	r8, r0
 800efca:	4689      	mov	r9, r1
 800efcc:	f7f1 f974 	bl	80002b8 <__aeabi_dsub>
 800efd0:	4602      	mov	r2, r0
 800efd2:	460b      	mov	r3, r1
 800efd4:	4620      	mov	r0, r4
 800efd6:	4629      	mov	r1, r5
 800efd8:	f7f1 f96e 	bl	80002b8 <__aeabi_dsub>
 800efdc:	4642      	mov	r2, r8
 800efde:	4606      	mov	r6, r0
 800efe0:	460f      	mov	r7, r1
 800efe2:	464b      	mov	r3, r9
 800efe4:	4640      	mov	r0, r8
 800efe6:	4649      	mov	r1, r9
 800efe8:	f7f1 fb1e 	bl	8000628 <__aeabi_dmul>
 800efec:	a35c      	add	r3, pc, #368	; (adr r3, 800f160 <__ieee754_pow+0x9f8>)
 800efee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff2:	4604      	mov	r4, r0
 800eff4:	460d      	mov	r5, r1
 800eff6:	f7f1 fb17 	bl	8000628 <__aeabi_dmul>
 800effa:	a35b      	add	r3, pc, #364	; (adr r3, 800f168 <__ieee754_pow+0xa00>)
 800effc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f000:	f7f1 f95a 	bl	80002b8 <__aeabi_dsub>
 800f004:	4622      	mov	r2, r4
 800f006:	462b      	mov	r3, r5
 800f008:	f7f1 fb0e 	bl	8000628 <__aeabi_dmul>
 800f00c:	a358      	add	r3, pc, #352	; (adr r3, 800f170 <__ieee754_pow+0xa08>)
 800f00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f012:	f7f1 f953 	bl	80002bc <__adddf3>
 800f016:	4622      	mov	r2, r4
 800f018:	462b      	mov	r3, r5
 800f01a:	f7f1 fb05 	bl	8000628 <__aeabi_dmul>
 800f01e:	a356      	add	r3, pc, #344	; (adr r3, 800f178 <__ieee754_pow+0xa10>)
 800f020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f024:	f7f1 f948 	bl	80002b8 <__aeabi_dsub>
 800f028:	4622      	mov	r2, r4
 800f02a:	462b      	mov	r3, r5
 800f02c:	f7f1 fafc 	bl	8000628 <__aeabi_dmul>
 800f030:	a353      	add	r3, pc, #332	; (adr r3, 800f180 <__ieee754_pow+0xa18>)
 800f032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f036:	f7f1 f941 	bl	80002bc <__adddf3>
 800f03a:	4622      	mov	r2, r4
 800f03c:	462b      	mov	r3, r5
 800f03e:	f7f1 faf3 	bl	8000628 <__aeabi_dmul>
 800f042:	4602      	mov	r2, r0
 800f044:	460b      	mov	r3, r1
 800f046:	4640      	mov	r0, r8
 800f048:	4649      	mov	r1, r9
 800f04a:	f7f1 f935 	bl	80002b8 <__aeabi_dsub>
 800f04e:	4604      	mov	r4, r0
 800f050:	460d      	mov	r5, r1
 800f052:	4602      	mov	r2, r0
 800f054:	460b      	mov	r3, r1
 800f056:	4640      	mov	r0, r8
 800f058:	4649      	mov	r1, r9
 800f05a:	f7f1 fae5 	bl	8000628 <__aeabi_dmul>
 800f05e:	2200      	movs	r2, #0
 800f060:	ec41 0b19 	vmov	d9, r0, r1
 800f064:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f068:	4620      	mov	r0, r4
 800f06a:	4629      	mov	r1, r5
 800f06c:	f7f1 f924 	bl	80002b8 <__aeabi_dsub>
 800f070:	4602      	mov	r2, r0
 800f072:	460b      	mov	r3, r1
 800f074:	ec51 0b19 	vmov	r0, r1, d9
 800f078:	f7f1 fc00 	bl	800087c <__aeabi_ddiv>
 800f07c:	4632      	mov	r2, r6
 800f07e:	4604      	mov	r4, r0
 800f080:	460d      	mov	r5, r1
 800f082:	463b      	mov	r3, r7
 800f084:	4640      	mov	r0, r8
 800f086:	4649      	mov	r1, r9
 800f088:	f7f1 face 	bl	8000628 <__aeabi_dmul>
 800f08c:	4632      	mov	r2, r6
 800f08e:	463b      	mov	r3, r7
 800f090:	f7f1 f914 	bl	80002bc <__adddf3>
 800f094:	4602      	mov	r2, r0
 800f096:	460b      	mov	r3, r1
 800f098:	4620      	mov	r0, r4
 800f09a:	4629      	mov	r1, r5
 800f09c:	f7f1 f90c 	bl	80002b8 <__aeabi_dsub>
 800f0a0:	4642      	mov	r2, r8
 800f0a2:	464b      	mov	r3, r9
 800f0a4:	f7f1 f908 	bl	80002b8 <__aeabi_dsub>
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	4602      	mov	r2, r0
 800f0ac:	493a      	ldr	r1, [pc, #232]	; (800f198 <__ieee754_pow+0xa30>)
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	f7f1 f902 	bl	80002b8 <__aeabi_dsub>
 800f0b4:	e9cd 0100 	strd	r0, r1, [sp]
 800f0b8:	9b01      	ldr	r3, [sp, #4]
 800f0ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f0be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0c2:	da2f      	bge.n	800f124 <__ieee754_pow+0x9bc>
 800f0c4:	4650      	mov	r0, sl
 800f0c6:	ed9d 0b00 	vldr	d0, [sp]
 800f0ca:	f000 f9cd 	bl	800f468 <scalbn>
 800f0ce:	ec51 0b10 	vmov	r0, r1, d0
 800f0d2:	ec53 2b18 	vmov	r2, r3, d8
 800f0d6:	f7ff bbe0 	b.w	800e89a <__ieee754_pow+0x132>
 800f0da:	4b30      	ldr	r3, [pc, #192]	; (800f19c <__ieee754_pow+0xa34>)
 800f0dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f0e0:	429e      	cmp	r6, r3
 800f0e2:	f77f af0b 	ble.w	800eefc <__ieee754_pow+0x794>
 800f0e6:	4b2e      	ldr	r3, [pc, #184]	; (800f1a0 <__ieee754_pow+0xa38>)
 800f0e8:	440b      	add	r3, r1
 800f0ea:	4303      	orrs	r3, r0
 800f0ec:	d00b      	beq.n	800f106 <__ieee754_pow+0x99e>
 800f0ee:	a326      	add	r3, pc, #152	; (adr r3, 800f188 <__ieee754_pow+0xa20>)
 800f0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f4:	ec51 0b18 	vmov	r0, r1, d8
 800f0f8:	f7f1 fa96 	bl	8000628 <__aeabi_dmul>
 800f0fc:	a322      	add	r3, pc, #136	; (adr r3, 800f188 <__ieee754_pow+0xa20>)
 800f0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f102:	f7ff bbca 	b.w	800e89a <__ieee754_pow+0x132>
 800f106:	4622      	mov	r2, r4
 800f108:	462b      	mov	r3, r5
 800f10a:	f7f1 f8d5 	bl	80002b8 <__aeabi_dsub>
 800f10e:	4642      	mov	r2, r8
 800f110:	464b      	mov	r3, r9
 800f112:	f7f1 fd0f 	bl	8000b34 <__aeabi_dcmpge>
 800f116:	2800      	cmp	r0, #0
 800f118:	f43f aef0 	beq.w	800eefc <__ieee754_pow+0x794>
 800f11c:	e7e7      	b.n	800f0ee <__ieee754_pow+0x986>
 800f11e:	f04f 0a00 	mov.w	sl, #0
 800f122:	e717      	b.n	800ef54 <__ieee754_pow+0x7ec>
 800f124:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f128:	4619      	mov	r1, r3
 800f12a:	e7d2      	b.n	800f0d2 <__ieee754_pow+0x96a>
 800f12c:	491a      	ldr	r1, [pc, #104]	; (800f198 <__ieee754_pow+0xa30>)
 800f12e:	2000      	movs	r0, #0
 800f130:	f7ff bb9e 	b.w	800e870 <__ieee754_pow+0x108>
 800f134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f138:	f7ff bb9a 	b.w	800e870 <__ieee754_pow+0x108>
 800f13c:	9000      	str	r0, [sp, #0]
 800f13e:	f7ff bb76 	b.w	800e82e <__ieee754_pow+0xc6>
 800f142:	2100      	movs	r1, #0
 800f144:	f7ff bb60 	b.w	800e808 <__ieee754_pow+0xa0>
 800f148:	00000000 	.word	0x00000000
 800f14c:	3fe62e43 	.word	0x3fe62e43
 800f150:	fefa39ef 	.word	0xfefa39ef
 800f154:	3fe62e42 	.word	0x3fe62e42
 800f158:	0ca86c39 	.word	0x0ca86c39
 800f15c:	be205c61 	.word	0xbe205c61
 800f160:	72bea4d0 	.word	0x72bea4d0
 800f164:	3e663769 	.word	0x3e663769
 800f168:	c5d26bf1 	.word	0xc5d26bf1
 800f16c:	3ebbbd41 	.word	0x3ebbbd41
 800f170:	af25de2c 	.word	0xaf25de2c
 800f174:	3f11566a 	.word	0x3f11566a
 800f178:	16bebd93 	.word	0x16bebd93
 800f17c:	3f66c16c 	.word	0x3f66c16c
 800f180:	5555553e 	.word	0x5555553e
 800f184:	3fc55555 	.word	0x3fc55555
 800f188:	c2f8f359 	.word	0xc2f8f359
 800f18c:	01a56e1f 	.word	0x01a56e1f
 800f190:	3fe00000 	.word	0x3fe00000
 800f194:	000fffff 	.word	0x000fffff
 800f198:	3ff00000 	.word	0x3ff00000
 800f19c:	4090cbff 	.word	0x4090cbff
 800f1a0:	3f6f3400 	.word	0x3f6f3400
 800f1a4:	652b82fe 	.word	0x652b82fe
 800f1a8:	3c971547 	.word	0x3c971547

0800f1ac <__ieee754_sqrt>:
 800f1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b0:	ec55 4b10 	vmov	r4, r5, d0
 800f1b4:	4e56      	ldr	r6, [pc, #344]	; (800f310 <__ieee754_sqrt+0x164>)
 800f1b6:	43ae      	bics	r6, r5
 800f1b8:	ee10 0a10 	vmov	r0, s0
 800f1bc:	ee10 3a10 	vmov	r3, s0
 800f1c0:	4629      	mov	r1, r5
 800f1c2:	462a      	mov	r2, r5
 800f1c4:	d110      	bne.n	800f1e8 <__ieee754_sqrt+0x3c>
 800f1c6:	ee10 2a10 	vmov	r2, s0
 800f1ca:	462b      	mov	r3, r5
 800f1cc:	f7f1 fa2c 	bl	8000628 <__aeabi_dmul>
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	460b      	mov	r3, r1
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	4629      	mov	r1, r5
 800f1d8:	f7f1 f870 	bl	80002bc <__adddf3>
 800f1dc:	4604      	mov	r4, r0
 800f1de:	460d      	mov	r5, r1
 800f1e0:	ec45 4b10 	vmov	d0, r4, r5
 800f1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1e8:	2d00      	cmp	r5, #0
 800f1ea:	dc10      	bgt.n	800f20e <__ieee754_sqrt+0x62>
 800f1ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f1f0:	4330      	orrs	r0, r6
 800f1f2:	d0f5      	beq.n	800f1e0 <__ieee754_sqrt+0x34>
 800f1f4:	b15d      	cbz	r5, 800f20e <__ieee754_sqrt+0x62>
 800f1f6:	ee10 2a10 	vmov	r2, s0
 800f1fa:	462b      	mov	r3, r5
 800f1fc:	ee10 0a10 	vmov	r0, s0
 800f200:	f7f1 f85a 	bl	80002b8 <__aeabi_dsub>
 800f204:	4602      	mov	r2, r0
 800f206:	460b      	mov	r3, r1
 800f208:	f7f1 fb38 	bl	800087c <__aeabi_ddiv>
 800f20c:	e7e6      	b.n	800f1dc <__ieee754_sqrt+0x30>
 800f20e:	1509      	asrs	r1, r1, #20
 800f210:	d076      	beq.n	800f300 <__ieee754_sqrt+0x154>
 800f212:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f216:	07ce      	lsls	r6, r1, #31
 800f218:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800f21c:	bf5e      	ittt	pl
 800f21e:	0fda      	lsrpl	r2, r3, #31
 800f220:	005b      	lslpl	r3, r3, #1
 800f222:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800f226:	0fda      	lsrs	r2, r3, #31
 800f228:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800f22c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800f230:	2000      	movs	r0, #0
 800f232:	106d      	asrs	r5, r5, #1
 800f234:	005b      	lsls	r3, r3, #1
 800f236:	f04f 0e16 	mov.w	lr, #22
 800f23a:	4684      	mov	ip, r0
 800f23c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f240:	eb0c 0401 	add.w	r4, ip, r1
 800f244:	4294      	cmp	r4, r2
 800f246:	bfde      	ittt	le
 800f248:	1b12      	suble	r2, r2, r4
 800f24a:	eb04 0c01 	addle.w	ip, r4, r1
 800f24e:	1840      	addle	r0, r0, r1
 800f250:	0052      	lsls	r2, r2, #1
 800f252:	f1be 0e01 	subs.w	lr, lr, #1
 800f256:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f25a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f25e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f262:	d1ed      	bne.n	800f240 <__ieee754_sqrt+0x94>
 800f264:	4671      	mov	r1, lr
 800f266:	2720      	movs	r7, #32
 800f268:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f26c:	4562      	cmp	r2, ip
 800f26e:	eb04 060e 	add.w	r6, r4, lr
 800f272:	dc02      	bgt.n	800f27a <__ieee754_sqrt+0xce>
 800f274:	d113      	bne.n	800f29e <__ieee754_sqrt+0xf2>
 800f276:	429e      	cmp	r6, r3
 800f278:	d811      	bhi.n	800f29e <__ieee754_sqrt+0xf2>
 800f27a:	2e00      	cmp	r6, #0
 800f27c:	eb06 0e04 	add.w	lr, r6, r4
 800f280:	da43      	bge.n	800f30a <__ieee754_sqrt+0x15e>
 800f282:	f1be 0f00 	cmp.w	lr, #0
 800f286:	db40      	blt.n	800f30a <__ieee754_sqrt+0x15e>
 800f288:	f10c 0801 	add.w	r8, ip, #1
 800f28c:	eba2 020c 	sub.w	r2, r2, ip
 800f290:	429e      	cmp	r6, r3
 800f292:	bf88      	it	hi
 800f294:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f298:	1b9b      	subs	r3, r3, r6
 800f29a:	4421      	add	r1, r4
 800f29c:	46c4      	mov	ip, r8
 800f29e:	0052      	lsls	r2, r2, #1
 800f2a0:	3f01      	subs	r7, #1
 800f2a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f2a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f2aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f2ae:	d1dd      	bne.n	800f26c <__ieee754_sqrt+0xc0>
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	d006      	beq.n	800f2c2 <__ieee754_sqrt+0x116>
 800f2b4:	1c4c      	adds	r4, r1, #1
 800f2b6:	bf13      	iteet	ne
 800f2b8:	3101      	addne	r1, #1
 800f2ba:	3001      	addeq	r0, #1
 800f2bc:	4639      	moveq	r1, r7
 800f2be:	f021 0101 	bicne.w	r1, r1, #1
 800f2c2:	1043      	asrs	r3, r0, #1
 800f2c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f2c8:	0849      	lsrs	r1, r1, #1
 800f2ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f2ce:	07c2      	lsls	r2, r0, #31
 800f2d0:	bf48      	it	mi
 800f2d2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800f2d6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800f2da:	460c      	mov	r4, r1
 800f2dc:	463d      	mov	r5, r7
 800f2de:	e77f      	b.n	800f1e0 <__ieee754_sqrt+0x34>
 800f2e0:	0ada      	lsrs	r2, r3, #11
 800f2e2:	3815      	subs	r0, #21
 800f2e4:	055b      	lsls	r3, r3, #21
 800f2e6:	2a00      	cmp	r2, #0
 800f2e8:	d0fa      	beq.n	800f2e0 <__ieee754_sqrt+0x134>
 800f2ea:	02d7      	lsls	r7, r2, #11
 800f2ec:	d50a      	bpl.n	800f304 <__ieee754_sqrt+0x158>
 800f2ee:	f1c1 0420 	rsb	r4, r1, #32
 800f2f2:	fa23 f404 	lsr.w	r4, r3, r4
 800f2f6:	1e4d      	subs	r5, r1, #1
 800f2f8:	408b      	lsls	r3, r1
 800f2fa:	4322      	orrs	r2, r4
 800f2fc:	1b41      	subs	r1, r0, r5
 800f2fe:	e788      	b.n	800f212 <__ieee754_sqrt+0x66>
 800f300:	4608      	mov	r0, r1
 800f302:	e7f0      	b.n	800f2e6 <__ieee754_sqrt+0x13a>
 800f304:	0052      	lsls	r2, r2, #1
 800f306:	3101      	adds	r1, #1
 800f308:	e7ef      	b.n	800f2ea <__ieee754_sqrt+0x13e>
 800f30a:	46e0      	mov	r8, ip
 800f30c:	e7be      	b.n	800f28c <__ieee754_sqrt+0xe0>
 800f30e:	bf00      	nop
 800f310:	7ff00000 	.word	0x7ff00000

0800f314 <fabs>:
 800f314:	ec51 0b10 	vmov	r0, r1, d0
 800f318:	ee10 2a10 	vmov	r2, s0
 800f31c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f320:	ec43 2b10 	vmov	d0, r2, r3
 800f324:	4770      	bx	lr

0800f326 <finite>:
 800f326:	b082      	sub	sp, #8
 800f328:	ed8d 0b00 	vstr	d0, [sp]
 800f32c:	9801      	ldr	r0, [sp, #4]
 800f32e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f332:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f336:	0fc0      	lsrs	r0, r0, #31
 800f338:	b002      	add	sp, #8
 800f33a:	4770      	bx	lr
 800f33c:	0000      	movs	r0, r0
	...

0800f340 <nan>:
 800f340:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f348 <nan+0x8>
 800f344:	4770      	bx	lr
 800f346:	bf00      	nop
 800f348:	00000000 	.word	0x00000000
 800f34c:	7ff80000 	.word	0x7ff80000

0800f350 <rint>:
 800f350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f352:	ec51 0b10 	vmov	r0, r1, d0
 800f356:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f35a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f35e:	2e13      	cmp	r6, #19
 800f360:	ee10 4a10 	vmov	r4, s0
 800f364:	460b      	mov	r3, r1
 800f366:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f36a:	dc58      	bgt.n	800f41e <rint+0xce>
 800f36c:	2e00      	cmp	r6, #0
 800f36e:	da2b      	bge.n	800f3c8 <rint+0x78>
 800f370:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f374:	4302      	orrs	r2, r0
 800f376:	d023      	beq.n	800f3c0 <rint+0x70>
 800f378:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f37c:	4302      	orrs	r2, r0
 800f37e:	4254      	negs	r4, r2
 800f380:	4314      	orrs	r4, r2
 800f382:	0c4b      	lsrs	r3, r1, #17
 800f384:	0b24      	lsrs	r4, r4, #12
 800f386:	045b      	lsls	r3, r3, #17
 800f388:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f38c:	ea44 0103 	orr.w	r1, r4, r3
 800f390:	4b32      	ldr	r3, [pc, #200]	; (800f45c <rint+0x10c>)
 800f392:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f396:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f39a:	4602      	mov	r2, r0
 800f39c:	460b      	mov	r3, r1
 800f39e:	4630      	mov	r0, r6
 800f3a0:	4639      	mov	r1, r7
 800f3a2:	f7f0 ff8b 	bl	80002bc <__adddf3>
 800f3a6:	e9cd 0100 	strd	r0, r1, [sp]
 800f3aa:	463b      	mov	r3, r7
 800f3ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3b0:	4632      	mov	r2, r6
 800f3b2:	f7f0 ff81 	bl	80002b8 <__aeabi_dsub>
 800f3b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f3ba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f3be:	4639      	mov	r1, r7
 800f3c0:	ec41 0b10 	vmov	d0, r0, r1
 800f3c4:	b003      	add	sp, #12
 800f3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3c8:	4a25      	ldr	r2, [pc, #148]	; (800f460 <rint+0x110>)
 800f3ca:	4132      	asrs	r2, r6
 800f3cc:	ea01 0702 	and.w	r7, r1, r2
 800f3d0:	4307      	orrs	r7, r0
 800f3d2:	d0f5      	beq.n	800f3c0 <rint+0x70>
 800f3d4:	0851      	lsrs	r1, r2, #1
 800f3d6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800f3da:	4314      	orrs	r4, r2
 800f3dc:	d00c      	beq.n	800f3f8 <rint+0xa8>
 800f3de:	ea23 0201 	bic.w	r2, r3, r1
 800f3e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f3e6:	2e13      	cmp	r6, #19
 800f3e8:	fa43 f606 	asr.w	r6, r3, r6
 800f3ec:	bf0c      	ite	eq
 800f3ee:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f3f2:	2400      	movne	r4, #0
 800f3f4:	ea42 0306 	orr.w	r3, r2, r6
 800f3f8:	4918      	ldr	r1, [pc, #96]	; (800f45c <rint+0x10c>)
 800f3fa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f3fe:	4622      	mov	r2, r4
 800f400:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f404:	4620      	mov	r0, r4
 800f406:	4629      	mov	r1, r5
 800f408:	f7f0 ff58 	bl	80002bc <__adddf3>
 800f40c:	e9cd 0100 	strd	r0, r1, [sp]
 800f410:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f414:	4622      	mov	r2, r4
 800f416:	462b      	mov	r3, r5
 800f418:	f7f0 ff4e 	bl	80002b8 <__aeabi_dsub>
 800f41c:	e7d0      	b.n	800f3c0 <rint+0x70>
 800f41e:	2e33      	cmp	r6, #51	; 0x33
 800f420:	dd07      	ble.n	800f432 <rint+0xe2>
 800f422:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f426:	d1cb      	bne.n	800f3c0 <rint+0x70>
 800f428:	ee10 2a10 	vmov	r2, s0
 800f42c:	f7f0 ff46 	bl	80002bc <__adddf3>
 800f430:	e7c6      	b.n	800f3c0 <rint+0x70>
 800f432:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f436:	f04f 36ff 	mov.w	r6, #4294967295
 800f43a:	40d6      	lsrs	r6, r2
 800f43c:	4230      	tst	r0, r6
 800f43e:	d0bf      	beq.n	800f3c0 <rint+0x70>
 800f440:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800f444:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800f448:	bf1f      	itttt	ne
 800f44a:	ea24 0101 	bicne.w	r1, r4, r1
 800f44e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f452:	fa44 f202 	asrne.w	r2, r4, r2
 800f456:	ea41 0402 	orrne.w	r4, r1, r2
 800f45a:	e7cd      	b.n	800f3f8 <rint+0xa8>
 800f45c:	080902c8 	.word	0x080902c8
 800f460:	000fffff 	.word	0x000fffff
 800f464:	00000000 	.word	0x00000000

0800f468 <scalbn>:
 800f468:	b570      	push	{r4, r5, r6, lr}
 800f46a:	ec55 4b10 	vmov	r4, r5, d0
 800f46e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f472:	4606      	mov	r6, r0
 800f474:	462b      	mov	r3, r5
 800f476:	b99a      	cbnz	r2, 800f4a0 <scalbn+0x38>
 800f478:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f47c:	4323      	orrs	r3, r4
 800f47e:	d036      	beq.n	800f4ee <scalbn+0x86>
 800f480:	4b39      	ldr	r3, [pc, #228]	; (800f568 <scalbn+0x100>)
 800f482:	4629      	mov	r1, r5
 800f484:	ee10 0a10 	vmov	r0, s0
 800f488:	2200      	movs	r2, #0
 800f48a:	f7f1 f8cd 	bl	8000628 <__aeabi_dmul>
 800f48e:	4b37      	ldr	r3, [pc, #220]	; (800f56c <scalbn+0x104>)
 800f490:	429e      	cmp	r6, r3
 800f492:	4604      	mov	r4, r0
 800f494:	460d      	mov	r5, r1
 800f496:	da10      	bge.n	800f4ba <scalbn+0x52>
 800f498:	a32b      	add	r3, pc, #172	; (adr r3, 800f548 <scalbn+0xe0>)
 800f49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49e:	e03a      	b.n	800f516 <scalbn+0xae>
 800f4a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f4a4:	428a      	cmp	r2, r1
 800f4a6:	d10c      	bne.n	800f4c2 <scalbn+0x5a>
 800f4a8:	ee10 2a10 	vmov	r2, s0
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	4629      	mov	r1, r5
 800f4b0:	f7f0 ff04 	bl	80002bc <__adddf3>
 800f4b4:	4604      	mov	r4, r0
 800f4b6:	460d      	mov	r5, r1
 800f4b8:	e019      	b.n	800f4ee <scalbn+0x86>
 800f4ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f4be:	460b      	mov	r3, r1
 800f4c0:	3a36      	subs	r2, #54	; 0x36
 800f4c2:	4432      	add	r2, r6
 800f4c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f4c8:	428a      	cmp	r2, r1
 800f4ca:	dd08      	ble.n	800f4de <scalbn+0x76>
 800f4cc:	2d00      	cmp	r5, #0
 800f4ce:	a120      	add	r1, pc, #128	; (adr r1, 800f550 <scalbn+0xe8>)
 800f4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4d4:	da1c      	bge.n	800f510 <scalbn+0xa8>
 800f4d6:	a120      	add	r1, pc, #128	; (adr r1, 800f558 <scalbn+0xf0>)
 800f4d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4dc:	e018      	b.n	800f510 <scalbn+0xa8>
 800f4de:	2a00      	cmp	r2, #0
 800f4e0:	dd08      	ble.n	800f4f4 <scalbn+0x8c>
 800f4e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f4ee:	ec45 4b10 	vmov	d0, r4, r5
 800f4f2:	bd70      	pop	{r4, r5, r6, pc}
 800f4f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f4f8:	da19      	bge.n	800f52e <scalbn+0xc6>
 800f4fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f4fe:	429e      	cmp	r6, r3
 800f500:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f504:	dd0a      	ble.n	800f51c <scalbn+0xb4>
 800f506:	a112      	add	r1, pc, #72	; (adr r1, 800f550 <scalbn+0xe8>)
 800f508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d1e2      	bne.n	800f4d6 <scalbn+0x6e>
 800f510:	a30f      	add	r3, pc, #60	; (adr r3, 800f550 <scalbn+0xe8>)
 800f512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f516:	f7f1 f887 	bl	8000628 <__aeabi_dmul>
 800f51a:	e7cb      	b.n	800f4b4 <scalbn+0x4c>
 800f51c:	a10a      	add	r1, pc, #40	; (adr r1, 800f548 <scalbn+0xe0>)
 800f51e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d0b8      	beq.n	800f498 <scalbn+0x30>
 800f526:	a10e      	add	r1, pc, #56	; (adr r1, 800f560 <scalbn+0xf8>)
 800f528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f52c:	e7b4      	b.n	800f498 <scalbn+0x30>
 800f52e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f532:	3236      	adds	r2, #54	; 0x36
 800f534:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f538:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f53c:	4620      	mov	r0, r4
 800f53e:	4b0c      	ldr	r3, [pc, #48]	; (800f570 <scalbn+0x108>)
 800f540:	2200      	movs	r2, #0
 800f542:	e7e8      	b.n	800f516 <scalbn+0xae>
 800f544:	f3af 8000 	nop.w
 800f548:	c2f8f359 	.word	0xc2f8f359
 800f54c:	01a56e1f 	.word	0x01a56e1f
 800f550:	8800759c 	.word	0x8800759c
 800f554:	7e37e43c 	.word	0x7e37e43c
 800f558:	8800759c 	.word	0x8800759c
 800f55c:	fe37e43c 	.word	0xfe37e43c
 800f560:	c2f8f359 	.word	0xc2f8f359
 800f564:	81a56e1f 	.word	0x81a56e1f
 800f568:	43500000 	.word	0x43500000
 800f56c:	ffff3cb0 	.word	0xffff3cb0
 800f570:	3c900000 	.word	0x3c900000

0800f574 <_init>:
 800f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f576:	bf00      	nop
 800f578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f57a:	bc08      	pop	{r3}
 800f57c:	469e      	mov	lr, r3
 800f57e:	4770      	bx	lr

0800f580 <_fini>:
 800f580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f582:	bf00      	nop
 800f584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f586:	bc08      	pop	{r3}
 800f588:	469e      	mov	lr, r3
 800f58a:	4770      	bx	lr
